/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 02:24:01 GMT 2020
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.function.Predicate;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("xht4R", "xht4R");
      Element element0 = document0.body();
      document0.removeClass("xht4R");
      element0.hasText();
      // Undeclared exception!
      try { 
        element0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parse("xht4R", "xht4R");
      Element element0 = document0.body();
      element0.getElementsByIndexEquals(1);
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[%s!=%s]", "[%s!=%s]");
      Element element0 = document0.text("D:ce1z>{&.@*Zz>");
      element0.siblingIndex = 46;
      Pattern pattern0 = Pattern.compile("2FbA3ezkkH", (-1));
      element0.getElementsMatchingText(pattern0);
      document0.ensureChildNodes();
      element0.getAllElements();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DataNode dataNode0 = new DataNode("2FbA3ezkkH");
      dataNode0.doClone(element0);
      DataNode dataNode1 = dataNode0.setWholeData("[%s!=%s]");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document1 = (Document)element0.traverse(nodeVisitor0);
      dataNode1.setSiblingIndex((-1));
      document0.appendChild(dataNode1);
      element0.getElementsByTag("[%s!=%s]");
      element0.shallowClone();
      element0.childNodeSize();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      document0.getElementsByAttributeValue("2FbA3ezkkH", "c0(xEo~FBt''tW");
      element0.attr("q&IPw_hC$k*-66X", true);
      document0.getElementsMatchingText("&amp;");
      document1.text("c0(xEo~FBt''tW");
      document1.dataNodes();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parse("xht4R", "xht4R");
      Element element0 = document0.body();
      element0.hasText();
      document0.getElementsByAttributeStarting("xht4R");
      element0.after("i6<=hA0x^NN>4,X[2");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.body();
      // Undeclared exception!
      try { 
        element0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Document.createShell("xh84R");
      Element element0 = document0.appendElement("mv");
      element0.previousElementSibling();
      document0.ownText();
      document0.appendElement("mv");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parse("y", "y");
      String string0 = Node.EmptyString;
      document0.siblingIndex = (-2235);
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("y");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = Node.EmptyString;
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors(1119);
      Document document0 = parser1.parseInput("i0okairg^,a>o>mkz", "head");
      document0.wrap("org.jsoup.nodes.Entities$CoreCharset");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("xhtml");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.prependElement("java.lang.string@0000000076");
      element0.after("xhtml");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parse("y", "y");
      String string0 = Node.EmptyString;
      document0.setParentNode(document0);
      Comment comment0 = new Comment((String) null, "");
      Document document1 = (Document)document0.before((Node) comment0);
      document1.getAllElements();
      // Undeclared exception!
      document1.wrap("area");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("i", "i");
      Tag tag0 = Tag.valueOf("i");
      CDataNode cDataNode0 = new CDataNode("i");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "\"Z", attributes0);
      formElement0.toString();
      // Undeclared exception!
      try { 
        document0.before((Node) formElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Document.createShell("legend");
      CDataNode cDataNode0 = new CDataNode("legend");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("legend");
      FormElement formElement0 = new FormElement(tag0, "legend", attributes0);
      formElement0.toString();
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xh84R", "xh84R");
      document0.siblingIndex = (-906021636);
      Element element0 = document0.appendElement("id");
      document0.getElementsMatchingText("xh84R");
      document0.empty();
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("E", "E");
      document0.hasAttributes();
      document0.appendElement("br");
      document0.appendElement("br");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parse("y", "y");
      document0.body();
      String string0 = Node.EmptyString;
      TextNode textNode0 = TextNode.createFromEncoded("y", "");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parse("y", "y");
      document0.getElementsByAttributeValueEnding("y", "y");
      document0.addClass("Objet must not be nll");
      Document document1 = Document.createShell("y");
      document1.getElementsByClass(":nth-last-child(");
      document0.hasClass("org.jooup.parl_!.tokenqueue");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d8qc", "d8qc");
      Element element0 = document0.body();
      element0.toggleClass("d8qc");
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'body.java.lang.String@0000000054': unexpected token at '@0000000054'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "</");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      Document document1 = document0.outputSettings(document_OutputSettings2);
      Document document2 = document1.normalise();
      document2.prependChild(document0);
      ByteBuffer byteBuffer0 = charset0.encode("textarea");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, (-1436010313), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Document document0 = Parser.parseBodyFragmentRelaxed("E", "E");
      document0.hasAttributes();
      Element element0 = document0.appendElement("br");
      Element element1 = element0.append("br");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      element1.filter(nodeFilter0);
      document0.toString();
      document0.toString();
      element0.after("br");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parse("y", "y");
      String string0 = Node.EmptyString;
      document0.setParentNode(document0);
      Element element0 = document0.body();
      // Undeclared exception!
      element0.attr("y", "y");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Document.createShell("wBK-8/H@H");
      Element element0 = document0.addClass("wBK-8/H@H");
      element0.getElementsByAttributeValueEnding("br", "wBK-8/H@H");
      Element element1 = document0.addClass("Object must not be null");
      element1.getElementsByClass("br");
      document0.hasClass("br");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xht4R", "xht4R");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "uix");
      Element element0 = document0.appendElement("id");
      element0.is("id");
      document0.getElementsMatchingText("xht4R");
      document0.getElementsByClass("id");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xht4R", "xht4R");
      Element element0 = document0.body();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      document0.hasClass("xht4R");
      element0.appendChild(document0);
      // Undeclared exception!
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("E", "E");
      document0.hasAttributes();
      Element element0 = document0.head();
      element0.append("");
      document0.toString();
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Document document0 = Document.createShell(":wBK-8/H@H");
      document0.charset();
      Element element0 = document0.appendElement("br");
      element0.after("p");
      document0.ownText();
      element0.hasText();
      element0.children();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parse("y", "y");
      String string0 = Node.EmptyString;
      document0.setParentNode(document0);
      document0.getElementsMatchingText(" > ");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("9);qn?acns^`z^i", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("^QO%0CfL");
      Attributes attributes0 = cDataNode0.attributes();
      Attribute attribute0 = new Attribute("0", "CZ+*7*c");
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.put("xhtml", "df8qc");
      parseSettings0.normalizeAttribute("");
      FormElement formElement0 = new FormElement(tag0, "link", attributes2);
      formElement0.val();
      document0.after((Node) formElement0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parse("y", "y");
      String string0 = Node.EmptyString;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document1 = (Document)document0.tagName(",|R6Tu2");
      // Undeclared exception!
      try { 
        document1.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xht4R", "xht4R");
      Element element0 = document0.body();
      element0.parentNode = (Node) document0;
      String string0 = Node.EmptyString;
      // Undeclared exception!
      try { 
        document0.getElementsByClass("xht4R");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "qy0RIV3EW9p{S#\"rt";
      Document document0 = Document.createShell("qy0RIV3EW9p{S#\"rt");
      Element element0 = document0.appendElement("qy0RIV3EW9p{S#\"rt");
      String string1 = null;
      // Undeclared exception!
      try { 
        element0.attr((String) null, "qy0RIV3EW9p{S#\"rt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Document.createShell(":wBK-8/H@H");
      Element element0 = document0.addClass(":wBK-8/H@H");
      element0.addClass(":wBK-8/H@H");
      document0.hasClass(":wBK-8/H@H");
      element0.toggleClass("8*5~M^PqD*=U8!s/P;Y");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parse("y", "y");
      String string0 = Node.EmptyString;
      document0.setParentNode(document0);
      document0.getElementsMatchingText("y");
      // Undeclared exception!
      document0.after("@=Zfn~6Z~");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("_!iU#M.c", "_!iU#M.c");
      document0.appendElement("_!iU#M.c");
      String string0 = "}r";
      document0.getElementsByAttributeValueEnding("_!iU#M.c", "}r");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xht4R", "xht4R");
      Element element0 = document0.body();
      element0.before("xht4R");
      element0.hasText();
      element0.html();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xht4R", "xht4R");
      Element element0 = document0.body();
      element0.dataset();
      element0.hasText();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parse("y", "y");
      String string0 = Node.EmptyString;
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.tagName("org.jsoup.nodes.Element$1");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xht4R", "xht4R");
      Element element0 = document0.body();
      element0.lastElementSibling();
      element0.hasText();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Document.createShell("t5N77e4}VH?PW");
      Element element0 = document0.body();
      element0.wrap("T<Y[hYkK:*<UAc");
      // Undeclared exception!
      try { 
        document0.html((PipedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xht4R", "xht4R");
      Element element0 = document0.body();
      element0.getElementsMatchingText("#root");
      element0.html("$srEV");
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Document.createShell(":wBK-8/H@H");
      Document document1 = (Document)document0.addClass(":wBK-8/H@H");
      document1.hasClass(":wBK-8/H@H");
      Element element0 = document1.body();
      element0.clone();
      document0.body();
      document1.cssSelector();
      document0.previousElementSiblings();
      // Undeclared exception!
      try { 
        document0.before(":wBK-8/H@H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document0 = Parser.parseBodyFragment("U@J=2aW4qcXaG49r", "java.lang.string@0000000080 fr&)`hqr,;");
      Element element0 = document0.head();
      element0.appendTo(document0);
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder0.insert(2352, (long) 2352);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2352
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parse("y", "y");
      document0.title("or,{jx*qp.parl_!vtokenqueue");
      String string0 = Node.EmptyString;
      document0.setParentNode(document0);
      document0.getElementsMatchingText("y");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Document.createShell("tq5N77e(4}V!H?PW");
      Element element0 = document0.body();
      element0.cssSelector();
      element0.previousElementSiblings();
      document0.getElementsByAttributeValueEnding("html > body", "org.jsoup.nodes.Element$NodeList");
      element0.html("v)NTM>?.Bp&");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("_!iU#M.c", "_!iU#M.c");
      DocumentType documentType0 = new DocumentType("WK|FQNmzl2)|Rn", "_!iU#M.c", "_!iU#M.c");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.nextElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Document.createShell("tq5N77e(4}V!H?PW");
      Element element0 = document0.body();
      element0.childNodesCopy();
      element0.cssSelector();
      element0.previousElementSiblings();
      element0.text("tq5N77e(4}V!H?PW");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xht4R", "xht4R");
      Parser.htmlParser();
      CDataNode cDataNode0 = new CDataNode("xht4R");
      Node node0 = cDataNode0.doClone(document0);
      document0.prependChild(node0);
      document0.getElementsMatchingText("");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("E", "E");
      document0.charset();
      document0.hasAttributes();
      Element element0 = document0.appendElement("br");
      document0.toString();
      document0.getElementsByClass("(mIG'^6T^NR");
      element0.text("c%*}w,b");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xht4R", "xht4R");
      Element element0 = document0.body();
      Locale locale0 = Locale.GERMANY;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      element0.classNames(set0);
      element0.hasText();
      Pattern pattern0 = Pattern.compile("+mu>", (-1));
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Element element0 = new Element("1~K4");
      char[] charArray0 = new char[3];
      charArray0[0] = 'S';
      charArray0[1] = 'l';
      charArray0[2] = 'r';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      element0.outerHtmlHead(charBuffer0, 97692013, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tq5N77e(4}VH?PW", "tq5N77e(4}VH?PW");
      Element element0 = document0.body();
      element0.cssSelector();
      document0.getElementById("html > body");
      element0.removeClass("html > body");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DataNode dataNode0 = new DataNode("br");
      Element.preserveWhitespace(dataNode0);
      Document document0 = Parser.parseBodyFragment("6oBM.<:", "6oBM.<:");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("e6)?n p]<r");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) document0;
      objectArray0[1] = (Object) document0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "br";
      objectArray0[5] = (Object) "br";
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) dataNode0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "br", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      document0.outerHtmlTail(mockPrintWriter1, 23, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Document.createShell(":wBK-8/H@H");
      Document document1 = (Document)document0.addClass(":wBK-8/H@H");
      document1.hasClass(":wBK-8/H@H");
      Element element0 = document1.body();
      document1.cssSelector();
      document0.previousElementSiblings();
      document0.getElementsContainingOwnText("java.lang.string@0000000047 object must not u9 null");
      document1.nextElementSiblings();
      document0.hasClass("#root.java.lang.String@0000000055");
      element0.getAllElements();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.StructuralEvaluator$Not", "tq5N77e(4}V!H?PW");
      Document document1 = document0.ownerDocument();
      Parser.htmlParser();
      Element element0 = document1.appendElement("tq5N77e(4}V!H?PW");
      element0.firstElementSibling();
      document0.getElementsByTag("id");
      document1.ownText();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileWriter mockFileWriter0 = new MockFileWriter(" />");
      document1.html((OutputStreamWriter) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtmR", "xhtmR");
      Element element0 = document0.body();
      Tag tag0 = Tag.valueOf("2`");
      Element element1 = new Element(tag0, "d.Vj%}ee%e,~N");
      element0.prependChild(element1);
      element0.hasText();
      document0.text("d.Vj%}ee%e,~N");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtmR", "xhtmR");
      Element element0 = document0.body();
      Element element1 = element0.attr("xhtmR", false);
      element0.hasText();
      document0.prepend("xhtmR");
      element1.wrap("rt");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tq5N77e(4}V!H?PW", "tq5N77e(4}V!H?PW");
      Document document1 = document0.ownerDocument();
      Parser.htmlParser();
      Element element0 = document1.appendElement("id");
      element0.getElementsByTag("id");
      document0.ownText();
      document0.hasText();
      document1.previousElementSiblings();
      element0.before("tq5N77e(4}V!H?PW");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tq5N77e(4}V!H?PW", "tq5N77e(4}V!H?PW");
      Element element0 = document0.body();
      Parser.parseBodyFragmentRelaxed("i0kQ3&)4u|5Rc|XP ^", "tq5N77e(4}V!H?PW");
      document0.addClass("tq5N77e(4}V!H?PW");
      Document document1 = Document.createShell("i0kQ3&)4u|5Rc|XP ^");
      document1.getElementsByClass("html");
      document1.getElementsByAttributeValueContaining("textarea", "html");
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("d`f8qc", "d`f8qc");
      Element element0 = document0.addClass("d`f8qc");
      element0.previousElementSiblings();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringWriter0, (-1432352094), (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("E", "E");
      document0.charset();
      document0.hasAttributes();
      Element element0 = document0.appendElement("br");
      element0.append(">#F]v");
      document0.toString();
      element0.val();
      document0.ownText();
      element0.tag();
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(",'", ",'");
      document0.parents();
      document0.charset();
      Element element0 = document0.doClone(document0);
      element0.getElementsByClass("muted");
      element0.html("]<ckP4v9PSW{Z)");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document document0 = Parser.parseBodyFragment("org.jsoup.pzrser.Token$Tag", "org.jsoup.pzrser.Token$Tag");
      Element element0 = document0.body();
      element0.prepend("org.jsoup.pzrser.Token$Tag");
      element0.previousElementSiblings();
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("kyN7PWa&N?]", "kyN7PWa&N?]");
      Element element0 = document0.body();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`{>H\">YD?jEN5");
      document0.val();
      document0.nextElementSiblings();
      element0.attr("java.lang.string@0000000075 object must not u9 null", true);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("E", "E");
      Element element0 = document0.appendElement("br");
      element0.append("br");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      document0.hasAttributes();
      document0.appendElement("br");
      Element element0 = new Element("br");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Document.createShell("[%s!=%s]");
      Element element0 = document0.text("D:ce1z>{&.@*Zz>");
      element0.siblingIndex = 46;
      Pattern pattern0 = Pattern.compile("w~hgNG1w%i", (-1));
      element0.getElementsMatchingText(pattern0);
      document0.ensureChildNodes();
      element0.getAllElements();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DataNode dataNode0 = new DataNode("w~hgNG1w%i");
      DataNode dataNode1 = dataNode0.setWholeData("[%s!=%s]");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      element0.traverse(nodeVisitor0);
      dataNode1.setSiblingIndex((-1));
      document0.appendChild(dataNode1);
      element0.getElementsByTag("[%s!=%s]");
      element0.shallowClone();
      element0.childNodeSize();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      document0.getElementsByAttributeValue("w~hgNG1w%i", "c0(xEo~FBt''tW");
      element0.attr("q&IPw_hC$k*-66X", true);
      document0.getElementsMatchingText("&amp;");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<!--", "");
      document0.getElementsMatchingText("7fZ6'%:*w%M");
      document0.getElementsByClass("br");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document0 = Parser.parseBodyFragment("default", "default");
      document0.outerHtml();
      document0.data();
      Element element0 = document0.appendElement("d-L|rt0GA");
      element0.prepend(" > ");
      document0.val();
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.pzrser.Token$Tag", "org.jsoup.pzrser.Token$Tag");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
      document0.wholeText();
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "#root";
      Document document0 = Parser.parse("#root", "0a^xB`X=xwZ[");
      String string1 = "br";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "br");
      Element element0 = document0.head();
      Charset charset0 = document0.charset();
      Charset.defaultCharset();
      document0.charset(charset0);
      document0.hasText();
      int int0 = 58;
      element0.id();
      Element element1 = document0.shallowClone();
      document0.appendTo(element1);
      Document document1 = (Document)document0.prependText(".X|f!W");
      document1.previousElementSibling();
      element0.getElementsByIndexLessThan(58);
      element0.tag();
      document1.data();
      String string2 = "EUm*3DKo68u`vp(<e_Y";
      // Undeclared exception!
      try { 
        document1.getElementsMatchingOwnText("EUm*3DKo68u`vp(<e_Y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: EUm*3DKo68u`vp(<e_Y
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Document.createShell("UwBK-8T/H@H");
      Element element0 = document0.addClass("UwBK-8T/H@H");
      element0.getElementsByAttributeValueEnding("br", "UwBK-8T/H@H");
      Element element1 = document0.addClass("Object must not be null");
      element0.getElementsByClass(",'/");
      element1.getElementsMatchingText("IJtu3ukEw");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.jsoup.select.Evaluator$IsFirstChild");
      Document document0 = Parser.parseBodyFragment("xhtmR", "xhtmR");
      document0.doSetBaseUri("xhtmR");
      document0.outerHtml();
      document0.data();
      Element element0 = document0.appendElement("C%*}w,b");
      element0.after((Node) document0);
      element0.val();
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Document.createShell("UwBK-8T/H@H");
      Element element0 = document0.body();
      element0.previousElementSiblings();
      document0.tagName("UwBK-8T/H@H");
      element0.textNodes();
      Element element1 = element0.append("UwBK-8T/H@H");
      element1.nodeName();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tJq5N77eP4}VW!H?PW", "tJq5N77eP4}VW!H?PW");
      document0.getElementsByClass("Children collection to be inserted must not be null.");
      String string0 = Node.EmptyString;
      Document document1 = Document.createShell("tJq5N77eP4}VW!H?PW");
      document0.appendChild(document1);
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d-L|rt0GA", "BeforeDoctypePublicIdentifier");
      String string0 = Node.EmptyString;
      Element element0 = document0.body();
      document0.setParentNode(element0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      document0.getElementsMatchingText("");
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.Token$Tag", "org.jsoup.parser.Token$Tag");
      Element element0 = document0.body();
      element0.previousElementSiblings();
      element0.cssSelector();
      element0.getElementsMatchingText("html > body");
      element0.prependText("");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("d`f8qc", "d`f8qc");
      Element element0 = document0.addClass("d`f8qc");
      document0.addClass("Object must not be null");
      element0.getElementsByClass("Object must not be null");
      document0.hasClass("d`f8qc");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4", "4");
      document0.parents();
      document0.charset();
      document0.doClone(document0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4");
      document0.hasAttributes();
      Pattern pattern0 = Pattern.compile("br");
      pattern0.asPredicate();
      document0.getElementsMatchingText(pattern0);
      Element element0 = document0.appendElement("br");
      document0.ownText();
      String string0 = Node.EmptyString;
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtHl", "xhtHl");
      Element element0 = document0.body();
      element0.toggleClass("");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4", "4");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document0.parents();
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document0.charset();
      Element element0 = document0.doClone(document1);
      document0.hasAttributes();
      element0.nextElementSibling();
      document1.toggleClass("4");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Document.createShell("xhtml");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      Attributes attributes0 = new Attributes();
      Element element0 = document0.val("xhtml");
      document0.attr("xhtml", "xhtml");
      element0.getElementsByAttribute("xhtml");
      element0.cssSelector();
      element0.textNodes();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4", "4");
      document0.parents();
      document0.charset();
      document0.hasAttributes();
      Pattern pattern0 = Pattern.compile("br");
      pattern0.asPredicate();
      Element element0 = document0.appendElement("br");
      Element element1 = element0.attr("18SX& &# 3xwi.~pO", "4");
      String string0 = Node.EmptyString;
      Set<String> set0 = element1.classNames();
      element0.classNames(set0);
      element0.getElementsMatchingOwnText("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.Token$Tag", "org.jsoup.parser.Token$Tag");
      Element element0 = document0.body();
      document0.appendElement("org.jsoup.parser.Token$Tag");
      element0.previousElementSiblings();
      element0.cssSelector();
      element0.appendText("html > body");
      document0.setParentNode(document0);
      element0.textNodes();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parse("y", "y");
      String string0 = Node.EmptyString;
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.val("");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xht4R", "xht4R");
      DocumentType documentType0 = new DocumentType("5IkpmM2fgcYt", "xht4R", "5IkpmM2fgcYt", "xht4R", "xht4R");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("xht4R");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = Node.EmptyString;
      Document document0 = Document.createShell("");
      DocumentType documentType0 = new DocumentType(" ", " ", "");
      document0.setParentNode(documentType0);
      document0.clone();
      // Undeclared exception!
      try { 
        document0.parents();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.Token$Tag", "org.jsoup.parser.Token$Tag");
      Element element0 = document0.body();
      Pattern.compile(".hP<D5GtG\"T#", 4);
      element0.parents();
      Element element1 = document0.appendElement("org.jsoup.parser.Token$Tag");
      element1.className();
      Element element2 = document0.prependElement("afterattributename");
      element2.attr(".hP<D5GtG\"T#", "[^-a-zA-Z0-9_:.]");
      document0.ownText();
      Document.createShell("{C,bXTSa");
      element0.val("$.s okoPL]o4LXK?V+");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parse("y", "y");
      String string0 = Node.EmptyString;
      document0.setParentNode(document0);
      document0.ownText();
      document0.parents();
      // Undeclared exception!
      document0.is("AfterAfterFrameset");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4", "4");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document0.parents();
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document0.charset();
      Element element0 = document0.doClone(document1);
      document0.hasAttributes();
      Pattern pattern0 = Pattern.compile("br");
      pattern0.asPredicate();
      document1.getElementsMatchingText(pattern0);
      Element element1 = document0.appendElement("br");
      document1.ownText();
      String string0 = Node.EmptyString;
      element0.before("Y*aHC89[io|");
      document0.prependElement("0Y`XQI3");
      element1.removeClass("java.lang.string@0000000109");
      document1.getElementById("4");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("UwBK-8T/H@H", "UwBK-8T/H@H");
      Pattern pattern0 = Pattern.compile("org.jsoup.parser.Token$Tag");
      document0.getElementsMatchingText(pattern0);
      Element element0 = document0.appendElement("c8 B+tv");
      document0.className();
      String string0 = "~Q6TM#Agoi.";
      element0.attr("~Q6TM#Agoi.", false);
      String string1 = "";
      // Undeclared exception!
      try { 
        element0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Document.createShell("x ~:5f9gu");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x ~:5f9gu", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("x ~:5f9gu", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x ~:5f9gu", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("x ~:5f9gu", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("x ~:5f9gu", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("x ~:5f9gu", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      document1.childNodes = (List<Node>) linkedList0;
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x ~:5f9gu", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("x ~:5f9gu", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("x ~:5f9gu", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("x ~:5f9gu", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(0, linkedList0.size());
      assertEquals(0, document1.childNodes.size());
      assertTrue(document1.childNodes.isEmpty());
      
      BufferedWriter bufferedWriter0 = document1.html((BufferedWriter) null);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x ~:5f9gu", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("x ~:5f9gu", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("x ~:5f9gu", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("x ~:5f9gu", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertNull(bufferedWriter0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.doClone(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x ~:5f9gu", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("x ~:5f9gu", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("x ~:5f9gu", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("x ~:5f9gu", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("x ~:5f9gu", document2.location());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("x ~:5f9gu", document2.baseUri());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document0.removeClass("x ~:5f9gu");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x ~:5f9gu", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("x ~:5f9gu", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("x ~:5f9gu", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("x ~:5f9gu", document3.location());
      assertEquals(0, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertNotNull(document3);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      
      String string0 = document3.text();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x ~:5f9gu", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("x ~:5f9gu", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("x ~:5f9gu", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("x ~:5f9gu", document3.location());
      assertEquals(0, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertNotNull(string0);
      assertEquals("", string0);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      
      String string1 = "textarea";
      Document document4 = (Document)document1.val("textarea");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x ~:5f9gu", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("x ~:5f9gu", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("x ~:5f9gu", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("x ~:5f9gu", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("x ~:5f9gu", document4.location());
      assertEquals(0, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("x ~:5f9gu", document4.baseUri());
      assertNotNull(document4);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertNotSame(document4, document2);
      assertSame(document4, document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      
      URI uRI0 = MockURI.URI("textarea");
      assertNull(uRI0.getRawFragment());
      assertEquals("textarea", uRI0.toString());
      assertEquals("textarea", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getScheme());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getHost());
      assertNotNull(uRI0);
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Element element0 = new Element("tJq5N77eP4}VW!H?PI");
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("nav", ">");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(">", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(">", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element1 = element0.appendTo(document0);
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.tagName());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(">", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(">", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("tJq5N77eP4}VW!H?PI", element1.nodeName());
      assertEquals("tJq5N77eP4}VW!H?PI", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Elements elements0 = element1.getElementsByIndexEquals(595);
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.tagName());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(">", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(">", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("tJq5N77eP4}VW!H?PI", element1.nodeName());
      assertEquals("tJq5N77eP4}VW!H?PI", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = element1.appendElement("tJq5N77eP4}VW!H?PI");
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(">", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(">", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("tJq5N77eP4}VW!H?PI", element1.nodeName());
      assertEquals("tJq5N77eP4}VW!H?PI", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("tjq5n77ep4}vw!h?pi", element2.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("", element2.baseUri());
      assertEquals("tjq5n77ep4}vw!h?pi", element2.tagName());
      assertNotNull(element2);
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element1, element2);
      assertSame(element1, element0);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4", "4");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("4", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("4", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Elements elements0 = document0.parents();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("4", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("4", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document document1 = Parser.parseBodyFragmentRelaxed("%g$;z:KIYv{v[u`UTE", "html");
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      Attributes attributes0 = document1.attributes();
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      Pattern pattern0 = Pattern.compile("4");
      assertEquals("4", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("4", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements1 = document1.getElementsMatchingText(pattern0);
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertEquals("4", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("4", pattern0.pattern());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertNotSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertFalse(document1.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
      
      Document document2 = document1.normalise();
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("html", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("html", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Element element0 = document2.appendElement("#root");
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("html", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("html", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("html", element0.baseUri());
      assertEquals("#root", element0.nodeName());
      assertNotNull(element0);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Element element1 = element0.prependText(";w<fubpfzqj$");
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("html", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("html", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("html", element0.baseUri());
      assertEquals("#root", element0.nodeName());
      assertEquals("#root", element1.tagName());
      assertEquals("#root", element1.nodeName());
      assertEquals("html", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertNotNull(element1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      String string0 = element0.className();
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("html", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("html", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("html", element0.baseUri());
      assertEquals("#root", element0.nodeName());
      assertNotNull(string0);
      assertEquals("", string0);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(element0, element1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Element element2 = element0.prependElement("4");
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("html", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("html", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("html", element0.baseUri());
      assertEquals("#root", element0.nodeName());
      assertEquals("4", element2.tagName());
      assertEquals("html", element2.baseUri());
      assertEquals("4", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertNotNull(element2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      
      String string1 = document1.ownText();
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertFalse(document1.equals((Object)document0));
      assertTrue(string1.equals((Object)string0));
      
      Document document3 = Document.createShell("v^/");
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("v^/", document3.location());
      assertEquals("v^/", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertNotNull(document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", " ");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasText();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
      
      String string0 = document0.val();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Attributes attributes0 = document0.attributes();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      String string1 = document0.wholeText();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Element element0 = new Element("tJq5N77eP4}VW!H?PI");
      assertEquals(0, element0.childNodeSize());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.tagName());
      assertNotNull(element0);
      
      Document document0 = Parser.parseBodyFragment("tJq5N77eP4}VW!H?PI", "tJq5N77eP4}VW!H?PI");
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element1 = document0.appendElement("Tag name must not be empty.");
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tJq5N77eP4}VW!H?PI", element1.baseUri());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals("tag name must not be empty.", element1.tagName());
      assertEquals("tag name must not be empty.", element1.nodeName());
      assertNotNull(element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      
      Element element2 = element1.tagName("Tag name must not be empty.");
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tJq5N77eP4}VW!H?PI", element1.baseUri());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals("tag name must not be empty.", element1.tagName());
      assertEquals("tag name must not be empty.", element1.nodeName());
      assertFalse(element2.isBlock());
      assertEquals("tag name must not be empty.", element2.tagName());
      assertEquals("tag name must not be empty.", element2.nodeName());
      assertEquals("tJq5N77eP4}VW!H?PI", element2.baseUri());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertNotNull(element2);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element1);
      assertNotSame(element2, element0);
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      
      Elements elements0 = document0.getElementsMatchingText("Tag name must not be empty.");
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String string0 = document0.wholeText();
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(string0);
      assertEquals("tJq5N77eP4}VW!H?PI", string0);
      
      Elements elements1 = document0.getElementsByClass("textarea");
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      
      Document document1 = document0.normalise();
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("tJq5N77eP4}VW!H?PI", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PI", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parse("xhtml", "xhtml");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Document document1 = (Document)document0.prepend("xhtml");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Document document2 = (Document)document1.filter(nodeFilter0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("xhtml", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("xhtml", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements0 = document1.getElementsByIndexGreaterThan(1435);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      Set<String> set0 = document1.classNames();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains("xhtml"));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.is("xhtml");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      String string0 = document0.data();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      Document document3 = (Document)document1.addClass("");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("xhtml", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("xhtml", document3.location());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      Elements elements1 = document1.getElementsMatchingOwnText("");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(4, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      
      document0.reparentChild(document3);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("xhtml", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("xhtml", document3.location());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      Elements elements2 = document3.getElementsByClass("xhtml");
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("xhtml", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("xhtml", document3.location());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertNotNull(elements2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertFalse(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      
      String string1 = Node.EmptyString;
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      Elements elements3 = document3.getAllElements();
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("xhtml", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("xhtml", document3.location());
      assertEquals(4, elements3.size());
      assertFalse(elements3.isEmpty());
      assertNotNull(elements3);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements2);
      assertFalse(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements2));
      
      Document document4 = (Document)document1.after((Node) document2);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("xhtml", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("xhtml", document2.baseUri());
      assertTrue(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals("xhtml", document4.location());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("xhtml", document4.baseUri());
      assertNotNull(document4);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document2);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      String string0 = document0.data();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Document document1 = (Document)document0.addClass("");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsMatchingOwnText("");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      document0.reparentChild(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = Parser.parse("AU.U~", "");
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      String string1 = document0.className();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(string1);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(string1.equals((Object)string0));
      
      Elements elements1 = document0.getElementsMatchingText(":ImmeUdiateParent%s");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      
      // Undeclared exception!
      try { 
        document2.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4", "4");
      assertFalse(document0.hasParent());
      assertEquals("4", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("4", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Elements elements0 = document0.parents();
      assertFalse(document0.hasParent());
      assertEquals("4", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("4", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("4", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("4", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("4", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("4", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document1.toString();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("4", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("4", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("4", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("4", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body>\n  4\n </body>\n</html>", string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Charset charset0 = document0.charset();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("4", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("4", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      assertSame(document0, document1);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("4", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("4", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document document2 = document0.outputSettings(document_OutputSettings0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("4", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("4", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("4", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("4", document2.location());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean0 = document0.hasAttributes();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("4", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("4", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      Pattern pattern0 = Pattern.compile("br");
      assertEquals("br", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("br", pattern0.toString());
      assertNotNull(pattern0);
      
      Predicate<String> predicate0 = pattern0.asPredicate();
      assertEquals("br", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("br", pattern0.toString());
      assertNotNull(predicate0);
      
      Elements elements1 = document1.getElementsMatchingText(pattern0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("4", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("4", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("4", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("4", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("br", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("br", pattern0.toString());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      
      Element element0 = document0.appendElement("br");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("4", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("4", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("4", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.nodeName());
      assertNotNull(element0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      Element element1 = element0.doClone(document1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("4", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("4", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("4", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("4", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("4", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("br", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("4", element1.baseUri());
      assertNotNull(element1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      
      Element element2 = element0.tagName("br");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("4", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("4", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("4", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals("4", element2.baseUri());
      assertEquals(1, element2.siblingIndex());
      assertEquals("br", element2.tagName());
      assertFalse(element2.isBlock());
      assertNotNull(element2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      
      Elements elements2 = document2.getElementsByIndexLessThan(1093);
      assertEquals(4, elements2.size());
      assertFalse(elements2.isEmpty());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("4", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("4", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("4", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("4", document2.location());
      assertFalse(document2.hasParent());
      assertNotNull(elements2);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      
      Element element3 = document2.prependElement("autofocus");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("4", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("4", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("4", element3.baseUri());
      assertEquals(0, element3.childNodeSize());
      assertEquals("autofocus", element3.tagName());
      assertEquals("autofocus", element3.nodeName());
      assertTrue(element3.hasParent());
      assertEquals(0, element3.siblingIndex());
      assertFalse(element3.isBlock());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("4", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("4", document2.location());
      assertFalse(document2.hasParent());
      assertNotNull(element3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(element3, element2);
      assertNotSame(element3, element0);
      assertNotSame(element3, element1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Parser parser2 = parser1.setTrackErrors(1093);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertNotNull(parser2);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      
      Elements elements3 = document2.getElementsByClass("4");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("4", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("4", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("4", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("4", document2.location());
      assertFalse(document2.hasParent());
      assertNotNull(elements3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertTrue(elements3.equals((Object)elements0));
      assertFalse(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      
      Document document3 = document2.normalise();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("4", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("4", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("4", document3.location());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("4", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("4", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("4", document2.location());
      assertFalse(document2.hasParent());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      String string0 = document0.data();
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Document document1 = (Document)document0.addClass("");
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("xhtml", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.html("h");
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("xhtml", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("xhtml", document2.baseUri());
      assertEquals("xhtml", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements0 = document0.getElementsMatchingOwnText("");
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      document0.reparentChild(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("xhtml", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      Document document3 = Parser.parse("AU.U~", "");
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals("", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertNotNull(document3);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      
      Elements elements1 = document0.getElementsMatchingText(":ImmeUdiateParent%s");
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(elements1.equals((Object)elements0));
      
      String string1 = document1.wholeText();
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("xhtml", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(string1);
      assertEquals("h", string1);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.Token$Tag", "org.jsoup.parser.Token$Tag");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("org.jsoup.parser.Token$Tag", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertNotNull(element0);
      
      Elements elements0 = element0.previousElementSiblings();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("org.jsoup.parser.Token$Tag", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = document0.getElementsByAttributeValueEnding("org.jsoup.parser.Token$Tag", ">h`/J$h#.R9");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      
      Document document1 = Parser.parseBodyFragment(">h`/J$h#.R9", ">h`/J$h#.R9");
      assertFalse(document1.hasParent());
      assertEquals(">h`/J$h#.R9", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(">h`/J$h#.R9", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      Pattern pattern0 = Pattern.compile("org.jsoup.parser.TokenQueue");
      assertEquals("org.jsoup.parser.TokenQueue", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("org.jsoup.parser.TokenQueue", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements2 = document1.getElementsMatchingText(pattern0);
      assertFalse(document1.hasParent());
      assertEquals(">h`/J$h#.R9", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(">h`/J$h#.R9", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.TokenQueue", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("org.jsoup.parser.TokenQueue", pattern0.pattern());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertNotNull(elements2);
      assertNotSame(document1, document0);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      
      Element element1 = document0.appendElement(">h`/J$h#.R9");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(">h`/j$h#.r9", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(">h`/j$h#.r9", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", element1.baseUri());
      assertNotNull(element1);
      assertNotSame(document0, document1);
      assertNotSame(element1, element0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      
      Elements elements3 = document0.getElementsByIndexLessThan(79);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals(4, elements3.size());
      assertFalse(elements3.isEmpty());
      assertNotNull(elements3);
      assertNotSame(document0, document1);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements3.equals((Object)elements2));
      assertFalse(elements3.equals((Object)elements0));
      assertFalse(elements3.equals((Object)elements1));
      
      Element element2 = document1.prependElement("html");
      assertFalse(document1.hasParent());
      assertEquals(">h`/J$h#.R9", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(">h`/J$h#.R9", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("html", element2.nodeName());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals(">h`/J$h#.R9", element2.baseUri());
      assertEquals("html", element2.tagName());
      assertNotNull(element2);
      assertNotSame(document1, document0);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      
      String string0 = document1.ownText();
      assertFalse(document1.hasParent());
      assertEquals(">h`/J$h#.R9", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(">h`/J$h#.R9", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertNotNull(string0);
      assertEquals("", string0);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = Document.createShell("");
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tJq5N77eP4}VW!H?PI", "tJq5N77eP4}VW!H?PI");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = new Element("tJq5N77eP4}VW!H?PI");
      assertFalse(element0.hasParent());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.tagName());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      String string0 = document0.ownText();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Document document1 = new Document("Children collection to be inserted must not be null.");
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      String string1 = document1.wholeText();
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.isBlock());
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertTrue(string1.equals((Object)string0));
      
      MockFile mockFile0 = new MockFile("dl");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Children collection to be inserted must not be null.";
      objectArray0[1] = (Object) "y*i29G\"p5*7qol";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "y*i29G\"p5*7qol";
      objectArray0[4] = (Object) element0;
      objectArray0[5] = (Object) "Children collection to be inserted must not be null.";
      PrintWriter printWriter0 = mockPrintWriter0.printf("y*i29G\"p5*7qol", objectArray0);
      assertTrue(mockFile0.canExecute());
      assertEquals("dl", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("dl", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNotNull(printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertEquals(6, objectArray0.length);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1500);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1500, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1500, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(true);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1500, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1500, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1500, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(true);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1500, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(1500, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1500, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(1500, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings3.outline());
      assertNotNull(document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.syntax(document_OutputSettings_Syntax0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1500, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(1500, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1500, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(1500, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(1500, document_OutputSettings4.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertTrue(document_OutputSettings4.outline());
      assertNotNull(document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      
      element0.outerHtmlTail(printWriter0, 1500, document_OutputSettings4);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1500, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(element0.hasParent());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.tagName());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(1500, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1500, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(1500, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings3.outline());
      assertTrue(mockFile0.canExecute());
      assertEquals("dl", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("dl", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1500, document_OutputSettings4.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertTrue(document_OutputSettings4.outline());
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(mockPrintWriter0, printWriter0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parse("xhtml", "xhtml");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Document document1 = (Document)document0.prepend("xhtml");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("xhtml", document1.location());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.is("xhtml");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(boolean0);
      assertSame(document0, document1);
      
      Document document2 = document1.ownerDocument();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("xhtml", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("xhtml", document2.location());
      assertEquals("xhtml", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document2.addClass("m16z");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("xhtml", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("xhtml", document2.location());
      assertEquals("xhtml", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("xhtml", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("xhtml", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      Document document4 = (Document)document2.appendText("xhtml");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("xhtml", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("xhtml", document2.location());
      assertEquals("xhtml", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals("xhtml", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals("xhtml", document4.baseUri());
      assertEquals(3, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertNotNull(document4);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document1);
      
      Document document5 = document1.normalise();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document5.tagName());
      assertEquals("xhtml", document5.location());
      assertFalse(document5.hasParent());
      assertEquals("xhtml", document5.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.childNodeSize());
      assertNotNull(document5);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document5, document4);
      assertSame(document5, document3);
      assertSame(document5, document0);
      assertSame(document5, document2);
      assertSame(document5, document1);
      
      Document document6 = (Document)document5.addClass("j<~m^");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document5.tagName());
      assertEquals("xhtml", document5.location());
      assertFalse(document5.hasParent());
      assertEquals("xhtml", document5.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.childNodeSize());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#document", document6.nodeName());
      assertEquals("xhtml", document6.baseUri());
      assertFalse(document6.isBlock());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(1, document6.childNodeSize());
      assertEquals("xhtml", document6.location());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertNotNull(document6);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document6);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document5, document4);
      assertSame(document5, document3);
      assertSame(document5, document0);
      assertSame(document5, document2);
      assertSame(document5, document6);
      assertSame(document5, document1);
      assertSame(document6, document1);
      assertSame(document6, document0);
      assertSame(document6, document5);
      assertSame(document6, document4);
      assertSame(document6, document3);
      assertSame(document6, document2);
      
      Elements elements0 = document0.getElementsByClass("j<~m^");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document3);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors((-2106999805));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Parser parser2 = parser1.settings(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertNotNull(parser2);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      
      Document document7 = parser0.parseInput(" />", "2q7jCVd0ll\"Zh`8>iS");
      assertFalse(parser0.isTrackErrors());
      assertEquals("2q7jCVd0ll\"Zh`8>iS", document7.baseUri());
      assertFalse(document7.hasParent());
      assertEquals("#root", document7.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertEquals("#document", document7.nodeName());
      assertFalse(document7.isBlock());
      assertEquals(0, document7.siblingIndex());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("2q7jCVd0ll\"Zh`8>iS", document7.location());
      assertEquals(1, document7.childNodeSize());
      assertNotNull(document7);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertNotSame(document7, document0);
      assertNotSame(document7, document2);
      assertNotSame(document7, document1);
      assertNotSame(document7, document5);
      assertNotSame(document7, document3);
      assertNotSame(document7, document4);
      assertNotSame(document7, document6);
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document6));
      
      Document document8 = (Document)document5.doClone(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document5.tagName());
      assertEquals("xhtml", document5.location());
      assertFalse(document5.hasParent());
      assertEquals("xhtml", document5.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.childNodeSize());
      assertEquals(1, document8.childNodeSize());
      assertEquals("xhtml", document8.location());
      assertEquals("#root", document8.tagName());
      assertEquals(0, document8.siblingIndex());
      assertEquals("xhtml", document8.baseUri());
      assertFalse(document8.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertEquals("#document", document8.nodeName());
      assertTrue(document8.hasParent());
      assertFalse(document8.updateMetaCharsetElement());
      assertNotNull(document8);
      assertSame(document0, document4);
      assertNotSame(document0, document7);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document8);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document6);
      assertNotSame(document1, document7);
      assertNotSame(document1, document8);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document5, document4);
      assertNotSame(document5, document8);
      assertSame(document5, document3);
      assertSame(document5, document0);
      assertSame(document5, document2);
      assertSame(document5, document6);
      assertNotSame(document5, document7);
      assertSame(document5, document1);
      assertNotSame(document8, document0);
      assertNotSame(document8, document2);
      assertNotSame(document8, document1);
      assertNotSame(document8, document4);
      assertNotSame(document8, document6);
      assertNotSame(document8, document3);
      assertNotSame(document8, document7);
      assertNotSame(document8, document5);
      assertFalse(document0.equals((Object)document7));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document5.equals((Object)document7));
      assertFalse(document8.equals((Object)document0));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document6));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document8.equals((Object)document5));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";w<fubPFzQJ$", ";w<fubPFzQJ$");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Elements elements0 = document0.parents();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(";w<fubPFzQJ$", document1.baseUri());
      assertEquals(";w<fubPFzQJ$", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.toString();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", string0);
      assertSame(document0, document1);
      
      Charset charset0 = document1.charset();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(";w<fubPFzQJ$", document1.baseUri());
      assertEquals(";w<fubPFzQJ$", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(";w<fubPFzQJ$", document1.baseUri());
      assertEquals(";w<fubPFzQJ$", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document1, document0);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Parser parser2 = parser1.setTrackErrors(19);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertNotNull(parser2);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      
      Document document2 = parser2.parseInput(";w<fubPFzQJ$", "<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>");
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      DocumentType documentType0 = new DocumentType(";w<fubPFzQJ$", "itemscope", "autofocus", (String) null);
      assertEquals(0, documentType0.siblingIndex());
      assertFalse(documentType0.hasParent());
      assertEquals("#doctype", documentType0.nodeName());
      assertNotNull(documentType0);
      
      Document document3 = (Document)document2.doClone(documentType0);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, documentType0.siblingIndex());
      assertFalse(documentType0.hasParent());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertNotNull(document3);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      
      boolean boolean0 = document0.hasAttributes();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertFalse(boolean0);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      
      Pattern pattern0 = Pattern.compile("s+");
      assertEquals("s+", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("s+", pattern0.toString());
      assertNotNull(pattern0);
      
      Predicate<String> predicate0 = pattern0.asPredicate();
      assertEquals("s+", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("s+", pattern0.toString());
      assertNotNull(predicate0);
      
      Elements elements1 = document0.getElementsMatchingText(pattern0);
      assertEquals("s+", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("s+", pattern0.toString());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertTrue(elements1.equals((Object)elements0));
      
      Element element0 = document1.appendElement("<html>\n <head></head>\n <body>\n  xhtml\n </body>\n</html>");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("<html>\n <head></head>\n <body>\n  xhtml\n </body>\n</html>", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  xhtml\n </body>\n</html>", element0.nodeName());
      assertEquals(";w<fubPFzQJ$", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(";w<fubPFzQJ$", document1.baseUri());
      assertEquals(";w<fubPFzQJ$", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(element0);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      
      Document document4 = (Document)document3.tagName("PUBLIC");
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", document4.location());
      assertEquals("public", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, documentType0.siblingIndex());
      assertFalse(documentType0.hasParent());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("public", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertNotNull(document4);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document4);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      
      Elements elements2 = document3.getElementsByIndexLessThan((-1756));
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, documentType0.siblingIndex());
      assertFalse(documentType0.hasParent());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("public", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertNotNull(elements2);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document4);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      
      Element element1 = document4.prependElement("PUBLIC");
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertEquals(0, document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", document4.location());
      assertEquals("public", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals("public", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("public", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", element1.baseUri());
      assertFalse(element1.isBlock());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, documentType0.siblingIndex());
      assertFalse(documentType0.hasParent());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertEquals("public", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertNotNull(element1);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(element1, element0);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document4);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      
      String string1 = document1.ownText();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(";w<fubPFzQJ$", document1.baseUri());
      assertEquals(";w<fubPFzQJ$", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document1, document3);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(string1.equals((Object)string0));
      
      Attributes attributes0 = document1.attributes();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(";w<fubPFzQJ$", document1.baseUri());
      assertEquals(";w<fubPFzQJ$", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document1, document3);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      
      Document document5 = document2.normalise();
      assertTrue(parser0.isTrackErrors());
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", document5.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  ;w\n </body>\n</html>", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document5);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertSame(document5, document2);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertSame(document2, document5);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      
      // Undeclared exception!
      try { 
        document3.getElementsByIndexGreaterThan(10);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = ";w<fubPFzQJ$";
      Document document0 = Parser.parseBodyFragment(";w<fubPFzQJ$", ";w<fubPFzQJ$");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasText();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(boolean0);
      
      String string1 = document0.val();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = parser0.parseFragmentInput("", document0, "bgm");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      document0.childNodes = list0;
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, document0.childNodes.size());
      assertTrue(document0.childNodes.isEmpty());
      
      Attributes attributes0 = document0.attributes();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Pattern pattern0 = Pattern.compile("");
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNotNull(pattern0);
      
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string2 = "p4";
      // Undeclared exception!
      try { 
        document0.appendElement("p4");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.Token$Tag", "org.jsoup.parser.Token$Tag");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      Elements elements0 = element0.previousElementSiblings();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document1 = (Document)document0.val("org.jsoup.parser.tokenqueue");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Tag", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Tag", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = element0.cssSelector();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(string0);
      assertEquals("html > body", string0);
      assertSame(document0, document1);
      
      document0.setParentNode(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Tag", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Tag", document1.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements1 = document0.siblingElements();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      
      Element element1 = element0.previousElementSibling();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", element1.baseUri());
      assertNotNull(element1);
      assertSame(document0, document1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      
      Document document2 = Document.createShell("org.jsoup.select.Evaluator$IsOnlyOfType");
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Evaluator$IsOnlyOfType", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IsOnlyOfType", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertNotNull(document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tJq5N77eP4}VW!H?PW", "tJq5N77eP4}VW!H?PW");
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasAttributes();
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(boolean0);
      
      Pattern pattern0 = Pattern.compile("br");
      assertEquals(0, pattern0.flags());
      assertEquals("br", pattern0.toString());
      assertEquals("br", pattern0.pattern());
      assertNotNull(pattern0);
      
      Predicate<String> predicate0 = pattern0.asPredicate();
      assertEquals(0, pattern0.flags());
      assertEquals("br", pattern0.toString());
      assertEquals("br", pattern0.pattern());
      assertNotNull(predicate0);
      
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, pattern0.flags());
      assertEquals("br", pattern0.toString());
      assertEquals("br", pattern0.pattern());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Element element0 = document0.appendElement("template");
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("template", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("template", element0.nodeName());
      assertEquals("tJq5N77eP4}VW!H?PW", element0.baseUri());
      assertNotNull(element0);
      
      Document document1 = (Document)document0.tagName("template");
      assertEquals("template", document0.tagName());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.isBlock());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("template", document1.tagName());
      assertFalse(document1.hasParent());
      assertTrue(document1.isBlock());
      assertEquals("tJq5N77eP4}VW!H?PW", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tJq5N77eP4}VW!H?PW", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements1 = document0.getElementsByIndexLessThan(1093);
      assertEquals("template", document0.tagName());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.isBlock());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(elements1.isEmpty());
      assertEquals(4, elements1.size());
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      
      Element element1 = element0.prependElement("tJq5N77eP4}VW!H?PW");
      assertEquals("template", document0.tagName());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.isBlock());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("template", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("template", element0.nodeName());
      assertEquals("tJq5N77eP4}VW!H?PW", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("tjq5n77ep4}vw!h?pw", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("tJq5N77eP4}VW!H?PW", element1.baseUri());
      assertEquals("tjq5n77ep4}vw!h?pw", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      assertSame(document0, document1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      
      String string0 = document0.ownText();
      assertEquals("template", document0.tagName());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.isBlock());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document1);
      
      Attributes attributes0 = document0.attributes();
      assertEquals("template", document0.tagName());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.isBlock());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      assertSame(document0, document1);
      
      Document document2 = document0.normalise();
      assertEquals("template", document0.tagName());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.isBlock());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("template", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("tJq5N77eP4}VW!H?PW", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("tJq5N77eP4}VW!H?PW", document2.location());
      assertTrue(document2.isBlock());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements2 = element1.getElementsByIndexGreaterThan(1093);
      assertEquals("template", document0.tagName());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.isBlock());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("template", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("template", element0.nodeName());
      assertEquals("tJq5N77eP4}VW!H?PW", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("tjq5n77ep4}vw!h?pw", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("tJq5N77eP4}VW!H?PW", element1.baseUri());
      assertEquals("tjq5n77ep4}vw!h?pw", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertNotNull(elements2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      boolean boolean0 = document0.is("xhtml");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(boolean0);
      
      String string0 = document0.data();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Document document1 = (Document)document0.addClass("");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("xhtml", document1.location());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsMatchingOwnText("");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      document0.reparentChild(document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("xhtml", document1.location());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = Parser.parse("AU.U~", "");
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertNotNull(document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      Elements elements1 = document0.getElementsMatchingText(":ImmeUdiateParent%s");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      
      String string1 = document1.wholeText();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("xhtml", document1.location());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(string1);
      assertEquals("xhtml", string1);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(string1.equals((Object)string0));
      
      Document document3 = (Document)document0.before((Node) document2);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals("xhtml", document3.baseUri());
      assertTrue(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("xhtml", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = " \"";
      Document document0 = new Document(" \"");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(" \"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode(" \"");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      Node node0 = cDataNode0.shallowClone();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", node0.nodeName());
      assertFalse(node0.hasParent());
      assertEquals(0, node0.siblingIndex());
      assertNotNull(node0);
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertFalse(node0.equals((Object)cDataNode0));
      
      Document document1 = (Document)document0.doClone(node0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(" \"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", node0.nodeName());
      assertFalse(node0.hasParent());
      assertEquals(0, node0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(" \"", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals(" \"", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertNotSame(document1, document0);
      assertFalse(cDataNode0.equals((Object)node0));
      assertFalse(node0.equals((Object)cDataNode0));
      assertFalse(document1.equals((Object)document0));
      
      document0.setParentNode(node0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(" \"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", node0.nodeName());
      assertFalse(node0.hasParent());
      assertEquals(0, node0.siblingIndex());
      assertNotSame(document0, document1);
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(cDataNode0.equals((Object)node0));
      assertFalse(node0.equals((Object)cDataNode0));
      
      Document document2 = Document.createShell(" \"");
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(" \"", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(" \"", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      // Undeclared exception!
      try { 
        document1.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.Token$Tag", "org.jsoup.parser.Token$Tag");
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Tag", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      Elements elements0 = element0.previousElementSiblings();
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Tag", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element1 = element0.val("i} 2Z5<Uq+^+AL|?;7");
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Tag", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Tag", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Elements elements1 = document0.getElementsByAttributeValueEnding("org.jsoup.parser.Token$Tag", ">h`/J$h#.R9");
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      
      Document document1 = Parser.parseBodyFragment(">h`/J$h#.R9", ">h`/J$h#.R9");
      assertFalse(document1.hasParent());
      assertEquals(">h`/J$h#.R9", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(">h`/J$h#.R9", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document1.addClass("AfterAfterBody");
      assertFalse(document1.hasParent());
      assertEquals(">h`/J$h#.R9", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(">h`/J$h#.R9", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(">h`/J$h#.R9", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(">h`/J$h#.R9", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Document document3 = (Document)document0.doClone(element0);
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.Token$Tag", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Tag", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(element0, element1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Pattern pattern0 = Pattern.compile("org.jsoup.parser.TokenQueue");
      assertEquals("org.jsoup.parser.TokenQueue", pattern0.toString());
      assertEquals("org.jsoup.parser.TokenQueue", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertNotNull(pattern0);
      
      Pattern pattern1 = Pattern.compile("org.jsoup.parser.TokenQueue", 2267);
      assertEquals("org.jsoup.parser.TokenQueue", pattern1.pattern());
      assertEquals(2267, pattern1.flags());
      assertEquals("org.jsoup.parser.TokenQueue", pattern1.toString());
      assertNotNull(pattern1);
      assertNotSame(pattern1, pattern0);
      assertFalse(pattern1.equals((Object)pattern0));
      
      Predicate<String> predicate0 = pattern1.asPredicate();
      assertEquals("org.jsoup.parser.TokenQueue", pattern1.pattern());
      assertEquals(2267, pattern1.flags());
      assertEquals("org.jsoup.parser.TokenQueue", pattern1.toString());
      assertNotNull(predicate0);
      assertNotSame(pattern1, pattern0);
      assertFalse(pattern1.equals((Object)pattern0));
      
      Pattern pattern2 = Pattern.compile("jwyIO?Bu6T@1q", 1093);
      assertEquals(1093, pattern2.flags());
      assertNotNull(pattern2);
      assertNotSame(pattern2, pattern1);
      assertNotSame(pattern2, pattern0);
      assertFalse(pattern2.equals((Object)pattern1));
      assertFalse(pattern2.equals((Object)pattern0));
      
      Elements elements2 = document1.getElementsMatchingText(pattern2);
      assertFalse(document1.hasParent());
      assertEquals(">h`/J$h#.R9", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(">h`/J$h#.R9", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1093, pattern2.flags());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotNull(elements2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(pattern2, pattern1);
      assertNotSame(pattern2, pattern0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(pattern2.equals((Object)pattern1));
      assertFalse(pattern2.equals((Object)pattern0));
      assertFalse(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      
      Element element2 = document0.appendElement("AfterAfterBody");
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("afterafterbody", element2.nodeName());
      assertEquals("org.jsoup.parser.Token$Tag", element2.baseUri());
      assertEquals("afterafterbody", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertNotNull(element2);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      
      Document document4 = Document.createShell("yiJP6`ql&\"\"pCM");
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("yiJP6`ql&\"\"pCM", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals("yiJP6`ql&\"\"pCM", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertNotNull(document4);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      
      Elements elements3 = document4.getElementsByIndexLessThan(2267);
      assertFalse(elements3.isEmpty());
      assertEquals(3, elements3.size());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("yiJP6`ql&\"\"pCM", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals("yiJP6`ql&\"\"pCM", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertNotNull(elements3);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertFalse(elements3.equals((Object)elements0));
      assertFalse(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      
      Element element3 = document1.prependElement("yiJP6`ql&\"\"pCM");
      assertTrue(element3.hasParent());
      assertFalse(element3.isBlock());
      assertEquals(0, element3.siblingIndex());
      assertEquals("yijp6`ql&\"\"pcm", element3.nodeName());
      assertEquals(">h`/J$h#.R9", element3.baseUri());
      assertEquals(0, element3.childNodeSize());
      assertEquals("yijp6`ql&\"\"pcm", element3.tagName());
      assertFalse(document1.hasParent());
      assertEquals(">h`/J$h#.R9", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(">h`/J$h#.R9", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(element3);
      assertNotSame(element3, element1);
      assertNotSame(element3, element0);
      assertNotSame(element3, element2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      
      Document document5 = Parser.parseBodyFragment("autofocus", ".N!@z\"+#aBd@RjH/L");
      assertFalse(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(".N!@z\"+#aBd@RjH/L", document5.location());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals(".N!@z\"+#aBd@RjH/L", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertNotNull(document5);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document3);
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      
      String string0 = document5.ownText();
      assertFalse(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(".N!@z\"+#aBd@RjH/L", document5.location());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals(".N!@z\"+#aBd@RjH/L", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("", string0);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document3);
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      
      String string1 = document2.wholeText();
      assertFalse(document1.hasParent());
      assertEquals(">h`/J$h#.R9", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(">h`/J$h#.R9", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(">h`/J$h#.R9", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(">h`/J$h#.R9", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(string1);
      assertEquals(">h`/J$h#.R9", string1);
      assertNotSame(document1, document5);
      assertNotSame(document1, document4);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document4);
      assertNotSame(document2, document5);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document2, document0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      
      Elements elements4 = document5.getElementsByClass("*O\"Sg)?[1M");
      assertFalse(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(".N!@z\"+#aBd@RjH/L", document5.location());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals(".N!@z\"+#aBd@RjH/L", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, elements4.size());
      assertTrue(elements4.isEmpty());
      assertNotNull(elements4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document3);
      assertNotSame(elements4, elements0);
      assertNotSame(elements4, elements3);
      assertNotSame(elements4, elements1);
      assertNotSame(elements4, elements2);
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertTrue(elements4.equals((Object)elements1));
      assertFalse(elements4.equals((Object)elements0));
      assertFalse(elements4.equals((Object)elements3));
      assertTrue(elements4.equals((Object)elements2));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = new Document("xhtml");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors((-2818));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document1 = document0.parser(parser1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals("xhtml", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.doClone(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals("xhtml", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("xhtml", document2.baseUri());
      assertEquals("xhtml", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      document1.setParentNode(document2);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals("xhtml", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("xhtml", document2.baseUri());
      assertEquals("xhtml", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      String string0 = " ";
      Document document3 = Document.createShell(" ");
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(" ", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(" ", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      
      Document document4 = Parser.parse("xhtml", "org.jsoup.select.Evaluator$IndexGreaterThan");
      assertEquals("#document", document4.nodeName());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertNotNull(document4);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      
      Element element0 = document4.head();
      assertEquals("#document", document4.nodeName());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", element0.baseUri());
      assertNotNull(element0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      
      String string1 = element0.cssSelector();
      assertEquals("#document", document4.nodeName());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", element0.baseUri());
      assertNotNull(string1);
      assertEquals("html > head", string1);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        document1.setParentNode(document3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      String string0 = document0.ownText();
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Elements elements0 = document0.parents();
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = Node.EmptyString;
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      Charset charset0 = document0.charset();
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      assertSame(document0, document1);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document document2 = (Document)document1.doClone(document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Pattern pattern0 = Pattern.compile("");
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertNotNull(pattern0);
      
      Predicate<String> predicate0 = pattern0.asPredicate();
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertNotNull(predicate0);
      
      Elements elements1 = document1.getElementsMatchingText(pattern0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertEquals(4, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotNull(elements1);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      
      Element element0 = document0.appendElement("p4");
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("p4", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("p4", element0.nodeName());
      assertNotNull(element0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(document0.equals((Object)document2));
      
      Elements elements2 = element0.getElementsByIndexLessThan(1093);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("p4", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("p4", element0.nodeName());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotNull(elements2);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertFalse(document0.equals((Object)document2));
      assertTrue(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      
      Element element1 = document2.prependElement("autofocus");
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("autofocus", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals("autofocus", element1.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertNotNull(element1);
      assertNotSame(element1, element0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      String string2 = document0.ownText();
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(document0.equals((Object)document2));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      Document document3 = (Document)document2.doClone(element1);
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("autofocus", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals("autofocus", element1.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertNotNull(document3);
      assertNotSame(element1, element0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      int int0 = document3.childNodeSize();
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("autofocus", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals("autofocus", element1.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(2, int0);
      assertNotSame(element1, element0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      Document document4 = (Document)document2.appendTo(element0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document4.tagName());
      assertEquals("", document4.baseUri());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertTrue(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("p4", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("p4", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(element0, element1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(element0.equals((Object)element1));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Document document1 = (Document)document0.prepend("xhtml");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.is("xhtml");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(boolean0);
      assertSame(document0, document1);
      
      Element element0 = document1.shallowClone();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("#root", element0.tagName());
      assertEquals("#root", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("xhtml", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean1 = document1.hasText();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(boolean1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(boolean1 == boolean0);
      
      Document document2 = document1.normalise();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("xhtml", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("xhtml", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      document0.nodelistChanged();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      String string0 = document0.val();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      Document document3 = (Document)document0.addClass("xhtml");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("xhtml", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      TextNode textNode0 = TextNode.createFromEncoded("xhtml", "org.jsoup.nodes.Comment");
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      document0.setParentNode(textNode0);
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      String string0 = "org.jsoup.nodes.element$1";
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("c.");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      String string0 = document0.ownText();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Elements elements0 = document0.parents();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = document1.toString();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertNotNull(string1);
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(string1.equals((Object)string0));
      
      Charset charset0 = document0.charset();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      assertSame(document0, document1);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document document2 = (Document)document0.doClone(document1);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      boolean boolean0 = document0.hasAttributes();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document2));
      
      Pattern pattern0 = Pattern.compile("br");
      assertEquals("br", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("br", pattern0.pattern());
      assertNotNull(pattern0);
      
      Predicate<String> predicate0 = pattern0.asPredicate();
      assertEquals("br", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("br", pattern0.pattern());
      assertNotNull(predicate0);
      
      Elements elements1 = document1.getElementsMatchingText(pattern0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("br", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("br", pattern0.pattern());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertTrue(elements1.equals((Object)elements0));
      
      Element element0 = document0.appendElement("br");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document2));
      
      Element element1 = element0.tagName("br");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals("br", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("br", element1.tagName());
      assertFalse(element1.isBlock());
      assertNotNull(element1);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.equals((Object)document2));
      
      Elements elements2 = document2.getElementsByIndexLessThan(1093);
      assertFalse(elements2.isEmpty());
      assertEquals(4, elements2.size());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertNotNull(elements2);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      Element element2 = document0.body();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertEquals("body", element2.nodeName());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertNotNull(element2);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      
      String string2 = document0.ownText();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      Attributes attributes0 = document0.attributes();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document2));
      
      Document document3 = document1.normalise();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      
      Elements elements3 = element2.getElementsByIndexGreaterThan(1093);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertEquals("body", element2.nodeName());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertNotNull(elements3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements1));
      
      Document document4 = (Document)document2.text("autofocus");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("", document4.location());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertTrue(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertNotNull(document4);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      
      Elements elements4 = document2.getElementsByAttributeStarting("zh}l'JP2=Ku#\"#");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertTrue(elements4.isEmpty());
      assertEquals(0, elements4.size());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertNotNull(elements4);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(elements4, elements1);
      assertNotSame(elements4, elements2);
      assertNotSame(elements4, elements0);
      assertNotSame(elements4, elements3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertTrue(elements4.equals((Object)elements0));
      assertFalse(elements4.equals((Object)elements2));
      assertTrue(elements4.equals((Object)elements3));
      assertTrue(elements4.equals((Object)elements1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Document.createShell(":contains(");
      assertEquals(":contains(", document0.location());
      assertEquals(":contains(", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass(":contains(");
      assertEquals(":contains(", document0.location());
      assertEquals(":contains(", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(":contains(", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(":contains(", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("");
      assertEquals(":contains(", document0.location());
      assertEquals(":contains(", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(":contains(", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(":contains(", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements0 = document0.getElementsByClass("C/^Kv,[");
      assertEquals(":contains(", document0.location());
      assertEquals(":contains(", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      boolean boolean0 = document0.hasClass("Object must not be null");
      assertEquals(":contains(", document0.location());
      assertEquals(":contains(", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = new Document(" > ");
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" > ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.getElementById(" > ");
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" > ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNull(element0);
      
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("j[i", parseSettings0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("j[i", tag0.getName());
      assertEquals("j[i", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "");
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("j[i", tag0.getName());
      assertEquals("j[i", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertEquals("j[i", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("j[i", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        element0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("E", "E");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("E", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("E", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("br");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("E", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("E", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("br", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("E", element0.baseUri());
      assertEquals("br", element0.nodeName());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.append("br");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("E", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("E", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("br", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("E", element0.baseUri());
      assertEquals("br", element0.nodeName());
      assertFalse(element0.isBlock());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("E", element1.baseUri());
      assertEquals("br", element1.nodeName());
      assertEquals("br", element1.tagName());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = document0.toString();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("E", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("E", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body>\n  E\n </body>\n</html>\n<br>br</br>", string0);
      
      // Undeclared exception!
      try { 
        element1.after((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      Document document0 = Parser.parseBodyFragment("", "R!|^PN");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("R!|^PN", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("R!|^PN", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "<:XBKx`/sCH@H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.Token$Tag", "org.jsoup.parser.Token$Tag");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("org.jsoup.parser.Token$Tag", element0.baseUri());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      
      Elements elements0 = element0.previousElementSiblings();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("org.jsoup.parser.Token$Tag", element0.baseUri());
      assertTrue(element0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      
      Elements elements1 = document0.getElementsByAttributeValueEnding("org.jsoup.parser.Token$Tag", ">h`/J$h#.R9");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      
      Document document1 = Parser.parseBodyFragment(">h`/J$h#.R9", ">h`/J$h#.R9");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(">h`/J$h#.R9", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(">h`/J$h#.R9", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document1.addClass("AfterAfterBody");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(">h`/J$h#.R9", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(">h`/J$h#.R9", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(">h`/J$h#.R9", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(">h`/J$h#.R9", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Document document3 = (Document)document2.appendText("e1yd$f$");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(">h`/J$h#.R9", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(">h`/J$h#.R9", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(">h`/J$h#.R9", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(">h`/J$h#.R9", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(">h`/J$h#.R9", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(">h`/J$h#.R9", document3.location());
      assertNotNull(document3);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      
      Document document4 = Parser.parse("AfterAfterBody", "org.jsoup.parser.Token$Tag");
      assertEquals("org.jsoup.parser.Token$Tag", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document4.baseUri());
      assertNotNull(document4);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      
      Document document5 = (Document)document4.addClass("Object must not be null");
      assertEquals("org.jsoup.parser.Token$Tag", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document4.baseUri());
      assertEquals("org.jsoup.parser.Token$Tag", document5.location());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals("org.jsoup.parser.Token$Tag", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertNotNull(document5);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertSame(document4, document5);
      assertSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertNotSame(document5, document2);
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      
      Elements elements2 = document4.getElementsByClass("org.jsoup.parser.TokenQueue");
      assertEquals("org.jsoup.parser.Token$Tag", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document4.baseUri());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertNotNull(elements2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertSame(document4, document5);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors((-2018));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Parser parser2 = parser1.settings(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertNotNull(parser2);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      
      Document document6 = parser2.parseInput(">h`/J$h#.R9", "org.jsoup.parser.Token$Tag");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals(1, document6.childNodeSize());
      assertEquals("#document", document6.nodeName());
      assertEquals("#root", document6.tagName());
      assertEquals(0, document6.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Tag", document6.baseUri());
      assertFalse(document6.isBlock());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Tag", document6.location());
      assertFalse(document6.hasParent());
      assertNotNull(document6);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertNotSame(document6, document3);
      assertNotSame(document6, document4);
      assertNotSame(document6, document5);
      assertNotSame(document6, document1);
      assertNotSame(document6, document2);
      assertNotSame(document6, document0);
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document0));
      
      Document document7 = (Document)document6.doClone((Node) null);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals(1, document6.childNodeSize());
      assertEquals("#document", document6.nodeName());
      assertEquals("#root", document6.tagName());
      assertEquals(0, document6.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Tag", document6.baseUri());
      assertFalse(document6.isBlock());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Tag", document6.location());
      assertFalse(document6.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document7.location());
      assertFalse(document7.hasParent());
      assertEquals("#root", document7.tagName());
      assertEquals("org.jsoup.parser.Token$Tag", document7.baseUri());
      assertEquals(1, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("#document", document7.nodeName());
      assertEquals(0, document7.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.isBlock());
      assertNotNull(document7);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertNotSame(document6, document3);
      assertNotSame(document6, document7);
      assertNotSame(document6, document4);
      assertNotSame(document6, document5);
      assertNotSame(document6, document1);
      assertNotSame(document6, document2);
      assertNotSame(document6, document0);
      assertNotSame(document7, document0);
      assertNotSame(document7, document6);
      assertNotSame(document7, document4);
      assertNotSame(document7, document5);
      assertNotSame(document7, document1);
      assertNotSame(document7, document3);
      assertNotSame(document7, document2);
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document2));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("df8qc", "df8qc");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("df8qc", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("df8qc", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("df8qc");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("df8qc", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("df8qc", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("df8qc", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("df8qc", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByClass("or,{jx*qp.parl_!Vtokenqueue");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("df8qc", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("df8qc", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("df8qc", "df8qc");
      assertEquals("df8qc", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("df8qc", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("df8qc");
      assertEquals("df8qc", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("df8qc", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("df8qc", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("df8qc", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsByClass("org.jsoup.select.Evaluator$IndexGreaterThan");
      assertEquals("df8qc", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("df8qc", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("df8qc", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("df8qc", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertNotNull(document0);
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = document0.is("xhtml");
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(boolean0);
      
      String string0 = document0.data();
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Document document1 = (Document)document0.addClass("");
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = Parser.parse("AU.U~", "\"U/BQh]CYGBds*h}[");
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("\"U/BQh]CYGBds*h}[", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("\"U/BQh]CYGBds*h}[", document2.baseUri());
      assertNotNull(document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      Element element0 = document2.previousElementSibling();
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("\"U/BQh]CYGBds*h}[", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("\"U/BQh]CYGBds*h}[", document2.baseUri());
      assertNull(element0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      Document document3 = Document.createShell("p4");
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("p4", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("p4", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertNotNull(document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      
      Document document4 = (Document)document0.html("");
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("xhtml", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("xhtml", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.childNodeSize());
      assertNotNull(document4);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertSame(document4, document1);
      assertNotSame(document4, document2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      
      Pattern pattern0 = Pattern.compile("xhtml");
      assertEquals("xhtml", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("xhtml", pattern0.toString());
      assertNotNull(pattern0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("\"U/BQh]CYGBds*h}[", pattern0);
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("xhtml", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("xhtml", pattern0.toString());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      
      Document document5 = (Document)document3.val("~#~L|h%C>;y");
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("p4", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("p4", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals("p4", document5.location());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertEquals("p4", document5.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertNotNull(document5);
      assertNotSame(document3, document2);
      assertNotSame(document3, document4);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document5);
      assertSame(document5, document3);
      assertNotSame(document5, document0);
      assertNotSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("xhtml", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.attr("=x)hxp vw_~g", "br");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("xhtml", element0.baseUri());
      assertEquals("xhtml", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Elements elements0 = document0.previousElementSiblings();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = document0.getElementsByAttributeValueEnding("upn#y5o{VF", "y.\"{4hX");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      
      Document document1 = Parser.parseBodyFragment("0iQQL", "0iQQL");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("0iQQL", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("0iQQL", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      Element element2 = document1.body();
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("0iQQL", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("0iQQL", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("0iQQL", element2.baseUri());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertEquals(1, element2.childNodeSize());
      assertEquals("body", element2.tagName());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.hasParent());
      assertNotNull(element2);
      assertNotSame(document1, document0);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      
      List<DataNode> list0 = element2.dataNodes();
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("0iQQL", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("0iQQL", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("0iQQL", element2.baseUri());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertEquals(1, element2.childNodeSize());
      assertEquals("body", element2.tagName());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.hasParent());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertNotSame(document1, document0);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      
      String string0 = document0.tagName();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertNotNull(string0);
      assertEquals("#root", string0);
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      
      int int0 = document1.childNodeSize();
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("0iQQL", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("0iQQL", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, int0);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      Elements elements2 = element2.getElementsContainingText("class");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("0iQQL", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("0iQQL", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("0iQQL", element2.baseUri());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertEquals(1, element2.childNodeSize());
      assertEquals("body", element2.tagName());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.hasParent());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertNotNull(elements2);
      assertNotSame(document1, document0);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4", "4");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("4", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("4", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      Element element0 = document0.body();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("4", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("4", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("4", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      
      String string1 = Node.EmptyString;
      assertNotNull(string1);
      assertEquals("", string1);
      
      document0.setParentNode(element0);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("4", document0.location());
      assertEquals("4", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("4", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      
      Elements elements0 = element0.getElementsMatchingText("4");
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("4", document0.location());
      assertEquals("4", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("4", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) document0;
      // Undeclared exception!
      try { 
        element0.insertChildren((-2), nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = ";w<fubPFzQJ$";
      Document document0 = Parser.parseBodyFragment(";w<fubPFzQJ$", ";w<fubPFzQJ$");
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertNotNull(document0);
      
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      String string1 = "Fgk5aa6CIU}";
      TextNode textNode0 = TextNode.createFromEncoded("Fgk5aa6CIU}");
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      nodeArray0[4] = (Node) textNode0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Document document0 = Parser.parse("%%vxjnz,s3[[lj(", "");
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Pattern pattern0 = Pattern.compile("");
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNotNull(pattern0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("#", pattern0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      boolean boolean0 = Element.preserveWhitespace(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      TextNode textNode0 = new TextNode("xhtml");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertNotNull(textNode0);
      
      Document document1 = (Document)document0.doClone(textNode0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      document0.setParentNode(textNode0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document0.location());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      
      Document document2 = Document.createShell(">");
      assertEquals("#document", document2.nodeName());
      assertEquals(">", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(">", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      String string0 = document2.cssSelector();
      assertEquals("#document", document2.nodeName());
      assertEquals(">", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(">", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertNotNull(string0);
      assertEquals("#root", string0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      document2.setParentNode(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document0.location());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(">", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(">", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      Elements elements0 = document1.getElementsByAttributeStarting(">");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document0.location());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Element element0 = new Element("dx,");
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("dx,", element0.tagName());
      assertEquals("dx,", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      Element element1 = element0.tagName("h4");
      assertEquals("", element0.baseUri());
      assertEquals("h4", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("h4", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("h4", element1.nodeName());
      assertEquals("h4", element1.tagName());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      String string0 = document0.ownText();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Elements elements0 = document0.parents();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = document1.toString();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertNotNull(string1);
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(string1.equals((Object)string0));
      
      Charset charset0 = document0.charset();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      assertSame(document0, document1);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document document2 = (Document)document0.doClone(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      boolean boolean0 = document0.hasAttributes();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(boolean0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(document0.equals((Object)document2));
      
      Pattern pattern0 = Pattern.compile("br");
      assertEquals("br", pattern0.pattern());
      assertEquals("br", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNotNull(pattern0);
      
      document0.updateMetaCharsetElement(false);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(document0.equals((Object)document2));
      
      Predicate<String> predicate0 = pattern0.asPredicate();
      assertEquals("br", pattern0.pattern());
      assertEquals("br", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNotNull(predicate0);
      
      Elements elements1 = document1.getElementsMatchingText(pattern0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("br", pattern0.pattern());
      assertEquals("br", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertTrue(elements1.equals((Object)elements0));
      
      Element element0 = document0.appendElement("br");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("br", element0.nodeName());
      assertNotNull(element0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(document0.equals((Object)document2));
      
      Element element1 = element0.tagName("br");
      assertEquals(0, element1.childNodeSize());
      assertEquals("br", element1.tagName());
      assertEquals("br", element1.nodeName());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("br", element0.nodeName());
      assertNotNull(element1);
      assertSame(element1, element0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertFalse(document0.equals((Object)document2));
      
      Elements elements2 = document2.getElementsByIndexLessThan(1093);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(4, elements2.size());
      assertFalse(elements2.isEmpty());
      assertEquals("", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertNotNull(elements2);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      Element element2 = document2.prependElement("auto^oous");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertEquals("auto^oous", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals("auto^oous", element2.nodeName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertNotNull(element2);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      String string2 = document0.ownText();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      Attributes attributes0 = document0.attributes();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(document0.equals((Object)document2));
      
      Document document3 = document1.normalise();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertNotNull(document3);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      
      Elements elements3 = element2.getElementsByIndexGreaterThan(1093);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertEquals("auto^oous", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals("auto^oous", element2.nodeName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertNotNull(elements3);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(document1.equals((Object)document2));
      assertTrue(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      
      String string3 = element0.baseUri();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("br", element0.nodeName());
      assertNotNull(string3);
      assertEquals("", string3);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertFalse(document0.equals((Object)document2));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(element0.equals((Object)element2));
      
      // Undeclared exception!
      try { 
        element1.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parse("y", "y");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("y", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("y", document0.location());
      assertNotNull(document0);
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      document0.setParentNode(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("y", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("y", document0.location());
      
      Elements elements0 = document0.previousElementSiblings();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("y", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("y", document0.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      // Undeclared exception!
      document0.html("y");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":nth-child(%d)", ":nth-child(%d)");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":nth-child(%d)", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(":nth-child(%d)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.html("x^*N");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":nth-child(%d)", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(":nth-child(%d)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(":nth-child(%d)", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(":nth-child(%d)", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = " \"";
      Document document0 = new Document(" \"");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.doClone(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(" \"", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(" \"", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      document0.setParentNode(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(" \"", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(" \"", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      
      // Undeclared exception!
      document0.html(" \"");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.Token$Tag", "org.jsoup.parser.Token$Tag");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertEquals("org.jsoup.parser.Token$Tag", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertNotNull(element0);
      
      Elements elements0 = element0.previousElementSiblings();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertEquals("org.jsoup.parser.Token$Tag", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      
      Elements elements1 = document0.getElementsByAttributeValueEnding("org.jsoup.parser.Token$Tag", ">h`/J$h#.R9");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      
      Node[] nodeArray0 = new Node[0];
      Document document1 = (Document)document0.insertChildren((-1), nodeArray0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.parser.Token$Tag", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Tag", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, nodeArray0.length);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Element element1 = document0.getElementById("?7");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNull(element1);
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Document.createShell(":wBK-8/H@H");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(":wBK-8/H@H", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":wBK-8/H@H", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("br");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(":wBK-8/H@H", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":wBK-8/H@H", document0.baseUri());
      assertEquals("br", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(":wBK-8/H@H", element0.baseUri());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      String string0 = document0.ownText();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(":wBK-8/H@H", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":wBK-8/H@H", document0.baseUri());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      String string0 = document0.ownText();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Elements elements0 = document0.parents();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = document1.toString();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(string1);
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(string1.equals((Object)string0));
      
      Charset charset0 = document0.charset();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      assertSame(document0, document1);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document document2 = (Document)document0.doClone(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      boolean boolean0 = document0.hasAttributes();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document2));
      
      Pattern pattern0 = Pattern.compile("br");
      assertEquals("br", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("br", pattern0.pattern());
      assertNotNull(pattern0);
      
      Predicate<String> predicate0 = pattern0.asPredicate();
      assertEquals("br", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("br", pattern0.pattern());
      assertNotNull(predicate0);
      
      Elements elements1 = document1.getElementsMatchingText(pattern0);
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("br", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("br", pattern0.pattern());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertTrue(elements1.equals((Object)elements0));
      
      Element element0 = document0.appendElement("br");
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertEquals("br", element0.nodeName());
      assertNotNull(element0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document2));
      
      Element element1 = element0.tagName("br");
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertEquals("br", element0.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("br", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals("br", element1.nodeName());
      assertNotNull(element1);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.equals((Object)document2));
      
      Elements elements2 = document2.getElementsByIndexLessThan(1093);
      assertFalse(elements2.isEmpty());
      assertEquals(4, elements2.size());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(elements2);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      Element element2 = document2.prependElement("autofocus");
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("autofocus", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertTrue(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("autofocus", element2.nodeName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertNotNull(element2);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      String string2 = document0.ownText();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      Attributes attributes0 = document0.attributes();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document2));
      
      Document document3 = document1.normalise();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      
      Elements elements3 = element2.getElementsByIndexGreaterThan(1093);
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("autofocus", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertTrue(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("autofocus", element2.nodeName());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertNotNull(elements3);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parse(";w<fubPFzQJ$", ";w<fubPFzQJ$");
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(";w<fubPFzQJ$", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(";w<fubPFzQJ$", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.clone();
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(";w<fubPFzQJ$", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(";w<fubPFzQJ$", document1.baseUri());
      assertEquals(";w<fubPFzQJ$", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(";w<fubPFzQJ$", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      Elements elements0 = document0.getElementsByAttributeValueMatching(";w<fubPFzQJ$", ";w<fubPFzQJ$");
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document2));
      
      Document document3 = (Document)document1.empty();
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals(";w<fubPFzQJ$", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(";w<fubPFzQJ$", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(";w<fubPFzQJ$", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(";w<fubPFzQJ$", document3.location());
      assertEquals(0, document3.childNodeSize());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document document4 = document0.outputSettings(document_OutputSettings0);
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals(";w<fubPFzQJ$", document4.location());
      assertFalse(document4.hasParent());
      assertEquals(";w<fubPFzQJ$", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(document4);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document4, document0);
      assertNotSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      
      Element element0 = document1.getElementById("c0'eg81^");
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals(";w<fubPFzQJ$", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(";w<fubPFzQJ$", document1.baseUri());
      assertNull(element0);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      
      Tag tag0 = document3.tag();
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals(";w<fubPFzQJ$", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(";w<fubPFzQJ$", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(";w<fubPFzQJ$", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(";w<fubPFzQJ$", document3.location());
      assertEquals(0, document3.childNodeSize());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.getName());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertNotNull(tag0);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Document.createShell("sAIQ`");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("sAIQ`", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("sAIQ`", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("sAIQ`", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("sAIQ`", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("sAIQ`", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.lastElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("sAIQ`", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("sAIQ`", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("sAIQ`", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals("sAIQ`", element1.baseUri());
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("y", "y");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("y", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("y", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 672, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("opg.jsoup.pyrser.Token$Tag", "opg.jsoup.pyrser.Token$Tag");
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("opg.jsoup.pyrser.Token$Tag", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("opg.jsoup.pyrser.Token$Tag", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      Element element0 = document0.body();
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("opg.jsoup.pyrser.Token$Tag", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("opg.jsoup.pyrser.Token$Tag", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("opg.jsoup.pyrser.Token$Tag", element0.baseUri());
      assertNotNull(element0);
      
      boolean boolean0 = document0.hasText();
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("opg.jsoup.pyrser.Token$Tag", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("opg.jsoup.pyrser.Token$Tag", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(boolean0);
      
      boolean boolean1 = document0.isBlock();
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("opg.jsoup.pyrser.Token$Tag", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("opg.jsoup.pyrser.Token$Tag", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Element element1 = element0.firstElementSibling();
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("opg.jsoup.pyrser.Token$Tag", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("opg.jsoup.pyrser.Token$Tag", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("opg.jsoup.pyrser.Token$Tag", element0.baseUri());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertEquals("opg.jsoup.pyrser.Token$Tag", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Document document1 = new Document("xhtml");
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Elements elements0 = document0.getElementsByAttributeStarting("l^sFLgwgIq|&PNiH\"$");
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      
      Elements elements1 = document1.siblingElements();
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertNotSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertFalse(document1.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
      
      String string0 = document1.baseUri();
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertNotNull(string0);
      assertEquals("xhtml", string0);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document1.addClass("l^sFLgwgIq|&PNiH\"$");
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals("xhtml", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("xhtml", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Elements elements2 = document0.getElementsByClass("l^sFLgwgIq|&PNiH\"$");
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertNotNull(elements2);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      
      int int0 = document2.childNodeSize();
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals("xhtml", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("xhtml", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, int0);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Document document1 = (Document)document0.prepend("xhtml");
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.is("xhtml");
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(boolean0);
      assertSame(document0, document1);
      
      String string0 = document0.data();
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document1.addClass("");
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("xhtml", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("xhtml", document2.baseUri());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements0 = document1.getElementsMatchingOwnText("");
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      document0.reparentChild(document2);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("xhtml", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("xhtml", document2.baseUri());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Element element0 = document2.previousElementSibling();
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("xhtml", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("xhtml", document2.baseUri());
      assertNull(element0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = Parser.parse("AU.U~", "\"U/BQh]CYGBds*h}[");
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("\"U/BQh]CYGBds*h}[", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("\"U/BQh]CYGBds*h}[", document3.location());
      assertFalse(document3.hasParent());
      assertNotNull(document3);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      
      Elements elements1 = document1.getElementsMatchingText(":ImmediateParent%s");
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(elements1.equals((Object)elements0));
      
      // Undeclared exception!
      try { 
        document2.insertChildren((-2), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = new Document("R \"");
      assertFalse(document0.hasParent());
      assertEquals("R \"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R \"", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.doClone(document0);
      assertFalse(document0.hasParent());
      assertEquals("R \"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R \"", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("R \"", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("R \"", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      document0.setParentNode(document1);
      assertEquals("R \"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R \"", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("R \"", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("R \"", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document2 = Document.createShell("R \"");
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("R \"", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("R \"", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document3 = document1.quirksMode(document_QuirksMode0);
      assertEquals("R \"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R \"", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("R \"", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("R \"", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("R \"", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals("R \"", document3.baseUri());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      Element element0 = document3.body();
      assertEquals("R \"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R \"", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("R \"", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("R \"", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("R \"", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals("R \"", document3.baseUri());
      assertFalse(document3.isBlock());
      assertNull(element0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      Elements elements0 = document0.nextElementSiblings();
      assertEquals("R \"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R \"", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      
      List<DataNode> list0 = document1.dataNodes();
      assertEquals("R \"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R \"", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("R \"", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("R \"", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      
      Document document4 = (Document)document2.insertChildren(1, (Collection<? extends Node>) list0);
      assertEquals("R \"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R \"", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("R \"", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("R \"", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("R \"", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("R \"", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("R \"", document4.baseUri());
      assertEquals("R \"", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertNotNull(document4);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document4, document1);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Document.createShell("tJq5N77eP4}VW!H?PI");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.location());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.doClone(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.location());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tJq5N77eP4}VW!H?PI", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tJq5N77eP4}VW!H?PI", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document1.toggleClass("tJq5N77eP4}VW!H?PI");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.location());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tJq5N77eP4}VW!H?PI", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tJq5N77eP4}VW!H?PI", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("tJq5N77eP4}VW!H?PI", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("tJq5N77eP4}VW!H?PI", document2.location());
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      boolean boolean0 = document0.hasAttr("br");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.location());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(boolean0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      
      boolean boolean1 = document1.hasAttr("tJq5N77eP4}VW!H?PI");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.location());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tJq5N77eP4}VW!H?PI", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tJq5N77eP4}VW!H?PI", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(boolean1);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertTrue(boolean1 == boolean0);
      
      Elements elements0 = document1.getElementsByAttributeStarting("html");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.location());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tJq5N77eP4}VW!H?PI", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tJq5N77eP4}VW!H?PI", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      
      Elements elements1 = document1.getElementsByTag("]9RW");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.location());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tJq5N77eP4}VW!H?PI", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tJq5N77eP4}VW!H?PI", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
      
      List<Node> list0 = document2.ensureChildNodes();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.location());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tJq5N77eP4}VW!H?PI", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tJq5N77eP4}VW!H?PI", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("tJq5N77eP4}VW!H?PI", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("tJq5N77eP4}VW!H?PI", document2.location());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parse("df8qc", "df8qc");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("df8qc", document0.location());
      assertEquals("df8qc", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("df8qc");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("df8qc", document0.location());
      assertEquals("df8qc", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("df8qc", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("df8qc", document1.baseUri());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document1.cssSelector();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("df8qc", document0.location());
      assertEquals("df8qc", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("df8qc", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("df8qc", document1.baseUri());
      assertFalse(document1.hasParent());
      assertNotNull(string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertNotNull(document0);
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Document document1 = (Document)document0.prepend("xhtml");
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.is("xhtml");
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertFalse(boolean0);
      assertSame(document0, document1);
      
      String string0 = document0.data();
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document1.addClass("");
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document2.tagName());
      assertEquals("xhtml", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("xhtml", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements0 = document1.getElementsMatchingOwnText("");
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      String string1 = document2.text();
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document2.tagName());
      assertEquals("xhtml", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("xhtml", document2.baseUri());
      assertNotNull(string1);
      assertEquals("xhtml xhtml", string1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(string1.equals((Object)string0));
      
      document0.reparentChild(document2);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("xhtml", document1.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document2.tagName());
      assertEquals("xhtml", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("xhtml", document2.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements1 = document0.nextElementSiblings();
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      
      List<DataNode> list0 = document1.dataNodes();
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("xhtml", document1.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      Document document3 = (Document)document2.insertChildren(0, (Collection<? extends Node>) elements1);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("xhtml", document1.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document2.tagName());
      assertEquals("xhtml", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("xhtml", document2.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("xhtml", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("xhtml", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(elements1, elements0);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertFalse(elements1.equals((Object)elements0));
      
      Document document4 = (Document)document2.parent();
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("xhtml", document1.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document2.tagName());
      assertEquals("xhtml", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("xhtml", document2.baseUri());
      assertTrue(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals("xhtml", document4.baseUri());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("xhtml", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertNotNull(document4);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = new Document(" \"");
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      String string0 = document0.data();
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Document document1 = (Document)document0.addClass("<html>\n <head></head>\n <body>\n  xhtml\n </body>\n</html>");
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(" \"", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(" \"", document1.location());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsMatchingOwnText("html");
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      boolean boolean0 = document1.hasSameValue("");
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(" \"", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(" \"", document1.location());
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document0.reparentChild(document1);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(" \"", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(" \"", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements1 = document1.nextElementSiblings();
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(" \"", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(" \"", document1.location());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertSame(document0, document1);
      
      Elements elements2 = document1.getElementsMatchingOwnText(" \"");
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(" \"", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(" \"", document1.location());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotNull(elements2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.Token$Tag", "org.jsoup.parser.Token$Tag");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Tag", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Elements elements0 = element0.previousElementSiblings();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Tag", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      
      Document document1 = (Document)document0.toggleClass("%6{L%_)!ujvv");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.parser.Token$Tag", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Tag", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean1 = document0.hasAttr("org.jsoup.parser.Token$Tag");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(boolean1);
      assertSame(document0, document1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = document0.hasAttr("%6{L%_)!ujvv");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(boolean2);
      assertSame(document0, document1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Element element1 = document0.createElement("{FMYp");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element1.siblingIndex());
      assertEquals("{FMYp", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", element1.baseUri());
      assertEquals("{FMYp", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      assertSame(document0, document1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      
      Elements elements1 = document0.getElementsByAttributeStarting("html");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      
      Elements elements2 = document0.getElementsByTag("html");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(elements2.isEmpty());
      assertEquals(1, elements2.size());
      assertNotNull(elements2);
      assertSame(document0, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      
      List<Node> list0 = element1.ensureChildNodes();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element1.siblingIndex());
      assertEquals("{FMYp", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", element1.baseUri());
      assertEquals("{FMYp", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertSame(document0, document1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parse("y", "y");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("y", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("y", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = new Document("xhtml");
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      String string0 = document0.val();
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = document0.hasAttributes();
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(boolean0);
      
      Pattern pattern0 = Pattern.compile("qu_8`r7ry Y", 60);
      assertEquals(60, pattern0.flags());
      assertEquals("qu_8`r7ry Y", pattern0.toString());
      assertEquals("qu_8`r7ry Y", pattern0.pattern());
      assertNotNull(pattern0);
      
      Pattern pattern1 = Pattern.compile("", 60);
      assertEquals("", pattern1.toString());
      assertEquals(60, pattern1.flags());
      assertEquals("", pattern1.pattern());
      assertNotNull(pattern1);
      assertNotSame(pattern1, pattern0);
      assertFalse(pattern1.equals((Object)pattern0));
      
      Predicate<String> predicate0 = pattern1.asPredicate();
      assertEquals("", pattern1.toString());
      assertEquals(60, pattern1.flags());
      assertEquals("", pattern1.pattern());
      assertNotNull(predicate0);
      assertNotSame(pattern1, pattern0);
      assertFalse(pattern1.equals((Object)pattern0));
      
      Elements elements0 = document0.getElementsMatchingText(pattern1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", pattern1.toString());
      assertEquals(60, pattern1.flags());
      assertEquals("", pattern1.pattern());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      assertNotSame(pattern1, pattern0);
      assertFalse(pattern1.equals((Object)pattern0));
      
      Element element0 = document0.appendElement("p4");
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("p4", element0.nodeName());
      assertEquals("xhtml", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("p4", element0.tagName());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      Elements elements1 = element0.getElementsByIndexLessThan(39);
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("p4", element0.nodeName());
      assertEquals("xhtml", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("p4", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=-;gP5CCJWX05ur");
      assertFalse(boolean0);
      
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Document document1 = (Document)document0.prepend("xhtml");
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean1 = document0.is("xhtml");
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(boolean1);
      assertSame(document0, document1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = document0.data();
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document1.addClass("");
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("xhtml", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("xhtml", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements0 = document1.getElementsMatchingOwnText("");
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      document0.reparentChild(document2);
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertTrue(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("xhtml", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("xhtml", document2.location());
      assertEquals("xhtml", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document0.appendText("");
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("xhtml", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals("xhtml", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Document document4 = Parser.parse("%%vxjnz,s3[[lj(", "");
      assertEquals("", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals("", document4.location());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertNotNull(document4);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      
      Document document5 = (Document)document1.addClass("8w&ONh6B\"vaZy5C");
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertTrue(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("xhtml", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#document", document5.nodeName());
      assertEquals("xhtml", document5.baseUri());
      assertTrue(document5.hasParent());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertEquals(3, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("xhtml", document5.location());
      assertEquals("#root", document5.tagName());
      assertNotNull(document5);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document0);
      assertSame(document5, document3);
      assertSame(document5, document0);
      assertSame(document5, document1);
      assertSame(document5, document2);
      assertNotSame(document5, document4);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document5.equals((Object)document4));
      
      boolean boolean2 = document1.hasClass(":matches(");
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertTrue(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("xhtml", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(boolean2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document0);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Document document6 = (Document)document4.clone();
      assertEquals("", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals("", document4.location());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#document", document6.nodeName());
      assertEquals(1, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertFalse(document6.hasParent());
      assertEquals("", document6.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("#root", document6.tagName());
      assertEquals("", document6.location());
      assertFalse(document6.isBlock());
      assertNotNull(document6);
      assertNotSame(document4, document3);
      assertNotSame(document4, document5);
      assertNotSame(document4, document0);
      assertNotSame(document4, document6);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document6, document5);
      assertNotSame(document6, document4);
      assertNotSame(document6, document1);
      assertNotSame(document6, document2);
      assertNotSame(document6, document3);
      assertNotSame(document6, document0);
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document0));
      
      Node[] nodeArray0 = new Node[2];
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document7 = document4.parser(parser0);
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("#root", document7.tagName());
      assertEquals(0, document7.siblingIndex());
      assertEquals("#document", document7.nodeName());
      assertEquals(1, document7.childNodeSize());
      assertEquals("", document7.location());
      assertFalse(document7.hasParent());
      assertFalse(document7.isBlock());
      assertEquals("", document7.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertEquals("", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals("", document4.location());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertNotNull(document7);
      assertNotSame(document7, document2);
      assertNotSame(document7, document3);
      assertNotSame(document7, document1);
      assertNotSame(document7, document6);
      assertNotSame(document7, document5);
      assertNotSame(document7, document0);
      assertSame(document7, document4);
      assertNotSame(document4, document3);
      assertNotSame(document4, document5);
      assertNotSame(document4, document0);
      assertSame(document4, document7);
      assertNotSame(document4, document6);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document6));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      
      nodeArray0[0] = (Node) document7;
      nodeArray0[1] = (Node) document3;
      // Undeclared exception!
      try { 
        document0.insertChildren(1070, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parse("legend", "legend");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("legend", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("legend", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByAttribute("legend");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("legend", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("legend", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String string0 = document0.data();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("legend", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("legend", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tJMq5N77eP4}VW!H?PW", "tJMq5N77eP4}VW!H?PW");
      assertEquals("tJMq5N77eP4}VW!H?PW", document0.baseUri());
      assertEquals("tJMq5N77eP4}VW!H?PW", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Document document1 = (Document)document0.prepend("xhtml");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.is("xhtml");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(boolean0);
      assertSame(document0, document1);
      
      String string0 = document0.data();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document1.addClass("");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("xhtml", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("xhtml", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements0 = document1.getElementsMatchingOwnText("");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      document0.reparentChild(document2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("xhtml", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("xhtml", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document0.appendText("");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("xhtml", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("xhtml", document3.baseUri());
      assertTrue(document3.hasParent());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Document document4 = Parser.parse("%%vxjnz,s3[[lj(", "");
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertEquals("", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.location());
      assertEquals("#root", document4.tagName());
      assertNotNull(document4);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      
      Document document5 = (Document)document1.addClass("8w&ONh6B\"vaZy5C");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(3, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals("xhtml", document5.location());
      assertEquals("#root", document5.tagName());
      assertEquals(0, document5.siblingIndex());
      assertTrue(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("xhtml", document5.baseUri());
      assertNotNull(document5);
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document5, document2);
      assertSame(document5, document0);
      assertNotSame(document5, document4);
      assertSame(document5, document3);
      assertSame(document5, document1);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document5.equals((Object)document4));
      
      Elements elements1 = document1.getElementsByClass("d<R'i b/");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(elements1.equals((Object)elements0));
      
      Document document6 = (Document)document4.doClone(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertEquals("", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertTrue(document6.hasParent());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertEquals("", document6.location());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("", document6.baseUri());
      assertNotNull(document6);
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document5);
      assertNotSame(document4, document6);
      assertNotSame(document4, document0);
      assertNotSame(document6, document1);
      assertNotSame(document6, document5);
      assertNotSame(document6, document3);
      assertNotSame(document6, document4);
      assertNotSame(document6, document2);
      assertNotSame(document6, document0);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document0));
      
      List<TextNode> list0 = document1.textNodes();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document6);
      assertNotSame(document1, document4);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document4));
      
      Document document7 = (Document)document6.parent();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertEquals("", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertTrue(document6.hasParent());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertEquals("", document6.location());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("", document6.baseUri());
      assertEquals("xhtml", document7.location());
      assertEquals(3, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("#document", document7.nodeName());
      assertEquals("xhtml", document7.baseUri());
      assertTrue(document7.hasParent());
      assertEquals("#root", document7.tagName());
      assertFalse(document7.isBlock());
      assertEquals(0, document7.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertNotNull(document7);
      assertNotSame(document0, document4);
      assertSame(document0, document7);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document7);
      assertNotSame(document4, document5);
      assertNotSame(document4, document6);
      assertNotSame(document4, document0);
      assertNotSame(document6, document1);
      assertNotSame(document6, document5);
      assertNotSame(document6, document3);
      assertNotSame(document6, document4);
      assertNotSame(document6, document2);
      assertNotSame(document6, document0);
      assertNotSame(document6, document7);
      assertSame(document7, document2);
      assertSame(document7, document3);
      assertNotSame(document7, document4);
      assertNotSame(document7, document6);
      assertSame(document7, document1);
      assertSame(document7, document5);
      assertSame(document7, document0);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document6));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document6));
      
      Document document8 = (Document)document1.prependChild(document5);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(3, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals("xhtml", document5.location());
      assertEquals("#root", document5.tagName());
      assertEquals(0, document5.siblingIndex());
      assertTrue(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("xhtml", document5.baseUri());
      assertEquals("#root", document8.tagName());
      assertEquals(0, document8.siblingIndex());
      assertEquals("xhtml", document8.location());
      assertEquals("xhtml", document8.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertFalse(document8.isBlock());
      assertTrue(document8.hasParent());
      assertEquals("#document", document8.nodeName());
      assertEquals(3, document8.childNodeSize());
      assertFalse(document8.updateMetaCharsetElement());
      assertNotNull(document8);
      assertNotSame(document0, document4);
      assertSame(document0, document7);
      assertSame(document0, document3);
      assertSame(document0, document8);
      assertSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document8);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document6);
      assertNotSame(document1, document4);
      assertSame(document1, document7);
      assertSame(document5, document2);
      assertSame(document5, document0);
      assertNotSame(document5, document4);
      assertSame(document5, document8);
      assertSame(document5, document3);
      assertSame(document5, document7);
      assertNotSame(document5, document6);
      assertSame(document5, document1);
      assertSame(document8, document0);
      assertSame(document8, document3);
      assertNotSame(document8, document6);
      assertSame(document8, document5);
      assertNotSame(document8, document4);
      assertSame(document8, document2);
      assertSame(document8, document7);
      assertSame(document8, document1);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document6));
      assertFalse(document8.equals((Object)document6));
      assertFalse(document8.equals((Object)document4));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("y", "y");
      assertFalse(document0.hasParent());
      assertEquals("y", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("y", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      document0.setParentNode(document0);
      assertEquals("y", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("y", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      
      boolean boolean0 = document0.hasText();
      assertEquals("y", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("y", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(boolean0);
      
      Elements elements0 = document0.parents();
      assertEquals("y", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("y", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Set<String> set0 = document0.classNames();
      assertEquals("y", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("y", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      // Undeclared exception!
      document0.prependElement(";g$z6hycKRxqIMLxg{t");
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";w<fubPFzQJ$", ";w<fubPFzQJ$");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasText();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertTrue(boolean0);
      
      String string0 = document0.val();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertNotNull(string0);
      assertEquals("", string0);
      
      CDataNode cDataNode0 = new CDataNode(";w<fubPFzQJ$");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Node node0 = cDataNode0.clone();
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertFalse(node0.hasParent());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#cdata", node0.nodeName());
      assertNotNull(node0);
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertFalse(node0.equals((Object)cDataNode0));
      
      document0.setParentNode(node0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertFalse(node0.hasParent());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#cdata", node0.nodeName());
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertFalse(cDataNode0.equals((Object)node0));
      assertFalse(node0.equals((Object)cDataNode0));
      
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("df8qc", "df8qc");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("df8qc", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("df8qc", document0.location());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("2'.#q=SF[7&=lIb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 2'.#q=SF[7&=lIb
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = new Document(" \"");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" \"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      List<TextNode> list0 = document0.textNodes();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" \"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Document document1 = Parser.parseBodyFragmentRelaxed(" \"", "}e\"xO9C7)~)$");
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      String string0 = document1.wholeText();
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertNotNull(string0);
      assertEquals(" \"", string0);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document1.doClone(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" \"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("}e\"xO9C7)~)$", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("}e\"xO9C7)~)$", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      document1.setParentNode(document2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" \"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("}e\"xO9C7)~)$", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("}e\"xO9C7)~)$", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document3 = (Document)document1.traverse(nodeVisitor0);
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("}e\"xO9C7)~)$", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("}e\"xO9C7)~)$", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertNotNull(document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Document document4 = Parser.parse("}e\"xO9C7)~)$", "jzJ[lDy=P'4!");
      assertEquals("jzJ[lDy=P'4!", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals("jzJ[lDy=P'4!", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertNotNull(document4);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      
      Elements elements0 = document4.siblingElements();
      assertEquals("jzJ[lDy=P'4!", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals("jzJ[lDy=P'4!", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      
      String string1 = document2.baseUri();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" \"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("}e\"xO9C7)~)$", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("}e\"xO9C7)~)$", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(string1);
      assertEquals("}e\"xO9C7)~)$", string1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document2, document0);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document0));
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        document4.getElementsMatchingText("}e\"xO9C7)~)$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: }e\"xO9C7)~)$
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Document document1 = (Document)document0.prepend("xhtml");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("xhtml", document1.location());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.is("xhtml");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(boolean0);
      assertSame(document0, document1);
      
      String string0 = document0.data();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document1.addClass("");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("xhtml", document1.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("xhtml", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("xhtml", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements0 = document1.getElementsMatchingOwnText("");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("xhtml", document1.location());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      document0.reparentChild(document2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("xhtml", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("xhtml", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document0.appendText("");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("xhtml", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("xhtml", document3.baseUri());
      assertTrue(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      Document document4 = (Document)document2.addClass("xhtml");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document2.tagName());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("xhtml", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("xhtml", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("xhtml", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertTrue(document4.hasParent());
      assertEquals(3, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("xhtml", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      
      String string1 = document2.baseUri();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document2.tagName());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("xhtml", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("xhtml", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(string1);
      assertEquals("xhtml", string1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertFalse(string1.equals((Object)string0));
      
      Document document5 = (Document)document2.addClass("");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document2.tagName());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("xhtml", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("xhtml", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals("xhtml", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals(3, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("xhtml", document5.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertNotNull(document5);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document0);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document5, document0);
      assertSame(document5, document1);
      assertSame(document5, document2);
      assertSame(document5, document4);
      assertSame(document5, document3);
      
      Elements elements1 = document2.getElementsByClass("xhtml");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document2.tagName());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("xhtml", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("xhtml", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertNotNull(elements1);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document0);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("d`f8qc", "d`f8qc");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("d`f8qc", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("d`f8qc", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("d`f8qc");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("d`f8qc", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("d`f8qc", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("d`f8qc", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("d`f8qc", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.addClass("d`f8qc");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("d`f8qc", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("d`f8qc", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("d`f8qc", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("d`f8qc", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("d`f8qc", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("d`f8qc", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean0 = document1.hasClass("d`f8qc");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("d`f8qc", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("d`f8qc", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("d`f8qc", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("d`f8qc", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "X+c6";
      Document document0 = Parser.parseBodyFragment("X+c6", "X+c6");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("X+c6", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("X+c6", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("X+c6", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("X+c6", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("X+c6", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("X+c6", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document1.shallowClone();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("X+c6", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("X+c6", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("X+c6", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("X+c6", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("#root", element0.nodeName());
      assertEquals("X+c6", element0.baseUri());
      assertNotNull(element0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = element0.text();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("X+c6", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("X+c6", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("X+c6", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("X+c6", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("#root", element0.nodeName());
      assertEquals("X+c6", element0.baseUri());
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(string1.equals((Object)string0));
      
      OutputStream outputStream0 = null;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      assertNotNull(mockPrintStream0);
      
      boolean boolean0 = false;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      assertNotNull(mockPrintStream1);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      List<Locale.LanguageRange> list0 = null;
      // Undeclared exception!
      try { 
        Locale.filter((List<Locale.LanguageRange>) null, (Collection<Locale>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parse("tJq5N77eP4}VW!H?PI", "tJq5N77eP4}VW!H?PI");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Element element0 = document0.nextElementSibling();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNull(element0);
      
      Document document1 = (Document)document0.doClone((Node) null);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("tJq5N77eP4}VW!H?PI", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tJq5N77eP4}VW!H?PI", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      String string0 = document1.data();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("tJq5N77eP4}VW!H?PI", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tJq5N77eP4}VW!H?PI", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertNotNull(string0);
      assertEquals("", string0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      
      Element element1 = document0.body();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertEquals("tJq5N77eP4}VW!H?PI", element1.baseUri());
      assertTrue(element1.isBlock());
      assertNotNull(element1);
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      
      Element element2 = element1.addClass("");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertEquals("tJq5N77eP4}VW!H?PI", element1.baseUri());
      assertTrue(element1.isBlock());
      assertTrue(element2.isBlock());
      assertEquals(1, element2.childNodeSize());
      assertEquals("body", element2.tagName());
      assertEquals("body", element2.nodeName());
      assertEquals("tJq5N77eP4}VW!H?PI", element2.baseUri());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertNotNull(element2);
      assertNotSame(document0, document1);
      assertSame(element1, element2);
      assertSame(element2, element1);
      assertFalse(document0.equals((Object)document1));
      
      Document document2 = Parser.parse(">~Bnh", ">~Bnh");
      assertEquals(">~Bnh", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(">~Bnh", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      Elements elements0 = document2.getElementsMatchingText("");
      assertEquals(">~Bnh", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(">~Bnh", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertNotNull(elements0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      String string1 = document1.wholeText();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("tJq5N77eP4}VW!H?PI", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tJq5N77eP4}VW!H?PI", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertNotNull(string1);
      assertEquals("tJq5N77eP4}VW!H?PI", string1);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parse("y", "y");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("y", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("y", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      document0.setParentNode(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("y", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("y", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements0 = document0.getElementsMatchingText("y");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("y", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("y", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Document document1 = (Document)document0.prepend("xhtml");
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.is("xhtml");
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(boolean0);
      assertSame(document0, document1);
      
      String string0 = document0.data();
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document1.addClass("");
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("xhtml", document2.location());
      assertEquals("xhtml", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements0 = document1.getElementsMatchingOwnText("");
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      document0.reparentChild(document2);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("xhtml", document2.location());
      assertEquals("xhtml", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document0.appendText("");
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("xhtml", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("xhtml", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      
      Document document4 = Parser.parse("%%vxjnz,s3[[lj(", "");
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals("", document4.location());
      assertNotNull(document4);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      
      Elements elements1 = document0.getElementsMatchingText("c0'eg81^");
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document4));
      assertFalse(elements1.equals((Object)elements0));
      
      String string1 = Node.EmptyString;
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      // Undeclared exception!
      document2.html();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parse("/>", "/>");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("/>", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("/>", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Document document1 = (Document)document0.insertChildren(1, (Collection<? extends Node>) linkedList0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("/>", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("/>", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, linkedList0.size());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("/>", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("/>", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document0.setParentNode(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/>", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("/>", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document1);
      
      Elements elements0 = document0.getElementsMatchingText("/>");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/>", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("/>", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = Parser.parse("xhtml", "87m4");
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("87m4", document1.location());
      assertEquals("87m4", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Element element0 = document1.body();
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("87m4", document1.location());
      assertEquals("87m4", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("87m4", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      Elements elements0 = document0.nextElementSiblings();
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      
      List<DataNode> list0 = document1.dataNodes();
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("87m4", document1.location());
      assertEquals("87m4", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document1.insertChildren(0, (Collection<? extends Node>) list0);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("87m4", document1.location());
      assertEquals("87m4", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("87m4", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("87m4", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Document.createShell("UwBK-8T/H@H");
      assertEquals("UwBK-8T/H@H", document0.location());
      assertEquals("UwBK-8T/H@H", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("AfterAfterBody");
      assertEquals("UwBK-8T/H@H", document0.location());
      assertEquals("UwBK-8T/H@H", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("UwBK-8T/H@H", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("UwBK-8T/H@H", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document0.normalise();
      assertEquals("UwBK-8T/H@H", document0.location());
      assertEquals("UwBK-8T/H@H", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("UwBK-8T/H@H", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("UwBK-8T/H@H", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements0 = document2.getElementsByAttributeValueEnding("br", "UwBK-8T/H@H");
      assertEquals("UwBK-8T/H@H", document0.location());
      assertEquals("UwBK-8T/H@H", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("UwBK-8T/H@H", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("UwBK-8T/H@H", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document2.addClass("Object must not be null");
      assertEquals("UwBK-8T/H@H", document0.location());
      assertEquals("UwBK-8T/H@H", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("UwBK-8T/H@H", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("UwBK-8T/H@H", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("UwBK-8T/H@H", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("UwBK-8T/H@H", document3.location());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      Elements elements1 = document2.getElementsByClass("org.jooup.parl_!.TokenQueue");
      assertEquals("UwBK-8T/H@H", document0.location());
      assertEquals("UwBK-8T/H@H", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("UwBK-8T/H@H", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("UwBK-8T/H@H", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = new Document(" \"");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.location());
      assertNotNull(document0);
      
      List<TextNode> list0 = document0.textNodes();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.location());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Document document1 = Parser.parseBodyFragmentRelaxed(" \"", "}e\"xO9C7)~)$");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      String string0 = document1.wholeText();
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(string0);
      assertEquals(" \"", string0);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document1.doClone(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("}e\"xO9C7)~)$", document2.baseUri());
      assertEquals("}e\"xO9C7)~)$", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      document1.setParentNode(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.location());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("}e\"xO9C7)~)$", document2.baseUri());
      assertEquals("}e\"xO9C7)~)$", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document3 = (Document)document1.traverse(nodeVisitor0);
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("}e\"xO9C7)~)$", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("}e\"xO9C7)~)$", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertNotNull(document3);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      Document document4 = Parser.parse("}e\"xO9C7)~)$", "jzJ[lDy=P'4!");
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("jzJ[lDy=P'4!", document4.baseUri());
      assertEquals("jzJ[lDy=P'4!", document4.location());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertNotNull(document4);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      
      Elements elements0 = document4.siblingElements();
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("jzJ[lDy=P'4!", document4.baseUri());
      assertEquals("jzJ[lDy=P'4!", document4.location());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      
      String string1 = document2.baseUri();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.location());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("}e\"xO9C7)~)$", document2.baseUri());
      assertEquals("}e\"xO9C7)~)$", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(string1);
      assertEquals("}e\"xO9C7)~)$", string1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      
      Document document5 = (Document)document4.addClass("8w&ONh6B\"vaZy5C");
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("jzJ[lDy=P'4!", document4.baseUri());
      assertEquals("jzJ[lDy=P'4!", document4.location());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals("jzJ[lDy=P'4!", document5.location());
      assertEquals("jzJ[lDy=P'4!", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertNotNull(document5);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertSame(document4, document5);
      assertNotSame(document4, document1);
      assertNotSame(document5, document2);
      assertNotSame(document5, document3);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertSame(document5, document4);
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      
      Elements elements1 = document4.getElementsByClass("}e\"xO9C7)~)$");
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("jzJ[lDy=P'4!", document4.baseUri());
      assertEquals("jzJ[lDy=P'4!", document4.location());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertSame(document4, document5);
      assertNotSame(document4, document1);
      assertNotSame(elements1, elements0);
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtmR", "xhtmR");
      assertEquals("xhtmR", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xhtmR", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("xhtmR");
      assertEquals("xhtmR", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xhtmR", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("xhtmR", document1.baseUri());
      assertEquals("xhtmR", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByClass("xhtmR");
      assertEquals("xhtmR", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xhtmR", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = new Document(" \"");
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      document0.doSetBaseUri(" \"");
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = Parser.parseBodyFragmentRelaxed(" \"", "}e\"xO9C7)~)$");
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      String string0 = document1.wholeText();
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertNotNull(string0);
      assertEquals(" \"", string0);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document1.doClone(document0);
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("}e\"xO9C7)~)$", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("}e\"xO9C7)~)$", document2.location());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      document0.setParentNode(document1);
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document3 = (Document)document1.traverse(nodeVisitor0);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("}e\"xO9C7)~)$", document3.location());
      assertEquals("}e\"xO9C7)~)$", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      String string1 = document0.cssSelector();
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string1);
      assertEquals("#root", string1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(string1.equals((Object)string0));
      
      Element element0 = document2.lastElementSibling();
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("}e\"xO9C7)~)$", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("}e\"xO9C7)~)$", document2.location());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertNull(element0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      
      document0.setParentNode(document1);
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      
      Elements elements0 = document3.parents();
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("}e\"xO9C7)~)$", document3.location());
      assertEquals("}e\"xO9C7)~)$", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      Document document4 = (Document)document2.parent();
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("}e\"xO9C7)~)$", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("}e\"xO9C7)~)$", document2.location());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertTrue(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals(" \"", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.childNodeSize());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals(" \"", document4.baseUri());
      assertNotNull(document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      
      Elements elements1 = document4.previousElementSiblings();
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("}e\"xO9C7)~)$", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("}e\"xO9C7)~)$", document2.location());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertTrue(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals(" \"", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.childNodeSize());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals(" \"", document4.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtmR", "xhtmR");
      assertEquals("xhtmR", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtmR", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("org.jsoup.select.Evaluator$AttributeKeyPair");
      assertEquals("xhtmR", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtmR", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("xhtmR", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("xhtmR", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.toggleClass("xhtmR");
      assertEquals("xhtmR", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtmR", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtmR", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("xhtmR", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document1.appendTo(document0);
      assertEquals("xhtmR", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("xhtmR", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("xhtmR", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("xhtmR", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("xhtmR", document3.location());
      assertEquals("xhtmR", document3.baseUri());
      assertTrue(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      // Undeclared exception!
      document2.before("org.jsoup.select.Evaluator$AttributeKeyPair");
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Tag tag0 = Tag.valueOf("m'");
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals("m'", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("m'", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "oVq", attributes0);
      assertEquals(0, attributes0.size());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals("m'", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("m'", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("oVq", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("m'", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("m'", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertNotNull(pseudoTextElement0);
      
      Elements elements0 = pseudoTextElement0.getElementsByIndexGreaterThan(8482);
      assertEquals(0, attributes0.size());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals("m'", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("m'", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("oVq", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("m'", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("m'", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      FormElement formElement0 = new FormElement(tag0, "e'FG-Z6aU", attributes0);
      assertEquals(0, attributes0.size());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals("m'", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("m'", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(formElement0.isBlock());
      assertEquals("m'", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("e'FG-Z6aU", formElement0.baseUri());
      assertEquals("m'", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertNotNull(formElement0);
      
      Element element0 = formElement0.attr("m'", "$uo7<");
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals("m'", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("m'", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(formElement0.isBlock());
      assertEquals("m'", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("e'FG-Z6aU", formElement0.baseUri());
      assertEquals("m'", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("e'FG-Z6aU", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("m'", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("m'", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      assertSame(formElement0, element0);
      assertSame(element0, formElement0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" > ", " > ");
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      List<TextNode> list0 = document0.textNodes();
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Element element0 = new Element(" > ");
      assertEquals(">", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">", element0.nodeName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      List<TextNode> list1 = element0.textNodes();
      assertEquals(">", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">", element0.nodeName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      
      Document document1 = (Document)document0.appendTo(document0);
      assertEquals(" > ", document0.location());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(" > ", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.siblingIndex());
      assertEquals(" > ", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      StringWriter stringWriter0 = new StringWriter(1562);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "8SUGe5DZ6");
      assertEquals("8SUGe5DZ6", stringWriter0.toString());
      assertEquals("8SUGe5DZ6", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      // Undeclared exception!
      document0.html(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-74);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)84, (byte) (-74)}, byteArray0);
      
      Tag tag0 = Tag.valueOf("ScriptDataLessthanSign");
      assertFalse(tag0.isData());
      assertEquals("ScriptDataLessthanSign", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("ScriptDataLessthanSign", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("", false);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.put("x=]oSI,", "");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "ScriptDataLessthanSign", attributes2);
      assertFalse(tag0.isData());
      assertEquals("ScriptDataLessthanSign", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("ScriptDataLessthanSign", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("ScriptDataLessthanSign", formElement0.tagName());
      assertEquals("ScriptDataLessthanSign", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("ScriptDataLessthanSign", formElement0.baseUri());
      assertNotNull(formElement0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors(1550);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      String string0 = "j<\\~m^";
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Element element0 = new Element(tag0, "x=]oSI,");
      assertFalse(tag0.isData());
      assertEquals("ScriptDataLessthanSign", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("ScriptDataLessthanSign", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(element0.isBlock());
      assertEquals("x=]oSI,", element0.baseUri());
      assertEquals("ScriptDataLessthanSign", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("ScriptDataLessthanSign", element0.tagName());
      assertNotNull(element0);
      
      formElement0.setParentNode(element0);
      assertFalse(tag0.isData());
      assertEquals("ScriptDataLessthanSign", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("ScriptDataLessthanSign", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertTrue(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("ScriptDataLessthanSign", formElement0.tagName());
      assertEquals("ScriptDataLessthanSign", formElement0.nodeName());
      assertEquals("ScriptDataLessthanSign", formElement0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("x=]oSI,", element0.baseUri());
      assertEquals("ScriptDataLessthanSign", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("ScriptDataLessthanSign", element0.tagName());
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      
      Document document0 = parser1.parseInput("j<~m^", "o*/_)4y2LEe&U*=");
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("o*/_)4y2LEe&U*=", document0.location());
      assertEquals("o*/_)4y2LEe&U*=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document1 = document0.clone();
      assertEquals("#root", document1.tagName());
      assertEquals("o*/_)4y2LEe&U*=", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("o*/_)4y2LEe&U*=", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("o*/_)4y2LEe&U*=", document0.location());
      assertEquals("o*/_)4y2LEe&U*=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document0, document1);
      assertFalse(document1.equals((Object)document0));
      
      FormElement formElement1 = formElement0.addElement(document1);
      assertEquals("#root", document1.tagName());
      assertEquals("o*/_)4y2LEe&U*=", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("o*/_)4y2LEe&U*=", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ScriptDataLessthanSign", formElement1.tagName());
      assertTrue(formElement1.hasParent());
      assertEquals("ScriptDataLessthanSign", formElement1.baseUri());
      assertEquals("ScriptDataLessthanSign", formElement1.nodeName());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(tag0.isData());
      assertEquals("ScriptDataLessthanSign", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("ScriptDataLessthanSign", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertTrue(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("ScriptDataLessthanSign", formElement0.tagName());
      assertEquals("ScriptDataLessthanSign", formElement0.nodeName());
      assertEquals("ScriptDataLessthanSign", formElement0.baseUri());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("o*/_)4y2LEe&U*=", document0.location());
      assertEquals("o*/_)4y2LEe&U*=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(formElement1);
      assertNotSame(document1, document0);
      assertSame(formElement1, formElement0);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document0, document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document0.equals((Object)document1));
      
      Element element1 = formElement1.empty();
      assertEquals("#root", document1.tagName());
      assertEquals("o*/_)4y2LEe&U*=", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("o*/_)4y2LEe&U*=", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("ScriptDataLessthanSign", formElement1.tagName());
      assertTrue(formElement1.hasParent());
      assertEquals("ScriptDataLessthanSign", formElement1.baseUri());
      assertEquals("ScriptDataLessthanSign", formElement1.nodeName());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("ScriptDataLessthanSign", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("ScriptDataLessthanSign", element1.nodeName());
      assertEquals("ScriptDataLessthanSign", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertFalse(tag0.isData());
      assertEquals("ScriptDataLessthanSign", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("ScriptDataLessthanSign", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertTrue(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("ScriptDataLessthanSign", formElement0.tagName());
      assertEquals("ScriptDataLessthanSign", formElement0.nodeName());
      assertEquals("ScriptDataLessthanSign", formElement0.baseUri());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("o*/_)4y2LEe&U*=", document0.location());
      assertEquals("o*/_)4y2LEe&U*=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(element1);
      assertNotSame(document1, document0);
      assertSame(formElement1, element1);
      assertSame(formElement1, formElement0);
      assertSame(element1, formElement1);
      assertSame(element1, formElement0);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(formElement0, element1);
      assertSame(formElement0, formElement1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document0, document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document0.equals((Object)document1));
      
      // Undeclared exception!
      try { 
        document0.before("<html>\n <head></head>\n <body>\n  xhtml\n </body>\n</html>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Document document1 = (Document)document0.prepend("xhtml");
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("xhtml", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = document0.data();
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document1.addClass("");
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("xhtml", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("xhtml", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("xhtml", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document1.prepend("");
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("xhtml", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("xhtml", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("xhtml", document3.baseUri());
      assertFalse(document3.hasParent());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Element element0 = document1.selectFirst("#root");
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("xhtml", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNull(element0);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      
      String string1 = "aJn=VC!T";
      String string2 = "0yL\"M1zjzIq1!R\"";
      // Undeclared exception!
      try { 
        document1.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "org.jsoup.nodes.DocumentType");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.DocumentType", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.DocumentType", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      String string0 = "id";
      Element element0 = document0.appendElement("xhtml");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.DocumentType", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.DocumentType", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.DocumentType", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("xhtml", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("xhtml", element0.tagName());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.Token$Tag", "org.jsoup.parser.Token$Tag");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Elements elements0 = element0.previousElementSiblings();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      
      String string0 = document0.ownText();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Document document1 = (Document)document0.text("");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Tag", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element1 = document0.body();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("org.jsoup.parser.Token$Tag", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertNotNull(element1);
      assertSame(document0, document1);
      assertSame(element1, element0);
      
      Element element2 = element1.lastElementSibling();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("org.jsoup.parser.Token$Tag", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.tagName());
      assertEquals("org.jsoup.parser.Token$Tag", element2.baseUri());
      assertEquals("body", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertNotNull(element2);
      assertSame(document0, document1);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertSame(element2, element0);
      assertSame(element2, element1);
      
      Elements elements1 = document0.nextElementSiblings();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      
      List<DataNode> list0 = element1.dataNodes();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("org.jsoup.parser.Token$Tag", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertSame(document0, document1);
      assertSame(element1, element2);
      assertSame(element1, element0);
      
      String string1 = document0.tagName();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string1);
      assertEquals("#root", string1);
      assertSame(document0, document1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("y", "y");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("y", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("y", document0.baseUri());
      assertNotNull(document0);
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      document0.setParentNode(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("y", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("y", document0.baseUri());
      
      Elements elements0 = document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("y", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("y", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element0 = document0.lastElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("y", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("y", document0.baseUri());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Document document1 = (Document)document0.prepend("xhtml");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.is("xhtml");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(boolean0);
      assertSame(document0, document1);
      
      String string0 = document0.data();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document1.addClass("");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("xhtml", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("xhtml", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements0 = document1.getElementsMatchingOwnText("");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      document0.reparentChild(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("xhtml", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("xhtml", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Element element0 = document1.getElementById("xhtml");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertNull(element0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      Document document3 = (Document)document1.text("9");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("xhtml", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("xhtml", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      Element element1 = document1.lastElementSibling();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertNull(element1);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      
      document3.setParentNode(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("xhtml", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("xhtml", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      Elements elements1 = document2.parents();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("xhtml", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("xhtml", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      
      Document document4 = (Document)document0.parent();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("xhtml", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("xhtml", document4.baseUri());
      assertNotNull(document4);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      
      Elements elements2 = document4.previousElementSiblings();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("xhtml", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("xhtml", document4.baseUri());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotNull(elements2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" > ", " > ");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" > ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Document document1 = (Document)document0.append(" > ");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" > ", document0.location());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(" > ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals(" > ", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.toggleClass(" > ");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" > ", document0.location());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(" > ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals(" > ", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(" > ", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(" > ", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      // Undeclared exception!
      try { 
        document1.html((CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = new Document("zQpZ19}F{Fx=CI)");
      assertEquals("zQpZ19}F{Fx=CI)", document0.location());
      assertEquals("zQpZ19}F{Fx=CI)", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      document0.doSetBaseUri("zQpZ19}F{Fx=CI)");
      assertEquals("zQpZ19}F{Fx=CI)", document0.location());
      assertEquals("zQpZ19}F{Fx=CI)", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("zQpZ19}F{Fx=CI)", "}e\"xO9C7)~)$");
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      String string0 = document1.wholeText();
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(string0);
      assertEquals("zQpZ19}F{Fx=CI)", string0);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document1.doClone(document0);
      assertEquals("zQpZ19}F{Fx=CI)", document0.location());
      assertEquals("zQpZ19}F{Fx=CI)", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("}e\"xO9C7)~)$", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("}e\"xO9C7)~)$", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      document0.setParentNode(document1);
      assertEquals("zQpZ19}F{Fx=CI)", document0.location());
      assertEquals("zQpZ19}F{Fx=CI)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document3 = (Document)document1.traverse(nodeVisitor0);
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("}e\"xO9C7)~)$", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("}e\"xO9C7)~)$", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      String string1 = document0.cssSelector();
      assertEquals("zQpZ19}F{Fx=CI)", document0.location());
      assertEquals("zQpZ19}F{Fx=CI)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertNotNull(string1);
      assertEquals("#root", string1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = document1.ownText();
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Document document4 = (Document)document2.addClass("p4");
      assertEquals("zQpZ19}F{Fx=CI)", document0.location());
      assertEquals("zQpZ19}F{Fx=CI)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("}e\"xO9C7)~)$", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("}e\"xO9C7)~)$", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertEquals("}e\"xO9C7)~)$", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("}e\"xO9C7)~)$", document4.location());
      assertFalse(document4.isBlock());
      assertNotNull(document4);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      
      Elements elements0 = document0.nextElementSiblings();
      assertEquals("zQpZ19}F{Fx=CI)", document0.location());
      assertEquals("zQpZ19}F{Fx=CI)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      
      Document document5 = (Document)document4.prependText("p4");
      assertEquals("zQpZ19}F{Fx=CI)", document0.location());
      assertEquals("zQpZ19}F{Fx=CI)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("}e\"xO9C7)~)$", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("}e\"xO9C7)~)$", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertEquals("}e\"xO9C7)~)$", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("}e\"xO9C7)~)$", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("}e\"xO9C7)~)$", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(0, document5.siblingIndex());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#root", document5.tagName());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals("}e\"xO9C7)~)$", document5.baseUri());
      assertNotNull(document5);
      assertNotSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document5);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document4, document1);
      assertSame(document4, document5);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document0);
      assertSame(document5, document4);
      assertNotSame(document5, document3);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
      
      String string3 = document3.baseUri();
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("}e\"xO9C7)~)$", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("}e\"xO9C7)~)$", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(string3);
      assertEquals("}e\"xO9C7)~)$", string3);
      assertNotSame(document1, document5);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document5);
      assertNotSame(document3, document0);
      assertNotSame(document3, document4);
      assertNotSame(document3, document2);
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "j%kcl:");
      assertFalse(boolean0);
      
      Element element0 = new Element("c0'eg81^");
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("c0'eg81^", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("c0'eg81^", element0.tagName());
      assertNotNull(element0);
      
      Evaluator.Tag evaluator_Tag0 = new Evaluator.Tag("c0'eg81^");
      assertNotNull(evaluator_Tag0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = element0.is((Evaluator) evaluator_Tag0);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("c0'eg81^", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("c0'eg81^", element0.tagName());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string0 = element0.tagName();
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("c0'eg81^", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("c0'eg81^", element0.tagName());
      assertNotNull(string0);
      assertEquals("c0'eg81^", string0);
      
      Element element1 = element0.shallowClone();
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("c0'eg81^", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("c0'eg81^", element0.tagName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals("c0'eg81^", element1.tagName());
      assertEquals("c0'eg81^", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      
      boolean boolean3 = element1.hasClass("c0'eg81^");
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("c0'eg81^", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("c0'eg81^", element0.tagName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals("c0'eg81^", element1.tagName());
      assertEquals("c0'eg81^", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertFalse(boolean3);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      Element element2 = element1.attr("c0'eg81^", "c0'eg81^");
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("c0'eg81^", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("c0'eg81^", element0.tagName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals("c0'eg81^", element1.tagName());
      assertEquals("c0'eg81^", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("c0'eg81^", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals("c0'eg81^", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      assertNotNull(element2);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertSame(element2, element1);
      assertNotSame(element2, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      
      String string1 = element2.data();
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("c0'eg81^", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("c0'eg81^", element0.tagName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals("c0'eg81^", element1.tagName());
      assertEquals("c0'eg81^", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("c0'eg81^", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals("c0'eg81^", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertSame(element2, element1);
      assertNotSame(element2, element0);
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        element1.after("c0'eg81^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasText();
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(boolean0);
      
      Elements elements0 = document0.getElementsContainingOwnText("xhtml");
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      // Undeclared exception!
      try { 
        document0.html((OutputStreamWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Document.createShell("xht4R");
      assertEquals("xht4R", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xht4R", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("xht4R", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xht4R", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("xht4R", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Element element1 = element0.appendTo(document0);
      assertEquals("xht4R", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xht4R", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("xht4R", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertEquals("xht4R", element1.baseUri());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" > ", " > ");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      List<TextNode> list0 = document0.textNodes();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Document document1 = (Document)document0.append(" > ");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(" > ", document1.location());
      assertEquals(" > ", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = new Element(" > ");
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(">", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.nodeName());
      assertNotNull(element0);
      
      List<TextNode> list1 = element0.textNodes();
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(">", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.nodeName());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      
      Element element1 = element0.text(" > ");
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(">", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.nodeName());
      assertFalse(element1.hasParent());
      assertEquals(">", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals(">", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Document document2 = (Document)document1.appendTo(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(" > ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(" > ", document1.location());
      assertEquals(" > ", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(">", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.nodeName());
      assertEquals(2, element0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(" > ", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(" > ", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(element0, element1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      StringWriter stringWriter0 = new StringWriter(46);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " > ");
      assertEquals(" > ", stringWriter0.toString());
      assertEquals(" > ", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      StringWriter stringWriter2 = document1.html(stringWriter1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(" > ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(" > ", document1.location());
      assertEquals(" > ", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(" > \n<html>\n <head></head>\n <body>\n   &gt; \n </body>\n</html> &gt; ", stringWriter0.toString());
      assertEquals(" > \n<html>\n <head></head>\n <body>\n   &gt; \n </body>\n</html> &gt; ", stringWriter1.toString());
      assertEquals(" > \n<html>\n <head></head>\n <body>\n   &gt; \n </body>\n</html> &gt; ", stringWriter2.toString());
      assertNotNull(stringWriter2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" > ", " > ");
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      List<TextNode> list0 = document0.textNodes();
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      DataNode dataNode0 = new DataNode(" > ", "CN[UP]8w_OLh9");
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertNotNull(dataNode0);
      
      document0.reparentChild(dataNode0);
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertTrue(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      
      Document document1 = (Document)document0.append(" > ");
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(" > ", document1.location());
      assertEquals(" > ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.toggleClass(" > ");
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(" > ", document1.location());
      assertEquals(" > ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(" > ", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertEquals(" > ", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Map<String, String> map0 = document1.dataset();
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(" > ", document1.location());
      assertEquals(" > ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      Elements elements0 = document2.getElementsContainingText(" > ");
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(" > ", document1.location());
      assertEquals(" > ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(" > ", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertEquals(" > ", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" > ", " > ");
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Elements elements0 = document0.siblingElements();
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Elements elements1 = document0.getElementsByAttributeValueMatching(" > ", " > ");
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      
      Document document1 = (Document)document0.append(" > ");
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(" > ", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(" > ", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.text();
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertNotNull(string0);
      assertEquals("> >", string0);
      assertSame(document0, document1);
      
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertSame(document0, document1);
      
      String string1 = document0.wholeText();
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertNotNull(string1);
      assertEquals(" >  > ", string1);
      assertSame(document0, document1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = new Document(" \"");
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      document0.doSetBaseUri(" \"");
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document0.location());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.normalise();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(" \"", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(" \"", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document1.wholeText();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(" \"", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(" \"", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.doClone(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(" \"", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(" \"", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(" \"", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(" \"", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      Elements elements0 = document1.getElementsByAttributeValueEnding("th", " \"");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(" \"", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(" \"", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      
      Element element0 = document2.firstElementSibling();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(" \"", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(" \"", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(" \"", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(" \"", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertNull(element0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1718);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1718, document_OutputSettings0.indentAmount());
      assertEquals(1718, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document document3 = (Document)document2.append("th");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(" \"", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(" \"", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(" \"", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals(" \"", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(" \"", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(" \"", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      
      Document document4 = Parser.parseBodyFragment("a", "YM+>L.x |/");
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("YM+>L.x |/", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals("YM+>L.x |/", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertNotNull(document4);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      
      Element element1 = document4.createElement("a");
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("YM+>L.x |/", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals("YM+>L.x |/", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("YM+>L.x |/", element1.baseUri());
      assertEquals("a", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("a", element1.tagName());
      assertNotNull(element1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      
      Element element2 = document4.head();
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("YM+>L.x |/", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals("YM+>L.x |/", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("YM+>L.x |/", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertNotNull(element2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(element2, element1);
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(element2.equals((Object)element1));
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document5 = parser0.parseInput("org.jsoup.select.QueryParser", "Tag name must not be empty.");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals("Tag name must not be empty.", document5.location());
      assertFalse(document5.isBlock());
      assertEquals("Tag name must not be empty.", document5.baseUri());
      assertNotNull(document5);
      assertNotSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document3);
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      
      Document document6 = (Document)document5.toggleClass("7gf;|ZqN");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals("Tag name must not be empty.", document5.location());
      assertFalse(document5.isBlock());
      assertEquals("Tag name must not be empty.", document5.baseUri());
      assertEquals("#root", document6.tagName());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#document", document6.nodeName());
      assertEquals("Tag name must not be empty.", document6.location());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(1, document6.childNodeSize());
      assertFalse(document6.hasParent());
      assertFalse(document6.isBlock());
      assertEquals("Tag name must not be empty.", document6.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertNotNull(document6);
      assertNotSame(document5, document4);
      assertNotSame(document5, document1);
      assertSame(document5, document6);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document3);
      assertNotSame(document6, document4);
      assertSame(document6, document5);
      assertNotSame(document6, document1);
      assertNotSame(document6, document2);
      assertNotSame(document6, document0);
      assertNotSame(document6, document3);
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document3));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Patte6n syntax errBr: ", "Patte6n syntax errBr: ");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("Patte6n syntax errBr: ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Patte6n syntax errBr: ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = Document.createShell("plaintext");
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("plaintext", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("plaintext", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parse("xht4R", "xht4R");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xht4R", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xht4R", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      String string0 = "Object must not be null";
      Document document1 = (Document)document0.addClass("Object must not be null");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xht4R", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xht4R", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("xht4R", document1.location());
      assertEquals("xht4R", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("xht4R", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = new Document("  ");
      assertFalse(document0.hasParent());
      assertEquals("  ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("  ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = null;
      try {
        element0 = new Element("  ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = new Document(" \"");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      document0.doSetBaseUri(" \"");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      
      Document document1 = document0.normalise();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(" \"", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(" \"", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document1.wholeText();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(" \"", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(" \"", document1.baseUri());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.doClone(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(" \"", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(" \"", document1.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(" \"", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(" \"", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      Elements elements0 = document1.getElementsByAttributeValueEnding("th", " \"");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(" \"", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(" \"", document1.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      
      Element element0 = document2.firstElementSibling();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(" \"", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(" \"", document1.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(" \"", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(" \"", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNull(element0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1718);
      assertEquals(1718, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1718, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.outline(true);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertNotNull(document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      
      Document document3 = document1.outputSettings(document_OutputSettings1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(" \"", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(" \"", document1.baseUri());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(" \"", document3.location());
      assertEquals(" \"", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertNotNull(document3);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      
      Document document4 = (Document)document1.prepend(" \"");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(" \"", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(" \"", document1.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(2, document4.childNodeSize());
      assertEquals(" \"", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.hasParent());
      assertEquals(" \"", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(document4);
      assertNotSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertSame(document4, document1);
      assertNotSame(document4, document2);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      
      int int0 = document1.childNodeSize();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(" \"", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(" \"", document1.baseUri());
      assertEquals(2, int0);
      assertNotSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      
      Document document5 = (Document)document1.attr("truespeed", " \"");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(" \"", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(" \"", document1.baseUri());
      assertEquals(" \"", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(" \"", document5.location());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertNotNull(document5);
      assertNotSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document5, document3);
      assertSame(document5, document0);
      assertNotSame(document5, document2);
      assertSame(document5, document1);
      assertSame(document5, document4);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document5.equals((Object)document2));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "");
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.nextElementSibling();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNull(element0);
      
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Element element1 = document0.body();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertNotNull(element1);
      
      Document document1 = document0.parser((Parser) null);
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.nextElementSiblings();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element2 = new Element("textarea");
      assertEquals("textarea", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals("textarea", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertNotNull(element2);
      assertFalse(element2.equals((Object)element1));
      
      Node[] nodeArray0 = element1.childNodesAsArray();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertNotNull(nodeArray0);
      assertSame(document0, document1);
      assertNotSame(element1, element2);
      assertFalse(element1.equals((Object)element2));
      assertEquals(1, nodeArray0.length);
      
      List<TextNode> list0 = element1.textNodes();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertSame(document0, document1);
      assertNotSame(element1, element2);
      assertFalse(element1.equals((Object)element2));
      
      String string0 = element2.className();
      assertEquals("textarea", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals("textarea", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertNotNull(string0);
      assertEquals("", string0);
      assertNotSame(element2, element1);
      assertFalse(element2.equals((Object)element1));
      
      boolean boolean0 = document0.isBlock();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(boolean0);
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.pzrser.Token$Tag", "org.jsoup.pzrser.Token$Tag");
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.pzrser.Token$Tag", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.pzrser.Token$Tag", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.pzrser.Token$Tag", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.pzrser.Token$Tag", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("org.jsoup.pzrser.Token$Tag", element0.baseUri());
      assertNotNull(element0);
      
      Elements elements0 = element0.previousElementSiblings();
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.pzrser.Token$Tag", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.pzrser.Token$Tag", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("org.jsoup.pzrser.Token$Tag", element0.baseUri());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      List<TextNode> list0 = element0.textNodes();
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.pzrser.Token$Tag", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.pzrser.Token$Tag", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("org.jsoup.pzrser.Token$Tag", element0.baseUri());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";w<fubPFzQJ$", ";w<fubPFzQJ$");
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Elements elements0 = document0.getElementsByAttributeValueStarting("p4", "'6]!EAFzSt");
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document1 = document0.normalise();
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(";w<fubPFzQJ$", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(";w<fubPFzQJ$", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching(";w<fubPFzQJ$", "hM9(xuG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: hM9(xuG
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("M}CpJ0UK){|GV+ }");
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("Tag name must not be empty.", "1p[");
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "'U eiKvJQjRwgIW", attributes1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "tJq5N77eP4}VW!H?PI";
      Document document0 = Parser.parseBodyFragmentRelaxed("tJq5N77eP4}VW!H?PI", "tJq5N77eP4}VW!H?PI");
      assertEquals(1, document0.childNodeSize());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tJq5N77eP4}VW!H?PI", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = new Element("tJq5N77eP4}VW!H?PI");
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        element0.selectFirst("tJq5N77eP4}VW!H?PI");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'tJq5N77eP4}VW!H?PI': unexpected token at '}VW!H?PI'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xh84R", "xh84R");
      assertFalse(document0.hasParent());
      assertEquals("xh84R", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xh84R", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("xh84R");
      assertFalse(document0.hasParent());
      assertEquals("xh84R", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xh84R", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("xh84R", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("xh84R", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document1.selectFirst("xh84R");
      assertFalse(document0.hasParent());
      assertEquals("xh84R", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xh84R", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("xh84R", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("xh84R", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNull(element0);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8|?~8$2\u0006", "z@");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("z@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("z@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        document0.selectFirst("z@");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'z@': unexpected token at '@'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tq5N77e(4}V!H?PW", "tq5N77e(4}V!H?PW");
      assertEquals("tq5N77e(4}V!H?PW", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tq5N77e(4}V!H?PW", document0.location());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("tq5N77e(4}V!H?PW", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tq5N77e(4}V!H?PW", document0.location());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("tq5N77e(4}V!H?PW", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = document0.nextElementSibling();
      assertEquals("tq5N77e(4}V!H?PW", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tq5N77e(4}V!H?PW", document0.location());
      assertNull(element1);
      
      // Undeclared exception!
      try { 
        element0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = new Document("p~)ep)d|");
      assertEquals("p~)ep)d|", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("p~)ep)d|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("p~)ep)d|", "p~)ep)d|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: p~)ep)d|
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";w<fubPFzQJ$", ";w<fubPFzQJ$");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasText();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(boolean0);
      
      Document document1 = document0.normalise();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(";w<fubPFzQJ$", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(";w<fubPFzQJ$", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching(";w<fubPFzQJ$", "hM9(xuG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: hM9(xuG
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Document document0 = Document.createShell("body");
      assertEquals("body", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("body", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertEquals("body", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("body", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("body", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("body", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsByIndexLessThan((-201));
      assertEquals("body", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("body", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("body", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("body", document1.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.Token$Tag", "org.jsoup.parser.Token$Tag");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Tag", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Elements elements0 = element0.previousElementSiblings();
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Tag", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = document0.getElementsByAttributeValueEnding("org.jsoup.parser.Token$Tag", ">h`/J$h#.R9");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      
      Element element1 = element0.firstElementSibling();
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Tag", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Tag", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertEquals("head", element1.tagName());
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      
      List<DataNode> list0 = element1.dataNodes();
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Tag", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("org.jsoup.parser.Token$Tag", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertEquals("head", element1.tagName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      
      String string0 = document0.tagName();
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Tag", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(string0);
      assertEquals("#root", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("b", "b");
      assertEquals("b", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("b", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      document0.setParentNode(document0);
      assertTrue(document0.hasParent());
      assertEquals("b", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("b", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Elements elements0 = document0.getElementsMatchingText("b");
      assertTrue(document0.hasParent());
      assertEquals("b", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("b", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      assertNotNull(elements0);
      
      Element element0 = document0.firstElementSibling();
      assertTrue(document0.hasParent());
      assertEquals("b", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("b", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = new Document(" \"");
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      document0.doSetBaseUri(" \"");
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = document0.normalise();
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(" \"", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(" \"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document1.wholeText();
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(" \"", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(" \"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.doClone(document0);
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(" \"", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(" \"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(" \"", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(" \"", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      Elements elements0 = document1.getElementsByAttributeValueEnding("th", " \"");
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(" \"", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(" \"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      
      Element element0 = document2.firstElementSibling();
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(" \"", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(" \"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(" \"", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(" \"", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNull(element0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1718);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1718, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1718, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.outline(true);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertNotNull(document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      
      Document document3 = document1.outputSettings(document_OutputSettings1);
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(" \"", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(" \"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertFalse(document3.hasParent());
      assertEquals(" \"", document3.location());
      assertEquals(" \"", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      
      Document document4 = document1.normalise();
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(" \"", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(" \"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals(" \"", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(" \"", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertNotNull(document4);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertNotSame(document4, document2);
      assertSame(document4, document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtmR", "xhtmR");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("xhtmR", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtmR", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      String string0 = document0.data();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("xhtmR", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtmR", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Charset charset0 = document0.charset();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      Element element0 = document0.appendElement("br");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      String string0 = document0.ownText();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("y", "y");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("y", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("y", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      document0.setParentNode(document0);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("y", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("y", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      // Undeclared exception!
      document0.append("java.lang.string@0000000142 ag+)#zrdelj&");
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = new Document(" \"");
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" \"", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      document0.doSetBaseUri(" \"");
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" \"", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = document0.normalise();
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" \"", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(" \"", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document1.wholeText();
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" \"", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(" \"", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.doClone(document0);
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" \"", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(" \"", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(" \"", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(" \"", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      document0.setParentNode(document1);
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" \"", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(" \"", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      
      Pattern pattern0 = Pattern.compile(" \"");
      assertEquals(" \"", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals(" \"", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("", pattern0);
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" \"", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals(" \"", pattern0.pattern());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document2));
      
      Document document3 = (Document)document1.doClone(document2);
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" \"", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(" \"", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(" \"", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(" \"", document2.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(" \"", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(" \"", document3.location());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      int int0 = 1;
      StringWriter stringWriter0 = new StringWriter(16);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "p4");
      assertEquals("p4", stringWriter0.toString());
      assertEquals("p4", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Elements elements1 = document3.getElementsByAttributeStarting("t@)!+\"BzU!:'Y5NSlbm");
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" \"", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(" \"", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(" \"", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(" \"", document2.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(" \"", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(" \"", document3.location());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
      
      String string1 = "";
      // Undeclared exception!
      try { 
        document2.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasText();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(boolean0);
      
      String string0 = ".";
      Document document1 = (Document)document0.prepend(".");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = "textarea";
      boolean boolean1 = document0.is("textarea");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(boolean1);
      assertSame(document0, document1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = document0.data();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(document0, document1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueContaining("", "7H@xgx}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = new Document("xhtml");
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertNotNull(document0);
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Document document1 = Parser.parseBodyFragment("", "");
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document1.prependChild(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("xhtml"));
      
      Document document3 = (Document)document0.classNames(set0);
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("xhtml", document3.baseUri());
      assertTrue(document3.hasParent());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("xhtml", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertNotNull(document3);
      assertFalse(set0.contains("xhtml"));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document3, document2);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      
      int int0 = (-1902);
      // Undeclared exception!
      try { 
        Pattern.compile((String) null, (-1902));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = new Document(" \"");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      document0.doSetBaseUri(" \"");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = document0.normalise();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" \"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(" \"", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(" \"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document1.wholeText();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" \"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(" \"", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(" \"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.doClone(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" \"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(" \"", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(" \"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(" \"", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(" \"", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      Elements elements0 = document0.siblingElements();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" \"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document2));
      
      Element element0 = document2.previousElementSibling();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" \"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(" \"", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(" \"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(" \"", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(" \"", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNull(element0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      Document document3 = (Document)document2.prepend("");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" \"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(" \"", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(" \"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(" \"", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(" \"", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(" \"", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(" \"", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertNotNull(document3);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Document.createShell("BeforeDoctypeSystemIdentifier");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("BeforeDoctypeSystemIdentifier", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("BeforeDoctypeSystemIdentifier", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.attr("[-", false);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("BeforeDoctypeSystemIdentifier", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("BeforeDoctypeSystemIdentifier", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("BeforeDoctypeSystemIdentifier", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("BeforeDoctypeSystemIdentifier", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByAttributeValueNot("BeforeDoctypeSystemIdentifier", "BeforeDoctypeSystemIdentifier");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("BeforeDoctypeSystemIdentifier", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("BeforeDoctypeSystemIdentifier", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      Attributes attributes0 = document0.attributes();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("BeforeDoctypeSystemIdentifier", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("BeforeDoctypeSystemIdentifier", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      String string0 = document0.ownText();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document document1 = document0.outputSettings(document_OutputSettings1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document0);
      
      Elements elements0 = document0.parents();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      Document document2 = document0.quirksMode(document_QuirksMode0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      document0.siblingIndex = (-333);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("", document0.baseUri());
      
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document2;
      nodeArray0[1] = (Node) document2;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document2;
      // Undeclared exception!
      try { 
        document1.insertChildren(2, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Document.createShell("p{8sDd,$4uAUA'6a");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("p{8sDd,$4uAUA'6a", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("p{8sDd,$4uAUA'6a", document0.location());
      assertNotNull(document0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Document document1 = (Document)document0.val("Wu/sFMo7o9a=");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("p{8sDd,$4uAUA'6a", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("p{8sDd,$4uAUA'6a", document0.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("p{8sDd,$4uAUA'6a", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("p{8sDd,$4uAUA'6a", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document1.toString();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("p{8sDd,$4uAUA'6a", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("p{8sDd,$4uAUA'6a", document0.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("p{8sDd,$4uAUA'6a", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("p{8sDd,$4uAUA'6a", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = ">w`1";
      Document document2 = Parser.parse(">w`1", "<html>\n <head></head>\n <body></body>\n</html>");
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      Document document3 = (Document)document2.append("$o=f?_6do2>%");
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertNotNull(document3);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      
      String string2 = "aHj";
      Elements elements0 = document2.getElementsContainingText("aHj");
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      DocumentType documentType0 = new DocumentType("W?qbPp>L^a2cuzH2K{g", "aHj", "br");
      assertEquals("#doctype", documentType0.nodeName());
      assertFalse(documentType0.hasParent());
      assertEquals(0, documentType0.siblingIndex());
      assertNotNull(documentType0);
      
      Document document4 = (Document)document1.doClone(documentType0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("p{8sDd,$4uAUA'6a", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("p{8sDd,$4uAUA'6a", document0.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("p{8sDd,$4uAUA'6a", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("p{8sDd,$4uAUA'6a", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      assertFalse(documentType0.hasParent());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertTrue(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals("p{8sDd,$4uAUA'6a", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("p{8sDd,$4uAUA'6a", document4.location());
      assertEquals("#root", document4.tagName());
      assertNotNull(document4);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      
      String string3 = document1.val();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("p{8sDd,$4uAUA'6a", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("p{8sDd,$4uAUA'6a", document0.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("p{8sDd,$4uAUA'6a", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("p{8sDd,$4uAUA'6a", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(string3);
      assertEquals("Wu/sFMo7o9a=", string3);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      document3.setSiblingIndex((-4997));
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals((-4997), document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals((-4997), document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertNotSame(document2, document1);
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document4);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      
      boolean boolean0 = document0.hasAttributes();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("p{8sDd,$4uAUA'6a", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("p{8sDd,$4uAUA'6a", document0.location());
      assertTrue(boolean0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      
      // Undeclared exception!
      try { 
        Pattern.compile("p{8sDd,$4uAUA'6a", 1093);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed counted closure near index 3
         // p{8sDd,$4uAUA'6a
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Elements elements0 = document0.getAllElements();
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = new Document("xhtml");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Document document1 = (Document)document0.prepend("xhtml");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("xhtml", document1.location());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.is("xhtml");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(boolean0);
      assertSame(document0, document1);
      
      String string0 = document0.data();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document1);
      
      Set<String> set0 = document0.classNames();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertSame(document0, document1);
      
      Elements elements0 = document1.getElementsByAttributeValueContaining("xhtml", "xhtml");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("xhtml", document1.location());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean1 = document0.hasClass("");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(boolean1);
      assertSame(document0, document1);
      assertTrue(boolean1 == boolean0);
      
      Document document2 = (Document)document0.clone();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("xhtml", document2.baseUri());
      assertEquals("xhtml", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      String string1 = document0.html();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string1);
      assertEquals("xhtml", string1);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(string1.equals((Object)string0));
      
      Elements elements1 = document2.getAllElements();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("xhtml", document2.baseUri());
      assertEquals("xhtml", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":root", "L9v k9#4.&G<");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("L9v k9#4.&G<", document0.location());
      assertEquals("L9v k9#4.&G<", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("L9v k9#4.&G<", document0.location());
      assertEquals("L9v k9#4.&G<", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("L9v k9#4.&G<", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      Elements elements0 = element0.previousElementSiblings();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("L9v k9#4.&G<", document0.location());
      assertEquals("L9v k9#4.&G<", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("L9v k9#4.&G<", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      
      String string0 = element0.cssSelector();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("L9v k9#4.&G<", document0.location());
      assertEquals("L9v k9#4.&G<", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("L9v k9#4.&G<", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(string0);
      assertEquals("html > body", string0);
      
      document0.setParentNode(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("L9v k9#4.&G<", document0.location());
      assertEquals("L9v k9#4.&G<", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("L9v k9#4.&G<", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      
      List<TextNode> list0 = element0.textNodes();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("L9v k9#4.&G<", document0.location());
      assertEquals("L9v k9#4.&G<", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("L9v k9#4.&G<", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      document0.prepend("^v7QT!f");
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parse("tq5N77eP4}V!H?PW", "tq5N77eP4}V!H?PW");
      assertEquals("tq5N77eP4}V!H?PW", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tq5N77eP4}V!H?PW", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Pattern pattern0 = Pattern.compile("tq5N77eP4}V!H?PW");
      assertEquals(0, pattern0.flags());
      assertEquals("tq5N77eP4}V!H?PW", pattern0.pattern());
      assertEquals("tq5N77eP4}V!H?PW", pattern0.toString());
      assertNotNull(pattern0);
      
      Pattern pattern1 = Pattern.compile("Mh");
      assertEquals("Mh", pattern1.pattern());
      assertEquals(0, pattern1.flags());
      assertEquals("Mh", pattern1.toString());
      assertNotNull(pattern1);
      assertNotSame(pattern1, pattern0);
      assertFalse(pattern1.equals((Object)pattern0));
      
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertEquals("tq5N77eP4}V!H?PW", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tq5N77eP4}V!H?PW", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, pattern0.flags());
      assertEquals("tq5N77eP4}V!H?PW", pattern0.pattern());
      assertEquals("tq5N77eP4}V!H?PW", pattern0.toString());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertNotSame(pattern0, pattern1);
      assertFalse(pattern0.equals((Object)pattern1));
      
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("tq5N77eP4}V!H?PW", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tq5N77eP4}V!H?PW", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      String string0 = document0.wholeText();
      assertEquals("tq5N77eP4}V!H?PW", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tq5N77eP4}V!H?PW", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(string0);
      assertEquals("tq5N77eP4}V!H?PW", string0);
      
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = new Document(" \"");
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      document0.doSetBaseUri(" \"");
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document0.location());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.normalise();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(" \"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(" \"", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document1.wholeText();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(" \"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(" \"", document1.baseUri());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.doClone(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(" \"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(" \"", document1.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(" \"", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(" \"", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      document0.setParentNode(document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(" \"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(" \"", document1.baseUri());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      
      int int0 = document1.elementSiblingIndex();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(" \"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(" \"", document1.baseUri());
      assertEquals(0, int0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      
      Elements elements0 = document2.getElementsByAttributeStarting("!M7\"f]CHGxuw?[9[~");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(" \"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(" \"", document1.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(" \"", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(" \"", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      // Undeclared exception!
      try { 
        document1.select("}e\"xO9C7)~)$");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '}e\"xO9C7)~)$': unexpected token at '}e\"xO9C7)~)$'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      String string0 = document0.ownText();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document document1 = document0.outputSettings(document_OutputSettings1);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document0);
      
      Elements elements0 = document0.parents();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      Document document2 = document0.quirksMode(document_QuirksMode0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      document0.siblingIndex = (-333);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      
      Document document3 = document2.normalise();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      String string1 = document3.toString();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertNotNull(string1);
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string1);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertFalse(string1.equals((Object)string0));
      
      Elements elements1 = document0.getElementsContainingText("autofocus");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      
      Document document4 = (Document)document2.doClone(document0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals((-333), document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertEquals("", document4.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertEquals("", document4.location());
      assertEquals("#root", document4.tagName());
      assertNotNull(document4);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      
      String string2 = document4.val();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals((-333), document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertEquals("", document4.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertEquals("", document4.location());
      assertEquals("#root", document4.tagName());
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      document4.setSiblingIndex((-4997));
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertTrue(document4.hasParent());
      assertEquals((-4997), document4.siblingIndex());
      assertEquals("", document4.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertEquals("", document4.location());
      assertEquals("#root", document4.tagName());
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      
      boolean boolean0 = document3.hasAttributes();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertFalse(boolean0);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertNotSame(document3, document4);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document4));
      
      Pattern pattern0 = Pattern.compile("", 1093);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(1093, pattern0.flags());
      assertNotNull(pattern0);
      
      Predicate<String> predicate0 = pattern0.asPredicate();
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(1093, pattern0.flags());
      assertNotNull(predicate0);
      
      Elements elements2 = document2.getElementsMatchingText(pattern0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(1093, pattern0.flags());
      assertFalse(elements2.isEmpty());
      assertEquals(4, elements2.size());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertNotNull(elements2);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertFalse(document0.equals((Object)document4));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(document2.equals((Object)document4));
      
      Element element0 = document3.appendElement("p4");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("p4", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("p4", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertNotNull(element0);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertNotSame(document3, document4);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document4));
      
      Element element1 = document4.prependElement("autofocus");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("autofocus", element1.nodeName());
      assertEquals("autofocus", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertTrue(document4.hasParent());
      assertEquals(2, document4.childNodeSize());
      assertEquals((-4997), document4.siblingIndex());
      assertEquals("", document4.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("", document4.location());
      assertEquals("#root", document4.tagName());
      assertNotNull(element1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(element1, element0);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertFalse(document0.equals((Object)document4));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      
      String string3 = document1.ownText();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals((-333), document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertNotNull(string3);
      assertEquals("", string3);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertFalse(document0.equals((Object)document4));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(document1.equals((Object)document4));
      
      Attributes attributes0 = document2.attributes();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, attributes0.size());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertNotNull(attributes0);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      
      boolean boolean1 = document4.hasAttributes();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertTrue(document4.hasParent());
      assertEquals(2, document4.childNodeSize());
      assertEquals((-4997), document4.siblingIndex());
      assertEquals("", document4.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("", document4.location());
      assertEquals("#root", document4.tagName());
      assertFalse(boolean1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertFalse(document0.equals((Object)document4));
      assertTrue(boolean1 == boolean0);
      assertFalse(document2.equals((Object)document4));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      
      Document document5 = (Document)document1.clone();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals((-333), document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(2, document5.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.hasParent());
      assertEquals("", document5.baseUri());
      assertEquals("", document5.location());
      assertNotNull(document5);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document1, document5);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document5, document3);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document4);
      assertNotSame(document5, document1);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      
      Elements elements3 = element0.select("p4");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("p4", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("p4", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(1, elements3.size());
      assertFalse(elements3.isEmpty());
      assertFalse(document3.hasParent());
      assertEquals("", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertNotNull(elements3);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(element0, element1);
      assertSame(document2, document3);
      assertNotSame(document2, document5);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotSame(document3, document4);
      assertSame(document3, document0);
      assertNotSame(document3, document5);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(element0.equals((Object)element1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document4));
      assertFalse(elements3.equals((Object)elements2));
      assertFalse(elements3.equals((Object)elements0));
      assertFalse(elements3.equals((Object)elements1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document5));
      
      Element element2 = element0.addClass("");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("p4", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("p4", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("p4", element2.tagName());
      assertTrue(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertEquals(1, element2.siblingIndex());
      assertEquals("p4", element2.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertNotNull(element2);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertSame(document2, document3);
      assertNotSame(document2, document5);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertNotSame(document3, document4);
      assertSame(document3, document0);
      assertNotSame(document3, document5);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(element0.equals((Object)element1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document5));
      assertFalse(element2.equals((Object)element1));
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      String string0 = document0.ownText();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document document1 = document0.outputSettings(document_OutputSettings1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document0);
      
      Elements elements0 = document0.parents();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      Document document2 = document0.quirksMode(document_QuirksMode0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      document0.siblingIndex = (-333);
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      Document document3 = document2.normalise();
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals((-333), document2.siblingIndex());
      assertEquals("", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      document3.nodelistChanged();
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals((-333), document2.siblingIndex());
      assertEquals("", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      String string1 = document3.toString();
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals((-333), document2.siblingIndex());
      assertEquals("", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertNotNull(string1);
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertFalse(string1.equals((Object)string0));
      
      Document document4 = (Document)document3.append("seamless");
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals((-333), document2.siblingIndex());
      assertEquals("", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals("", document4.location());
      assertFalse(document4.hasParent());
      assertEquals((-333), document4.siblingIndex());
      assertNotNull(document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertSame(document4, document0);
      
      Elements elements1 = document4.getElementsContainingText("autofocus");
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals((-333), document2.siblingIndex());
      assertEquals("", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals("", document4.location());
      assertFalse(document4.hasParent());
      assertEquals((-333), document4.siblingIndex());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      
      Document document5 = (Document)document2.doClone(document0);
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals((-333), document2.siblingIndex());
      assertTrue(document5.hasParent());
      assertEquals((-333), document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals("", document5.baseUri());
      assertEquals(2, document5.childNodeSize());
      assertEquals("", document5.location());
      assertNotNull(document5);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document0, document5);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document5);
      assertNotSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document3);
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      
      String string2 = document5.val();
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals((-333), document2.siblingIndex());
      assertTrue(document5.hasParent());
      assertEquals((-333), document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals("", document5.baseUri());
      assertEquals(2, document5.childNodeSize());
      assertEquals("", document5.location());
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document0, document5);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document5);
      assertNotSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document3);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      
      document5.setSiblingIndex((-4997));
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals((-333), document2.siblingIndex());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals("", document5.baseUri());
      assertEquals((-4997), document5.siblingIndex());
      assertEquals(2, document5.childNodeSize());
      assertEquals("", document5.location());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document0, document5);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document5);
      assertNotSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document3);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      
      boolean boolean0 = document3.hasAttributes();
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals((-333), document2.siblingIndex());
      assertEquals("", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertFalse(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document0, document5);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document5);
      assertSame(document3, document0);
      assertNotSame(document3, document5);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document3.equals((Object)document5));
      
      Pattern pattern0 = Pattern.compile("", 1093);
      assertEquals(1093, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertNotNull(pattern0);
      
      Element element0 = document1.previousElementSibling();
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals((-333), document1.siblingIndex());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertNull(element0);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document0, document5);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document1, document5);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document5));
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      pipedReader0.close();
      Document document6 = (Document)document3.removeClass("seamless");
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document6.hasParent());
      assertEquals("", document6.baseUri());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals((-333), document6.siblingIndex());
      assertEquals(2, document6.childNodeSize());
      assertEquals("", document6.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document6.quirksMode());
      assertEquals("#root", document6.tagName());
      assertEquals("", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertNotNull(document6);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document6);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document0, document5);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document6);
      assertSame(document2, document0);
      assertNotSame(document2, document5);
      assertSame(document6, document3);
      assertSame(document6, document0);
      assertSame(document6, document4);
      assertSame(document6, document2);
      assertNotSame(document6, document5);
      assertSame(document6, document1);
      assertSame(document3, document0);
      assertSame(document3, document6);
      assertNotSame(document3, document5);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document3.equals((Object)document5));
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("d`f8qc", "d`f8qc");
      assertEquals("d`f8qc", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("d`f8qc", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("d`f8qc");
      assertEquals("d`f8qc", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("d`f8qc", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("d`f8qc", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("d`f8qc", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.setParentNode(document0);
      assertEquals("d`f8qc", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("d`f8qc", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("d`f8qc", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("d`f8qc", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.previousElementSiblings();
      assertEquals("d`f8qc", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("d`f8qc", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("d`f8qc", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("d`f8qc", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      document0.appendElement("d`f8qc");
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = new Document("xhtmR");
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtmR", document0.baseUri());
      assertEquals("xhtmR", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("C%*}w,b");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtmR", document0.baseUri());
      assertEquals("xhtmR", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("c%*}w,b", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("c%*}w,b", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("xhtmR", element0.baseUri());
      assertNotNull(element0);
      
      String string0 = element0.val();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtmR", document0.baseUri());
      assertEquals("xhtmR", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("c%*}w,b", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("c%*}w,b", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("xhtmR", element0.baseUri());
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.prepareEncoder();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      String string0 = document0.ownText();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document document1 = document0.outputSettings(document_OutputSettings1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document0);
      
      Elements elements0 = document0.parents();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      Document document2 = document0.quirksMode(document_QuirksMode0);
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      document0.siblingIndex = (-333);
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      
      Document document3 = document2.normalise();
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals((-333), document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      document3.nodelistChanged();
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals((-333), document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      String string1 = document3.toString();
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals((-333), document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertNotNull(string1);
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string1);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertFalse(string1.equals((Object)string0));
      
      Document document4 = (Document)document3.append("seamless");
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals((-333), document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertFalse(document4.hasParent());
      assertEquals("", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertEquals(2, document4.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals((-333), document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertNotNull(document4);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document1);
      
      Elements elements1 = document4.getElementsContainingText("autofocus");
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals((-333), document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertFalse(document4.hasParent());
      assertEquals("", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertEquals(2, document4.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals((-333), document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      
      Document document5 = (Document)document2.doClone(document0);
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertTrue(document5.hasParent());
      assertEquals("", document5.location());
      assertEquals((-333), document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertEquals("", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals((-333), document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertNotNull(document5);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document5);
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      
      String string2 = document5.val();
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertTrue(document5.hasParent());
      assertEquals("", document5.location());
      assertEquals((-333), document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertEquals("", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals((-333), document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document5);
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document0.equals((Object)document5));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(document2.equals((Object)document5));
      
      document5.setSiblingIndex((-4997));
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertTrue(document5.hasParent());
      assertEquals("", document5.location());
      assertFalse(document5.isBlock());
      assertEquals("", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertEquals((-4997), document5.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals((-333), document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document5);
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      
      boolean boolean0 = document3.hasAttributes();
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals((-333), document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertFalse(boolean0);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document5);
      assertSame(document3, document2);
      assertNotSame(document3, document5);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document3.equals((Object)document5));
      
      Pattern pattern0 = Pattern.compile("", 1093);
      assertEquals("", pattern0.pattern());
      assertEquals(1093, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertNotNull(pattern0);
      
      Predicate<String> predicate0 = pattern0.asPredicate();
      assertEquals("", pattern0.pattern());
      assertEquals(1093, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertNotNull(predicate0);
      
      Elements elements2 = document2.getElementsMatchingText(pattern0);
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", pattern0.pattern());
      assertEquals(1093, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertFalse(elements2.isEmpty());
      assertEquals(4, elements2.size());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals((-333), document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertNotNull(elements2);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document5);
      assertFalse(document0.equals((Object)document5));
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(document2.equals((Object)document5));
      
      Elements elements3 = document4.select("autofocus");
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals((-333), document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertFalse(document4.hasParent());
      assertEquals("", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertEquals(2, document4.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals((-333), document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertNotNull(elements3);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document5);
      assertSame(document3, document2);
      assertNotSame(document3, document5);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document5);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertFalse(document0.equals((Object)document5));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertFalse(elements3.equals((Object)elements2));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document4.equals((Object)document5));
      
      Document document6 = (Document)document5.prependText("html");
      assertEquals(3, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertTrue(document5.hasParent());
      assertEquals("", document5.location());
      assertFalse(document5.isBlock());
      assertEquals("", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertEquals((-4997), document5.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.isBlock());
      assertEquals("", document6.baseUri());
      assertEquals((-4997), document6.siblingIndex());
      assertEquals("", document6.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document6.quirksMode());
      assertEquals(3, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals((-333), document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertNotNull(document6);
      assertSame(document5, document6);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertNotSame(document0, document6);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document6, document1);
      assertNotSame(document6, document2);
      assertNotSame(document6, document0);
      assertSame(document6, document5);
      assertNotSame(document6, document3);
      assertNotSame(document6, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document6);
      assertNotSame(document2, document5);
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document2.equals((Object)document5));
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("opg.jsoup.pyrser.Token$Tag", "opg.jsoup.pyrser.Token$Tag");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("opg.jsoup.pyrser.Token$Tag", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("opg.jsoup.pyrser.Token$Tag", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = ";w<fubPFzQJ$";
      Document document0 = Parser.parseBodyFragment(";w<fubPFzQJ$", ";w<fubPFzQJ$");
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasText();
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(boolean0);
      
      Document document1 = Parser.parseBodyFragment("D]cq^|wx3", "G<%bh");
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("G<%bh", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("G<%bh", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("G<%bh"));
      
      Document document2 = (Document)document0.classNames(set0);
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(";w<fubPFzQJ$", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(";w<fubPFzQJ$", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertFalse(set0.contains("G<%bh"));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      int int0 = (-1902);
      Pattern pattern0 = Pattern.compile("G<%bh", (-1902));
      assertEquals((-1902), pattern0.flags());
      assertEquals("G<%bh", pattern0.toString());
      assertEquals("G<%bh", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertEquals(";w<fubPFzQJ$", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";w<fubPFzQJ$", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals((-1902), pattern0.flags());
      assertEquals("G<%bh", pattern0.toString());
      assertEquals("G<%bh", pattern0.pattern());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertFalse(document0.equals((Object)document1));
      
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-2054));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      String string0 = document0.ownText();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document document1 = document0.outputSettings(document_OutputSettings1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document0);
      
      Elements elements0 = document0.parents();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      Document document2 = document0.quirksMode(document_QuirksMode0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      document0.siblingIndex = (-333);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      
      Document document3 = document2.normalise();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals((-333), document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      document3.nodelistChanged();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals((-333), document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      String string1 = document3.toString();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals((-333), document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertNotNull(string1);
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertFalse(string1.equals((Object)string0));
      
      Document document4 = (Document)document3.append("seamless");
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals((-333), document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("", document4.baseUri());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertEquals((-333), document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertNotNull(document4);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document0);
      
      Elements elements1 = document4.getElementsContainingText("autofocus");
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals((-333), document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("", document4.baseUri());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertEquals((-333), document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      
      Document document5 = (Document)document2.doClone(document0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals("", document5.baseUri());
      assertEquals(2, document5.childNodeSize());
      assertEquals("", document5.location());
      assertTrue(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals((-333), document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertNotNull(document5);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document5);
      assertSame(document2, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document0);
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      
      String string2 = document5.val();
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals("", document5.baseUri());
      assertEquals(2, document5.childNodeSize());
      assertEquals("", document5.location());
      assertTrue(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals((-333), document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document5);
      assertSame(document2, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      
      document5.setSiblingIndex((-4997));
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals("", document5.baseUri());
      assertEquals((-4997), document5.siblingIndex());
      assertEquals(2, document5.childNodeSize());
      assertEquals("", document5.location());
      assertTrue(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document5);
      assertSame(document2, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document0);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      
      boolean boolean0 = document3.hasAttributes();
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals((-333), document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertFalse(boolean0);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document5);
      assertSame(document2, document4);
      assertSame(document3, document1);
      assertNotSame(document3, document5);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document3.equals((Object)document5));
      
      Pattern pattern0 = Pattern.compile("", 1093);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(1093, pattern0.flags());
      assertNotNull(pattern0);
      
      Predicate<String> predicate0 = pattern0.asPredicate();
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(1093, pattern0.flags());
      assertNotNull(predicate0);
      
      Elements elements2 = document2.getElementsMatchingText(pattern0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(1093, pattern0.flags());
      assertEquals(4, elements2.size());
      assertFalse(elements2.isEmpty());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertNotNull(elements2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document5);
      assertSame(document2, document4);
      assertFalse(document0.equals((Object)document5));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(document2.equals((Object)document5));
      
      Element element0 = document3.appendElement("p4");
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("p4", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("p4", element0.tagName());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(3, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals((-333), document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertNotNull(element0);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document5);
      assertSame(document2, document4);
      assertSame(document3, document1);
      assertNotSame(document3, document5);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document3.equals((Object)document5));
      
      Element element1 = document5.prependElement("autofocus");
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertEquals("autofocus", element1.tagName());
      assertEquals("autofocus", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(3, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals("", document5.baseUri());
      assertEquals((-4997), document5.siblingIndex());
      assertEquals("", document5.location());
      assertTrue(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals(3, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertNotNull(element1);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(element1, element0);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document5);
      assertSame(document2, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document0);
      assertFalse(document0.equals((Object)document5));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      
      String string3 = document1.ownText();
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals((-333), document1.siblingIndex());
      assertEquals("", document1.location());
      assertNotNull(string3);
      assertEquals("seamless", string3);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document5);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      Attributes attributes0 = document2.attributes();
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(3, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document5);
      assertSame(document2, document4);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      
      boolean boolean1 = document5.hasAttributes();
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(3, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals("", document5.baseUri());
      assertEquals((-4997), document5.siblingIndex());
      assertEquals("", document5.location());
      assertTrue(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals(3, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(boolean1);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document5);
      assertSame(document2, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document0);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertTrue(boolean1 == boolean0);
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      
      Document document6 = (Document)element0.parent();
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("p4", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("p4", element0.tagName());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(3, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals((-333), document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("#root", document6.tagName());
      assertEquals("", document6.baseUri());
      assertEquals(3, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("#document", document6.nodeName());
      assertEquals("", document6.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document6.quirksMode());
      assertFalse(document6.isBlock());
      assertEquals((-333), document6.siblingIndex());
      assertFalse(document6.hasParent());
      assertNotNull(document6);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertSame(document0, document6);
      assertSame(document0, document1);
      assertNotSame(element0, element1);
      assertSame(document2, document6);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document5);
      assertSame(document2, document4);
      assertSame(document3, document1);
      assertNotSame(document3, document5);
      assertSame(document3, document0);
      assertSame(document3, document6);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document6, document0);
      assertSame(document6, document4);
      assertSame(document6, document1);
      assertNotSame(document6, document5);
      assertSame(document6, document2);
      assertSame(document6, document3);
      assertFalse(document0.equals((Object)document5));
      assertFalse(element0.equals((Object)element1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document6.equals((Object)document5));
      
      Document document7 = (Document)document6.prepend("seamless");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(4, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("p4", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("p4", element0.tagName());
      assertEquals(3, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(4, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals((-333), document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(4, document3.childNodeSize());
      assertEquals("#root", document6.tagName());
      assertEquals("", document6.baseUri());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("#document", document6.nodeName());
      assertEquals("", document6.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document6.quirksMode());
      assertFalse(document6.isBlock());
      assertEquals((-333), document6.siblingIndex());
      assertEquals(4, document6.childNodeSize());
      assertFalse(document6.hasParent());
      assertFalse(document7.isBlock());
      assertFalse(document7.hasParent());
      assertEquals("", document7.baseUri());
      assertEquals("#root", document7.tagName());
      assertEquals(4, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("#document", document7.nodeName());
      assertEquals("", document7.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document7.quirksMode());
      assertEquals((-333), document7.siblingIndex());
      assertNotNull(document7);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document7);
      assertNotSame(document0, document5);
      assertSame(document0, document6);
      assertSame(document0, document1);
      assertNotSame(element0, element1);
      assertSame(document2, document7);
      assertSame(document2, document6);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document5);
      assertSame(document2, document4);
      assertSame(document3, document1);
      assertNotSame(document3, document5);
      assertSame(document3, document0);
      assertSame(document3, document6);
      assertSame(document3, document7);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document6, document0);
      assertSame(document6, document4);
      assertSame(document6, document1);
      assertNotSame(document6, document5);
      assertSame(document6, document2);
      assertSame(document6, document7);
      assertSame(document6, document3);
      assertSame(document7, document6);
      assertSame(document7, document2);
      assertSame(document7, document3);
      assertSame(document7, document0);
      assertSame(document7, document4);
      assertSame(document7, document1);
      assertNotSame(document7, document5);
      assertFalse(document0.equals((Object)document5));
      assertFalse(element0.equals((Object)element1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document7.equals((Object)document5));
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Document.createShell("p{8sDd,$4uAUA'6a");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("p{8sDd,$4uAUA'6a", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("p{8sDd,$4uAUA'6a", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      String string0 = "Wu/sFMo7o9a=";
      Document document1 = (Document)document0.val("Wu/sFMo7o9a=");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("p{8sDd,$4uAUA'6a", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("p{8sDd,$4uAUA'6a", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("p{8sDd,$4uAUA'6a", document1.baseUri());
      assertEquals("p{8sDd,$4uAUA'6a", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      int int0 = document0.elementSiblingIndex();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("p{8sDd,$4uAUA'6a", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("p{8sDd,$4uAUA'6a", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, int0);
      assertSame(document0, document1);
      
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Document.createShell("wBK-8/H@H");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("wBK-8/H@H", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("wBK-8/H@H", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Document document1 = new Document("wBK-8/H@H");
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("wBK-8/H@H", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("wBK-8/H@H", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      String string0 = document1.ownText();
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("wBK-8/H@H", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("wBK-8/H@H", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertNotNull(string0);
      assertEquals("", string0);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      // Undeclared exception!
      try { 
        document1.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4", "4");
      assertEquals("4", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("4", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("4", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("4", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" > ", "4AboUC#`%");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("4AboUC#`%", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("4AboUC#`%", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("4AboUC#`%", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("4AboUC#`%", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        document0.insertChildren(6, (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xht4R", "xht4R");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xht4R", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("xht4R", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Element element0 = document0.head();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xht4R", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("xht4R", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("xht4R", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.nextElementSibling();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xht4R", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("xht4R", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("xht4R", element0.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("xht4R", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      
      Elements elements0 = element0.select("id");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xht4R", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("xht4R", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("xht4R", element0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertNotSame(element0, element1);
      assertFalse(element0.equals((Object)element1));
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      String string0 = document0.ownText();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document document1 = document0.outputSettings(document_OutputSettings1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document0);
      
      Elements elements0 = document0.parents();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      Document document2 = document0.quirksMode(document_QuirksMode0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      document0.siblingIndex = (-333);
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      
      Document document3 = document2.normalise();
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      document3.nodelistChanged();
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      String string1 = document3.toString();
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(string1);
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string1);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertFalse(string1.equals((Object)string0));
      
      Document document4 = (Document)document3.append("seamless");
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertEquals("", document4.baseUri());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals("", document4.location());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals((-333), document4.siblingIndex());
      assertNotNull(document4);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document3, document4);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      
      Set<String> set0 = document1.classNames();
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals((-333), document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(string1));
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      
      Elements elements1 = document4.getElementsContainingText("autofocus");
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertEquals("", document4.baseUri());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals("", document4.location());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals((-333), document4.siblingIndex());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document3, document4);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      
      Document document5 = (Document)document2.doClone(document0);
      assertFalse(document5.updateMetaCharsetElement());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals((-333), document5.siblingIndex());
      assertEquals(2, document5.childNodeSize());
      assertEquals("", document5.baseUri());
      assertEquals("", document5.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertNotNull(document5);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertNotSame(document5, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document2, document5);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      
      String string2 = document5.val();
      assertFalse(document5.updateMetaCharsetElement());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals((-333), document5.siblingIndex());
      assertEquals(2, document5.childNodeSize());
      assertEquals("", document5.baseUri());
      assertEquals("", document5.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertNotSame(document5, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document2, document5);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document0.equals((Object)document5));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(document2.equals((Object)document5));
      
      document5.setSiblingIndex((-4997));
      assertFalse(document5.updateMetaCharsetElement());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals(2, document5.childNodeSize());
      assertEquals("", document5.baseUri());
      assertEquals((-4997), document5.siblingIndex());
      assertEquals("", document5.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertNotSame(document5, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document2, document5);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      
      boolean boolean0 = document3.hasAttributes();
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document2, document5);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document3, document4);
      assertSame(document3, document0);
      assertNotSame(document3, document5);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document3.equals((Object)document5));
      
      Pattern pattern0 = Pattern.compile("", 1093);
      assertEquals("", pattern0.pattern());
      assertEquals(1093, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertNotNull(pattern0);
      
      Predicate<String> predicate0 = pattern0.asPredicate();
      assertEquals("", pattern0.pattern());
      assertEquals(1093, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertNotNull(predicate0);
      
      Elements elements2 = document2.getElementsMatchingText(pattern0);
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("", pattern0.pattern());
      assertEquals(1093, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertFalse(elements2.isEmpty());
      assertEquals(4, elements2.size());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertNotNull(elements2);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotSame(document2, document5);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertFalse(document0.equals((Object)document5));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(document2.equals((Object)document5));
      
      Element element0 = document3.appendElement("p4");
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("", element0.baseUri());
      assertEquals("p4", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("p4", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(element0);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document2, document5);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document3, document4);
      assertSame(document3, document0);
      assertNotSame(document3, document5);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document3.equals((Object)document5));
      
      String string3 = element0.cssSelector();
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("", element0.baseUri());
      assertEquals("p4", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("p4", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(string3);
      assertEquals("p4", string3);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document2, document5);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document3, document4);
      assertSame(document3, document0);
      assertNotSame(document3, document5);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertFalse(document0.equals((Object)document5));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document3.equals((Object)document5));
      
      Document document6 = (Document)document0.addClass("Pattern syntax error: ");
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertFalse(document6.isBlock());
      assertEquals((-333), document6.siblingIndex());
      assertEquals("#document", document6.nodeName());
      assertEquals(3, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("", document6.location());
      assertEquals("#root", document6.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document6.quirksMode());
      assertFalse(document6.hasParent());
      assertEquals("", document6.baseUri());
      assertNotNull(document6);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertSame(document0, document4);
      assertSame(document6, document1);
      assertNotSame(document6, document5);
      assertSame(document6, document2);
      assertSame(document6, document3);
      assertSame(document6, document4);
      assertSame(document6, document0);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document6.equals((Object)document5));
      
      Elements elements3 = document5.nextElementSiblings();
      assertFalse(document5.updateMetaCharsetElement());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals(2, document5.childNodeSize());
      assertEquals("", document5.baseUri());
      assertEquals((-4997), document5.siblingIndex());
      assertEquals("", document5.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(1, elements3.size());
      assertFalse(elements3.isEmpty());
      assertNotNull(elements3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document6);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertNotSame(document5, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertSame(document0, document4);
      assertNotSame(document2, document5);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document6);
      assertSame(document2, document0);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document6));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(elements3.equals((Object)elements0));
      assertFalse(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements2));
      
      String string4 = element0.html();
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("", element0.baseUri());
      assertEquals("p4", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("p4", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(string4);
      assertEquals("", string4);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertSame(document0, document4);
      assertNotSame(document2, document5);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document3, document6);
      assertSame(document3, document4);
      assertSame(document3, document0);
      assertNotSame(document3, document5);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document3.equals((Object)document5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      
      String string5 = document1.nodeName();
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals((-333), document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertNotNull(string5);
      assertEquals("#document", string5);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertSame(document0, document4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document6);
      assertNotSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document5));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8|?~8$2\u0006", "z@");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("z@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("z@", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Element element0 = document0.shallowClone();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("z@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("z@", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("z@", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#root", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("#root", element0.nodeName());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        document0.insertChildren(6, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      String string0 = document0.wholeText();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(string0);
      assertEquals("xhtml", string0);
      
      Document document1 = (Document)document0.val("xhtml");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.shallowClone();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(element0.hasParent());
      assertEquals("xhtml", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.settings((ParseSettings) null);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document1 = document0.parser(parser1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      
      StringBuilder stringBuilder0 = new StringBuilder(62);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Document document2 = (Document)document0.doClone(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      StringWriter stringWriter0 = new StringWriter(33);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "#root");
      assertEquals("#root", stringWriter0.toString());
      assertEquals("#root", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.prettyPrint(false);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertNotNull(document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings2.indentAmount(0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(0, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertNotNull(document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax1 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings0.syntax(document_OutputSettings_Syntax1);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings5.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.escapeMode());
      assertFalse(document_OutputSettings5.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings5.syntax());
      assertEquals(0, document_OutputSettings5.indentAmount());
      assertNotNull(document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings_Syntax1, document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings5, document_OutputSettings4);
      assertSame(document_OutputSettings5, document_OutputSettings2);
      assertSame(document_OutputSettings5, document_OutputSettings1);
      assertSame(document_OutputSettings5, document_OutputSettings0);
      assertSame(document_OutputSettings5, document_OutputSettings3);
      assertFalse(document_OutputSettings_Syntax1.equals((Object)document_OutputSettings_Syntax0));
      
      document2.outerHtmlHead(stringWriter0, (-14), document_OutputSettings1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root<#root>", stringWriter0.toString());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings5);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      Document document3 = document1.ownerDocument();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document3);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      
      Elements elements0 = document0.getElementsByAttributeValueEnding("7C74X\"WX1kRdzW", "9|~:{:c1");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertFalse(document0.equals((Object)document2));
      
      Document document4 = (Document)document3.doClone(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertTrue(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document4);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document1, document4);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.settings((ParseSettings) null);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document1 = document0.parser(parser1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      
      StringWriter stringWriter0 = new StringWriter(1541);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "#root");
      assertEquals("#root", stringWriter0.toString());
      assertEquals("#root", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.prettyPrint(false);
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertNotNull(document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings2.indentAmount(1541);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1541, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(1541, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertEquals(1541, document_OutputSettings4.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertFalse(document_OutputSettings4.outline());
      assertNotNull(document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1541, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(1541, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings5.syntax());
      assertFalse(document_OutputSettings5.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.escapeMode());
      assertFalse(document_OutputSettings5.prettyPrint());
      assertEquals(1541, document_OutputSettings5.indentAmount());
      assertNotNull(document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings5, document_OutputSettings3);
      assertSame(document_OutputSettings5, document_OutputSettings4);
      assertSame(document_OutputSettings5, document_OutputSettings1);
      assertSame(document_OutputSettings5, document_OutputSettings0);
      assertSame(document_OutputSettings5, document_OutputSettings2);
      
      document1.outerHtmlHead(stringWriter1, 6, document_OutputSettings4);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root<#root>", stringWriter0.toString());
      assertEquals("#root<#root>", stringWriter1.toString());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1541, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(1541, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertEquals(1541, document_OutputSettings4.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertFalse(document_OutputSettings4.outline());
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings5);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      
      Document document2 = document0.ownerDocument();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#root", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements0 = document0.getElementsByAttributeValueEnding("#root", "#root");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      Document document3 = (Document)document2.doClone(document1);
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertTrue(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#root", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.baseUri());
      assertNotNull(document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8|?~8$2\u0006", "z@");
      assertEquals(1, document0.childNodeSize());
      assertEquals("z@", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("z@", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.baseUri());
      assertNotNull(document0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.settings((ParseSettings) null);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document1 = document0.parser(parser1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      
      Document document2 = Parser.parseBodyFragmentRelaxed("#root", "$o=f?_6do2>%");
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("$o=f?_6do2>%", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("$o=f?_6do2>%", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      List<TextNode> list0 = document1.textNodes();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.baseUri());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      
      boolean boolean0 = document1.hasClass("#root");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.baseUri());
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      
      Pattern pattern0 = Pattern.compile("#root", 32);
      assertEquals("#root", pattern0.toString());
      assertEquals(32, pattern0.flags());
      assertEquals("#root", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements0 = document1.getElementsMatchingOwnText(pattern0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.baseUri());
      assertEquals("#root", pattern0.toString());
      assertEquals(32, pattern0.flags());
      assertEquals("#root", pattern0.pattern());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      
      // Undeclared exception!
      try { 
        document1.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Element element0 = new Element("tJq5N77eP4}VW!H?PI");
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.tagName());
      assertNotNull(element0);
      
      List<TextNode> list0 = element0.textNodes();
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.tagName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Comment comment0 = new Comment("tJq5N77eP4}VW!H?PI");
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertNotNull(comment0);
      
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertNotNull(xmlDeclaration0);
      
      Element element1 = element0.doClone(xmlDeclaration0);
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.tagName());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals("tJq5N77eP4}VW!H?PI", element1.nodeName());
      assertEquals("tJq5N77eP4}VW!H?PI", element1.tagName());
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4", "4");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("4", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("4", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = new Element("4");
      assertEquals(0, element0.siblingIndex());
      assertEquals("4", element0.tagName());
      assertEquals("4", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("4", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("4", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      assertFalse(tag0.isData());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("br", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("br", tag0.toString());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isEmpty());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "odd");
      assertFalse(tag0.isData());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("br", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("br", tag0.toString());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isEmpty());
      assertEquals(0, element0.childNodeSize());
      assertEquals("odd", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.nodeName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      Pattern pattern0 = Pattern.compile("s+", (-215));
      assertEquals((-151), pattern0.flags());
      assertEquals("s+", pattern0.toString());
      assertEquals("s+", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements0 = element0.getElementsMatchingOwnText(pattern0);
      assertFalse(tag0.isData());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("br", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("br", tag0.toString());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isEmpty());
      assertEquals(0, element0.childNodeSize());
      assertEquals("odd", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals((-151), pattern0.flags());
      assertEquals("s+", pattern0.toString());
      assertEquals("s+", pattern0.pattern());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":", ":");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(":", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(":", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertNotNull(document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      
      Document document1 = document0.outputSettings(document_OutputSettings2);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document1, document0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      
      String string0 = document1.ownText();
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document1, document0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      
      Attributes attributes0 = document1.attributes();
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      assertSame(document0, document1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document1, document0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      
      boolean boolean0 = document1.hasAttributes();
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertTrue(boolean0);
      assertSame(document0, document1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document1, document0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertNotNull(document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.prettyPrint(true);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertFalse(document_OutputSettings4.outline());
      assertNotNull(document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      
      Element element0 = document0.body();
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertNotNull(element0);
      assertSame(document0, document1);
      
      Element element1 = element0.parent();
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("html", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.tagName());
      assertEquals("", element1.baseUri());
      assertNotNull(element1);
      assertSame(document0, document1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = "C%*}w,b";
      Document document0 = new Document("C%*}w,b");
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("C%*}w,b", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("C%*}w,b", document0.baseUri());
      assertNotNull(document0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = new Document("xhtml");
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Document document1 = (Document)document0.prepend("xhtml");
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.is("xhtml");
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(boolean0);
      assertSame(document0, document1);
      
      String string0 = document0.data();
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document1.addClass("");
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("xhtml", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("xhtml", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements0 = document1.getElementsMatchingOwnText("");
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document1.text("9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xht4R", "xht4R");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xht4R", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("xht4R", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Element element0 = document0.createElement("xht4R");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xht4R", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("xht4R", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("xht4R", element0.tagName());
      assertEquals("xht4R", element0.nodeName());
      assertEquals("xht4R", element0.baseUri());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "xht4R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = new Document("xhtml");
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Document document1 = (Document)document0.prepend("xhtml");
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.is("xhtml");
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(boolean0);
      assertSame(document0, document1);
      
      Elements elements0 = document1.getElementsByAttributeValueMatching("5cpO/M+_-@Q`OF5%;}", "");
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean1 = document1.hasAttributes();
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertTrue(boolean1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(boolean1 == boolean0);
      
      Document document2 = (Document)document0.toggleClass("5cpO/M+_-@Q`OF5%;}");
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("xhtml", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("xhtml", document2.location());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document1.empty();
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("xhtml", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("xhtml", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Elements elements1 = document2.getElementsByTag("h=t_1/cT8HuY/B");
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals("xhtml", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("xhtml", document2.location());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      
      Set<String> set0 = document3.classNames();
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("xhtml", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("xhtml", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("5cpO/M+_-@Q`OF5%;}"));
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueContaining((String) null, "xCox0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Document.createShell("D[@l8whH;A|i7@?");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("D[@l8whH;A|i7@?", document0.location());
      assertEquals("D[@l8whH;A|i7@?", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("D[@l8whH;A|i7@?", document0.location());
      assertEquals("D[@l8whH;A|i7@?", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("D[@l8whH;A|i7@?", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("D[@l8whH;A|i7@?", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.parser((Parser) null);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("D[@l8whH;A|i7@?", document0.location());
      assertEquals("D[@l8whH;A|i7@?", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("D[@l8whH;A|i7@?", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("D[@l8whH;A|i7@?", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("D[@l8whH;A|i7@?", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("D[@l8whH;A|i7@?", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements0 = document2.previousElementSiblings();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("D[@l8whH;A|i7@?", document0.location());
      assertEquals("D[@l8whH;A|i7@?", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("D[@l8whH;A|i7@?", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("D[@l8whH;A|i7@?", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("D[@l8whH;A|i7@?", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("D[@l8whH;A|i7@?", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = new Document("");
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Elements elements0 = document0.previousElementSiblings();
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.val("");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document0.after((Node) document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Element element0 = document0.body();
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        document0.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8|?~8$2\u0006", "z@");
      assertEquals("z@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.clone();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertNotNull(document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertEquals("z@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("z@", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("z@", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document1, document0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      
      Element element0 = document1.body();
      assertEquals("z@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("z@", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("z@", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("z@", element0.baseUri());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      assertSame(document0, document1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document1, document0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      
      Element element1 = element0.tagName("88Z?kjFJ!");
      assertEquals("z@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("z@", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("z@", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("z@", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("88z?kjfj!", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("88z?kjfj!", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("z@", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("88z?kjfj!", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals("88z?kjfj!", element1.tagName());
      assertNotNull(element1);
      assertSame(document0, document1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document1, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      
      Elements elements0 = document1.getElementsMatchingText("z@");
      assertEquals("z@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("z@", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("z@", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document1, document0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("i", "i");
      assertEquals("#document", document0.nodeName());
      assertEquals("i", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("i", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("#document", document0.nodeName());
      assertEquals("i", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("i", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("i", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertNotNull(element0);
      
      Elements elements0 = document0.previousElementSiblings();
      assertEquals("#document", document0.nodeName());
      assertEquals("i", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("i", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = element0.nextElementSiblings();
      assertEquals("#document", document0.nodeName());
      assertEquals("i", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("i", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("i", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("y", "y");
      assertEquals(1, document0.childNodeSize());
      assertEquals("y", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("y", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      document0.setParentNode(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("y", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("y", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("y", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("y", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("      ", "      ");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("      ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("      ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = new Document("      ");
      assertEquals("      ", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("      ", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Elements elements0 = document1.nextElementSiblings();
      assertEquals("      ", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("      ", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parse("y", "y");
      assertEquals("#document", document0.nodeName());
      assertEquals("y", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("y", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      document0.setParentNode(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("y", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("y", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.nextElementSibling();
      assertEquals("#document", document0.nodeName());
      assertEquals("y", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("y", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xht4R", "xht4R");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xht4R", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xht4R", document0.location());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xht4R", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xht4R", document0.location());
      assertEquals("body", element0.tagName());
      assertEquals("xht4R", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      
      Elements elements0 = element0.previousElementSiblings();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xht4R", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xht4R", document0.location());
      assertEquals("body", element0.tagName());
      assertEquals("xht4R", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = new Document(" \"");
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      document0.doSetBaseUri(" \"");
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Document document1 = Parser.parseBodyFragmentRelaxed(" \"", "}e\"xO9C7)~)$");
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      String string0 = document1.wholeText();
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertNotNull(string0);
      assertEquals(" \"", string0);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document1.doClone(document0);
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("}e\"xO9C7)~)$", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("}e\"xO9C7)~)$", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      document0.setParentNode(document1);
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document3 = (Document)document1.traverse(nodeVisitor0);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("}e\"xO9C7)~)$", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("}e\"xO9C7)~)$", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      String string1 = document0.cssSelector();
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(string1);
      assertEquals("#root", string1);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(string1.equals((Object)string0));
      
      Document document4 = (Document)document2.addClass("p4");
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("}e\"xO9C7)~)$", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("}e\"xO9C7)~)$", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertTrue(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertEquals("}e\"xO9C7)~)$", document4.baseUri());
      assertEquals("}e\"xO9C7)~)$", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document4, document1);
      assertSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      
      Elements elements0 = document0.nextElementSiblings();
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      
      String string2 = document1.html();
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertNotNull(string2);
      assertEquals("<html>\n <head></head>\n <body>\n   \"\n </body>\n</html>", string2);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Map<String, String> map0 = document0.dataset();
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      
      List<Node> list0 = document2.ensureChildNodes();
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("}e\"xO9C7)~)$", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("}e\"xO9C7)~)$", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Tag tag0 = Tag.valueOf("n_lq])LUmU.ab+");
      assertFalse(tag0.isSelfClosing());
      assertEquals("n_lq])LUmU.ab+", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("n_lq])LUmU.ab+", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertNotNull(tag0);
      
      String string0 = "body";
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      String string1 = parseSettings0.normalizeTag("@`yCx.!<Bk");
      assertNotNull(string1);
      assertEquals("@`ycx.!<bk", string1);
      assertFalse(string1.equals((Object)string0));
      
      Tag tag1 = Tag.valueOf("n_lq])LUmU.ab+", parseSettings0);
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isSelfClosing());
      assertEquals("n_lq])lumu.ab+", tag1.getName());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.canContainBlock());
      assertTrue(tag1.isInline());
      assertTrue(tag1.formatAsBlock());
      assertEquals("n_lq])lumu.ab+", tag1.toString());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isData());
      assertFalse(tag1.isKnownTag());
      assertNotNull(tag1);
      assertNotSame(tag1, tag0);
      assertFalse(tag1.equals((Object)tag0));
      
      Element element0 = new Element(tag0, "body");
      assertFalse(tag0.isSelfClosing());
      assertEquals("n_lq])LUmU.ab+", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("n_lq])LUmU.ab+", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(element0.hasParent());
      assertEquals("body", element0.baseUri());
      assertEquals("n_lq])LUmU.ab+", element0.nodeName());
      assertEquals("n_lq])LUmU.ab+", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      assertFalse(tag0.equals((Object)tag1));
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      stringWriter0.write("1H=U I2Tguc4tW");
      assertEquals("1H=U I2Tguc4tW", stringWriter0.toString());
      
      String string2 = "html";
      String string3 = "html";
      Elements elements0 = element0.parents();
      assertFalse(tag0.isSelfClosing());
      assertEquals("n_lq])LUmU.ab+", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("n_lq])LUmU.ab+", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(element0.hasParent());
      assertEquals("body", element0.baseUri());
      assertEquals("n_lq])LUmU.ab+", element0.nodeName());
      assertEquals("n_lq])LUmU.ab+", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertNotSame(tag0, tag1);
      assertFalse(tag0.equals((Object)tag1));
      
      Tag tag2 = Tag.valueOf("html");
      assertFalse(tag2.preserveWhitespace());
      assertTrue(tag2.isKnownTag());
      assertFalse(tag2.isFormSubmittable());
      assertFalse(tag2.isData());
      assertFalse(tag2.isEmpty());
      assertEquals("html", tag2.getName());
      assertEquals("html", tag2.toString());
      assertFalse(tag2.isFormListed());
      assertTrue(tag2.formatAsBlock());
      assertFalse(tag2.isSelfClosing());
      assertTrue(tag2.canContainBlock());
      assertTrue(tag2.isBlock());
      assertFalse(tag2.isInline());
      assertNotNull(tag2);
      assertNotSame(tag2, tag0);
      assertNotSame(tag2, tag1);
      assertFalse(tag2.equals((Object)tag0));
      assertFalse(tag2.equals((Object)tag1));
      
      stringWriter0.write("html");
      assertEquals("1H=U I2Tguc4tWhtml", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('!');
      assertEquals("1H=U I2Tguc4tWhtml!", stringWriter0.toString());
      assertEquals("1H=U I2Tguc4tWhtml!", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "n_lq])LUmU.ab+");
      assertEquals("1H=U I2Tguc4tWhtml!n_lq])LUmU.ab+", stringWriter0.toString());
      assertEquals("1H=U I2Tguc4tWhtml!n_lq])LUmU.ab+", stringWriter1.toString());
      assertEquals("1H=U I2Tguc4tWhtml!n_lq])LUmU.ab+", stringWriter2.toString());
      assertNotNull(stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      
      StringWriter stringWriter3 = element0.html(stringWriter2);
      assertFalse(tag0.isSelfClosing());
      assertEquals("n_lq])LUmU.ab+", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("n_lq])LUmU.ab+", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(element0.hasParent());
      assertEquals("body", element0.baseUri());
      assertEquals("n_lq])LUmU.ab+", element0.nodeName());
      assertEquals("n_lq])LUmU.ab+", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("1H=U I2Tguc4tWhtml!n_lq])LUmU.ab+", stringWriter0.toString());
      assertEquals("1H=U I2Tguc4tWhtml!n_lq])LUmU.ab+", stringWriter1.toString());
      assertEquals("1H=U I2Tguc4tWhtml!n_lq])LUmU.ab+", stringWriter2.toString());
      assertEquals("1H=U I2Tguc4tWhtml!n_lq])LUmU.ab+", stringWriter3.toString());
      assertNotNull(stringWriter3);
      assertNotSame(tag0, tag2);
      assertNotSame(tag0, tag1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter3);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter3);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter3);
      assertSame(stringWriter3, stringWriter1);
      assertSame(stringWriter3, stringWriter2);
      assertSame(stringWriter3, stringWriter0);
      assertFalse(tag0.equals((Object)tag2));
      assertFalse(tag0.equals((Object)tag1));
      
      Elements elements1 = element0.getElementsContainingOwnText("");
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertEquals("n_lq])LUmU.ab+", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("n_lq])LUmU.ab+", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(element0.hasParent());
      assertEquals("body", element0.baseUri());
      assertEquals("n_lq])LUmU.ab+", element0.nodeName());
      assertEquals("n_lq])LUmU.ab+", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      assertNotSame(tag0, tag2);
      assertNotSame(tag0, tag1);
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(tag0.equals((Object)tag2));
      assertFalse(tag0.equals((Object)tag1));
      
      Elements elements2 = element0.getElementsContainingOwnText("body");
      assertFalse(tag0.isSelfClosing());
      assertEquals("n_lq])LUmU.ab+", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("n_lq])LUmU.ab+", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertFalse(element0.hasParent());
      assertEquals("body", element0.baseUri());
      assertEquals("n_lq])LUmU.ab+", element0.nodeName());
      assertEquals("n_lq])LUmU.ab+", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(elements2);
      assertNotSame(tag0, tag2);
      assertNotSame(tag0, tag1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertFalse(tag0.equals((Object)tag2));
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      
      Document document0 = element0.ownerDocument();
      assertFalse(tag0.isSelfClosing());
      assertEquals("n_lq])LUmU.ab+", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("n_lq])LUmU.ab+", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(element0.hasParent());
      assertEquals("body", element0.baseUri());
      assertEquals("n_lq])LUmU.ab+", element0.nodeName());
      assertEquals("n_lq])LUmU.ab+", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertNull(document0);
      assertNotSame(tag0, tag2);
      assertNotSame(tag0, tag1);
      assertFalse(tag0.equals((Object)tag2));
      assertFalse(tag0.equals((Object)tag1));
      
      // Undeclared exception!
      try { 
        element0.before((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = new Document("xhtmR");
      assertEquals("xhtmR", document0.location());
      assertEquals("xhtmR", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        document0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = new Document("xhtml");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertNotNull(document0);
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Document document1 = (Document)document0.prepend("xhtml");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.is("xhtml");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertFalse(boolean0);
      assertSame(document0, document1);
      
      String string0 = "5cpO/M+_-@Q`OF5%;}";
      Elements elements0 = document1.getElementsByAttributeValueMatching("org.jsoup.nodes.Entities", "head");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean1 = document1.hasAttributes();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(boolean1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(boolean1 == boolean0);
      
      String string1 = "br";
      Document document2 = (Document)document0.toggleClass("br");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("xhtml", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("xhtml", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document0.empty();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("xhtml", document3.location());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("xhtml", document3.baseUri());
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      String string2 = "";
      // Undeclared exception!
      try { 
        document3.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8|?~8$2\u0006", "");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.clone();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Tag tag0 = Tag.valueOf("body");
      assertEquals("body", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertEquals("body", tag0.toString());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("body", false);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "8|?~8$2\u0006", attributes1);
      assertEquals("body", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertEquals("body", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertFalse(formElement0.hasParent());
      assertEquals("8|?~8$2\u0006", formElement0.baseUri());
      assertTrue(formElement0.isBlock());
      assertEquals("body", formElement0.tagName());
      assertEquals("body", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertEquals("body", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertFalse(formElement0.hasParent());
      assertEquals("8|?~8$2\u0006", formElement0.baseUri());
      assertTrue(formElement0.isBlock());
      assertEquals("body", formElement0.tagName());
      assertEquals("body", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("body", formElement1.tagName());
      assertEquals(0, formElement1.siblingIndex());
      assertTrue(formElement1.isBlock());
      assertFalse(formElement1.hasParent());
      assertEquals("8|?~8$2\u0006", formElement1.baseUri());
      assertEquals("body", formElement1.nodeName());
      assertEquals(0, formElement1.childNodeSize());
      assertNotNull(formElement1);
      assertNotSame(document0, document1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(document0.equals((Object)document1));
      
      boolean boolean0 = linkedHashSet0.add(formElement1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals("body", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertEquals("body", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertFalse(formElement0.hasParent());
      assertEquals("8|?~8$2\u0006", formElement0.baseUri());
      assertTrue(formElement0.isBlock());
      assertEquals("body", formElement0.tagName());
      assertEquals("body", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("body", formElement1.tagName());
      assertEquals(0, formElement1.siblingIndex());
      assertTrue(formElement1.isBlock());
      assertFalse(formElement1.hasParent());
      assertEquals("8|?~8$2\u0006", formElement1.baseUri());
      assertEquals("body", formElement1.nodeName());
      assertEquals(0, formElement1.childNodeSize());
      assertTrue(linkedHashSet0.contains(formElement0));
      assertTrue(boolean0);
      assertNotSame(document0, document1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(document0.equals((Object)document1));
      
      FormElement formElement2 = (FormElement)formElement0.doClone(document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("body", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertEquals("body", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertFalse(formElement0.hasParent());
      assertEquals("8|?~8$2\u0006", formElement0.baseUri());
      assertTrue(formElement0.isBlock());
      assertEquals("body", formElement0.tagName());
      assertEquals("body", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertTrue(formElement2.isBlock());
      assertEquals("body", formElement2.tagName());
      assertEquals(0, formElement2.childNodeSize());
      assertEquals(0, formElement2.siblingIndex());
      assertTrue(formElement2.hasParent());
      assertEquals("body", formElement2.nodeName());
      assertEquals("8|?~8$2\u0006", formElement2.baseUri());
      assertNotNull(formElement2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertNotSame(formElement0, formElement2);
      assertNotSame(formElement2, formElement1);
      assertNotSame(formElement2, formElement0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(formElement2.equals((Object)formElement1));
      assertFalse(formElement2.equals((Object)formElement0));
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertNotNull(document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document1, document0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      
      Document document2 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "html");
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("html", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("html", document2.location());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      Element element0 = document2.body();
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("html", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("html", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("html", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      Elements elements0 = document1.getElementsMatchingText("org.jsoup.select.CombiningEvaluator$Or");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document1.equals((Object)document2));
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xtml", "xtml");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("xtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("xtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("xtml", "xtml");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("xtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("xtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document document1 = (Document)document0.val("xtml");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("xtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("xtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("xtml", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("xtml", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = new Document("xhtml");
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertNotNull(document0);
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Document document1 = (Document)document0.prepend("xhtml");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.is("xhtml");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(boolean0);
      assertSame(document0, document1);
      
      Elements elements0 = document1.getElementsByAttributeValueMatching("5cpO/M+_-@Q`OF5%;}", "");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean1 = document1.hasAttributes();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(boolean1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(boolean1 == boolean0);
      
      Document document2 = (Document)document0.toggleClass("5cpO/M+_-@Q`OF5%;}");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("xhtml", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("xhtml", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document1.empty();
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document3.childNodeSize());
      assertEquals("xhtml", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("xhtml", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      Elements elements1 = document2.getElementsByTag("h=t_1/cT8HuY/B");
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("xhtml", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("xhtml", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      
      Document document4 = (Document)document1.addClass("xhtml");
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("xhtml", document4.baseUri());
      assertEquals("xhtml", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.childNodeSize());
      assertNotNull(document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document2);
      
      Elements elements2 = document3.getElementsMatchingOwnText("5cpO/M+_-@Q`OF5%;}");
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document3.childNodeSize());
      assertEquals("xhtml", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("xhtml", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertNotNull(elements2);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      
      // Undeclared exception!
      try { 
        document1.text("xhtml");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parse("", "");
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Document.createShell("<:XBKx`/sCH@H");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<:XBKx`/sCH@H", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("<:XBKx`/sCH@H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("<:XBKx`/sCH@H");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<:XBKx`/sCH@H", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("<:XBKx`/sCH@H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("<:XBKx`/sCH@H", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("<:XBKx`/sCH@H", document1.location());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.addClass("<:XBKx`/sCH@H");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<:XBKx`/sCH@H", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("<:XBKx`/sCH@H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("<:XBKx`/sCH@H", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("<:XBKx`/sCH@H", document1.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("<:XBKx`/sCH@H", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("<:XBKx`/sCH@H", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document1.addClass("y;rjWpXo");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<:XBKx`/sCH@H", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("<:XBKx`/sCH@H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("<:XBKx`/sCH@H", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("<:XBKx`/sCH@H", document1.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("<:XBKx`/sCH@H", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("<:XBKx`/sCH@H", document3.baseUri());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      Elements elements0 = document2.getElementsByClass("<:XBKx`/sCH@H");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<:XBKx`/sCH@H", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("<:XBKx`/sCH@H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("<:XBKx`/sCH@H", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("<:XBKx`/sCH@H", document1.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("<:XBKx`/sCH@H", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("<:XBKx`/sCH@H", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      
      Document document4 = (Document)document2.toggleClass("<:XBKx`/sCH@H");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<:XBKx`/sCH@H", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("<:XBKx`/sCH@H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("<:XBKx`/sCH@H", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("<:XBKx`/sCH@H", document1.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("<:XBKx`/sCH@H", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("<:XBKx`/sCH@H", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("<:XBKx`/sCH@H", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("<:XBKx`/sCH@H", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertNotNull(document4);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document1);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("", "@ht@w3[ct6fN@");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("@ht@w3[ct6fN@", document0.location());
      assertEquals("@ht@w3[ct6fN@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasClass("`;9Zk(3=ld=KWp");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("@ht@w3[ct6fN@", document0.location());
      assertEquals("@ht@w3[ct6fN@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(boolean0);
      
      Document document1 = (Document)document0.tagName("@ht@w3[ct6fN@");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("@ht@w3[ct6fN@", document0.location());
      assertEquals("@ht@w3[ct6fN@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("@ht@w3[ct6fN@", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("@ht@w3[ct6fN@", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("@ht@w3[ct6fN@", document1.tagName());
      assertEquals("@ht@w3[ct6fN@", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.body();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("@ht@w3[ct6fN@", document0.location());
      assertEquals("@ht@w3[ct6fN@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("@ht@w3[ct6fN@", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertNull(element0);
      assertSame(document0, document1);
      
      String string0 = "TagOpen";
      Document document2 = (Document)document0.toggleClass("@ht@w3[ct6fN@");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("@ht@w3[ct6fN@", document0.location());
      assertEquals("@ht@w3[ct6fN@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("@ht@w3[ct6fN@", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("@ht@w3[ct6fN@", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("@ht@w3[ct6fN@", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("@ht@w3[ct6fN@", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      DocumentType documentType0 = null;
      try {
        documentType0 = new DocumentType((String) null, (String) null, "TagOpen");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = "</";
      Document document0 = new Document("</");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Elements elements0 = document0.siblingElements();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Attributes attributes0 = document0.attributes();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Document document1 = (Document)document0.val("html");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("</", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements1 = document0.getElementsByAttributeStarting("</");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      
      // Undeclared exception!
      try { 
        document1.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = new Document("Ihcc,g-r|: UI");
      assertEquals("Ihcc,g-r|: UI", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Ihcc,g-r|: UI", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      Elements elements0 = document0.siblingElements();
      assertEquals("Ihcc,g-r|: UI", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Ihcc,g-r|: UI", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document1 = new Document("OAt[)-");
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("OAt[)-", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("OAt[)-", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document1.normalise();
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("OAt[)-", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("OAt[)-", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("OAt[)-", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("OAt[)-", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Document document3 = document0.clone();
      assertEquals("Ihcc,g-r|: UI", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Ihcc,g-r|: UI", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("Ihcc,g-r|: UI", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Ihcc,g-r|: UI", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertNotNull(document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      
      Document document4 = (Document)document1.addClass("OAt[)-");
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("OAt[)-", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("OAt[)-", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("OAt[)-", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertEquals("OAt[)-", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertNotNull(document4);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertNotSame(document4, document3);
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      
      String string0 = "";
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueStarting("OAt[)-", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!DOCTYPE", "<!DOCTYPE");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("<!DOCTYPE", document0.baseUri());
      assertEquals("<!DOCTYPE", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("<!DOCTYPE", document0.baseUri());
      assertEquals("<!DOCTYPE", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("<!DOCTYPE", document1.baseUri());
      assertEquals("<!DOCTYPE", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      List<Node> list0 = document0.ensureChildNodes();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("<!DOCTYPE", document0.baseUri());
      assertEquals("<!DOCTYPE", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      
      document0.childNodes = list0;
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("<!DOCTYPE", document0.baseUri());
      assertEquals("<!DOCTYPE", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document0.childNodes.isEmpty());
      assertEquals(1, document0.childNodes.size());
      
      document0.updateMetaCharsetElement(true);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("<!DOCTYPE", document0.baseUri());
      assertEquals("<!DOCTYPE", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.updateMetaCharsetElement());
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      
      Elements elements0 = document1.getElementsByIndexEquals(1557);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("<!DOCTYPE", document0.baseUri());
      assertEquals("<!DOCTYPE", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("<!DOCTYPE", document1.baseUri());
      assertEquals("<!DOCTYPE", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document0.appendText("<!DOCTYPE");
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("<!DOCTYPE", document0.baseUri());
      assertEquals("<!DOCTYPE", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("<!DOCTYPE", document2.baseUri());
      assertTrue(document2.updateMetaCharsetElement());
      assertEquals("<!DOCTYPE", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document0.removeClass("script");
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("<!DOCTYPE", document0.baseUri());
      assertEquals("<!DOCTYPE", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("<!DOCTYPE", document3.location());
      assertEquals("<!DOCTYPE", document3.baseUri());
      assertTrue(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      
      Elements elements1 = document2.getElementsByClass("org.jsoup.nodes.Element$NodeList");
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("<!DOCTYPE", document0.baseUri());
      assertEquals("<!DOCTYPE", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("<!DOCTYPE", document2.baseUri());
      assertTrue(document2.updateMetaCharsetElement());
      assertEquals("<!DOCTYPE", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      
      Document document4 = (Document)document0.prependText("p4");
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("<!DOCTYPE", document0.baseUri());
      assertEquals("<!DOCTYPE", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.hasParent());
      assertEquals("<!DOCTYPE", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("<!DOCTYPE", document4.baseUri());
      assertTrue(document4.updateMetaCharsetElement());
      assertEquals(3, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertNotNull(document4);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = new Document("p{8sDd,$4uAUA'6a");
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("p{8sDd,$4uAUA'6a", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("p{8sDd,$4uAUA'6a", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Attributes attributes0 = document0.attributes();
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("p{8sDd,$4uAUA'6a", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("p{8sDd,$4uAUA'6a", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Document document1 = (Document)document0.addClass("p{8sDd,$4uAUA'6a");
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("p{8sDd,$4uAUA'6a", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("p{8sDd,$4uAUA'6a", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("p{8sDd,$4uAUA'6a", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("p{8sDd,$4uAUA'6a", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueStarting("", "bhQ|=@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = new Document("</");
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Elements elements0 = document0.siblingElements();
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document1 = new Document("");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document1.normalise();
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Document document3 = document2.clone();
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      Document document4 = (Document)document0.val("org.jsoup.select.Selector");
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.childNodeSize());
      assertEquals("</", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.baseUri());
      assertFalse(document4.isBlock());
      assertNotNull(document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      
      Elements elements1 = document3.getElementsByAttributeStarting("</");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document4);
      assertNotSame(document3, document0);
      assertNotSame(elements1, elements0);
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
      
      Elements elements2 = document3.select("html");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, elements2.size());
      assertFalse(elements2.isEmpty());
      assertNotNull(elements2);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document4);
      assertNotSame(document3, document0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document0));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      
      String string0 = document0.className();
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("", string0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      
      Elements elements3 = document2.getElementsByClass("XJ-Y``e,5nR");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertNotNull(elements3);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements1));
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Document.createShell("UwBK-8T/H@H");
      assertEquals("UwBK-8T/H@H", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("UwBK-8T/H@H", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("UwBK-8T/H@H");
      assertEquals("UwBK-8T/H@H", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("UwBK-8T/H@H", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("UwBK-8T/H@H", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("UwBK-8T/H@H", document1.location());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsByAttributeValueEnding("UwBK-8T/H@H", "UwBK-8T/H@H");
      assertEquals("UwBK-8T/H@H", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("UwBK-8T/H@H", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("UwBK-8T/H@H", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("UwBK-8T/H@H", document1.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      String string0 = "z9xn\"#`GL[,hS:|ahXB";
      String string1 = "AfterAttributeName";
      Document document0 = Document.createShell("AfterAttributeName");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("AfterAttributeName", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("AfterAttributeName", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      String string2 = "br";
      Elements elements0 = document0.getElementsByAttributeValueEnding("br", "z9xn\"#`GL[,hS:|ahXB");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("AfterAttributeName", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("AfterAttributeName", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = new Document(" \"");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(" \"", document0.baseUri());
      assertNotNull(document0);
      
      document0.doSetBaseUri(" \"");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(" \"", document0.baseUri());
      
      Document document1 = Parser.parseBodyFragmentRelaxed(" \"", "}e\"xO9C7)~)$");
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      String string0 = document1.wholeText();
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(string0);
      assertEquals(" \"", string0);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document1.doClone(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(" \"", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("}e\"xO9C7)~)$", document2.baseUri());
      assertEquals("}e\"xO9C7)~)$", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      document0.setParentNode(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(" \"", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      
      Elements elements0 = document0.siblingElements();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(" \"", document0.baseUri());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      
      Document document3 = (Document)document0.removeClass("org.jsoup.nodes.Entities$CoreCharset");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(" \"", document0.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(" \"", document3.baseUri());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(" \"", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      
      String string1 = document1.className();
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(string1.equals((Object)string0));
      
      Document document4 = Document.createShell("textarea");
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("textarea", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertEquals("textarea", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertNotNull(document4);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      
      // Undeclared exception!
      try { 
        document4.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parse(" ", " ");
      assertEquals("#root", document0.tagName());
      assertEquals(" ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertEquals("#root", document0.tagName());
      assertEquals(" ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" ", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      
      Map<String, String> map0 = element0.dataset();
      assertEquals("#root", document0.tagName());
      assertEquals(" ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" ", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = new Document("xhtmR");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("xhtmR", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("xhtmR", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.empty();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("xhtmR", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("xhtmR", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("xhtmR", document1.location());
      assertEquals("xhtmR", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("xhtml");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.text("xhtml");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("xhtml", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("xhtml", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = "Al7n#x";
      Document document0 = Document.createShell("Al7n#x");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Al7n#x", document0.baseUri());
      assertEquals("Al7n#x", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text("x>[T~_ ;s");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Al7n#x", document0.baseUri());
      assertEquals("Al7n#x", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals("Al7n#x", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("Al7n#x", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByIndexEquals(58);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Al7n#x", document0.baseUri());
      assertEquals("Al7n#x", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document1.val("g@nvP}X");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Al7n#x", document0.baseUri());
      assertEquals("Al7n#x", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals("Al7n#x", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("Al7n#x", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Al7n#x", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("Al7n#x", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document2.appendChild(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Al7n#x", document0.baseUri());
      assertEquals("Al7n#x", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals("Al7n#x", document1.baseUri());
      assertEquals("Al7n#x", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("Al7n#x", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Al7n#x", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Al7n#x", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("Al7n#x", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      boolean boolean0 = document1.isBlock();
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Al7n#x", document0.baseUri());
      assertEquals("Al7n#x", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals("Al7n#x", document1.baseUri());
      assertEquals("Al7n#x", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(boolean0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      Attributes attributes0 = document0.attributes();
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Al7n#x", document0.baseUri());
      assertEquals("Al7n#x", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      String string1 = document1.tagName();
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Al7n#x", document0.baseUri());
      assertEquals("Al7n#x", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals("Al7n#x", document1.baseUri());
      assertEquals("Al7n#x", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertNotNull(string1);
      assertEquals("#root", string1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(string1.equals((Object)string0));
      
      Map<String, String> map0 = document1.dataset();
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Al7n#x", document0.baseUri());
      assertEquals("Al7n#x", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals("Al7n#x", document1.baseUri());
      assertEquals("Al7n#x", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      String string2 = "\\gzg/Zxx";
      Pattern pattern0 = Pattern.compile("gzg/Zxx");
      assertEquals("gzg/Zxx", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("gzg/Zxx", pattern0.pattern());
      assertNotNull(pattern0);
      
      String string3 = document2.cssSelector();
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Al7n#x", document0.baseUri());
      assertEquals("Al7n#x", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals("Al7n#x", document1.baseUri());
      assertEquals("Al7n#x", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("Al7n#x", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Al7n#x", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertNotNull(string3);
      assertEquals("#root", string3);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      document2.getElementsMatchingText(pattern0);
      String string4 = "";
      Tag tag0 = Tag.valueOf(string2);
      String string5 = ";,IEaq,dX.";
      Element element0 = new Element(tag0, string5);
      document0.parentNode = (Node) element0;
      boolean boolean1 = false;
      boolean boolean2 = false;
      ParseSettings parseSettings0 = new ParseSettings(boolean1, boolean2);
      Tag.valueOf(string5, parseSettings0);
      Element element1 = document0.val(string4);
      Tag.valueOf(string0, parseSettings0);
      String string6 = "5tfYrO5_";
      Element element2 = element1.prependElement(string6);
      int int0 = 8222;
      element0.hasText();
      document3.getElementsByIndexGreaterThan(int0);
      String string7 = "body";
      element1.getElementsContainingOwnText(string7);
      element2.getElementsContainingText(string2);
      element0.shallowClone();
      String string8 = "hZ_;Omd/iqc";
      element0.getElementsByAttributeValueMatching(string8, pattern0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parse("xht4R", "xht4R");
      assertEquals("xht4R", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xht4R", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("xht4R", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xht4R", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("xht4R", element0.baseUri());
      assertNotNull(element0);
      
      boolean boolean0 = element0.hasText();
      assertEquals("xht4R", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xht4R", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("xht4R", element0.baseUri());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        document0.before((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Tag tag0 = Tag.valueOf("n_lq])LUmU.ab+");
      assertFalse(tag0.isData());
      assertEquals("n_lq])LUmU.ab+", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("n_lq])LUmU.ab+", tag0.toString());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      String string0 = "body";
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      String string1 = parseSettings0.normalizeTag("@`yCx.!<Bk");
      assertNotNull(string1);
      assertEquals("@`ycx.!<bk", string1);
      assertFalse(string1.equals((Object)string0));
      
      Tag tag1 = Tag.valueOf("n_lq])LUmU.ab+", parseSettings0);
      assertFalse(tag1.preserveWhitespace());
      assertEquals("n_lq])lumu.ab+", tag1.getName());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isBlock());
      assertEquals("n_lq])lumu.ab+", tag1.toString());
      assertTrue(tag1.isInline());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isFormSubmittable());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isData());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isEmpty());
      assertNotNull(tag1);
      assertNotSame(tag1, tag0);
      assertFalse(tag1.equals((Object)tag0));
      
      Element element0 = new Element(tag0, "body");
      assertFalse(tag0.isData());
      assertEquals("n_lq])LUmU.ab+", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("n_lq])LUmU.ab+", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("n_lq])LUmU.ab+", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("n_lq])LUmU.ab+", element0.tagName());
      assertEquals("body", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      assertFalse(tag0.equals((Object)tag1));
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      stringWriter0.write("1H=U I2Tguc4tW");
      assertEquals("1H=U I2Tguc4tW", stringWriter0.toString());
      
      String string2 = "html";
      String string3 = "html";
      Elements elements0 = element0.parents();
      assertFalse(tag0.isData());
      assertEquals("n_lq])LUmU.ab+", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("n_lq])LUmU.ab+", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("n_lq])LUmU.ab+", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("n_lq])LUmU.ab+", element0.tagName());
      assertEquals("body", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertNotSame(tag0, tag1);
      assertFalse(tag0.equals((Object)tag1));
      
      Tag tag2 = Tag.valueOf("html");
      assertFalse(tag2.isFormSubmittable());
      assertFalse(tag2.isInline());
      assertTrue(tag2.isKnownTag());
      assertFalse(tag2.isSelfClosing());
      assertEquals("html", tag2.getName());
      assertTrue(tag2.formatAsBlock());
      assertFalse(tag2.isData());
      assertEquals("html", tag2.toString());
      assertFalse(tag2.isFormListed());
      assertFalse(tag2.preserveWhitespace());
      assertFalse(tag2.isEmpty());
      assertTrue(tag2.isBlock());
      assertTrue(tag2.canContainBlock());
      assertNotNull(tag2);
      assertNotSame(tag2, tag0);
      assertNotSame(tag2, tag1);
      assertFalse(tag2.equals((Object)tag0));
      assertFalse(tag2.equals((Object)tag1));
      
      stringWriter0.write("html");
      assertEquals("1H=U I2Tguc4tWhtml", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('!');
      assertEquals("1H=U I2Tguc4tWhtml!", stringWriter0.toString());
      assertEquals("1H=U I2Tguc4tWhtml!", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "n_lq])LUmU.ab+");
      assertEquals("1H=U I2Tguc4tWhtml!n_lq])LUmU.ab+", stringWriter0.toString());
      assertEquals("1H=U I2Tguc4tWhtml!n_lq])LUmU.ab+", stringWriter1.toString());
      assertEquals("1H=U I2Tguc4tWhtml!n_lq])LUmU.ab+", stringWriter2.toString());
      assertNotNull(stringWriter2);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      
      StringWriter stringWriter3 = element0.html(stringWriter2);
      assertFalse(tag0.isData());
      assertEquals("n_lq])LUmU.ab+", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("n_lq])LUmU.ab+", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("n_lq])LUmU.ab+", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("n_lq])LUmU.ab+", element0.tagName());
      assertEquals("body", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("1H=U I2Tguc4tWhtml!n_lq])LUmU.ab+", stringWriter0.toString());
      assertEquals("1H=U I2Tguc4tWhtml!n_lq])LUmU.ab+", stringWriter1.toString());
      assertEquals("1H=U I2Tguc4tWhtml!n_lq])LUmU.ab+", stringWriter2.toString());
      assertEquals("1H=U I2Tguc4tWhtml!n_lq])LUmU.ab+", stringWriter3.toString());
      assertNotNull(stringWriter3);
      assertNotSame(tag0, tag2);
      assertNotSame(tag0, tag1);
      assertSame(stringWriter0, stringWriter3);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter3);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter3);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter3, stringWriter0);
      assertSame(stringWriter3, stringWriter1);
      assertSame(stringWriter3, stringWriter2);
      assertFalse(tag0.equals((Object)tag2));
      assertFalse(tag0.equals((Object)tag1));
      
      Elements elements1 = element0.getElementsContainingOwnText("+");
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("n_lq])LUmU.ab+", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("n_lq])LUmU.ab+", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("n_lq])LUmU.ab+", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("n_lq])LUmU.ab+", element0.tagName());
      assertEquals("body", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      assertNotSame(tag0, tag2);
      assertNotSame(tag0, tag1);
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(tag0.equals((Object)tag2));
      assertFalse(tag0.equals((Object)tag1));
      
      Elements elements2 = element0.getElementsContainingOwnText("body");
      assertFalse(tag0.isData());
      assertEquals("n_lq])LUmU.ab+", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("n_lq])LUmU.ab+", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertEquals("n_lq])LUmU.ab+", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("n_lq])LUmU.ab+", element0.tagName());
      assertEquals("body", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(elements2);
      assertNotSame(tag0, tag2);
      assertNotSame(tag0, tag1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertFalse(tag0.equals((Object)tag2));
      assertFalse(tag0.equals((Object)tag1));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      
      Document document0 = element0.ownerDocument();
      assertFalse(tag0.isData());
      assertEquals("n_lq])LUmU.ab+", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("n_lq])LUmU.ab+", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("n_lq])LUmU.ab+", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("n_lq])LUmU.ab+", element0.tagName());
      assertEquals("body", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertNull(document0);
      assertNotSame(tag0, tag2);
      assertNotSame(tag0, tag1);
      assertFalse(tag0.equals((Object)tag2));
      assertFalse(tag0.equals((Object)tag1));
      
      // Undeclared exception!
      try { 
        element0.before((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = "</";
      Document document0 = new Document("</");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Elements elements0 = document0.siblingElements();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      boolean boolean0 = document0.hasAttr("</");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(boolean0);
      
      Document document1 = new Document("");
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document1.normalise();
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Document document3 = Parser.parseBodyFragmentRelaxed("", "</");
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("</", document3.location());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertNotNull(document3);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Document document4 = (Document)document1.addClass("</");
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.updateMetaCharsetElement());
      assertNotNull(document4);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      
      // Undeclared exception!
      try { 
        document2.getElementsByAttributeValueStarting("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Document.createShell("body");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("body", document1.baseUri());
      assertEquals("body", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsByIndexLessThan(33);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals("body", document1.baseUri());
      assertEquals("body", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      String string0 = document0.cssSelector();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertNotNull(string0);
      assertEquals("#root", string0);
      
      String string1 = "Bv/N^@]'hP3j7GUK";
      Elements elements0 = document0.getElementsByTag("NzA\"PHd%X&U4l");
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = document0.select("#root");
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      
      Node node0 = document0.nextSibling();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertNull(node0);
      
      List<Node> list0 = document0.childNodes();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Document document1 = document0.ownerDocument();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements2 = document1.getElementsByIndexLessThan(3084);
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(3, elements2.size());
      assertFalse(elements2.isEmpty());
      assertNotNull(elements2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      
      String string2 = "value";
      String string3 = "wT|";
      // Undeclared exception!
      try { 
        document0.before("wT|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xht4R", "xht4R");
      assertEquals("#root", document0.tagName());
      assertEquals("xht4R", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xht4R", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.child((-2804));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      String string0 = document0.ownText();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document document1 = document0.outputSettings(document_OutputSettings1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document0);
      
      Elements elements0 = document0.parents();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      Document document2 = document0.quirksMode(document_QuirksMode0);
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      document0.siblingIndex = (-333);
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      
      Document document3 = document2.normalise();
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      
      document3.nodelistChanged();
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      
      String string1 = document3.toString();
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertNotNull(string1);
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertFalse(string1.equals((Object)string0));
      
      Document document4 = (Document)document3.append("seamless");
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("", document4.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals((-333), document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.location());
      assertNotNull(document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertSame(document4, document1);
      
      Elements elements1 = document4.getElementsContainingText("autofocus");
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("", document4.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals((-333), document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.location());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      
      Document document5 = (Document)document2.doClone(document0);
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertTrue(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals((-333), document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertEquals("", document5.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals("", document5.baseUri());
      assertNotNull(document5);
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document5);
      assertSame(document2, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      
      String string2 = document5.val();
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertTrue(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals((-333), document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertEquals("", document5.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals("", document5.baseUri());
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document5);
      assertSame(document2, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      
      document5.setSiblingIndex((-4997));
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertTrue(document5.hasParent());
      assertFalse(document5.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertEquals("", document5.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals("", document5.baseUri());
      assertEquals((-4997), document5.siblingIndex());
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document5);
      assertSame(document2, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      
      boolean boolean0 = document3.hasAttributes();
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(boolean0);
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document5);
      assertSame(document2, document4);
      assertNotSame(document3, document5);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document3.equals((Object)document5));
      
      Pattern pattern0 = Pattern.compile("", 1093);
      assertEquals("", pattern0.pattern());
      assertEquals(1093, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertNotNull(pattern0);
      
      Predicate<String> predicate0 = pattern0.asPredicate();
      assertEquals("", pattern0.pattern());
      assertEquals(1093, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertNotNull(predicate0);
      
      Elements elements2 = document2.getElementsMatchingText(pattern0);
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("", pattern0.pattern());
      assertEquals(1093, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertFalse(elements2.isEmpty());
      assertEquals(4, elements2.size());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertNotNull(elements2);
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document5);
      assertSame(document2, document4);
      assertFalse(document0.equals((Object)document5));
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(document2.equals((Object)document5));
      
      Element element0 = document3.appendElement("p4");
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("p4", element0.tagName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(2, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("p4", element0.nodeName());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertNotNull(element0);
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document5);
      assertSame(document2, document4);
      assertNotSame(document3, document5);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document3.equals((Object)document5));
      
      Element element1 = document5.prependElement("autofocus");
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("", element1.baseUri());
      assertEquals("autofocus", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("autofocus", element1.nodeName());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertTrue(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals(3, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals("", document5.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals("", document5.baseUri());
      assertEquals((-4997), document5.siblingIndex());
      assertNotNull(element1);
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(element1, element0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document5);
      assertSame(document2, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertFalse(document0.equals((Object)document5));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      
      String string3 = document1.ownText();
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals((-333), document1.siblingIndex());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertNotNull(string3);
      assertEquals("seamless", string3);
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document1, document5);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      Attributes attributes0 = document2.attributes();
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document5);
      assertSame(document2, document4);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      
      boolean boolean1 = document5.hasAttributes();
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertTrue(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals(3, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals("", document5.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals("", document5.baseUri());
      assertEquals((-4997), document5.siblingIndex());
      assertFalse(boolean1);
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document5);
      assertSame(document2, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertTrue(boolean1 == boolean0);
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.prettyPrint(true);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      
      Document document6 = (Document)element0.parent();
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("p4", element0.tagName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(2, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("p4", element0.nodeName());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document6.hasParent());
      assertEquals("", document6.location());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.isBlock());
      assertEquals("", document6.baseUri());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document6.quirksMode());
      assertEquals((-333), document6.siblingIndex());
      assertEquals(3, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertNotNull(document6);
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document6);
      assertNotSame(element0, element1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document5);
      assertSame(document2, document6);
      assertSame(document2, document4);
      assertNotSame(document3, document5);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document6);
      assertSame(document3, document4);
      assertSame(document6, document1);
      assertSame(document6, document2);
      assertSame(document6, document3);
      assertSame(document6, document0);
      assertSame(document6, document4);
      assertNotSame(document6, document5);
      assertFalse(document0.equals((Object)document5));
      assertFalse(element0.equals((Object)element1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document6.equals((Object)document5));
      
      Element element2 = document1.getElementById("body");
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals((-333), document1.siblingIndex());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertNull(element2);
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document6);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document1, document5);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document6);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document5));
      
      // Undeclared exception!
      try { 
        document6.child((-333));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8|?~8$2\u0006", "");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.clone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Tag tag0 = Tag.valueOf("body");
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals("body", tag0.getName());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("body", false);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "8|?~8$2\u0006", attributes1);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals("body", tag0.getName());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("body", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("8|?~8$2\u0006", formElement0.baseUri());
      assertTrue(formElement0.isBlock());
      assertEquals("body", formElement0.nodeName());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals("body", tag0.getName());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("body", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("8|?~8$2\u0006", formElement0.baseUri());
      assertTrue(formElement0.isBlock());
      assertEquals("body", formElement0.nodeName());
      assertEquals("8|?~8$2\u0006", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertTrue(formElement1.isBlock());
      assertEquals("body", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("body", formElement1.tagName());
      assertNotNull(formElement1);
      assertNotSame(document0, document1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(document0.equals((Object)document1));
      
      boolean boolean0 = linkedHashSet0.add(formElement1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals("body", tag0.getName());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("body", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("8|?~8$2\u0006", formElement0.baseUri());
      assertTrue(formElement0.isBlock());
      assertEquals("body", formElement0.nodeName());
      assertEquals("8|?~8$2\u0006", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertTrue(formElement1.isBlock());
      assertEquals("body", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("body", formElement1.tagName());
      assertTrue(linkedHashSet0.contains(formElement0));
      assertTrue(boolean0);
      assertNotSame(document0, document1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(document0.equals((Object)document1));
      
      // Undeclared exception!
      try { 
        document0.insertChildren(67, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      
      Document document1 = document0.outputSettings(document_OutputSettings2);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document1, document0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      
      Element element0 = document1.body();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertNotNull(element0);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document1, document0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      
      Elements elements0 = element0.getElementsByAttributeValueContaining("=}}, hK|r3", "=}}, hK|r3");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document1, document0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      
      boolean boolean0 = document1.hasClass("");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document1, document0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      
      Document document2 = (Document)document1.clone();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      int int0 = document2.childNodeSize();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(1, int0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = " > ";
      Document document0 = new Document(" > ");
      assertEquals(0, document0.childNodeSize());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" > ", document0.location());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.ownerDocument();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      String string0 = document1.ownText();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document document2 = document0.outputSettings(document_OutputSettings1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements0 = document1.parents();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      Document document3 = document1.quirksMode(document_QuirksMode0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      
      document0.siblingIndex = (-333);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      
      Document document4 = document3.normalise();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals((-333), document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertEquals((-333), document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertNotNull(document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document2);
      
      document4.nodelistChanged();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals((-333), document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertEquals((-333), document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document2);
      
      String string1 = document4.toString();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals((-333), document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertEquals((-333), document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertNotNull(string1);
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string1);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertFalse(string1.equals((Object)string0));
      
      Document document5 = (Document)document4.append("seamless");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals((-333), document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("", document4.location());
      assertEquals(2, document4.childNodeSize());
      assertEquals((-333), document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.isBlock());
      assertEquals((-333), document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("", document5.location());
      assertEquals("", document5.baseUri());
      assertNotNull(document5);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document5);
      assertSame(document5, document3);
      assertSame(document5, document0);
      assertSame(document5, document2);
      assertSame(document5, document1);
      assertSame(document5, document4);
      
      Elements elements1 = document5.getElementsContainingText("autofocus");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals((-333), document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("", document4.location());
      assertEquals(2, document4.childNodeSize());
      assertEquals((-333), document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.isBlock());
      assertEquals((-333), document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("", document5.location());
      assertEquals("", document5.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document5);
      assertSame(document5, document3);
      assertSame(document5, document0);
      assertSame(document5, document2);
      assertSame(document5, document1);
      assertSame(document5, document4);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      
      Document document6 = (Document)document3.doClone(document1);
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document6.quirksMode());
      assertEquals(2, document6.childNodeSize());
      assertEquals("", document6.location());
      assertEquals((-333), document6.siblingIndex());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertEquals("", document6.baseUri());
      assertFalse(document6.isBlock());
      assertEquals("#root", document6.tagName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals((-333), document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertNotNull(document6);
      assertNotSame(document6, document2);
      assertNotSame(document6, document5);
      assertNotSame(document6, document4);
      assertNotSame(document6, document3);
      assertNotSame(document6, document0);
      assertNotSame(document6, document1);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document6);
      assertSame(document1, document3);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertNotSame(document3, document6);
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document1));
      
      String string2 = document6.val();
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document6.quirksMode());
      assertEquals(2, document6.childNodeSize());
      assertEquals("", document6.location());
      assertEquals((-333), document6.siblingIndex());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertEquals("", document6.baseUri());
      assertFalse(document6.isBlock());
      assertEquals("#root", document6.tagName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals((-333), document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(document6, document2);
      assertNotSame(document6, document5);
      assertNotSame(document6, document4);
      assertNotSame(document6, document3);
      assertNotSame(document6, document0);
      assertNotSame(document6, document1);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document6);
      assertSame(document1, document3);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertNotSame(document3, document6);
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document3.equals((Object)document6));
      
      document6.setSiblingIndex((-4997));
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document6.quirksMode());
      assertEquals(2, document6.childNodeSize());
      assertEquals("", document6.location());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertEquals("", document6.baseUri());
      assertEquals((-4997), document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertEquals("#root", document6.tagName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals((-333), document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertNotSame(document6, document2);
      assertNotSame(document6, document5);
      assertNotSame(document6, document4);
      assertNotSame(document6, document3);
      assertNotSame(document6, document0);
      assertNotSame(document6, document1);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document6);
      assertSame(document1, document3);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertNotSame(document3, document6);
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document3.equals((Object)document6));
      
      boolean boolean0 = document4.hasAttributes();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals((-333), document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("", document4.location());
      assertEquals(2, document4.childNodeSize());
      assertEquals((-333), document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertFalse(boolean0);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document6);
      assertSame(document1, document3);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertNotSame(document3, document6);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document5);
      assertNotSame(document4, document6);
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document4.equals((Object)document6));
      
      Pattern pattern0 = Pattern.compile("", 1093);
      assertEquals(1093, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertNotNull(pattern0);
      
      Predicate<String> predicate0 = pattern0.asPredicate();
      assertEquals(1093, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertNotNull(predicate0);
      
      Elements elements2 = document3.getElementsMatchingText(pattern0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals((-333), document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(1093, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertEquals(4, elements2.size());
      assertFalse(elements2.isEmpty());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertNotNull(elements2);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document6);
      assertSame(document1, document3);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertNotSame(document3, document6);
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document6));
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(document3.equals((Object)document6));
      
      Element element0 = document4.appendElement("p4");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals((-333), document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("p4", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("p4", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals(3, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("", document4.location());
      assertEquals((-333), document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertNotNull(element0);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document6);
      assertSame(document1, document3);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertNotSame(document3, document6);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document5);
      assertNotSame(document4, document6);
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document4.equals((Object)document6));
      
      Element element1 = document6.prependElement("autofocus");
      assertEquals(3, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document6.quirksMode());
      assertEquals("", document6.location());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertEquals("", document6.baseUri());
      assertEquals((-4997), document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertEquals("#root", document6.tagName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals((-333), document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("autofocus", element1.tagName());
      assertEquals("autofocus", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertNotNull(element1);
      assertNotSame(document6, document2);
      assertNotSame(document6, document5);
      assertNotSame(document6, document4);
      assertNotSame(document6, document3);
      assertNotSame(document6, document0);
      assertNotSame(document6, document1);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document6);
      assertSame(document1, document3);
      assertNotSame(element1, element0);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertNotSame(document3, document6);
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document6));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document3.equals((Object)document6));
      
      String string3 = document2.ownText();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals((-333), document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertNotNull(string3);
      assertEquals("seamless", string3);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document6);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertFalse(document0.equals((Object)document6));
      assertFalse(document2.equals((Object)document6));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      Attributes attributes0 = document3.attributes();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals((-333), document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document6);
      assertSame(document1, document3);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertNotSame(document3, document6);
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document3.equals((Object)document6));
      
      boolean boolean1 = document6.hasAttributes();
      assertEquals(3, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document6.quirksMode());
      assertEquals("", document6.location());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertEquals("", document6.baseUri());
      assertEquals((-4997), document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertEquals("#root", document6.tagName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals((-333), document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertFalse(boolean1);
      assertNotSame(document6, document2);
      assertNotSame(document6, document5);
      assertNotSame(document6, document4);
      assertNotSame(document6, document3);
      assertNotSame(document6, document0);
      assertNotSame(document6, document1);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document6);
      assertSame(document1, document3);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertNotSame(document3, document6);
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document3.equals((Object)document6));
      assertTrue(boolean1 == boolean0);
      
      Document document7 = (Document)element0.parent();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals((-333), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals((-333), document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("p4", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("p4", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals(3, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("", document4.location());
      assertEquals((-333), document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertEquals((-333), document7.siblingIndex());
      assertFalse(document7.isBlock());
      assertEquals("#document", document7.nodeName());
      assertFalse(document7.hasParent());
      assertEquals(3, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document7.quirksMode());
      assertEquals("#root", document7.tagName());
      assertEquals("", document7.location());
      assertEquals("", document7.baseUri());
      assertNotNull(document7);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document7);
      assertSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document6);
      assertSame(document1, document3);
      assertSame(document1, document7);
      assertNotSame(element0, element1);
      assertSame(document3, document4);
      assertSame(document3, document7);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertNotSame(document3, document6);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document7);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document5);
      assertNotSame(document4, document6);
      assertSame(document7, document4);
      assertSame(document7, document5);
      assertNotSame(document7, document6);
      assertSame(document7, document0);
      assertSame(document7, document3);
      assertSame(document7, document2);
      assertSame(document7, document1);
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document6));
      assertFalse(element0.equals((Object)element1));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document4.equals((Object)document6));
      assertFalse(document7.equals((Object)document6));
      
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parse("y", "y");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("y", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("y", document0.baseUri());
      assertNotNull(document0);
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.ownerDocument();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      String string0 = document1.ownText();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document document2 = document0.outputSettings(document_OutputSettings1);
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements0 = document1.parents();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      Document document3 = document1.quirksMode(document_QuirksMode0);
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Document document4 = document3.normalise();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("", document4.location());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertNotNull(document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document1);
      
      document1.nodelistChanged();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      
      String string1 = document1.toString();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertNotNull(string1);
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertFalse(string1.equals((Object)string0));
      
      Document document5 = (Document)document3.append("");
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.hasParent());
      assertEquals("", document5.location());
      assertEquals("", document5.baseUri());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertNotNull(document5);
      assertSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertSame(document5, document1);
      assertSame(document5, document0);
      assertSame(document5, document4);
      assertSame(document5, document3);
      assertSame(document5, document2);
      
      Elements elements1 = document3.getElementsContainingText("");
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(elements1.isEmpty());
      assertEquals(4, elements1.size());
      assertNotNull(elements1);
      assertSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      
      Document document6 = (Document)document1.doClone(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(1, document6.childNodeSize());
      assertEquals("#root", document6.tagName());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#document", document6.nodeName());
      assertTrue(document6.hasParent());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document6.quirksMode());
      assertEquals("", document6.location());
      assertEquals("", document6.baseUri());
      assertFalse(document6.isBlock());
      assertNotNull(document6);
      assertSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document0, document6);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document6);
      assertSame(document1, document4);
      assertNotSame(document6, document3);
      assertNotSame(document6, document1);
      assertNotSame(document6, document2);
      assertNotSame(document6, document4);
      assertNotSame(document6, document5);
      assertNotSame(document6, document0);
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document0));
      
      String string2 = document4.val();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("", document4.location());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document0, document6);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document6);
      assertSame(document1, document4);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertNotSame(document3, document6);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertNotSame(document4, document6);
      assertSame(document4, document2);
      assertSame(document4, document5);
      assertSame(document4, document1);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document4.equals((Object)document6));
      
      document6.setSiblingIndex((-333));
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(1, document6.childNodeSize());
      assertEquals("#root", document6.tagName());
      assertEquals("#document", document6.nodeName());
      assertTrue(document6.hasParent());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document6.quirksMode());
      assertEquals((-333), document6.siblingIndex());
      assertEquals("", document6.location());
      assertEquals("", document6.baseUri());
      assertFalse(document6.isBlock());
      assertSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document0, document6);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document6);
      assertSame(document1, document4);
      assertNotSame(document6, document3);
      assertNotSame(document6, document1);
      assertNotSame(document6, document2);
      assertNotSame(document6, document4);
      assertNotSame(document6, document5);
      assertNotSame(document6, document0);
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document0));
      
      boolean boolean0 = document0.hasAttributes();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(boolean0);
      assertSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document0, document6);
      assertFalse(document0.equals((Object)document6));
      
      Pattern pattern0 = Pattern.compile("autofocus", 1093);
      assertEquals(1093, pattern0.flags());
      assertEquals("autofocus", pattern0.toString());
      assertEquals("autofocus", pattern0.pattern());
      assertNotNull(pattern0);
      
      Predicate<String> predicate0 = pattern0.asPredicate();
      assertEquals(1093, pattern0.flags());
      assertEquals("autofocus", pattern0.toString());
      assertEquals("autofocus", pattern0.pattern());
      assertNotNull(predicate0);
      
      Elements elements2 = document1.getElementsMatchingText(pattern0);
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(1093, pattern0.flags());
      assertEquals("autofocus", pattern0.toString());
      assertEquals("autofocus", pattern0.pattern());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotNull(elements2);
      assertSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document0, document6);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document6);
      assertSame(document1, document4);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document6));
      assertFalse(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      
      Document document7 = document4.ownerDocument();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertFalse(document7.hasParent());
      assertEquals("", document7.location());
      assertEquals(0, document7.siblingIndex());
      assertFalse(document7.isBlock());
      assertEquals("", document7.baseUri());
      assertEquals(1, document7.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document7.quirksMode());
      assertEquals("#root", document7.tagName());
      assertEquals("#document", document7.nodeName());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("", document4.location());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertNotNull(document7);
      assertSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document7);
      assertNotSame(document0, document6);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document6);
      assertSame(document1, document4);
      assertSame(document1, document7);
      assertSame(document7, document3);
      assertSame(document7, document2);
      assertSame(document7, document1);
      assertSame(document7, document4);
      assertSame(document7, document5);
      assertNotSame(document7, document6);
      assertSame(document7, document0);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document3, document7);
      assertNotSame(document3, document6);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertNotSame(document4, document6);
      assertSame(document4, document7);
      assertSame(document4, document2);
      assertSame(document4, document5);
      assertSame(document4, document1);
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document4.equals((Object)document6));
      
      // Undeclared exception!
      try { 
        document7.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tJq5N77eP4}VW!H?PW", "tJq5N77eP4}VW!H?PW");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.ownerDocument();
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      String string0 = document1.ownText();
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document document2 = document0.outputSettings(document_OutputSettings1);
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements0 = document2.getElementsByAttributeStarting("Attributes incorrectly present on end tag");
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parse("legend", "legend");
      assertFalse(document0.hasParent());
      assertEquals("legend", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("legend", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      String string0 = document0.data();
      assertFalse(document0.hasParent());
      assertEquals("legend", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("legend", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{W([JE`\u0002%", "{W([JE`\u0002%");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("{W([JE`\u0002%", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("{W([JE`\u0002%", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("{W([JE`\u0002%");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Node node0 = cDataNode0.doClone(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("{W([JE`\u0002%", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("{W([JE`\u0002%", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertTrue(node0.hasParent());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#cdata", node0.nodeName());
      assertNotNull(node0);
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertFalse(node0.equals((Object)cDataNode0));
      
      Document document1 = (Document)document0.appendChild(node0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("{W([JE`\u0002%", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("{W([JE`\u0002%", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertTrue(node0.hasParent());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#cdata", node0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("{W([JE`\u0002%", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("{W([JE`\u0002%", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertSame(document1, document0);
      assertFalse(cDataNode0.equals((Object)node0));
      assertFalse(node0.equals((Object)cDataNode0));
      
      String string0 = document0.data();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("{W([JE`\u0002%", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("{W([JE`\u0002%", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string0);
      assertEquals("{W([JE`\u0002%", string0);
      assertSame(document0, document1);
      
      boolean boolean0 = document0.hasText();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("{W([JE`\u0002%", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("{W([JE`\u0002%", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(boolean0);
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Document.createShell("legend");
      assertFalse(document0.hasParent());
      assertEquals("legend", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("legend", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      String string0 = document0.data();
      assertFalse(document0.hasParent());
      assertEquals("legend", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("legend", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = new Document("y1J1^2~z}Uv|A");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("y1J1^2~z}Uv|A", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("y1J1^2~z}Uv|A", document0.location());
      assertNotNull(document0);
      
      String string0 = document0.data();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("y1J1^2~z}Uv|A", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("y1J1^2~z}Uv|A", document0.location());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = new Document("p{8sDd,$4uAUA'6a");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("p{8sDd,$4uAUA'6a", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("p{8sDd,$4uAUA'6a", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Attributes attributes0 = document0.attributes();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("p{8sDd,$4uAUA'6a", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("p{8sDd,$4uAUA'6a", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Document document1 = (Document)document0.val("p{8sDd,$4uAUA'6a");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("p{8sDd,$4uAUA'6a", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("p{8sDd,$4uAUA'6a", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("p{8sDd,$4uAUA'6a", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("p{8sDd,$4uAUA'6a", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = "Wu/sFMo7o9a=";
      String string1 = document0.wholeText();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("p{8sDd,$4uAUA'6a", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("p{8sDd,$4uAUA'6a", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(document0, document1);
      assertFalse(string1.equals((Object)string0));
      
      Document document2 = (Document)document0.doClone((Node) null);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("p{8sDd,$4uAUA'6a", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("p{8sDd,$4uAUA'6a", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("p{8sDd,$4uAUA'6a", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("p{8sDd,$4uAUA'6a", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      document0.setParentNode(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("p{8sDd,$4uAUA'6a", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("p{8sDd,$4uAUA'6a", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("p{8sDd,$4uAUA'6a", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("p{8sDd,$4uAUA'6a", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Element element0 = new Element("tJq5N77eP4}VW!H?PI");
      assertEquals(0, element0.childNodeSize());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.nodeName());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      List<TextNode> list0 = new LinkedList<TextNode>();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      String string0 = element0.cssSelector();
      assertEquals(0, element0.childNodeSize());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.nodeName());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertNotNull(string0);
      assertEquals("tJq5N77eP4}VW!H?PI", string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Document document1 = (Document)document0.prepend("xhtml");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.is("xhtml");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(boolean0);
      assertSame(document0, document1);
      
      String string0 = document0.data();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document1.addClass("");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("xhtml", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("xhtml", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements0 = document1.getElementsMatchingOwnText("");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      document0.reparentChild(document2);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("xhtml", document2.location());
      assertEquals("xhtml", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document0.appendText("");
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals("xhtml", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals("xhtml", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      Document document4 = document2.normalise();
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("xhtml", document2.location());
      assertEquals("xhtml", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("xhtml", document4.location());
      assertEquals("xhtml", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(2, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertNotNull(document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document1);
      
      Document document5 = (Document)document4.doClone(document0);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("xhtml", document2.location());
      assertEquals("xhtml", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("xhtml", document4.location());
      assertEquals("xhtml", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(2, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("xhtml", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertEquals("xhtml", document5.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertTrue(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals("#document", document5.nodeName());
      assertNotNull(document5);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document5);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document5);
      assertSame(document2, document0);
      assertNotSame(document4, document5);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document3);
      assertNotSame(document5, document2);
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string1 = document2.cssSelector();
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("xhtml", document2.location());
      assertEquals("xhtml", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(string1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document5);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document5);
      assertSame(document2, document0);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(string1.equals((Object)string0));
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      
      Document document6 = (Document)document4.classNames(set0);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("xhtml", document2.location());
      assertEquals("xhtml", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("xhtml", document4.location());
      assertEquals("xhtml", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(2, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("xhtml", document6.baseUri());
      assertEquals(0, document6.siblingIndex());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertEquals(2, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.isBlock());
      assertEquals("xhtml", document6.location());
      assertNotNull(document6);
      assertFalse(set0.contains(""));
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document6);
      assertNotSame(document1, document5);
      assertSame(document2, document4);
      assertSame(document2, document6);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertNotSame(document4, document5);
      assertSame(document4, document2);
      assertSame(document4, document6);
      assertSame(document4, document1);
      assertSame(document6, document4);
      assertSame(document6, document3);
      assertSame(document6, document0);
      assertSame(document6, document1);
      assertNotSame(document6, document5);
      assertSame(document6, document2);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document6.equals((Object)document5));
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = "Ihcc,g-r|: UI";
      Document document0 = Parser.parseBodyFragment("OAt[)-", "Ihcc,g-r|: UI");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Ihcc,g-r|: UI", document0.location());
      assertEquals("Ihcc,g-r|: UI", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      String string1 = document0.id();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Ihcc,g-r|: UI", document0.location());
      assertEquals("Ihcc,g-r|: UI", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      Elements elements0 = document0.siblingElements();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Ihcc,g-r|: UI", document0.location());
      assertEquals("Ihcc,g-r|: UI", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string2 = document0.cssSelector();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Ihcc,g-r|: UI", document0.location());
      assertEquals("Ihcc,g-r|: UI", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string2);
      assertEquals("#root", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Elements elements1 = document0.getElementsByTag("Bv/N^@]'hP3j7GUK");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Ihcc,g-r|: UI", document0.location());
      assertEquals("Ihcc,g-r|: UI", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      
      // Undeclared exception!
      try { 
        document0.select("Bv/N^@]'hP3j7GUK");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'Bv/N^@]'hP3j7GUK': unexpected token at '/N^@]'hP3j7GUK'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = "d:92D-X*o1n|c5Y1~";
      Document document0 = new Document("d:92D-X*o1n|c5Y1~");
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("d:92D-X*o1n|c5Y1~", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("d:92D-X*o1n|c5Y1~", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.createElement("d:92D-X*o1n|c5Y1~");
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("d:92D-X*o1n|c5Y1~", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("d:92D-X*o1n|c5Y1~", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals("d:92D-X*o1n|c5Y1~", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("d:92D-X*o1n|c5Y1~", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("d:92D-X*o1n|c5Y1~", element0.tagName());
      assertNotNull(element0);
      
      Elements elements0 = document0.getElementsByIndexEquals(92);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("d:92D-X*o1n|c5Y1~", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("d:92D-X*o1n|c5Y1~", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String string1 = "kFwX<4aY.RzAm_";
      boolean boolean0 = element0.hasClass("kFwX<4aY.RzAm_");
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("d:92D-X*o1n|c5Y1~", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("d:92D-X*o1n|c5Y1~", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals("d:92D-X*o1n|c5Y1~", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("d:92D-X*o1n|c5Y1~", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("d:92D-X*o1n|c5Y1~", element0.tagName());
      assertFalse(boolean0);
      
      Elements elements1 = element0.getElementsByIndexGreaterThan((-962));
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("d:92D-X*o1n|c5Y1~", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("d:92D-X*o1n|c5Y1~", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals("d:92D-X*o1n|c5Y1~", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("d:92D-X*o1n|c5Y1~", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("d:92D-X*o1n|c5Y1~", element0.tagName());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      
      // Undeclared exception!
      try { 
        document0.wrap("Sw-P?Ek-W'Zv/RmX7J");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = "xhtml";
      String string1 = "}e\"xO9C7)~)$";
      String string2 = "org.jsoup.nodes.Element$NodeList";
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "xhtml");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      String string3 = document0.wholeText();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string3);
      assertEquals("org.jsoup.nodes.Element$NodeList", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      Element element0 = document0.createElement("xhtml");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("xhtml", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("xhtml", element0.tagName());
      assertNotNull(element0);
      
      Document document1 = (Document)document0.doClone(element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("xhtml", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("xhtml", element0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      document0.setParentNode(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("xhtml", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("xhtml", element0.tagName());
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("0^o6$fq3emi5ki_vu", "");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        document0.child(26);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 26, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xht4R", "xht4R");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xht4R", document0.baseUri());
      assertEquals("xht4R", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xht4R", document0.baseUri());
      assertEquals("xht4R", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("xht4R", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertNotNull(element0);
      
      boolean boolean0 = document0.hasText();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xht4R", document0.baseUri());
      assertEquals("xht4R", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        element0.child(42);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 42, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Pattern pattern0 = Pattern.compile("xhtml");
      assertEquals("xhtml", pattern0.pattern());
      assertEquals("xhtml", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNotNull(pattern0);
      
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", pattern0.pattern());
      assertEquals("xhtml", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.ownerDocument();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      String string0 = document1.ownText();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document document2 = document0.outputSettings(document_OutputSettings1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements0 = document1.parents();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      Document document3 = document1.quirksMode(document_QuirksMode0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      document0.siblingIndex = (-333);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      
      Document document4 = document3.normalise();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-333), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document3.isBlock());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals((-333), document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertNotNull(document4);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      
      document4.nodelistChanged();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-333), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document3.isBlock());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals((-333), document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      
      String string1 = document4.toString();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-333), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document3.isBlock());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals((-333), document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertNotNull(string1);
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string1);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertFalse(string1.equals((Object)string0));
      
      Document document5 = (Document)document4.append("seamless");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-333), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document3.isBlock());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals((-333), document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("", document5.location());
      assertEquals(2, document5.childNodeSize());
      assertEquals((-333), document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals("", document5.baseUri());
      assertNotNull(document5);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document5);
      assertSame(document5, document2);
      assertSame(document5, document4);
      assertSame(document5, document1);
      assertSame(document5, document3);
      assertSame(document5, document0);
      
      Elements elements1 = document5.getElementsContainingText("autofocus");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-333), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document3.isBlock());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals((-333), document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("", document5.location());
      assertEquals(2, document5.childNodeSize());
      assertEquals((-333), document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals("", document5.baseUri());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document5);
      assertSame(document5, document2);
      assertSame(document5, document4);
      assertSame(document5, document1);
      assertSame(document5, document3);
      assertSame(document5, document0);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      
      Document document6 = (Document)document3.doClone(document1);
      assertEquals("", document6.location());
      assertEquals("", document6.baseUri());
      assertFalse(document6.isBlock());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(2, document6.childNodeSize());
      assertTrue(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document6.quirksMode());
      assertEquals((-333), document6.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-333), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document3.isBlock());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertNotNull(document6);
      assertNotSame(document6, document0);
      assertNotSame(document6, document1);
      assertNotSame(document6, document4);
      assertNotSame(document6, document3);
      assertNotSame(document6, document2);
      assertNotSame(document6, document5);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document6);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertNotSame(document3, document6);
      assertSame(document3, document4);
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document5));
      
      String string2 = document6.val();
      assertEquals("", document6.location());
      assertEquals("", document6.baseUri());
      assertFalse(document6.isBlock());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(2, document6.childNodeSize());
      assertTrue(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document6.quirksMode());
      assertEquals((-333), document6.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-333), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document3.isBlock());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(document6, document0);
      assertNotSame(document6, document1);
      assertNotSame(document6, document4);
      assertNotSame(document6, document3);
      assertNotSame(document6, document2);
      assertNotSame(document6, document5);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document6);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertNotSame(document3, document6);
      assertSame(document3, document4);
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document3.equals((Object)document6));
      
      document6.setSiblingIndex((-4997));
      assertEquals("", document6.location());
      assertEquals("", document6.baseUri());
      assertEquals((-4997), document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(2, document6.childNodeSize());
      assertTrue(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document6.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-333), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document3.isBlock());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertNotSame(document6, document0);
      assertNotSame(document6, document1);
      assertNotSame(document6, document4);
      assertNotSame(document6, document3);
      assertNotSame(document6, document2);
      assertNotSame(document6, document5);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document6);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertNotSame(document3, document6);
      assertSame(document3, document4);
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document3.equals((Object)document6));
      
      boolean boolean0 = document4.hasAttributes();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-333), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document3.isBlock());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals((-333), document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertFalse(boolean0);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document6);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertNotSame(document3, document6);
      assertSame(document3, document4);
      assertSame(document4, document2);
      assertNotSame(document4, document6);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document5);
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document4.equals((Object)document6));
      
      Pattern pattern0 = Pattern.compile("", 1083);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(1083, pattern0.flags());
      assertNotNull(pattern0);
      
      Predicate<String> predicate0 = pattern0.asPredicate();
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(1083, pattern0.flags());
      assertNotNull(predicate0);
      
      Elements elements2 = document3.getElementsMatchingText(pattern0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-333), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(1083, pattern0.flags());
      assertEquals(4, elements2.size());
      assertFalse(elements2.isEmpty());
      assertFalse(document3.isBlock());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertNotNull(elements2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document6);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertNotSame(document3, document6);
      assertSame(document3, document4);
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document6));
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(document3.equals((Object)document6));
      
      Element element0 = document4.appendElement("p4");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-333), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("p4", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("p4", element0.nodeName());
      assertFalse(document3.isBlock());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals(3, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals((-333), document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertNotNull(element0);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document6);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertNotSame(document3, document6);
      assertSame(document3, document4);
      assertSame(document4, document2);
      assertNotSame(document4, document6);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document5);
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document4.equals((Object)document6));
      
      Element element1 = document6.prependElement("autofocus");
      assertEquals("", document6.location());
      assertEquals("", document6.baseUri());
      assertEquals((-4997), document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertEquals(3, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertTrue(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document6.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-333), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("autofocus", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("autofocus", element1.tagName());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertNotNull(element1);
      assertNotSame(document6, document0);
      assertNotSame(document6, document1);
      assertNotSame(document6, document4);
      assertNotSame(document6, document3);
      assertNotSame(document6, document2);
      assertNotSame(document6, document5);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document6);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(element1, element0);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertNotSame(document3, document6);
      assertSame(document3, document4);
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document6));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document3.equals((Object)document6));
      
      String string3 = document2.ownText();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.location());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertNotNull(string3);
      assertEquals("seamless", string3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertNotSame(document2, document6);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertFalse(document0.equals((Object)document6));
      assertFalse(document2.equals((Object)document6));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      Attributes attributes0 = document3.attributes();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-333), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document3.isBlock());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document6);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertNotSame(document3, document6);
      assertSame(document3, document4);
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document3.equals((Object)document6));
      
      boolean boolean1 = document6.hasAttributes();
      assertEquals("", document6.location());
      assertEquals("", document6.baseUri());
      assertEquals((-4997), document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertEquals(3, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertTrue(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document6.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-333), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document3.isBlock());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertFalse(boolean1);
      assertNotSame(document6, document0);
      assertNotSame(document6, document1);
      assertNotSame(document6, document4);
      assertNotSame(document6, document3);
      assertNotSame(document6, document2);
      assertNotSame(document6, document5);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document6);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertNotSame(document3, document6);
      assertSame(document3, document4);
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document3.equals((Object)document6));
      assertTrue(boolean1 == boolean0);
      
      Document document7 = (Document)element0.parent();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals((-333), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("p4", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("p4", element0.nodeName());
      assertFalse(document3.isBlock());
      assertEquals((-333), document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals(3, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals((-333), document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertFalse(document7.isBlock());
      assertEquals("#document", document7.nodeName());
      assertEquals((-333), document7.siblingIndex());
      assertEquals(3, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("#root", document7.tagName());
      assertFalse(document7.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document7.quirksMode());
      assertEquals("", document7.location());
      assertEquals("", document7.baseUri());
      assertNotNull(document7);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertSame(document0, document7);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document6);
      assertSame(document1, document7);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(element0, element1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertNotSame(document3, document6);
      assertSame(document3, document7);
      assertSame(document3, document4);
      assertSame(document4, document2);
      assertNotSame(document4, document6);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document7);
      assertSame(document4, document5);
      assertSame(document7, document0);
      assertSame(document7, document1);
      assertSame(document7, document2);
      assertNotSame(document7, document6);
      assertSame(document7, document4);
      assertSame(document7, document5);
      assertSame(document7, document3);
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document6));
      assertFalse(element0.equals((Object)element1));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document4.equals((Object)document6));
      assertFalse(document7.equals((Object)document6));
      
      Elements elements3 = document2.getElementsMatchingOwnText(pattern0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals((-333), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(1083, pattern0.flags());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.location());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals((-333), document2.siblingIndex());
      assertEquals(5, elements3.size());
      assertFalse(elements3.isEmpty());
      assertNotNull(elements3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertSame(document0, document7);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertNotSame(document2, document6);
      assertSame(document2, document7);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertFalse(document0.equals((Object)document6));
      assertFalse(document2.equals((Object)document6));
      assertFalse(elements3.equals((Object)elements0));
      assertFalse(elements3.equals((Object)elements2));
      assertFalse(elements3.equals((Object)elements1));
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtmR", "xhtmR");
      assertFalse(document0.hasParent());
      assertEquals("xhtmR", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtmR", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      String string0 = document0.outerHtml();
      assertFalse(document0.hasParent());
      assertEquals("xhtmR", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtmR", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body>\n  xhtmR\n </body>\n</html>", string0);
      
      Document document1 = new Document(":eq(");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(":eq(", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(":eq(", document1.baseUri());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document1.val("xhtmR");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(":eq(", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(":eq(", document1.baseUri());
      assertEquals(":eq(", document2.baseUri());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(":eq(", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      // Undeclared exception!
      try { 
        document2.getElementsByAttributeValueStarting((String) null, "java.lang.string@0000000038");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parse("tJq5N77eP4}VW!H?PW", "tJq5N77eP4}VW!H?PW");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Element element0 = document0.getElementById("tJq5N77eP4}VW!H?PW");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNull(element0);
      
      Elements elements0 = document0.getElementsByAttributeValueStarting("tJq5N77eP4}VW!H?PW", "tJq5N77eP4}VW!H?PW");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = new Document("</");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Elements elements0 = document0.siblingElements();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      boolean boolean0 = document0.hasAttr("</");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(boolean0);
      
      Document document1 = new Document("");
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document1.normalise();
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Document document3 = document2.clone();
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      
      String string0 = "";
      Document document4 = (Document)document1.addClass("");
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertNotNull(document4);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertNotSame(document4, document3);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      
      // Undeclared exception!
      try { 
        document2.getElementsByAttributeValueStarting("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = new Document(" \"");
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      document0.setParentNode(document0);
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = new Document(" \"");
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = Parser.parseBodyFragmentRelaxed(" \"", "}e\"xO9C7)~)$");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      String string0 = document1.wholeText();
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(string0);
      assertEquals(" \"", string0);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document1.doClone(document0);
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("}e\"xO9C7)~)$", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals("}e\"xO9C7)~)$", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      document0.setParentNode(document1);
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      
      // Undeclared exception!
      try { 
        document2.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = new Document(" \"");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.location());
      assertNotNull(document0);
      
      document0.doSetBaseUri(" \"");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.location());
      
      Document document1 = Parser.parseBodyFragmentRelaxed(" \"", "}e\"xO9C7)~)$");
      assertFalse(document1.isBlock());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      String string0 = document1.wholeText();
      assertFalse(document1.isBlock());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertNotNull(string0);
      assertEquals(" \"", string0);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document1.doClone(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("}e\"xO9C7)~)$", document2.baseUri());
      assertEquals("}e\"xO9C7)~)$", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      document0.setParentNode(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      
      Elements elements0 = document0.siblingElements();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      
      Document document3 = (Document)document0.removeClass("org.jsoup.nodes.Entities$CoreCharset");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document0.location());
      assertTrue(document0.hasParent());
      assertTrue(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(" \"", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertEquals(" \"", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      
      Elements elements1 = document0.getElementsByClass(" \"");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      
      Document document4 = (Document)document2.prependText("}I6");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("}e\"xO9C7)~)$", document2.baseUri());
      assertEquals("}e\"xO9C7)~)$", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("}e\"xO9C7)~)$", document4.location());
      assertEquals(2, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals("}e\"xO9C7)~)$", document4.baseUri());
      assertNotNull(document4);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document1, document4);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors((-228));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Document document0 = parser1.parseInput((Reader) stringReader0, "");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Element element0 = document0.body();
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      List<Node> list0 = Parser.parseFragment("", element0, "#riA3IW.*x(bDDsLCy~");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Element element1 = document0.head();
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertNotNull(element1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      
      boolean boolean0 = element1.hasClass("");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertFalse(boolean0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      
      Elements elements0 = document0.getElementsByClass("Tag cannot be self closing; not a void tag");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        document0.insertChildren((-228), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = new Document("^+");
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("^+", document0.location());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByClass("^+");
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("^+", document0.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = new Document("xhtml");
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      String string0 = "%34h,KhGl{1wmr;";
      // Undeclared exception!
      try { 
        document0.is("%34h,KhGl{1wmr;");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '%34h,KhGl{1wmr;': unexpected token at '%34h,KhGl{1wmr;'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parse("cQ+:.){tqo SE", ",RMQdqCbIy=");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(",RMQdqCbIy=", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(",RMQdqCbIy=", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.is((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasText();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        document0.select("org.jsoup.nodes.Attributes$Dataset$DatasetIterator");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.nodes.Attributes$Dataset$DatasetIterator': unexpected token at '$Dataset$DatasetIterator'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tq5N77e(4}V!H?PW", "tq5N77e(4}V!H?PW");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tq5N77e(4}V!H?PW", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tq5N77e(4}V!H?PW", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tq5N77e(4}V!H?PW", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tq5N77e(4}V!H?PW", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tq5N77e(4}V!H?PW", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      
      String string0 = element0.cssSelector();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tq5N77e(4}V!H?PW", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tq5N77e(4}V!H?PW", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tq5N77e(4}V!H?PW", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertNotNull(string0);
      assertEquals("html > body", string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = new Document(" \"");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(" \"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = new Document("");
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = Parser.parse("org.jsoup.select.Evaluator$IsNthOfType", "br");
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("br", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("br", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      Attributes attributes0 = document2.attributes();
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("br", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("br", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      Document document3 = (Document)document1.val("Wu/sFMo7o9a=");
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.childNodeSize());
      assertEquals("", document3.location());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      
      Elements elements0 = document0.getElementsByAttributeStarting("PxvO]UyJ/");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(" \"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      
      Document document4 = document0.ownerDocument();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(" \"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals(" \"", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.childNodeSize());
      assertEquals(" \"", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertNotNull(document4);
      assertSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      
      // Undeclared exception!
      try { 
        document4.select("yiI~BZgAB;a*Bn#");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'BZgAB;a*Bn#': unexpected token at ';a*Bn#'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("p{8sDd,$4uAUA'6a", "}e\"xO9C7)~)$");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("}e\"xO9C7)~)$", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("}e\"xO9C7)~)$", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      String string0 = document0.wholeText();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("}e\"xO9C7)~)$", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("}e\"xO9C7)~)$", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string0);
      assertEquals("p{8sDd,$4uAUA'6a", string0);
      
      TextNode textNode0 = TextNode.createFromEncoded("p{8sDd,$4uAUA'6a", "Oq+");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertNotNull(textNode0);
      
      Document document1 = (Document)document0.doClone(textNode0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("}e\"xO9C7)~)$", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("}e\"xO9C7)~)$", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      document0.setParentNode(document1);
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("}e\"xO9C7)~)$", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("}e\"xO9C7)~)$", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      
      Elements elements0 = document0.siblingElements();
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("}e\"xO9C7)~)$", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("}e\"xO9C7)~)$", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      
      Document document2 = Parser.parseBodyFragment("org.jsoup.nodes.Entities$CoreCharset", "}e\"xO9C7)~)$");
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("}e\"xO9C7)~)$", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("}e\"xO9C7)~)$", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document2.removeClass("Gcq13Q6");
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("}e\"xO9C7)~)$", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("}e\"xO9C7)~)$", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("}e\"xO9C7)~)$", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("}e\"xO9C7)~)$", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertNotNull(document3);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      
      Elements elements1 = document1.children();
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("}e\"xO9C7)~)$", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("}e\"xO9C7)~)$", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertNotNull(elements1);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
      
      // Undeclared exception!
      try { 
        document2.getElementsByAttributeValue((String) null, "=x@h%|)8N5lgM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("y", "y");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("y", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("y", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      String string0 = "g9\"Z\\;=>Gch}y75Ep";
      String string1 = document0.className();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("y", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("y", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "g9\"Z;=>Gch}y75Ep");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xh84R", "xh84R");
      assertEquals("xh84R", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xh84R", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("niq");
      assertEquals("xh84R", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xh84R", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("niq", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("niq", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("xh84R", element0.baseUri());
      assertNotNull(element0);
      
      Elements elements0 = element0.siblingElements();
      assertEquals("xh84R", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xh84R", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("niq", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("niq", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("xh84R", element0.baseUri());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parse("tJq5N77eP4}VW!H?PW", "tJq5N77eP4}VW!H?PW");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Elements elements0 = document0.previousElementSiblings();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = document0.getElementsByAttributeValue("tJq5N77eP4}VW!H?PW", "afterdoctypepublicidentifier");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = new Document(" \"");
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = Parser.parseBodyFragmentRelaxed(" \"", "}e\"xO9C7)~)$");
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      String string0 = document1.wholeText();
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertNotNull(string0);
      assertEquals(" \"", string0);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document1.doClone(document0);
      assertFalse(document0.hasParent());
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("}e\"xO9C7)~)$", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("}e\"xO9C7)~)$", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      document0.setParentNode(document1);
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("}e\"xO9C7)~)$", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("}e\"xO9C7)~)$", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      
      Elements elements0 = document0.siblingElements();
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      
      Document document3 = (Document)document0.removeClass("org.jsoup.nodes.Entities$CoreCharset");
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(" \"", document3.location());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertTrue(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals(" \"", document3.baseUri());
      assertNotNull(document3);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      
      Elements elements1 = document3.children();
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(" \"", document3.location());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertTrue(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals(" \"", document3.baseUri());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "H5&[jQ-(jsQ.+Ox3;~)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tJq5N77eP4}VW!H?PW", "tJq5N77eP4}VW!H?PW");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tJq5N77eP4}VW!H?PW", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertNotNull(element0);
      
      String string0 = document0.wholeText();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(string0);
      assertEquals("tJq5N77eP4}VW!H?PW", string0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = new Document(" > ");
      assertFalse(document0.isBlock());
      assertEquals(" > ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      assertEquals(":only-child", evaluator_IsOnlyChild0.toString());
      assertNotNull(evaluator_IsOnlyChild0);
      
      boolean boolean0 = document0.is((Evaluator) evaluator_IsOnlyChild0);
      assertFalse(document0.isBlock());
      assertEquals(" > ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(":only-child", evaluator_IsOnlyChild0.toString());
      assertFalse(boolean0);
      
      boolean boolean1 = document0.hasText();
      assertFalse(document0.isBlock());
      assertEquals(" > ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = parser1.parseInput("#", "zN7");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("zN7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("zN7", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.clone();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertNotNull(document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.prettyPrint(true);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertNotNull(document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.indentAmount(1438);
      assertEquals(1438, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(1438, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(1438, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(1438, document_OutputSettings4.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings4.escapeMode());
      assertNotNull(document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      
      Document document1 = document0.outputSettings(document_OutputSettings4);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("zN7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("zN7", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1438, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(1438, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(1438, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(1438, document_OutputSettings4.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings4.escapeMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("zN7", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("zN7", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document1, document0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      
      Evaluator.AttributeWithValueContaining evaluator_AttributeWithValueContaining0 = new Evaluator.AttributeWithValueContaining("#root", ")Z|{Xr:<]5rFj ");
      assertNotNull(evaluator_AttributeWithValueContaining0);
      
      boolean boolean0 = document1.is((Evaluator) evaluator_AttributeWithValueContaining0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("zN7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("zN7", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1438, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(1438, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(1438, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(1438, document_OutputSettings4.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings4.escapeMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("zN7", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("zN7", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(boolean0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document1, document0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("E", "E");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("E", document0.location());
      assertEquals("E", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Charset charset0 = document0.charset();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("E", document0.location());
      assertEquals("E", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String string0 = "G~WY% 5`P_ZLnxBi`";
      Document document0 = Parser.parseBodyFragment("", "G~WY% 5`P_ZLnxBi`");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("G~WY% 5`P_ZLnxBi`", document0.baseUri());
      assertEquals("G~WY% 5`P_ZLnxBi`", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("G~WY% 5`P_ZLnxBi`", document0.baseUri());
      assertEquals("G~WY% 5`P_ZLnxBi`", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("G~WY% 5`P_ZLnxBi`", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("G~WY% 5`P_ZLnxBi`", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      String string1 = null;
      // Undeclared exception!
      try { 
        document1.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("textarea", " ");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(" ", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(" ", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      String string0 = document1.html();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(" ", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(" ", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(string0);
      assertEquals("textarea", string0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Attributes", "");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.location());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document2.removeClass("");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = new Document("xhtml");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" > ", " > ");
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      List<TextNode> list0 = document0.textNodes();
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Document document1 = (Document)document0.append(" > ");
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(" > ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(" > ", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = new Element(" > ");
      assertFalse(element0.isBlock());
      assertEquals(">", element0.nodeName());
      assertEquals(">", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      List<TextNode> list1 = element0.textNodes();
      assertFalse(element0.isBlock());
      assertEquals(">", element0.nodeName());
      assertEquals(">", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      
      Element element1 = element0.text(" > ");
      assertFalse(element0.isBlock());
      assertEquals(">", element0.nodeName());
      assertEquals(">", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals(">", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(">", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Document document2 = (Document)document1.appendTo(element0);
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(" > ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(" > ", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.nodeName());
      assertEquals(">", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(2, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(" > ", document2.baseUri());
      assertEquals(" > ", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(element0, element1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements0 = document1.siblingElements();
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(" > ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(" > ", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      String string0 = document1.baseUri();
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(" > ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(" > ", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(string0);
      assertEquals(" > ", string0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      Document document3 = (Document)document1.addClass("}h}=");
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(" > ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(" > ", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(" > ", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(" > ", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = "</";
      Element element0 = new Element("</");
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.tagName());
      assertNotNull(element0);
      
      Elements elements0 = element0.siblingElements();
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      boolean boolean0 = element0.hasAttr("</");
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("</", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("</", element0.tagName());
      assertFalse(boolean0);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        element0.insertChildren((-1810), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4", "4");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("4", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("4", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Elements elements0 = document0.parents();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("4", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("4", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("4", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("4", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("4", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("4", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document1.toString();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("4", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("4", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("4", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("4", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body>\n  4\n </body>\n</html>", string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Charset charset0 = document0.charset();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("4", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("4", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      assertSame(document0, document1);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("4", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("4", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertNotNull(document_OutputSettings1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document document2 = (Document)document0.doClone(document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("4", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("4", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("4", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("4", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("4", document2.location());
      assertEquals("4", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      boolean boolean0 = document0.hasAttributes();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("4", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("4", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(boolean0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(document0.equals((Object)document2));
      
      Pattern pattern0 = Pattern.compile("br");
      assertEquals("br", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("br", pattern0.toString());
      assertNotNull(pattern0);
      
      Predicate<String> predicate0 = pattern0.asPredicate();
      assertEquals("br", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("br", pattern0.toString());
      assertNotNull(predicate0);
      
      Elements elements1 = document1.getElementsMatchingText(pattern0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("4", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("4", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("4", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("4", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("br", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("br", pattern0.toString());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertTrue(elements1.equals((Object)elements0));
      
      Element element0 = document0.appendElement("br");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("4", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("4", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("br", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("4", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertNotNull(element0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(document0.equals((Object)document2));
      
      Element element1 = element0.tagName("br");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("4", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("4", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("br", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("4", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("br", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("br", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("4", element1.baseUri());
      assertNotNull(element1);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.equals((Object)document2));
      
      Elements elements2 = document1.getElementsMatchingText("autofocus");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("4", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("4", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("4", document1.baseUri());
      assertEquals("4", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotNull(elements2);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      
      String string1 = document0.wholeText();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("4", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("4", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertNotNull(string1);
      assertEquals("4", string1);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(document0.equals((Object)document2));
      
      String string2 = element1.cssSelector();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("4", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("4", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("br", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("4", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("br", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("br", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("4", element1.baseUri());
      assertNotNull(string2);
      assertEquals("br", string2);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document2;
      nodeArray0[1] = (Node) document0;
      // Undeclared exception!
      try { 
        element0.insertChildren(32, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^=", "br");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("br");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.baseUri());
      assertNotNull(element0);
      
      Elements elements0 = document0.getElementsMatchingText("br");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = document0.parents();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertNotNull(document0);
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Document document1 = (Document)document0.prepend("xhtml");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("xhtml", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.data();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document1);
      
      Elements elements0 = document1.getElementsMatchingText("");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("xhtml", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = document0.wholeText();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertNotNull(string1);
      assertEquals("xhtmlxhtml", string1);
      assertSame(document0, document1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", " ");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasText();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(boolean0);
      
      String string0 = document0.val();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Attributes attributes0 = document0.attributes();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Pattern pattern0 = Pattern.compile("");
      assertEquals("", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertNotNull(pattern0);
      
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertNotNull(elements0);
      
      Element element0 = document0.appendElement("p4");
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, element0.childNodeSize());
      assertEquals("p4", element0.tagName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(" ", element0.baseUri());
      assertEquals("p4", element0.nodeName());
      assertNotNull(element0);
      
      String string1 = element0.className();
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, element0.childNodeSize());
      assertEquals("p4", element0.tagName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(" ", element0.baseUri());
      assertEquals("p4", element0.nodeName());
      assertNotNull(string1);
      assertEquals("", string1);
      
      Element element1 = element0.prependElement("p4");
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, element0.childNodeSize());
      assertEquals("p4", element0.tagName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(" ", element0.baseUri());
      assertEquals("p4", element0.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("p4", element1.tagName());
      assertEquals("p4", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(" ", element1.baseUri());
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      
      String string2 = document0.ownText();
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      Document document1 = Document.createShell("p4");
      assertEquals("p4", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("p4", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tJMq5N77eP4}VW!H?PW", "tJMq5N77eP4}VW!H?PW");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("tJMq5N77eP4}VW!H?PW", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("tJMq5N77eP4}VW!H?PW", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.removeClass("tJMq5N77eP4}VW!H?PW");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("tJMq5N77eP4}VW!H?PW", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("tJMq5N77eP4}VW!H?PW", document0.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("tJMq5N77eP4}VW!H?PW", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("tJMq5N77eP4}VW!H?PW", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.getElementById("tJMq5N77eP4}VW!H?PW");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("tJMq5N77eP4}VW!H?PW", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("tJMq5N77eP4}VW!H?PW", document0.baseUri());
      assertNull(element0);
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xht4R", "xht4R");
      assertEquals("xht4R", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xht4R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("xht4R");
      assertEquals(2, document0.childNodeSize());
      assertEquals("xht4R", document0.location());
      assertEquals("xht4R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("xht4r", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("xht4R", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("xht4r", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      Elements elements0 = document0.getElementsMatchingText("xht4R");
      assertEquals(2, document0.childNodeSize());
      assertEquals("xht4R", document0.location());
      assertEquals("xht4R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      assertNotNull(elements0);
      
      String string0 = element0.val();
      assertEquals(2, document0.childNodeSize());
      assertEquals("xht4R", document0.location());
      assertEquals("xht4R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("xht4r", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("xht4R", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("xht4r", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasText();
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(boolean0);
      
      Document document1 = Parser.parseBodyFragment("D]cq^|wx3", "G<%bh");
      assertEquals("G<%bh", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("G<%bh", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document0.prependChild(document1);
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("G<%bh", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("G<%bh", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      
      Document document3 = (Document)document0.classNames(set0);
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertNotNull(document3);
      assertFalse(set0.contains(""));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      
      int int0 = (-1902);
      Pattern pattern0 = Pattern.compile("G<%bh", (-1902));
      assertEquals((-1902), pattern0.flags());
      assertEquals("G<%bh", pattern0.pattern());
      assertEquals("G<%bh", pattern0.toString());
      assertNotNull(pattern0);
      
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals((-1902), pattern0.flags());
      assertEquals("G<%bh", pattern0.pattern());
      assertEquals("G<%bh", pattern0.toString());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertFalse(document0.equals((Object)document1));
      
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-2054));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Document document0 = new Document("xhtml");
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Elements elements0 = document0.children();
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = document0.getElementsByAttributeValue("ScriptDataEndTagOpen", "                 ");
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("ScriptDataEndTagOpen"));
      
      Document document1 = (Document)document0.classNames(set0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertNotNull(document1);
      assertFalse(set0.contains("ScriptDataEndTagOpen"));
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("E", "E");
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("E", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("E", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Charset charset0 = document0.charset();
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("E", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("E", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      boolean boolean0 = document0.hasAttributes();
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("E", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("E", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(boolean0);
      
      String string0 = "br";
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      try { 
        document0.outerHtmlTail(pipedWriter0, 54, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Document document0 = new Document("xhtml");
      assertEquals(0, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasAttributes();
      assertEquals(0, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(boolean0);
      
      Document document1 = (Document)document0.append("xhtml");
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean1 = document1.isBlock();
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(boolean1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        document0.child(2296);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2296, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Document document0 = new Document(" \"");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(" \"", document0.location());
      assertEquals(" \"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      document0.doSetBaseUri(" \"");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(" \"", document0.location());
      assertEquals(" \"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.normalise();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(" \"", document0.location());
      assertEquals(" \"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(" \"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(" \"", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document1.wholeText();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(" \"", document0.location());
      assertEquals(" \"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(" \"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(" \"", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.doClone(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(" \"", document0.location());
      assertEquals(" \"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(" \"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(" \"", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(" \"", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(" \"", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      document0.setParentNode(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(" \"", document0.location());
      assertEquals(" \"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(" \"", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      
      Elements elements0 = document0.siblingElements();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(" \"", document0.location());
      assertEquals(" \"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(document0.equals((Object)document2));
      
      Element element0 = document2.previousElementSibling();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(" \"", document0.location());
      assertEquals(" \"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" \"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(" \"", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(" \"", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(" \"", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertNull(element0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      pipedReader0.close();
      Document document3 = (Document)document0.removeClass(" \"");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(" \"", document0.location());
      assertEquals(" \"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals(" \"", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(" \"", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tJq5N77eP4}VW!H?PW", "tJq5N77eP4}VW!H?PW");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByIndexEquals(2030);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Element element0 = document0.getElementById("tJq5N77eP4}VW!H?PW");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Element element0 = new Element("Pattern syntax error: ");
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.previousElementSibling();
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("df8qc", "df8qc");
      assertEquals(1, document0.childNodeSize());
      assertEquals("df8qc", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("df8qc", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.appendText("df8qc");
      assertEquals("df8qc", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("df8qc", document0.baseUri());
      assertEquals("df8qc", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("df8qc", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!DOCTYPE", "<!DOCTYPE");
      assertEquals("<!DOCTYPE", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("<!DOCTYPE", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals("<!DOCTYPE", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("<!DOCTYPE", document0.baseUri());
      assertEquals("<!DOCTYPE", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("<!DOCTYPE", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      List<Node> list0 = document0.ensureChildNodes();
      assertEquals("<!DOCTYPE", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("<!DOCTYPE", document0.baseUri());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      
      document0.childNodes = list0;
      assertEquals("<!DOCTYPE", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("<!DOCTYPE", document0.baseUri());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, document0.childNodes.size());
      assertFalse(document0.childNodes.isEmpty());
      
      document0.updateMetaCharsetElement(true);
      assertEquals("<!DOCTYPE", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("<!DOCTYPE", document0.baseUri());
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      
      Elements elements0 = document1.getElementsByIndexEquals(1557);
      assertEquals("<!DOCTYPE", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("<!DOCTYPE", document0.baseUri());
      assertEquals("<!DOCTYPE", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("<!DOCTYPE", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document0.appendText("<!DOCTYPE");
      assertEquals("<!DOCTYPE", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("<!DOCTYPE", document0.baseUri());
      assertEquals("<!DOCTYPE", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("<!DOCTYPE", document2.baseUri());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      Element element0 = document2.previousElementSibling();
      assertEquals("<!DOCTYPE", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("<!DOCTYPE", document0.baseUri());
      assertEquals("<!DOCTYPE", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("<!DOCTYPE", document2.baseUri());
      assertFalse(document2.hasParent());
      assertNull(element0);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      
      String string0 = "";
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      pipedReader0.close();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      try { 
        document2.outerHtmlTail(pipedWriter0, 1557, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Document document0 = new Document("novalidate");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("novalidate", document0.baseUri());
      assertEquals("novalidate", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.wrap("novalidate");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tJq5N77eP4}VW!H?PW", "tJq5N77eP4}VW!H?PW");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByIndexGreaterThan((-585));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Document document0 = new Document("");
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.val("");
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Document document0 = new Document("p{8sDd,$4uAUA'6a");
      assertEquals("p{8sDd,$4uAUA'6a", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("p{8sDd,$4uAUA'6a", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      Attributes attributes0 = document0.attributes();
      assertEquals("p{8sDd,$4uAUA'6a", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("p{8sDd,$4uAUA'6a", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      String string0 = "Wu/sFMo7o9a=";
      Document document1 = (Document)document0.val("Wu/sFMo7o9a=");
      assertEquals("p{8sDd,$4uAUA'6a", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("p{8sDd,$4uAUA'6a", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("p{8sDd,$4uAUA'6a", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("p{8sDd,$4uAUA'6a", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      
      Document document1 = document0.outputSettings(document_OutputSettings2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document1, document0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      
      Element element0 = document1.body();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertNotNull(element0);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document1, document0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      
      Elements elements0 = element0.getElementsMatchingText("");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document1, document0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("d`f8qc", "d`f8qc");
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("d`f8qc", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("d`f8qc", document0.location());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("d`f8qc");
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("d`f8qc", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("d`f8qc", document0.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("d`f8qc", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("d`f8qc", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByClass("or,{jx*qp.parl_!Vtokenqueue");
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("d`f8qc", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("d`f8qc", document0.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("or,{jx*qp.parl_!Vtokenqueue");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: or,{jx*qp.parl_!Vtokenqueue
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Document document0 = Parser.parse("id", "id");
      assertEquals("#document", document0.nodeName());
      assertEquals("id", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("id", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsMatchingOwnText("id");
      assertEquals("#document", document0.nodeName());
      assertEquals("id", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("id", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document1 = (Document)document0.addClass("id");
      assertEquals("#document", document0.nodeName());
      assertEquals("id", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("id", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("id", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("id", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements1 = document0.getElementsByClass("id");
      assertEquals("#document", document0.nodeName());
      assertEquals("id", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("id", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = "Ihcc,g-r|: UI";
      Document document0 = Parser.parseBodyFragment("OAt[)-", "Ihcc,g-r|: UI");
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ihcc,g-r|: UI", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Ihcc,g-r|: UI", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("OAt[)-");
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Ihcc,g-r|: UI", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Ihcc,g-r|: UI", document0.baseUri());
      assertEquals("oat[)-", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("Ihcc,g-r|: UI", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("oat[)-", element0.nodeName());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("OAt[)-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: OAt[)-
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      document0.setBaseUri("xhtml");
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Element element0 = new Element("tJq5N77eP4}VW!H?PI");
      assertEquals("tJq5N77eP4}VW!H?PI", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.nodeName());
      assertNotNull(element0);
      
      List<TextNode> list0 = element0.textNodes();
      assertEquals("tJq5N77eP4}VW!H?PI", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.nodeName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Elements elements0 = element0.getElementsByAttribute("tJq5N77eP4}VW!H?PI");
      assertEquals("tJq5N77eP4}VW!H?PI", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("tJq5N77eP4}VW!H?PI", element0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = "j";
      Tag tag0 = Tag.valueOf("j");
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("j", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("j", tag0.toString());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertNotNull(tag0);
      
      String string1 = "ismap";
      Element element0 = new Element(tag0, "ismap");
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("j", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("j", tag0.toString());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("j", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("j", element0.nodeName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("ismap", element0.baseUri());
      assertNotNull(element0);
      
      Elements elements0 = element0.getElementsByAttribute("ismap");
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("j", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("j", tag0.toString());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("j", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("j", element0.nodeName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("ismap", element0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string2 = "";
      element0.doSetBaseUri("");
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("j", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("j", tag0.toString());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("j", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("j", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      
      Element element1 = element0.prepend("j");
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("j", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("j", tag0.toString());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("j", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("j", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("j", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals("j", element1.tagName());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = element0.parent();
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("j", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("j", tag0.toString());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("j", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("j", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNull(element2);
      assertSame(element0, element1);
      
      int int0 = 1792;
      Node[] nodeArray0 = new Node[1];
      Element element3 = null;
      try {
        element3 = new Element(tag0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = document0.is("xhtml");
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(boolean0);
      
      String string0 = document0.data();
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Document document1 = (Document)document0.addClass("");
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsMatchingOwnText("");
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      document0.reparentChild(document1);
      assertEquals("xhtml", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.appendText("");
      assertEquals("xhtml", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("xhtml", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("xhtml", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = Parser.parse("%%vxjnz,s3[[lj(", "");
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertNotNull(document3);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      
      Elements elements1 = document2.getElementsByClass("Insert position out of bounds.");
      assertEquals("xhtml", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("xhtml", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("xhtml", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(elements1.equals((Object)elements0));
      
      Document document4 = document3.clone();
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.hasParent());
      assertEquals("", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(document4);
      assertNotSame(document3, document1);
      assertNotSame(document3, document4);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      
      Document document5 = Parser.parseBodyFragmentRelaxed("summary", "j<~m^");
      assertEquals(1, document5.childNodeSize());
      assertEquals("j<~m^", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals("j<~m^", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertNotNull(document5);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document3);
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
      
      Document document6 = (Document)document5.doClone(document3);
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertEquals("j<~m^", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals("j<~m^", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertEquals("j<~m^", document6.baseUri());
      assertEquals(0, document6.siblingIndex());
      assertEquals("j<~m^", document6.location());
      assertFalse(document6.updateMetaCharsetElement());
      assertTrue(document6.hasParent());
      assertEquals(1, document6.childNodeSize());
      assertEquals("#root", document6.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertNotNull(document6);
      assertNotSame(document3, document6);
      assertNotSame(document3, document5);
      assertNotSame(document3, document1);
      assertNotSame(document3, document4);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document5, document6);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document3);
      assertNotSame(document6, document2);
      assertNotSame(document6, document3);
      assertNotSame(document6, document1);
      assertNotSame(document6, document5);
      assertNotSame(document6, document4);
      assertNotSame(document6, document0);
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Document document0 = new Document("xhtmR");
      assertEquals("xhtmR", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtmR", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.tagName("xhtmR");
      assertEquals("xhtmR", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtmr", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtmR", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("xhtmR", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtmr", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("xhtmR", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.val("xhtmR");
      assertEquals("xhtmR", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xhtmr", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtmR", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("xhtmr", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("xhtmR", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("xhtmR", document2.baseUri());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tJq5N77eP4}VW!H?PW", "tJq5N77eP4}VW!H?PW");
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByClass("tJq5N77eP4}VW!H?PW");
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      int int0 = (-228);
      Parser parser1 = parser0.setTrackErrors((-228));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Document document0 = parser1.parseInput((Reader) stringReader0, "");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Element element0 = document0.body();
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      List<Node> list0 = Parser.parseFragment("", element0, "#riA3IW.*x(bDDsLCy~");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Element element1 = document0.head();
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertNotNull(element1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      
      boolean boolean0 = element1.hasClass("");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertFalse(boolean0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      
      // Undeclared exception!
      try { 
        element1.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tq5N77e(4}V!H?PW", "tq5N77e(4}V!H?PW");
      assertEquals("tq5N77e(4}V!H?PW", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tq5N77e(4}V!H?PW", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.before("tq5N77e(4}V!H?PW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      String string0 = ":prev%s";
      Document document0 = parser0.parseInput(":prev%s", ":prev%s");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":prev%s", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(":prev%s", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      boolean boolean0 = document0.isBlock();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":prev%s", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(":prev%s", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(boolean0);
      
      String string1 = "vX6f-D|";
      Document document1 = Parser.parseBodyFragmentRelaxed(":prev%s", "Y#rKE*gtS!");
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("Y#rKE*gtS!", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("Y#rKE*gtS!", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      // Undeclared exception!
      try { 
        document1.before("Tag cannot be self closing; not a void tag");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xht4R", "xht4R");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("xht4R", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("xht4R", document0.location());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("xht4R", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("xht4R", document0.location());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("xht4R", element0.baseUri());
      assertNotNull(element0);
      
      boolean boolean0 = element0.hasText();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("xht4R", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("xht4R", document0.location());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("xht4R", element0.baseUri());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        document0.after("xht4R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Document document0 = Parser.parse("mpxvz'8g2p1@j)pr", "mpxvz'8g2p1@j)pr");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("mpxvz'8g2p1@j)pr", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("mpxvz'8g2p1@j)pr", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("mpxvz'8g2p1@j)pr", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("mpxvz'8g2p1@j)pr", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("mpxvz'8g2p1@j)pr", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.after("mpxvz'8g2p1@j)pr");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("mpxvz'8g2p1@j)pr", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("mpxvz'8g2p1@j)pr", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("mpxvz'8g2p1@j)pr", element0.baseUri());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("mpxvz'8g2p1@j)pr", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Document document0 = Document.createShell(":G1T4t>'dOcb*))Q");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":G1T4t>'dOcb*))Q", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(":G1T4t>'dOcb*))Q", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":G1T4t>'dOcb*))Q", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(":G1T4t>'dOcb*))Q", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":G1T4t>'dOcb*))Q", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(":G1T4t>'dOcb*))Q", document1.baseUri());
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = document1.normalise();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":G1T4t>'dOcb*))Q", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(":G1T4t>'dOcb*))Q", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":G1T4t>'dOcb*))Q", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(":G1T4t>'dOcb*))Q", document1.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(":G1T4t>'dOcb*))Q", document2.location());
      assertEquals(":G1T4t>'dOcb*))Q", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document3 = document2.parser(parser1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":G1T4t>'dOcb*))Q", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(":G1T4t>'dOcb*))Q", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":G1T4t>'dOcb*))Q", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(":G1T4t>'dOcb*))Q", document1.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(":G1T4t>'dOcb*))Q", document2.location());
      assertEquals(":G1T4t>'dOcb*))Q", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals(":G1T4t>'dOcb*))Q", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(":G1T4t>'dOcb*))Q", document3.location());
      assertNotNull(document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      
      // Undeclared exception!
      try { 
        document3.after(":G1T4t>'dOcb*))Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Document document0 = new Document("xhtml");
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        document0.insertChildren(67, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8|?~8$2\u0006", "");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.clone();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        document0.insertChildren((-1167), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Document document0 = Document.createShell("y$_e?+^xPm;_R}vtn0");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("y$_e?+^xPm;_R}vtn0", document0.location());
      assertEquals("y$_e?+^xPm;_R}vtn0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.createElement("y$_e?+^xPm;_R}vtn0");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("y$_e?+^xPm;_R}vtn0", document0.location());
      assertEquals("y$_e?+^xPm;_R}vtn0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("y$_e?+^xPm;_R}vtn0", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("y$_e?+^xPm;_R}vtn0", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("y$_e?+^xPm;_R}vtn0", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      List<DataNode> list0 = element0.dataNodes();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("y$_e?+^xPm;_R}vtn0", document0.location());
      assertEquals("y$_e?+^xPm;_R}vtn0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("y$_e?+^xPm;_R}vtn0", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("y$_e?+^xPm;_R}vtn0", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("y$_e?+^xPm;_R}vtn0", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        document0.insertChildren((-4995), (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      StringReader stringReader0 = new StringReader("Children collection to be inserted must not be null.");
      assertNotNull(stringReader0);
      
      Document document0 = parser0.parseInput((Reader) stringReader0, "RehW\"PHW(B`$");
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("RehW\"PHW(B`$", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("RehW\"PHW(B`$", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.text("id");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xh84R", "xh84R");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("xh84R", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("xh84R", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("xh84R");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("xh84R", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("xh84R", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("xh84R", document1.baseUri());
      assertEquals("xh84R", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren(12, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String string0 = " \"";
      Document document0 = new Document(" \"");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = Document.createShell(" \"");
      assertEquals(" \"", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(" \"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      document0.setParentNode(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" \"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" \"", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" \"", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(" \"", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      
      Node[] nodeArray0 = new Node[5];
      nodeArray0[1] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      // Undeclared exception!
      try { 
        document1.insertChildren(1, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = "";
      String string1 = "org.jsoup.nodes.Element$NodeList";
      Document document0 = Parser.parse("", "org.jsoup.nodes.Element$NodeList");
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.nextElementSibling();
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertNull(element0);
      
      int int0 = (-962);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) null;
      nodeArray0[1] = (Node) null;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) null;
      nodeArray0[4] = (Node) null;
      // Undeclared exception!
      try { 
        document0.insertChildren((-962), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Element element0 = document0.nextElementSibling();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xhtml", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = " > ";
      Document document0 = new Document(" > ");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(" > ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren((-858), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Document document0 = Document.createShell("xh84R");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("xh84R", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xh84R", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.append("mv");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("xh84R", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xh84R", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("xh84R", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("xh84R", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsContainingText("mv");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("xh84R", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xh84R", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("xh84R", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("xh84R", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.toString();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("xh84R", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("xh84R", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>mv", string0);
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "#root");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsContainingOwnText("textarea");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xht4R", "xht4R");
      assertEquals("#root", document0.tagName());
      assertEquals("xht4R", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xht4R", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.createElement("xht4R");
      assertEquals("#root", document0.tagName());
      assertEquals("xht4R", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xht4R", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("xht4R", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("xht4R", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("xht4R", element0.nodeName());
      assertNotNull(element0);
      
      document0.title("b2r");
      assertEquals("#root", document0.tagName());
      assertEquals("xht4R", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xht4R", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Element element1 = document0.appendElement("id");
      assertEquals("#root", document0.tagName());
      assertEquals("xht4R", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xht4R", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("id", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("id", element1.tagName());
      assertEquals("xht4R", element1.baseUri());
      assertNotNull(element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      
      Elements elements0 = document0.getElementsMatchingText("xht4R");
      assertEquals("#root", document0.tagName());
      assertEquals("xht4R", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xht4R", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = element1.previousElementSiblings();
      assertEquals("#root", document0.tagName());
      assertEquals("xht4R", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xht4R", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("id", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("id", element1.tagName());
      assertEquals("xht4R", element1.baseUri());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotNull(elements1);
      assertNotSame(element1, element0);
      assertNotSame(elements1, elements0);
      assertFalse(element1.equals((Object)element0));
      assertFalse(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("E", "E");
      assertEquals("E", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("E", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Charset charset0 = document0.charset();
      assertEquals("E", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("E", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      boolean boolean0 = document0.hasAttributes();
      assertEquals("E", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("E", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(boolean0);
      
      Element element0 = document0.appendElement("br");
      assertEquals("E", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("E", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("E", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      String string0 = document0.toString();
      assertEquals("E", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("E", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body>\n  E\n </body>\n</html>\n<br>", string0);
      
      String string1 = element0.val();
      assertEquals("E", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("E", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("E", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = document0.ownText();
      assertEquals("E", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("E", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Tag tag0 = element0.tag();
      assertEquals("E", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("E", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("E", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("br", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("br", tag0.toString());
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xht4R", "xht4R");
      assertEquals("xht4R", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xht4R", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      String string0 = document0.toString();
      assertEquals("xht4R", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xht4R", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body>\n  xht4R\n </body>\n</html>", string0);
      
      Elements elements0 = document0.siblingElements();
      assertEquals("xht4R", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xht4R", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      Document document0 = new Document("1&,Z9=r");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("1&,Z9=r", document0.baseUri());
      assertEquals("1&,Z9=r", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.prependText("1&,Z9=r");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("1&,Z9=r", document0.baseUri());
      assertEquals("1&,Z9=r", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("1&,Z9=r", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1&,Z9=r", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Element element0 = new Element(".q+ n:EYo&IHx~7Lt>Iy");
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(".q+ n:EYo&IHx~7Lt>Iy", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(".q+ n:EYo&IHx~7Lt>Iy", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.append("7Lc^`;7U,wF@");
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(".q+ n:EYo&IHx~7Lt>Iy", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(".q+ n:EYo&IHx~7Lt>Iy", element0.tagName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(".q+ n:EYo&IHx~7Lt>Iy", element1.nodeName());
      assertEquals(".q+ n:EYo&IHx~7Lt>Iy", element1.tagName());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Document document0 = new Document(" > ");
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsContainingText(" > ");
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Element element0 = document0.getElementById(" > ");
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xh84R", "xh84R");
      assertFalse(document0.hasParent());
      assertEquals("xh84R", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xh84R", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      String string0 = document0.ownText();
      assertFalse(document0.hasParent());
      assertEquals("xh84R", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xh84R", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasText();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(boolean0);
      
      Elements elements0 = document0.getElementsByTag("xhtml");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsMatchingText("xhtml");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element");
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertEquals("org.jsoup.nodes.Element", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("org.jsoup.nodes.Element", tag0.toString());
      assertNotNull(tag0);
      
      String string0 = null;
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xht4R", "xht4R");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xht4R", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xht4R", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertNotNull(document0);
      
      Element element0 = document0.getElementById("e?~`");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertNull(element0);
      
      Document document1 = (Document)document0.attr("e?~`", false);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertEquals("xhtml", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Document document0 = new Document("xhtml");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByAttributeStarting("xhtml");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document1 = (Document)document0.val("html > body");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("xhtml", document1.baseUri());
      assertEquals("xhtml", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtmR", "xhtmR");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("xhtmR", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtmR", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      String string0 = document0.outerHtml();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("xhtmR", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtmR", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body>\n  xhtmR\n </body>\n</html>", string0);
      
      Elements elements0 = document0.getElementsByClass("<html>\n <head></head>\n <body>\n  xhtmR\n </body>\n</html>");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("xhtmR", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtmR", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Tag tag0 = Tag.valueOf(">");
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(">", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.clone();
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertTrue(attributes1.equals((Object)attributes0));
      
      Attributes attributes2 = attributes1.clone();
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes2.size());
      assertNotNull(attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertTrue(attributes2.equals((Object)attributes1));
      assertTrue(attributes2.equals((Object)attributes0));
      
      FormElement formElement0 = new FormElement(tag0, "#", attributes1);
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(">", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("#", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(">", formElement0.nodeName());
      assertEquals(">", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertNotNull(formElement0);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes0.equals((Object)attributes2));
      assertTrue(attributes1.equals((Object)attributes2));
      assertTrue(attributes1.equals((Object)attributes0));
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      String string0 = Parser.unescapeEntities(">", false);
      assertNotNull(string0);
      assertEquals(">", string0);
      
      Parser parser1 = parser0.setTrackErrors(0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = parser1.parseInput("", "#");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      FormElement formElement1 = formElement0.addElement(document0);
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(">", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("#", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(">", formElement0.nodeName());
      assertEquals(">", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals(">", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertEquals("#", formElement1.baseUri());
      assertEquals(">", formElement1.tagName());
      assertNotNull(formElement1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(formElement1, formElement0);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes0.equals((Object)attributes2));
      assertTrue(attributes1.equals((Object)attributes2));
      assertTrue(attributes1.equals((Object)attributes0));
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      List<Node> list0 = Parser.parseFragment("", (Element) formElement1, "^y/Bi**?E%]GT", parseErrorList0);
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(">", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("#", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(">", formElement0.nodeName());
      assertEquals(">", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals(">", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertEquals("#", formElement1.baseUri());
      assertEquals(">", formElement1.tagName());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(formElement1, formElement0);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes0.equals((Object)attributes2));
      assertTrue(attributes1.equals((Object)attributes2));
      assertTrue(attributes1.equals((Object)attributes0));
      
      String string1 = formElement1.html();
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(">", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("#", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(">", formElement0.nodeName());
      assertEquals(">", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals(">", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertEquals("#", formElement1.baseUri());
      assertEquals(">", formElement1.tagName());
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(formElement1, formElement0);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes0.equals((Object)attributes2));
      assertTrue(attributes1.equals((Object)attributes2));
      assertTrue(attributes1.equals((Object)attributes0));
      assertFalse(string1.equals((Object)string0));
      
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      FormElement formElement2 = (FormElement)formElement1.filter(nodeFilter0);
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(">", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("#", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(">", formElement0.nodeName());
      assertEquals(">", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals(">", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertEquals("#", formElement1.baseUri());
      assertEquals(">", formElement1.tagName());
      assertEquals(0, formElement2.childNodeSize());
      assertFalse(formElement2.hasParent());
      assertFalse(formElement2.isBlock());
      assertEquals(">", formElement2.nodeName());
      assertEquals(">", formElement2.tagName());
      assertEquals("#", formElement2.baseUri());
      assertEquals(0, formElement2.siblingIndex());
      assertNotNull(formElement2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, formElement2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(formElement1, formElement0);
      assertSame(formElement1, formElement2);
      assertSame(formElement2, formElement0);
      assertSame(formElement2, formElement1);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes0.equals((Object)attributes2));
      assertTrue(attributes1.equals((Object)attributes2));
      assertTrue(attributes1.equals((Object)attributes0));
      
      FormElement formElement3 = (FormElement)formElement1.attr(">", true);
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(">", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("#", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(">", formElement0.nodeName());
      assertEquals(">", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals(">", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertEquals("#", formElement1.baseUri());
      assertEquals(">", formElement1.tagName());
      assertEquals(">", formElement3.nodeName());
      assertFalse(formElement3.isBlock());
      assertEquals(">", formElement3.tagName());
      assertFalse(formElement3.hasParent());
      assertEquals(0, formElement3.childNodeSize());
      assertEquals("#", formElement3.baseUri());
      assertEquals(0, formElement3.siblingIndex());
      assertNotNull(formElement3);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, formElement3);
      assertSame(formElement0, formElement2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(formElement1, formElement3);
      assertSame(formElement1, formElement2);
      assertSame(formElement1, formElement0);
      assertSame(formElement3, formElement0);
      assertSame(formElement3, formElement2);
      assertSame(formElement3, formElement1);
      assertFalse(attributes0.equals((Object)attributes1));
      assertTrue(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      
      FormElement formElement4 = (FormElement)formElement3.clone();
      assertFalse(formElement4.hasParent());
      assertEquals(">", formElement4.nodeName());
      assertEquals("#", formElement4.baseUri());
      assertFalse(formElement4.isBlock());
      assertEquals(">", formElement4.tagName());
      assertEquals(0, formElement4.siblingIndex());
      assertEquals(0, formElement4.childNodeSize());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(">", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("#", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(">", formElement0.nodeName());
      assertEquals(">", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals(">", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertEquals("#", formElement1.baseUri());
      assertEquals(">", formElement1.tagName());
      assertEquals(">", formElement3.nodeName());
      assertFalse(formElement3.isBlock());
      assertEquals(">", formElement3.tagName());
      assertFalse(formElement3.hasParent());
      assertEquals(0, formElement3.childNodeSize());
      assertEquals("#", formElement3.baseUri());
      assertEquals(0, formElement3.siblingIndex());
      assertNotNull(formElement4);
      assertNotSame(formElement4, formElement2);
      assertNotSame(formElement4, formElement0);
      assertNotSame(formElement4, formElement1);
      assertNotSame(formElement4, formElement3);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertNotSame(formElement0, formElement4);
      assertSame(formElement0, formElement3);
      assertSame(formElement0, formElement2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(formElement1, formElement4);
      assertSame(formElement1, formElement3);
      assertSame(formElement1, formElement2);
      assertSame(formElement1, formElement0);
      assertNotSame(formElement3, formElement4);
      assertSame(formElement3, formElement0);
      assertSame(formElement3, formElement2);
      assertSame(formElement3, formElement1);
      assertFalse(formElement4.equals((Object)formElement2));
      assertFalse(formElement4.equals((Object)formElement0));
      assertFalse(formElement4.equals((Object)formElement1));
      assertFalse(formElement4.equals((Object)formElement3));
      assertFalse(attributes0.equals((Object)attributes1));
      assertTrue(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      
      // Undeclared exception!
      try { 
        formElement1.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Document document0 = new Document("id");
      assertEquals("id", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("id", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Document document0 = new Document("xhtml");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.prepend("xhtml");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("xhtml", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("xhtml", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Set<String> set0 = document0.classNames();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains("xhtml"));
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Document document0 = new Document(" > ");
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" > ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByAttributeValueNot(" > ", " > ");
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" > ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element0 = document0.prependElement(" > ");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" > ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(">", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(" > ", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.tagName());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Document document0 = new Document("GUSI`0y7:96)V");
      assertEquals(0, document0.childNodeSize());
      assertEquals("GUSI`0y7:96)V", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("GUSI`0y7:96)V", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Elements elements0 = document0.parents();
      assertEquals(0, document0.childNodeSize());
      assertEquals("GUSI`0y7:96)V", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("GUSI`0y7:96)V", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Tag tag0 = Tag.valueOf("LE");
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals("LE", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertEquals("LE", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      String string0 = "";
      String string1 = attributes0.getIgnoreCase("");
      assertEquals(0, attributes0.size());
      assertNotNull(string1);
      assertEquals("", string1);
      
      Attributes attributes1 = attributes0.put("LE", "#declaration");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Element element0 = new Element(tag0, "LE", attributes1);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals("LE", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertEquals("LE", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("LE", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("LE", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("LE", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.prepend("LE");
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals("LE", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertEquals("LE", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("LE", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("LE", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("LE", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals("LE", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.hasParent());
      assertEquals("LE", element1.tagName());
      assertEquals("LE", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertNotNull(element1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Elements elements0 = element1.getElementsByAttributeValueNot("#root", "org.jsoup.nodes.Element$2");
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals("LE", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertEquals("LE", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("LE", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("LE", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("LE", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals("LE", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.hasParent());
      assertEquals("LE", element1.tagName());
      assertEquals("LE", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      // Undeclared exception!
      try { 
        element0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xht4R", "xht4R");
      assertEquals("xht4R", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xht4R", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("xht4R", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xht4R", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("xht4R", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      
      boolean boolean0 = element0.hasText();
      assertEquals("xht4R", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xht4R", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("xht4R", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(boolean0);
      
      String string0 = element0.ownText();
      assertEquals("xht4R", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("xht4R", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("xht4R", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertNotNull(string0);
      assertEquals("xht4R", string0);
      
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtml", "xhtml");
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.getElementsByTag("xhtml");
      document0.getElementsByAttributeValueContaining("xhtml", "xhtml");
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtml", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "s+");
      Document document1 = document0.ownerDocument();
      document1.siblingIndex = 415;
      document1.getElementsByAttributeValueContaining("class", "k3$J3we");
      // Undeclared exception!
      try { 
        document1.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("be", "be");
      Document document1 = document0.clone();
      List<DataNode> list0 = document1.dataNodes();
      assertEquals("be", document1.baseUri());
      assertNotSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xhtmR", "xhtmR");
      Element element0 = document0.body();
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = document0.clone();
      assertEquals("xhtmR", element1.baseUri());
      assertNotSame(element1, document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tJq5N77eP4}VW!H?PW", "tJq5N77eP4}VW!H?PW");
      Element element0 = document0.getElementById("tJq5N77eP4}VW!H?PW");
      assertNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("tJq5N77eP4}VW!H?PW", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Document document0 = new Document("xhtmR");
      document0.val();
      assertEquals("xhtmR", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xhtmFl", "xhtmFl");
      assertEquals(1, document0.childNodeSize());
      assertEquals("xhtmFl", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors(719);
      Parser.parseBodyFragmentRelaxed("", "Vtfw(9TZz");
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Parser parser2 = parser1.settings(parseSettings0);
      Parser.parseBodyFragment("m9`", "f&AVz@W@1&2E,n");
      Document document0 = parser2.parseInput("f&AVz@W@1&2E,n", "");
      Document document1 = document0.ownerDocument();
      document1.clone();
      document1.val();
      char[] charArray0 = new char[9];
      charArray0[0] = 'Z';
      charArray0[1] = 'I';
      charArray0[2] = 'u';
      charArray0[3] = '.';
      charArray0[4] = 'E';
      charArray0[5] = 't';
      charArray0[6] = '*';
      charArray0[7] = 'f';
      charArray0[8] = 'E';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 8205, 719);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Element element0 = new Element("n:Jp8c.C/73}");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      String string0 = "[%s]";
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("[%s]", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Tag.valueOf("[%s]", parseSettings0);
      String string1 = "\\i`k>|E;fdliHYz";
      Attributes attributes2 = attributes1.put("=sA`:2D=kxb!2a}[", "i`k>|E;fdliHYz");
      FormElement formElement0 = new FormElement(tag0, "[%s]", attributes2);
      Parser.xmlParser();
      // Undeclared exception!
      try { 
        Tag.valueOf((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
