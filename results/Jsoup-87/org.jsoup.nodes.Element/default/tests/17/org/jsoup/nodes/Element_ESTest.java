/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 08:43:44 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      document0.addClass(",8JF{~XA");
      document0.addClass(":contains(text) query must not be emptt");
      document0.hasClass(",8JF{~XA");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cpY`kn}82[|+!C", "");
      document0.getElementsByAttributeValueMatching("Qj", "");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "did not find balanced marker at '");
      Node[] nodeArray0 = new Node[9];
      // Undeclared exception!
      try { 
        document0.insertChildren((-2), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = new Document("n}Bf#~l");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(24);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 24);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(bufferedWriter0, 850, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Element element0 = new Element("NoYeq");
      element0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Element element0 = new Element("NoYeq");
      element0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("YaJF{~X", "YaJF{~X");
      Element element0 = document0.appendElement("b5");
      element0.wrap("YaJF{~X");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#root");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "!sTF$", attributes0);
      formElement0.wholeText();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":contains(%s)", ":contains(%s)");
      Element element0 = document0.body();
      element0.val("skZM");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = new Document("{NHJ");
      document0.siblingIndex = (-1);
      document0.val("{NHJ");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("MR43u{~0wi5~o.Q?b3*", "java.lang.string@0000000015 :contains(text) query must not br empty");
      Element element0 = document0.head();
      element0.val("MR43u{~0wi5~o.Q?b3*");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = new Document("{NHJ");
      Element element0 = document0.val("{NHJ");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      Element element0 = document0.appendElement("br");
      document0.prepend("br");
      element0.toggleClass("py");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      Element element0 = document0.appendElement("br");
      element0.toggleClass("py");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = new Document("JW:b");
      document0.toggleClass("JW:b");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parse("BaJdNF{~XA", "BaJdNF{~XA");
      Element element0 = document0.body();
      element0.text("br");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "'SXzDV2@_aK");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "D5/ITE`");
      document0.tagName("head");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      Element element0 = document0.appendElement("nX");
      element0.tagName("z1AsK(`5");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = new Document(":nth-child(%d)");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Tag name must not be empty.");
      Element element0 = new Element(tag0, "MJ4R(IB!oeiN&ExY:Pp");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("OvE%Q@u3,n}+I0e!", "head");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Document.createShell("JU");
      document0.selectFirst("JU");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("YaJF{~X", "YaJF{~X");
      Element element0 = document0.appendElement("br");
      element0.selectFirst("br");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("W[na,x", "W[na,x");
      Element element0 = document0.appendElement("EO");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document0;
      element0.addChildren(nodeArray0);
      element0.selectFirst("EO");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Rah wte0xtEndTagOpen", "Rah wte0xtEndTagOpen");
      document0.select("Rah wte0xtEndTagOpen");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("OvE%Q@u3,n}+I0e!", "head");
      Element element0 = document0.head();
      element0.removeClass("");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parse("BaJF{~XA", "BaJF{~XA");
      Element element0 = document0.appendElement("br");
      element0.removeClass("<html>\n <head></head>\n <body>\n  BaJF{~XA\n </body>\n</html>\n<br>br</br>");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse("BaJF{~XA", "BaJF{~XA");
      document0.removeClass("<html>\n <head></head>\n <body>\n  BaJF{~XA\n </body>\n</html>\n<br>br</br>");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("d[nf,x", "d[nf,x");
      Element element0 = document0.appendElement(">");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document0;
      element0.addChildren(nodeArray0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("body", parseSettings0);
      Element element0 = new Element(tag0, "required", attributes0);
      element0.prependText("Jc)b");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("YaJF{~X", "YaJF{~X");
      Element element0 = document0.appendElement("br");
      element0.prependText("YaJF{~X");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Wi[na,x", "Wi[na,x");
      document0.prependElement("s+");
      Element element0 = document0.appendElement("EO");
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("FxhLs)G0;DZ)", "</");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" />", "3nyi5c\"W+om");
      Element element0 = document0.head();
      Comment comment0 = new Comment("default", "3nyi5c\"W+om");
      element0.prependChild(comment0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parse("=sJ;", ",8JF{~XA");
      Element element0 = document0.appendElement("mS1FqYO<t<v");
      element0.prepend("=sJ;");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      document0.prepend("");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Element element0 = new Element("Jc)b");
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("NSWN(Tjx", "vkWw{)VSHIDcoZ P");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(".", ".");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = new Document(":contains(%s)");
      Document document1 = document0.clone();
      document1.prependChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = new Document(":contains(%s)");
      document0.prependChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Tag name must not be empty.");
      Element element0 = new Element(tag0, "MJ4R(IB!oeiN&ExY:Pp");
      Element element1 = element0.html("q${[0{!{q`+IfEGxjwA");
      element1.ownText();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Tag tag0 = Tag.valueOf("xmlns");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "xmlns", attributes0);
      pseudoTextElement0.nodeName();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("<!xlu}y8 OKG<!", "ifNQ+pmal;,f=d)rP&");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Document.createShell(":contains(%s)");
      document0.prependChild(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!LO~vprx{0~p1b/ ", "java.lang.string@0000000015 :contains(tet) que@y must b{r be emptt");
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("java.lang.string@0000000015 :contains(tet) que@y must b{r be emptt", "!LO~vprx{0~p1b/ ");
      document0.is((Evaluator) evaluator_AttributeWithValueNot0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":contains(%s)", ":contains(%s)");
      document0.is(":contains(%s)");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("SKIP_ENTIRELY", "SKIP_ENTIRELY");
      document0.is("SKIP_ENTIRELY");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = new Document(",8J]F{~XA");
      document0.prepend("br");
      Elements elements0 = document0.getElementsMatchingOwnText("br");
      document0.insertChildren((-1), (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" />", ",8JF{~XA");
      LinkedHashSet<CDataNode> linkedHashSet0 = new LinkedHashSet<CDataNode>();
      document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("W[na,x", "W[na,x");
      Element element0 = document0.appendElement(".EC");
      element0.html(".EC");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "Sj;Qs");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document0.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = new Document(":contains(%s)");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Element element0 = new Element("NoYeq");
      element0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(".", ".");
      Pattern pattern0 = Pattern.compile("5", 4);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "Children collection to be inserted must not be null.");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = new Document("{NHJ");
      Pattern pattern0 = Pattern.compile("A?@.SB&?D>j1", 2086);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":ah wtextEndTagOpen", ":ah wtextEndTagOpen");
      Pattern pattern0 = Pattern.compile("", 2175);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Element element0 = new Element("NoYeq");
      element0.getElementsContainingOwnText("");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      document0.getElementsByTag("extended");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("^CtJNbS<3", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "^CtJNbS<3", attributes0);
      element0.getElementsByTag("^ctjnbs<3");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(".", ".");
      document0.getElementsByIndexLessThan(4);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parse("2t90,!1Tc2", "H(nOt\"dp9x 3:tTn^");
      document0.getElementsByIndexGreaterThan((-452));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("sp1'B)5`", "sp1'B)5`");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      document0.getElementsByAttributeValueStarting(",8JF{~XA", "fhDav$xMEK$");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y[3U=c1!", "Y[3U=c1!");
      document0.getElementsByAttributeValueContaining("Y[3U=c1!", "Y[3U=c1!");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("mIeTQO", "mIeTQO");
      document0.prependChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parse(" />", "v%yc^} >Q");
      Element element0 = document0.prependElement("body");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = new Document(":contains(%s)");
      document0.setSiblingIndex((-1436010313));
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parse("DAd_g(M3L~0vn8g", "9!Y1Icl");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "D5/ITE`");
      Element element0 = document0.appendElement("bjw;;");
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("YaJF{~X", "YaJF{~X");
      Element element0 = document0.appendElement("b5");
      element0.doClone(element0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", "<html>\n <head></head>\n <body>\n  Rah wtextEndTagOpen\n </body>\n</html>");
      Element element0 = document0.head();
      element0.doClone(element0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("W[a,x", "W[a,x");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = new Document("AZ#*:dL]pa>LT8e,");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("^CtJNbS<3", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "^CtJNbS<3", attributes0);
      element0.prepend("^ctjnbs<3");
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = new Document(":contains(%s)");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document0.setSiblingIndex((-1436010313));
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = new Document(":contains(%s)");
      Element element0 = document0.prependChild(document0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      Element element0 = document0.addClass(" />");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bZr", "Sj;Q");
      Element element0 = document0.createElement("#");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parse("] b>R|V`Q", "] b>R|V`Q");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      Element element0 = document0.appendElement("br");
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = new Document("RawtextEndTagOpen");
      document0.prependChild(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hgroup", "hgroup");
      Element element0 = document0.appendElement("hgroup");
      element0.before("0YcL6}y)?sRH=n");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("YaJF{~X", "YaJF{~X");
      Element element0 = document0.appendElement("br");
      element0.before("YaJF{~X");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("YaJX{~.X", "YaJX{~.X");
      Element element0 = document0.appendElement("br");
      element0.text("br");
      element0.before("br");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = new Document("uEB^3");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Document.createShell("html");
      document0.doSetBaseUri("");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Element element0 = new Element("NoYeq");
      element0.addClass("");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parse("hgroump", "hgroump");
      Element element0 = document0.appendElement("br");
      element0.attr("hgroump", false);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parse(" />", "v%yc^} >Q");
      Element element0 = document0.prependElement("body");
      element0.attr(".", "y_ V||0u(.rTOFxa}");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hgroup", "hgroup");
      Element element0 = document0.appendElement("br");
      element0.attr(":nth-of-type(", "w[na,x");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      document0.attr(" />", "strong");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("#");
      Document document0 = parser0.parseInput((Reader) stringReader0, "#");
      document0.attr("#", ",|`CG},");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("J[na,.", "J[na,.");
      Element element0 = document0.body();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Element element0 = new Element("*m&");
      Tag tag0 = Tag.valueOf("*m&");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "ScriptDataEndTagName", attributes0);
      element0.appendTo(formElement0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      document0.appendElement(",8JF{~XA");
      Element element0 = document0.appendElement(",8JF{~XA");
      element0.appendText(")7]\"jGYF4`<poU");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      Element element0 = document0.appendElement(",8JF{~XA");
      element0.appendText(")7]\"jGYF4`<poU");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parse(":ah wtxtEndTIagOpen", ":ah wtxtEndTIagOpen");
      Document document1 = Parser.parse(":ah wtxtEndTIagOpen", ":ah wtxtEndTIagOpen");
      document0.appendChild(document1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "Children collection to be inserted must not be null.");
      Element element0 = document0.body();
      element0.append("uBUC1Esv<>JA<");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("YaJX{~.X", "YaJX{~.X");
      Element element0 = document0.appendElement("br");
      element0.append("YaJX{~.X");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = new Document(":contains(%s)");
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hgroump", "hgroump");
      Element element0 = document0.appendElement("br");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = new Document("Jc)b");
      document0.appendChild(document0);
      Document document1 = Parser.parseBodyFragment("Jc)b", "Jc)b");
      document0.after((Node) document1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":contains(%s)", ":contains(%s)");
      Element element0 = document0.appendElement("nX");
      element0.after("nX");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("~C7C7~j4UlmYW~y?", ">");
      Element element0 = document0.body();
      element0.after("pE#T9LX4h");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parse("Jc)b", "] b>R|V`Q");
      Element element0 = document0.body();
      element0.addClass("textarea");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("W[a,x", "W[a,x");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.wrap("~");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      // Undeclared exception!
      try { 
        document0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = new Document(",8JF\"{~XA");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.val(",8JF\"{~XA");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":ah wtextEndTagOpen", ":ah wtextEndTagOpen");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("YaJF{~X", "YaJF{~X");
      Element element0 = document0.appendElement("br");
      List<Node> list0 = Parser.parseXmlFragment("U~%o`6(rE0DL 1a", "Insert position out of bounds.");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.text("br");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("];HR?}( lo.#T", "</");
      // Undeclared exception!
      try { 
        document0.text("];HR?}( lo.#T");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("BaJF{~XA", "BaJF{~XA");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = new Document(":contains(%s)");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.tagName("head");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cit", "cit");
      DocumentType documentType0 = new DocumentType("#root", "}`B??P", "*m&", "eU-&RW,>*rZi[JP");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("YaJF{~X", "YaJF{~X");
      // Undeclared exception!
      try { 
        document0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Document.createShell("zJF'`X");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parse(",6JF{~XA", ",6JF{~XA");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":contains(%s)", ":contains(%s)");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("W[na,x", "W[na,x");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.prependElement("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".:TX3lGj<", "              ");
      // Undeclared exception!
      try { 
        document0.prependElement("              ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = new Document("YV8[.usg7");
      CDataNode cDataNode0 = new CDataNode("YV8[.usg7");
      Node node0 = cDataNode0.doClone(document0);
      // Undeclared exception!
      try { 
        document0.prependChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.prepend("org.jsoup.nodes.FormElement");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = new Document("br");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":contains(%s)", ":contains(%s)");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ":contains(%s)");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 294, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = new Document("=8JF{~XA");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("=8JF{~XA");
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintWriter0, (-84), (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Rah wtextEndTagOpen", "Rah wtextEndTagOpen");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Rah wtextEndTagOpen");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintWriter0, (-977), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("W[a,x", "W[a,x");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      MockFile mockFile0 = new MockFile("sK+oeL&XU", "(I/f'f");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintWriter0, 15248, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document0 = Parser.parse("body", "];HR?}( lo.#T");
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(stringWriter0, (-1436010313), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("J[na,.", "J[na,.");
      document0.appendChild(document0);
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      // Undeclared exception!
      document0.is((Evaluator) evaluator_IsFirstOfType0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("YaJF{~X", "YaJF{~X");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute((String) null);
      // Undeclared exception!
      try { 
        document0.is((Evaluator) evaluator_Attribute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = new Document(":contains(%s)");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.is(":contains(%s)");
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("27", "_-5Ldzm1J4B");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = new Document(",8JF\"{~XA");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.html(",8JF\"{~XA");
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("YaJX{~.X", "YaJX{~.X");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      document0.prependChild(document0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      document0.html(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "uEB^3");
      // Undeclared exception!
      try { 
        document0.html((BufferedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(",6JF{~XA", ",8JF{~XA");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.charset((Charset) null);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      // Undeclared exception!
      try { 
        document1.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document$OutputSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      Element element0 = document0.appendElement("br");
      element0.siblingIndex = (-892);
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = new Document("h(0<~[Ny/yQDsX");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parse("Jc)b", "Jc)b");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("Jc)b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: Jc)b
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":ah wtextEndTagOpen", ":ah wtextEndTagOpen");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",8JF\"{~XA", ",8JF\"{~XA");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText(",8JF\"{~XA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: ,8JF\"{~XA
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("W[na,x", "W[na,x");
      Element element0 = document0.appendElement("EO");
      element0.setSiblingIndex((-2108));
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("EO");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("W[na,x", "W[na,x");
      DocumentType documentType0 = new DocumentType("W[na,x", "W[na,x", "=i=", "=i=", "W[na,x");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("W[na,x");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      // Undeclared exception!
      try { 
        document0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      TextNode textNode0 = new TextNode((String) null, "iFAJ^+z");
      document0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals(374);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@y}e,%[", "@y}e,%[");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot((String) null, "@y}e,%[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!LO~vprx{0~p1b/ ", "java.lang.string@0000000015 :contains(tet) que@y must b{r be emptt");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("o>Np.S[%Hi", "java.lang.string@0000000015 :contains(tet) que@y must b{r be emptt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: java.lang.string@0000000015 :contains(tet) que@y must b{r be emptt
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "Children collection to be inserted must not be null.");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", "_yU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = new Document(".");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Rah wte0xtEndTagOpen", "Rah wte0xtEndTagOpen");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.BooleanAttribute");
      // Undeclared exception!
      try { 
        element0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("JkNxm4", "JkNxm4");
      // Undeclared exception!
      try { 
        document0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ej'/rL}C2y6", "ej'/rL}C2y6");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Element element0 = document0.attr("nv", false);
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.dataNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("YaJF{~X", "YaJF{~X");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      // Undeclared exception!
      try { 
        document0.child((-1625949436));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = new Document(":contains(%s)");
      Element element0 = document0.prependChild(document0);
      Element element1 = document0.empty();
      // Undeclared exception!
      try { 
        element1.before((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = new Document(":contains(%s)");
      Element element0 = document0.prependChild(document0);
      document0.setSiblingIndex((-1436010313));
      // Undeclared exception!
      try { 
        document0.before((Node) element0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("W[a,x", "W[a,x");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.before("P7av");
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = new Document(":contains(%s)");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = new Document(",8JF\"{~XA");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.attr(",8JF\"{~XA", "sW3");
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("W[na,x", "W[na,x");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = new Document("Jc)b");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.appendElement("Did not find balanced marker at '");
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":contains(%s)", ":contains(%s)");
      List<Node> list0 = Parser.parseFragment(":contains(%s)", (Element) document0, ":contains(%s)");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendElement("nX");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@y}e,%[", "@y}e,%[");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("YaJF{~X", "YaJF{~X");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.append(":containsOwn(");
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = new Document(":contains(%s)");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("W[na,x", "W[na,x");
      document0.appendChild(document0);
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.after(",8JF{~XA");
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = new Document("Rah wtextEndTagOpen");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("h/L");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "org.jsoup.nodes.Element$NodeList", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Rah wtextEndTagOpen", "Rah wtextEndTagOpen");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = new Document("uEB^3");
      document0.html((BufferedWriter) null);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("@y}e,%[", "@y}e,%[");
      document0.addClass("@y}e,%[");
      document0.addClass("@y}e,%[");
      document0.hasClass("@y}e,%[");
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = new Document("I-|f(n2MLv-.gI");
      document0.hasClass("I-|f(n2MLv-.gI");
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "i~?");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      document0.className();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "D5/ITE`");
      document0.prepend("head");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Document.createShell(",8JF{~XA");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      Element element0 = document0.prepend("br");
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = new Document(".");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("d[nf,x", "d[nf,x");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Tag name must not be empty.");
      Element element0 = new Element(tag0, "MJ4R(IB!oeiN&ExY:Pp");
      Element element1 = element0.appendElement("xx`o^y;Y");
      element1.html("q${[0{!{q`+IfEGxjwA");
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":contains(%s)", ":contains(%s)");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = new Document("gwhgroup");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Document.createShell("zJF'`X");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":ah wtextEndTagOpen", ":ah wtextEndTagOpen");
      // Undeclared exception!
      try { 
        document0.attr((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Element element0 = new Element("Jc)b");
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":contains(%s)", ":contains(%s)");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Jc)b", "");
      Pattern pattern0 = Pattern.compile("async", 2147483645);
      document0.getElementsByAttributeValueMatching("", pattern0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(">qQ?'T\"3Y>F", "6{x|NA9}yxyyGfK8v5");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Rah wtextEndTagOpen", "Rah wtextEndTagOpen");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("YaJF{~X", "YaJF{~X");
      Element element0 = document0.appendElement("br");
      element0.text("br");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("W[na,x", "W[na,x");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("W[na,x");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(mockPrintWriter0, 8225, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("}|tJ=r,f0]$Pzh2", "}|tJ=r,f0]$Pzh2");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, (-5915), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hgroup", "hgroup");
      document0.appendElement("br");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = new Document("head");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ".");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 60, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode(">");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("textarea");
      FormElement formElement0 = new FormElement(tag0, ">", attributes0);
      formElement0.val("yN,Ui!v@M(;");
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Document.createShell("@y}e,%[");
      Element element0 = document0.createElement("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("@y}e,%[", "@y}e,%[");
      document0.addClass("@y}e,%[");
      document0.addClass("@y}e,%[");
      document0.getElementsByClass("@y}e,%[");
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Rah wte0xtEndTagOpen", "Rah wte0xtEndTagOpen");
      document0.addClass("Rah wte0xtEndTagOpen");
      document0.addClass(":contains(tet) que@y must not be emptt");
      document0.hasClass(" > ");
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("shB&P\"dCKB<m3nl5", " > ");
      document0.addClass(" > ");
      document0.addClass(" > ");
      document0.hasClass("Rah wtextEndTagOpen");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Rah wtextEndTagOpen", "Rah wtextEndTagOpen");
      document0.addClass("Rah wtextEndTagOpen");
      document0.addClass(":contains(tet) que@y must not be emptt");
      document0.hasClass("java.lang.string@0000000015 :contains(tet) que@y must not br emptt");
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      Element element0 = document0.addClass(",8JF{~XA");
      element0.hasClass(":contains(text) query must not be emptt");
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":ah wtextEndTagOpen", ":ah wtextEndTagOpen");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("W[na,x", "W[na,x");
      Element element0 = document0.appendElement("EO");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document0;
      element0.addChildren(nodeArray0);
      document0.getElementsMatchingOwnText("EO");
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      document0.appendElement("br");
      document0.appendElement("br");
      document0.getElementsMatchingOwnText("EO");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = new Document(",8JF\"{~XA");
      CDataNode cDataNode0 = new CDataNode(",8JF\"{~XA");
      document0.prependChild(cDataNode0);
      document0.getElementsMatchingOwnText("q");
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parse("Rah wte0xtEndTagOpen", "Rah wte0xtEndTagOpen");
      document0.title("");
      document0.getElementsMatchingText("=gYxdthZ+`mc8BzB1");
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" />", "3nyi5c\"W+om");
      Comment comment0 = new Comment("default", "3nyi5c\"W+om");
      document0.prependChild(comment0);
      document0.getElementsMatchingOwnText("default");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":contains(%s)", ":contains(%s)");
      document0.appendText("nX");
      document0.getElementsMatchingText(":contains(%s)");
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" > ", " > ");
      document0.appendText(" > ");
      document0.getElementsMatchingText("#");
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      document0.prepend("*hpC\"n6");
      document0.getElementsMatchingText("ul");
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":contains(%s)", ":contains(%s)");
      document0.appendElement("nX");
      document0.select(":contains(%s)");
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parse(",8JF{~XA", "tag name must not be empty.");
      document0.appendElement("head");
      document0.getElementsContainingText("tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parse("hgroump", "hgroump");
      document0.appendElement("br");
      document0.getElementsContainingText("hgroump");
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parse(":ah wtxtEndTIagOpen", ":ah wtxtEndTIagOpen");
      Element element0 = document0.appendElement("EO");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      Element element0 = document0.appendElement("br");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      Element element0 = document0.prependChild(document0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("W[na,x", "W[na,x");
      document0.appendChild(document0);
      Elements elements0 = document0.nextElementSiblings();
      assertEquals("W[na,x", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      document0.prependChild(document0);
      Element element0 = document0.previousElementSibling();
      assertEquals(",8JF{~XA", document0.baseUri());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parse(",8JF\"{~XA", ",8JF\"{~XA");
      Element element0 = document0.prependChild(document0);
      Element element1 = element0.nextElementSibling();
      assertEquals(",8JF\"{~XA", element1.baseUri());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("w1WZC#+(EPotr<u\"", "w1WZC#+(EPotr<u\"");
      document0.nextElementSibling();
      assertEquals("w1WZC#+(EPotr<u\"", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("YaJF{X", "YaJF{X");
      document0.siblingElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("YaJF{X", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      Element element0 = document0.appendElement(":contains(%s)");
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
      assertEquals(":contains(%s)", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parse(":ah wtxtEndTIagOpen", ":ah wtxtEndTIagOpen");
      document0.appendChild(document0);
      String string0 = document0.cssSelector();
      assertEquals("#root", string0);
      assertEquals(":ah wtxtEndTIagOpen", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parse("] b>R|V`Q", "] b>R|V`Q");
      document0.toggleClass("] b>R|V`Q");
      document0.cssSelector();
      assertEquals("] b>R|V`Q", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = new Document("Jc)b");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Jkm4", "Jkm4");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren((-30), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parse("Jc)b", "Jc)b");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(1, nodeArray0);
      assertEquals("Jc)b", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      LinkedHashSet<CDataNode> linkedHashSet0 = new LinkedHashSet<CDataNode>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      assertEquals(",8JF{~XA", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Jkm4", "Jkm4");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1204), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hgroup", "hgroup");
      LinkedList<DataNode> linkedList0 = new LinkedList<DataNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren(8222, (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Document.createShell("P;zQA<7\" vx*m~8SP");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(1, document0.childNodeSize());
      assertTrue(list0.isEmpty());
      assertEquals("P;zQA<7\" vx*m~8SP", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      document0.prepend("br");
      document0.textNodes();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Rah wtextEndTagOpen", "Rah wtextEndTagOpen");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
      assertEquals("Rah wtextEndTagOpen", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = new Document(",8JF\"{~XA");
      document0.html(",8JF\"{~XA");
      Element element0 = document0.prependChild(document0);
      element0.nextElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hgroup", "hgroup");
      Elements elements0 = document0.getElementsByIndexGreaterThan(2125);
      assertEquals("hgroup", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("_1@vy%N6g", "-wN#~f!SYNN_VpEp[");
      // Undeclared exception!
      try { 
        document0.selectFirst(";2UBvtE#i9vC.h&4F");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ';2UBvtE#i9vC.h&4F': unexpected token at ';2UBvtE#i9vC.h&4F'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@y}e,%[", "@y}e,%[");
      // Undeclared exception!
      try { 
        document0.is("@y}e,%[");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '@y}e,%[': unexpected token at '@y}e,%['
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Document.createShell("}(Y|d.*)");
      document0.getAllElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("}(Y|d.*)", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("JkNxm4", "JkNxm4");
      // Undeclared exception!
      try { 
        document0.before("JkNxm4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":ah wtextEndTagOpen", ":ah wtextEndTagOpen");
      document0.getElementsByAttribute(":ah wtextEndTagOpen");
      assertEquals(":ah wtextEndTagOpen", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Document.createShell("JU");
      document0.getElementsByAttributeValueNot("JU", "JU");
      assertEquals(1, document0.childNodeSize());
      assertEquals("JU", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      Element element0 = document0.shallowClone();
      assertEquals(",8JF{~XA", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("be", "G8}\"E~.l2*VFbmEy;6");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.text("");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@y}e,%[", "@y}e,%[");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("java.lang.string@0000000085 :contains(tet) que@y must not be emptt", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Rah wtextEndTagOpen", "Rah wtextEndTagOpen");
      Elements elements0 = document0.getElementsByClass("Rah wtextEndTagOpen");
      assertEquals("Rah wtextEndTagOpen", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = new Document("JW:b");
      document0.getElementsByAttributeValueEnding("JW:b", "JW:b");
      assertEquals("JW:b", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Document.createShell("P;zQA<7\" vx*m~8SP");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      document0.is((Evaluator) evaluator_IsRoot0);
      assertEquals("P;zQA<7\" vx*m~8SP", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Elements elements0 = document0.getElementsByIndexEquals(374);
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Element element0 = new Element(":contains(text) query must not be emptt");
      Elements elements0 = element0.getElementsByAttributeStarting("bhA@uH}");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Element element0 = new Element("Jc)b");
      Elements elements0 = element0.getElementsByIndexLessThan((-522));
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("~C7C7~j4UlmYW~y?", ">");
      // Undeclared exception!
      try { 
        document0.after("pE#T9LX4h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Document.createShell("P;zQA<7\" vx*m~8SP");
      // Undeclared exception!
      try { 
        document0.select("P;zQA<7\" vx*m~8SP");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'P;zQA<7\" vx*m~8SP': unexpected token at ';zQA<7\" vx*m~8SP'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("JkNxm4", "JkNxm4");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "=\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":contains(%s)", ":contains(%s)");
      document0.getElementsByAttributeValue(":contains(%s)", ":contains(%s)");
      assertEquals(1, document0.childNodeSize());
      assertEquals(":contains(%s)", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("1m|\"Ej.hd+|\"WhH", "1m|\"Ej.hd+|\"WhH");
      document0.wholeText();
      assertEquals(1, document0.childNodeSize());
      assertEquals("1m|\"Ej.hd+|\"WhH", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parse("'SXzDV2@_aK", "'SXzDV2@_aK");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("YaJF{~X", "YaJF{~X");
      document0.addClass("YaJF{~X");
      document0.hasClass("YaJF{~X");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("EO", "W[na,x");
      Elements elements0 = document0.getElementsContainingOwnText("class");
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
      assertEquals("W[na,x", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Element element0 = new Element("Jc)b");
      Map<String, String> map0 = element0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      // Undeclared exception!
      try { 
        document0.child(4547);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4547, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = new Document(",8JF{~XA");
      document0.previousElementSiblings();
      assertEquals(",8JF{~XA", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("1m|\"Ej.hd+|\"WhH", "1m|\"Ej.hd+|\"WhH");
      Elements elements0 = document0.getElementsMatchingText("1m|\"Ej.hd+|\"WhH");
      assertEquals(3, elements0.size());
      assertEquals("1m|\"Ej.hd+|\"WhH", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = new Document("Jc)b");
      // Undeclared exception!
      try { 
        document0.wrap("Jc)b");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Document.createShell("P;zQA<7\" vx*m~8SP");
      Element element0 = document0.getElementById("P;zQA<7\" vx*m~8SP");
      assertEquals("P;zQA<7\" vx*m~8SP", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNull(element0);
  }
}
