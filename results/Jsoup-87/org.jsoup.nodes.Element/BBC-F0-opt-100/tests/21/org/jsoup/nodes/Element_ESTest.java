/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 21:04:22 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.ParseError", "org.jsoup.parser.ParseError");
      document0.addClass("@'$:a*#");
      document0.siblingIndex = 32;
      document0.addClass("@'$:a*#");
      document0.hasClass("org.jsoup.parser.ParseError");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parse("/o0x", "");
      Element element0 = new Element("/o0x");
      document0.setParentNode(element0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Element element0 = new Element(";(J.S,IW7,0)og>");
      element0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parse("W?g}hrPS8(#", "W?g}hrPS8(#");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(";(J.S,IW7,0)og>", "zBRh(#i4pU%M");
      document0.doSetBaseUri(";(J.S,IW7,0)og>");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parse("Comment", "p");
      Document document1 = document0.clone();
      document0.appendChild(document1);
      document1.wrap("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parse("Comment", "p");
      Element element0 = document0.head();
      element0.wrap("Comment");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("CX:.", "F0'[a2u')ttaeI");
      Element element0 = document0.body();
      element0.wrap("`bVAlN#rNa/]");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s", "s");
      Element element0 = document0.head();
      element0.val("s");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a5y^5*", "M");
      Document document1 = document0.clone();
      document1.appendChild(document0);
      document0.val("M");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Tag tag0 = Tag.valueOf("@CTjX)@");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      formElement0.val("`k(Gh#1|g");
      formElement0.val();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Tag tag0 = Tag.valueOf("@CTjX)@");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "X[C+m\"{&z\"!#v$}", (Attributes) null);
      pseudoTextElement0.setSiblingIndex((-1034));
      pseudoTextElement0.toggleClass("@CTjX)@");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = new Document(":matches(");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      element0.toggleClass(":matches(");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parse("W?g}hrPS8(#", "W?g}hrPS8(#");
      document0.appendChild(document0);
      document0.toggleClass("ZWqznuQvVm.,V='\"");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Tag tag0 = Tag.valueOf("@CTjX)@");
      CDataNode cDataNode0 = new CDataNode("X[C+m\"{&z\"!#v$}");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "X[C+m\"{&z\"!#v$}", attributes0);
      pseudoTextElement0.setSiblingIndex(1438);
      pseudoTextElement0.text("RSSsv[?P_dPM");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Tag tag0 = Tag.valueOf("@CTjX)@");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "X[C+m\"{&z\"!#v$}", (Attributes) null);
      pseudoTextElement0.setSiblingIndex((-1034));
      pseudoTextElement0.text("Y%Awr");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Tag tag0 = Tag.valueOf("W?g}hrPS8(#");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "W?g}hrPS8(#", (Attributes) null);
      Element element0 = pseudoTextElement0.prependElement("p");
      element0.text("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Document$OutputSettings$Syntax", "Z1jqzx+}L$3<>Ud[");
      Element element0 = document0.head();
      element0.text();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parse("Comment", "p");
      Document document1 = document0.clone();
      document0.appendChild(document1);
      document1.tagName("p");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("article", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("article");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "article", attributes0);
      element0.tagName("checkbox");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("STOP", "STOP");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element$NodeList");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "br", attributes0);
      Element element0 = pseudoTextElement0.prependElement("br");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("/>y/HoYyjK", "/>y/HoYyjK");
      Element element0 = document0.head();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("X[C+m\"{&z\"!#v$}", parseSettings0);
      Element element0 = new Element(tag0, "@CTjX)@");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.ParseError", "org.jsoup.parser.ParseError");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.selectFirst("TagOpen");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Tag tag0 = Tag.valueOf("taextare");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "taextare", (Attributes) null);
      pseudoTextElement0.selectFirst("taextare");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse(";(J.S,IW7,0)og>", "WU");
      document0.select("QL98");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Tag tag0 = Tag.valueOf("taetarea");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "taetarea", (Attributes) null);
      pseudoTextElement0.select("taetarea");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.ParseError", "org.jsoup.parser.ParseError");
      document0.siblingIndex = 32;
      document0.removeClass("br");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Document.createShell(";(J.S,IW7,0)og>");
      Element element0 = document0.head();
      element0.removeClass("");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a5y^5*", "M");
      document0.appendChild(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "body");
      Node[] nodeArray0 = new Node[1];
      document0.prependElement("BaseURI must not be null");
      nodeArray0[0] = (Node) document0;
      document0.insertChildren((-1), nodeArray0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = new Document("body");
      Document document1 = document0.normalise();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document1.insertChildren((-1), nodeArray0);
      document1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "br", (Attributes) null);
      Element.preserveWhitespace(pseudoTextElement0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a5y^5*", "M");
      document0.appendChild(document0);
      document0.prependText("");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Document.createShell("/Qt>>\"p");
      Element element0 = document0.head();
      element0.prependText("/Qt>>\"p");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parse("Comment", "]/");
      Document document1 = document0.clone();
      document0.appendChild(document1);
      document1.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\u00038[8H/t", "\u00038[8H/t");
      document0.setSiblingIndex((-3303));
      DocumentType documentType0 = new DocumentType("org.jsoup.parser.Token$Character", "org.jsoup.parser.Token$Character", "\u00038[8H/t", "org.jsoup.parser.Token$Character");
      document0.prependChild(documentType0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("/>y/HoYyjK", "/>y/HoYyjK");
      Element element0 = document0.head();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parse("Comment", "p");
      Document document1 = document0.clone();
      document0.appendChild(document1);
      document1.prepend("Comment");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("</", "head");
      Element element0 = document0.createElement("head");
      element0.prepend("br");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":matches(");
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "lRIdOD4}U", attributes0);
      formElement0.prepend("");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parse(",=}Skn1X:b&R*m`X}|", ",=}Skn1X:b&R*m`X}|");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Document.createShell("v+S@[H7b)WrX{[p\"dj ");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.ParseError", "org.jsoup.parser.ParseError");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parse(":J=i", ":J=i");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parse("taetarea", ">?9:aj.;c]2V*'u1");
      Element element0 = document0.createElement("java.lang.string@0000000103");
      document0.parentNode = (Node) element0;
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parse("AfterDoctypeSystemIdentifier", "8");
      document0.appendChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Tag tag0 = Tag.valueOf("taextare");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "taextare", (Attributes) null);
      pseudoTextElement0.append(".0sk^ysTy]");
      pseudoTextElement0.ownText();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Tag tag0 = Tag.valueOf("taextare");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "taextare", (Attributes) null);
      pseudoTextElement0.nodeName();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parse("a5y^5*", "M");
      document0.appendChild(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("V4\n7KT", "V4\n7KT");
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      document0.is((Evaluator) evaluator_AllElements0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Document.createShell("");
      Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
      document0.is((Evaluator) evaluator_IsLastOfType0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Element element0 = new Element("329qLK-kOXh6jOKuf");
      element0.is("329qLK-kOXh6jOKuf");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "body");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.tagName("body");
      document0.insertChildren((-1), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "KxL7%f(4,w5%`&#");
      Document document1 = Document.createShell("org.jsoup.nodes.Element$2");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document1.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("body", "body");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      Element element0 = document0.insertChildren((-1), nodeArray0);
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      element0.insertChildren((-1), (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "</", (Attributes) null);
      pseudoTextElement0.setSiblingIndex((-1034));
      List<DataNode> list0 = pseudoTextElement0.dataNodes();
      pseudoTextElement0.insertChildren(0, (Collection<? extends Node>) list0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "</", (Attributes) null);
      List<DataNode> list0 = pseudoTextElement0.dataNodes();
      pseudoTextElement0.insertChildren(0, (Collection<? extends Node>) list0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parse("a5y^5*", "M");
      Document document1 = document0.clone();
      document1.appendChild(document0);
      document0.html("!");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("`BIl1z", "`BIl1z");
      document0.siblingIndex = (-2875);
      document0.html("`BIl1z");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "html");
      Element element0 = document0.head();
      element0.html("textarea");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Tag tag0 = Tag.valueOf("taetarea");
      FormElement formElement0 = new FormElement(tag0, "taetarea", (Attributes) null);
      formElement0.html((MockPrintWriter) null);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("T\"8hUhhw8Qr(", "T\"8hUhhw8Qr(");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element$NodeList");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "br", attributes0);
      pseudoTextElement0.html();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a5y^5*", "M");
      Document document1 = (Document)document0.removeClass("time");
      document1.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Document.createShell("body");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Element element0 = new Element("</");
      Pattern pattern0 = Pattern.compile("", (-1317));
      element0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Document.createShell("v+S@[H7b)WrX{[p\"dj ");
      document0.getElementsMatchingOwnText("");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parse(";(J.S,IW7,0)og>", "!U");
      document0.getElementsContainingText((String) null);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("body", "body");
      document0.getElementsContainingOwnText("IKkAj<O*R(");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = new Document("%s");
      document0.getElementsByTag("%s");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Tag tag0 = Tag.valueOf("@CTjX)@");
      FormElement formElement0 = new FormElement(tag0, "</", (Attributes) null);
      formElement0.getElementsByTag("@CTjX)@");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Element element0 = new Element(",jqDnOjn@,2i.lI+@E");
      element0.getElementsByIndexLessThan(173);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":eq(", ":eq(");
      document0.getElementsByIndexGreaterThan(29);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Tag tag0 = Tag.valueOf("taextarea");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "taextarea", (Attributes) null);
      pseudoTextElement0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("zQ4zrg+Nv!F", "zQ4zrg+Nv!F");
      document0.getElementsByClass("zQ4zrg+Nv!F");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Element element0 = new Element(";(J.S,IW7,0)og>");
      element0.getElementsByAttributeValueStarting(";(J.S,IW7,0)og>", ";(J.S,IW7,0)og>");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parse("a5y^5*", "M");
      document0.getElementsByAttributeValueNot("6mO ", "      ");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("8Ww!ZB[(", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "8Ww!ZB[(", attributes0);
      Attribute attribute0 = Attribute.createFromEncoded("8Ww!ZB[(", "8Ww!ZB[(");
      attributes0.put(attribute0);
      formElement0.getElementsByAttributeValueMatching("8Ww!ZB[(", ".");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Element element0 = new Element("U`?~z");
      element0.attr("U`?~z", "U`?~z");
      element0.getElementsByAttributeValueEnding("U`?~z", "U`?~z");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      Element element0 = document0.attr(" > ", true);
      element0.getElementsByAttributeStarting(" > ");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Element element0 = new Element(";(J.S,IW7,0)og>");
      element0.getElementsByAttribute(";(J.S,IW7,0)og>");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Tag tag0 = Tag.valueOf("<ts*Tv`3><[ouq5wB");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("<ts*Tv`3><[ouq5wB", "<ts*Tv`3><[ouq5wB", attributes0);
      attributes0.put(attribute0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "<ts*Tv`3><[ouq5wB", attributes0);
      pseudoTextElement0.getElementsByAttribute("<ts*Tv`3><[ouq5wB");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parse("a5y^5*", "M");
      document0.appendChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Tag tag0 = Tag.valueOf("taextarea");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "</", (Attributes) null);
      pseudoTextElement0.setSiblingIndex((-1034));
      pseudoTextElement0.empty();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s", "s");
      Element element0 = document0.head();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parse("\"?g}hrPS8(#", "\"?g}hrPS8(#");
      document0.appendChild(document0);
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("body", "body");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren((-1), nodeArray0);
      document0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parse("Comment", "p");
      Element element0 = document0.head();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parse(":matches(", ":matches(");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = new Document("%s");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "</", (Attributes) null);
      pseudoTextElement0.setSiblingIndex((-1034));
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      pseudoTextElement0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("body", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "f", attributes0);
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      pseudoTextElement0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parse("Comment", "p");
      Element element0 = document0.appendChild(document0);
      Set<String> set0 = element0.classNames();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Document.createShell("%s");
      Element element0 = document0.toggleClass("%s");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sam8", "--?j^%_8v");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Element element0 = new Element(";(J.S,IW7,0)og>");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Tag tag0 = Tag.valueOf(";et+r,");
      CDataNode cDataNode0 = new CDataNode(";et+r,");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "br", attributes0);
      pseudoTextElement0.prependElement("br");
      pseudoTextElement0.child(0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "KxL7%f(4,w5%`&#");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" MO", " MO");
      Element element0 = document0.head();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("@'$:a*#", "@'$:a*#");
      document0.setParentNode(document0);
      TextNode textNode0 = new TextNode("@'$:a*#", (String) null);
      document0.before((Node) textNode0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",jqDnOjn@,2i.lI+@E", ",jqDnOjn@,2i.lI+@E");
      Element element0 = new Element(",jqDnOjn@,2i.lI+@E");
      document0.setParentNode(element0);
      document0.before("#root");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Document.createShell("@CTjX)@");
      Element element0 = document0.createElement("a5y*");
      document0.appendChild(element0);
      element0.before("G5<t_y[z");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "br", (Attributes) null);
      pseudoTextElement0.baseUri();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Document.createShell("v+S@[H7b)WrX{[p\"dj ");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Document.createShell("%s");
      document0.toggleClass("%s");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = new Document(":matches(");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      element0.attr(":matches(", false);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = new Document(":matches(");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      element0.attr("#root", (String) null);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":eq(", ":eq(");
      Element element0 = document0.body();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Tag tag0 = Tag.valueOf("@CTjX)@");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      Element element0 = new Element(tag0, "#");
      element0.appendTo(formElement0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";(J.S,IW7,0)og>", ";(J.S,IW7,0)og>");
      document0.appendChild(document0);
      document0.appendText("E)T`oqmpkN'G/");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "</", (Attributes) null);
      pseudoTextElement0.setSiblingIndex((-1034));
      pseudoTextElement0.appendText("textarea");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("java.lang.string@0000000039");
      Document document0 = parser0.parseInput((Reader) stringReader0, "java.lang.string@0000000039");
      Element element0 = document0.head();
      element0.appendText("java.lang.string@0000000039");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      Element element0 = document0.createElement("br");
      element0.appendElement("br");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("samp", "--?j^%_8v");
      document0.appendElement("Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("plaintext", "plaintext");
      document0.appendElement("plaintext");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("body", "body");
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("body", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "STOP", attributes0);
      pseudoTextElement0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = new Document(":matches(");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      element0.append(":matches(");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Tag tag0 = Tag.valueOf("@CTjX)@");
      FormElement formElement0 = new FormElement(tag0, "", (Attributes) null);
      formElement0.append("");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = new Document("b#or\"Gv22&Hr\"5KD");
      document0.normalise();
      Element element0 = document0.body();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = new Document(":matches(");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      Document document2 = element0.ownerDocument();
      document2.parentNode = (Node) document1;
      document0.after((Node) element0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Element element0 = new Element("K@wW");
      Document document0 = Document.createShell("K@wW");
      document0.appendChild(element0);
      element0.after("K@wW");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Document$OutputSettings$Syntax", "Z1jqzx+}L$3<>Ud[");
      Element element0 = document0.head();
      element0.after("cQ|-j-$e>H)Bu");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Tag tag0 = Tag.valueOf("taetarea");
      CDataNode cDataNode0 = new CDataNode("taetarea");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "br", attributes0);
      Element element0 = pseudoTextElement0.prependElement("br");
      element0.prepend("or!.jsoup.parser~parseerror");
      element0.after("0dt HM@O5+1P{");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.parser.ParseError", "org.jsoup.parser.ParseError");
      document0.setSiblingIndex((-2375));
      document0.addClass("org.jsoup.parser.ParseError");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Tag tag0 = Tag.valueOf("h6");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "[\"?)", attributes0);
      element0.addClass("h6");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parse("Comment", "p");
      document0.appendChild(document0);
      document0.addClass("3wH9#yey|/");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "body");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      Document document1 = (Document)document0.insertChildren((-1), nodeArray0);
      // Undeclared exception!
      document1.wrap("body");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = new Document(":matches(");
      Document document1 = document0.ownerDocument();
      document1.parentNode = (Node) document0;
      // Undeclared exception!
      document0.val(":matches(");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Tag tag0 = Tag.valueOf("texarea");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "3wH9#yey|/", (Attributes) null);
      // Undeclared exception!
      try { 
        pseudoTextElement0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.nodes.Element$2", attributes0);
      String[] stringArray0 = new String[5];
      attributes0.keys = stringArray0;
      // Undeclared exception!
      try { 
        pseudoTextElement0.toggleClass("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = new Document("InSelect");
      // Undeclared exception!
      try { 
        document0.text("Bq{gs!!lNK,w>uebXTM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.ParseError", "org.jsoup.parser.ParseError");
      Comment comment0 = new Comment("`'$:a*#", "java.lang.string@0000000b89");
      document0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parse("W?g}hrPS8(#", "W?g}hrPS8(#");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.tagName("Z\"O");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = new Document("%s");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7\"{ryk<ncc,n^qrnx", "B");
      Element element0 = new Element("7\"{ryk<ncc,n^qrnx");
      document0.setParentNode(element0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("body", "body");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("body", "%s", false);
      Element element0 = document0.doClone(xmlDeclaration0);
      // Undeclared exception!
      try { 
        element0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|/s56.gEQ:92V.huH*", "org.jsoup.nodes.Element$1");
      // Undeclared exception!
      try { 
        document0.selectFirst("@CTjX)@");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '@CTjX)@': unexpected token at '@CTjX)@'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("4rg.jsoup.parser.ParseError", "4rg.jsoup.parser.ParseError");
      // Undeclared exception!
      try { 
        document0.selectFirst("[%U8d&");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'U'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "html");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("H[we_N%8P>K!", "H[we_N%8P>K!");
      // Undeclared exception!
      try { 
        document0.select("H[we_N%8P>K!");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'P'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Tag tag0 = Tag.valueOf(";(J.S,IW7,0)og>");
      FormElement formElement0 = new FormElement(tag0, "omz~_VZlji*+d", (Attributes) null);
      // Undeclared exception!
      try { 
        formElement0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Tag tag0 = Tag.valueOf("@CTjX)@");
      FormElement formElement0 = new FormElement(tag0, "</", (Attributes) null);
      // Undeclared exception!
      try { 
        formElement0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parse("W?g}hrPS8(#", "W?g}hrPS8(#");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("W?g}hrPS8(#", "W?g}hrPS8(#", true);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = new Document("fX!sA.K");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration(",@", true);
      Element element0 = document0.doClone(xmlDeclaration0);
      // Undeclared exception!
      try { 
        element0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = new Document("mn;2$1a&.g'{wf1");
      CDataNode cDataNode0 = new CDataNode("s$&");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        Element.preserveWhitespace(document0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("", "t\"8huhhw8qr(");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = new Document("Lj1<VMbA");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.prependElement(":MA(mwZ3)[e&N^");
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ":", attributes0);
      CDataNode cDataNode0 = new CDataNode((String) null);
      Node node0 = cDataNode0.doClone(pseudoTextElement0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.prependChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parse("|,hh8Q\"r", "|,hh8Q\"r");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Tag tag0 = Tag.valueOf("taetarea");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "taetarea", (Attributes) null);
      Element element0 = pseudoTextElement0.prependChild(pseudoTextElement0);
      // Undeclared exception!
      element0.prepend("sr}Jq\"P~.5X)gi5L");
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a5y^5*", "#Wnx,}KzZm\"5");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parse("a5y^\"*", "a5y^\"*");
      DataNode dataNode0 = DataNode.createFromEncoded("Pattern syntax error: ", "Pattern syntax error: ");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.prepend("+n23M");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("@'$:a*#", ":matche(q");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(700);
      // Undeclared exception!
      document0.outerHtmlTail(bufferedWriter0, 700, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NdeList", "org.jsoup.nodes.Element$NdeList");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "org.jsoup.nodes.Element$NdeList", 9, 9);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 9, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r/Vw", "r/Vw");
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 2913, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Tag tag0 = Tag.valueOf("taetarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "IG5gn$D", attributes0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        formElement0.outerHtmlTail((Appendable) null, 75, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("T\"8hUhhw8Qr(", "T\"8hUhhw8Qr(");
      StringBuffer stringBuffer0 = new StringBuffer(203);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringBuffer0, (-1630766691), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Document.createShell("br");
      MockPrintStream mockPrintStream0 = new MockPrintStream("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(8225);
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintStream0, 8225, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$NodeList", "org.jsoup.parser.parseerror");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "org.jsoup.parser.parseerror");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 6, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parse("taextarea", "taextarea");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(stringBuffer0, (-582), (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parse("taetarea", ":o*iPW!{Uj/M0Af&Ie");
      TextNode textNode0 = new TextNode("org.jsoup.select.Evaluator$Id");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.nextElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = new Document("%s");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*')8ohQe*]R->=", "Pattern syntax error: ");
      document0.appendTo(document0);
      Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
      // Undeclared exception!
      document0.is((Evaluator) evaluator_IsLastOfType0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*')8ohQe*]R->=", "Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.is("*')8ohQe*]R->=");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '*')8ohQe*]R->=': unexpected token at '')8ohQe*]R->='
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("body", "body");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren((-1), nodeArray0);
      // Undeclared exception!
      document0.is("value");
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parse("Com%ment", "Com%ment");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("@h2fei*h+KJ]fJ+", "@h2fei*h+KJ]fJ+");
      document0.setParentNode(document0);
      Elements elements0 = document0.getElementsContainingOwnText((String) null);
      // Undeclared exception!
      try { 
        document0.insertChildren(0, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parse("W?g}hrPS8(#", "W?g}hrPS8(#");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.html("html");
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("*CTjX)@", "*CTjX)@");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parse("Nt", "Nt");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*')8ohQe*]R->=", "Pattern syntax error: ");
      document0.appendTo(document0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      document0.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":matches(", ":matches(");
      // Undeclared exception!
      try { 
        document0.html((BufferedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parse(";(J.S,IW7,0)og>", "!U");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Document.createShell(":matche(q");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      document0.prependChild(document0);
      // Undeclared exception!
      try { 
        document0.hasText();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Tag tag0 = Tag.valueOf("taetarea");
      FormElement formElement0 = new FormElement(tag0, "taetarea", (Attributes) null);
      Element element0 = formElement0.append("taetarea");
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        formElement0.hasText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "body");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("taextarea", "taextarea");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("zQ4zrg+Nv!F", "zQ4zrg+Nv!F");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a5y^5*", "M");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("P3NMc*uZ{xN-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: P3NMc*uZ{xN-
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parse("a5y^5*", "a5y^5*");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Element element0 = new Element("1# *GA_");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Document.createShell(";(J.S,IW7,0)og>");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("@CTjX)@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: @CTjX)@
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("O% kUV$'jlw@\"af^y\"", "O% kUV$'jlw@\"af^y\"");
      TextNode textNode0 = TextNode.createFromEncoded("O% kUV$'jlw@\"af^y\"");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("O% kUV$'jlw@\"af^y\"");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`Bltz7", "`Bltz7");
      document0.siblingIndex = (-1237948396);
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("`Bltz7");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element$1");
      // Undeclared exception!
      try { 
        element0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Tag tag0 = Tag.valueOf("taetarea");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "java.lang.string@0000000089 @'$:a*#", attributes0);
      Element element0 = pseudoTextElement0.prependElement("taetarea");
      element0.setSiblingIndex((-46449111));
      // Undeclared exception!
      try { 
        element0.getElementsByIndexLessThan(62);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.ParseError", "org.jsoup.parser.ParseError");
      TextNode textNode0 = TextNode.createFromEncoded("org.jsoup.parser.ParseError");
      document0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals((-1568));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = new Document(">~3.t4K6p'=s1i");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("", ".3Mm8<I 2_(mT1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: .3Mm8<I 2_(mT1
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a5y^5*", "M");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("~j+3<CMC=F:r94-\"!=w", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("M", "jR nx3[v)[?B`FM");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "K,7_yHe6xHzCv");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Ph~hBd8qgnxerxb0t");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("JtB:3H`4W}I", "JtB:3H`4W}I");
      Attributes attributes2 = attributes1.put("Ph~hBd8qgnxerxb0t", false);
      attributes2.keys = null;
      FormElement formElement0 = new FormElement(tag0, "Ph~hBd8qgnxerxb0t", attributes2);
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeValue("2o^]S(B ~<2t3", "JtB:3H`4W}I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.StructuralEvaluator$ImmediateParent", "org.jsoup.select.StructuralEvaluator$ImmediateParent");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue((String) null, "org.jsoup.select.StructuralEvaluator$ImmediateParent");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Document.createShell("@CTjX)@");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*')8ohQe*]R->=", "Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("STOP", "");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("pubSysKey", "pubSysKey");
      Document document1 = Parser.parseBodyFragment("[Kkx'bR2P(MOeo\"7+w", "7@F<$Z6-[tIW ");
      Document document2 = Document.createShell("org.jsoup.nodes.Element$1");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document2;
      nodeArray0[1] = (Node) document2;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document2;
      nodeArray0[4] = (Node) document1;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document2;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document2;
      document2.addChildren(nodeArray0);
      // Undeclared exception!
      document2.data();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element$NodeList");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.nodes.Element$NodeList", attributes0);
      Element element0 = pseudoTextElement0.prependElement("org.jsoup.nodes.Element$NodeList");
      Comment comment0 = new Comment("org.jsoup.nodes.Element$NodeList");
      Element element1 = element0.appendChild(comment0);
      // Undeclared exception!
      try { 
        element1.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.nodes.element$nodelist': unexpected token at '$nodelist'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Tag tag0 = Tag.valueOf("ySucewQ~|vK");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "ySucewQ~|vK", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Tag tag0 = Tag.valueOf("taextarea");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "taextarea", (Attributes) null);
      // Undeclared exception!
      try { 
        pseudoTextElement0.child(60);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 60, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("taet%0area", ";P9&F+4~5e31_");
      Element element0 = document0.appendChild(document0);
      document0.setParentNode(element0);
      // Undeclared exception!
      try { 
        document0.before((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "body");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren((-1), nodeArray0);
      // Undeclared exception!
      document0.before("body");
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("taetarea", "taetarea");
      CDataNode cDataNode0 = new CDataNode("");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.before("@1[C4xUOX+D59}Y%");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Document.createShell("+)537?j");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parse("W?g}hrPS@(#", "W?g}hrPS@(#");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.attr("k,%t/H>t>yXr3yK", "k,%t/H>t>yXr3yK");
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Tag tag0 = Tag.valueOf("@CTjX)@");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "@CTjX)@", attributes0);
      // Undeclared exception!
      try { 
        formElement0.attr((String) null, "@CTjX)@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Document.createShell("head");
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("taetarea", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "taetarea", attributes0);
      document0.setParentNode(pseudoTextElement0);
      // Undeclared exception!
      try { 
        document0.appendTo(pseudoTextElement0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("BHav0", "BHav0");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parse("W?g}hrPS8(#", "W?g}hrPS8(#");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.appendElement("M|[L2M.c(");
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a5y^5*", "M");
      // Undeclared exception!
      try { 
        document0.appendElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parse("9HyT67&a9T%g<", ",WhoEI");
      Element element0 = document0.createElement("^");
      CDataNode cDataNode0 = new CDataNode("BetweenDoctypePublicAndSystemIdentifiers");
      Node node0 = cDataNode0.doClone(element0);
      // Undeclared exception!
      try { 
        document0.appendChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Document.createShell("%s");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = new Document(":matches(");
      Document document1 = document0.ownerDocument();
      document1.parentNode = (Node) document0;
      // Undeclared exception!
      document1.append("head");
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Tag tag0 = Tag.valueOf("d2> ");
      CDataNode cDataNode0 = new CDataNode("`\"z'");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "InHead", attributes0);
      // Undeclared exception!
      try { 
        formElement0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "body");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      Element element0 = document0.insertChildren((-1), nodeArray0);
      // Undeclared exception!
      try { 
        element0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parse("@'$:a*#", "@'$:a*#");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.after("eKrfM\"=H6j");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Tag tag0 = Tag.valueOf("@CTjX)@");
      Element element0 = new Element(tag0, "s+", (Attributes) null);
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("@CTjX)@", true);
      Element element1 = element0.doClone(xmlDeclaration0);
      // Undeclared exception!
      try { 
        element1.after("s+");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Ph~hBd8qgnxerxb0t");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("Ph~hBd8qgnxerxb0t", false);
      attributes1.keys = null;
      FormElement formElement0 = new FormElement(tag0, "Ph~hBd8qgnxerxb0t", attributes1);
      // Undeclared exception!
      try { 
        formElement0.addClass(",|fJ&/bU<ZS@Pu6Uw");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Element element0 = new Element("6Bhn*.pM~mm<; [");
      // Undeclared exception!
      try { 
        element0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "@", (Attributes) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parse("Comment", "p");
      document0.addClass("p");
      Set<String> set0 = document0.classNames();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.prepend("\"Kyt!j)0L");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Tag tag0 = Tag.valueOf("`{MST]W6ty");
      Element element0 = new Element(tag0, "!i", (Attributes) null);
      element0.prepend("XQ3JF, E");
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Tag tag0 = Tag.valueOf("taextarea");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "taextarea", (Attributes) null);
      pseudoTextElement0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parse("p", "@CTjX)@");
      document0.appendChild(document0);
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("taextare", "2HX7&K<O");
      Element element0 = document0.head();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = new Document("body");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      Element element0 = document0.insertChildren((-1), nodeArray0);
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sam8", "--?j^%_8v");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*')8ohQe*]R->=", "Pattern syntax error: ");
      Pattern pattern0 = Pattern.compile("Pattern syntax error: ");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Tag tag0 = Tag.valueOf("@CTjX)@");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "X[C+m\"{&z\"!#v$}", (Attributes) null);
      pseudoTextElement0.ownText();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Tag tag0 = Tag.valueOf("W?g}hrPS8(#");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "W?g}hrPS8(#", (Attributes) null);
      pseudoTextElement0.isBlock();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Document.createShell("");
      Pattern pattern0 = Pattern.compile("html");
      document0.getElementsByAttributeValueMatching("U9'bwrt>y)O|f~m", pattern0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Element element0 = new Element(";(J.S,IW7,0)og>");
      // Undeclared exception!
      try { 
        element0.select(";(J.S,IW7,0)og>");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ';(J.S,IW7,0)og>': unexpected token at ';(J.S,IW7,0)og>'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("p", "Comment");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.toString();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = new Document("Lj1<VMbA");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, false);
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(mockPrintWriter0, 0, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("taetarea");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      Element element0 = new Element("br");
      // Undeclared exception!
      try { 
        element0.outerHtmlHead(mockFileWriter0, (-4244), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "dh|Cd:][#", attributes0);
      pseudoTextElement0.prependElement("br");
      StringBuffer stringBuffer0 = new StringBuffer();
      pseudoTextElement0.outerHtml((Appendable) stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("taetarea");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Element element0 = new Element("br");
      element0.outerHtmlHead(mockFileWriter0, (-4269), document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.title("");
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Document.createShell("");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document0.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Tag tag0 = Tag.valueOf("taetarea");
      FormElement formElement0 = new FormElement(tag0, "taetarea", (Attributes) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      try { 
        formElement0.outerHtmlHead(pipedWriter0, 3283, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "br", (Attributes) null);
      pseudoTextElement0.val("");
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      FormElement formElement0 = new FormElement(tag0, "ixxu#u", (Attributes) null);
      formElement0.val();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.ParseError", "org.jsoup.parser.ParseError");
      Element element0 = document0.addClass("@'$:a*#");
      element0.addClass(" > ");
      document0.hasClass(" $J");
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ScriptDataDoubleEscapeEnd", "ScriptDataDoubleEscapeEnd");
      Element element0 = document0.addClass("ScriptDataDoubleEscapeEnd");
      document0.addClass("_");
      element0.hasClass("_");
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ScriptDataDoubleEscapeEnd", "ScriptDataDoubleEscapeEnd");
      Element element0 = document0.addClass("ScriptDataDoubleEscapeEnd");
      element0.hasClass("_");
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = new Document("body");
      document0.addClass("k?0m ");
      document0.hasClass("<!--org.jsoup.select.StructuralEvaluator$ImmediateParent-->");
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parse(":J=i", ":J=i");
      document0.hasClass("textarea");
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Tag tag0 = Tag.valueOf(";et+r,");
      CDataNode cDataNode0 = new CDataNode(";et+r,");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "br", attributes0);
      pseudoTextElement0.prependChild(cDataNode0);
      pseudoTextElement0.data();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = new Document("body");
      Comment comment0 = new Comment("org.jsoup.select.StructuralEvaluator$ImmediateParent");
      Element element0 = document0.appendChild(comment0);
      element0.data();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = new Document("body");
      Comment comment0 = new Comment("org.jsoup.select.StructuralEvaluator$ImmediateParent");
      Element element0 = document0.appendChild(comment0);
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.title("");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parse("@'$:a*#", "@'$:a*#");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element$NodeList");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "br", attributes0);
      pseudoTextElement0.prependElement("br");
      pseudoTextElement0.prependElement("br");
      pseudoTextElement0.getElementsContainingOwnText((String) null);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Tag tag0 = Tag.valueOf("taetarea");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.parser.ParseErrorList", (Attributes) null);
      Element element0 = pseudoTextElement0.prependElement("CdataSection");
      Comment comment0 = new Comment("Q>!pX;@)}p[~T", " ");
      element0.before((Node) comment0);
      pseudoTextElement0.getElementsContainingOwnText((String) null);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataDoubleEscapeEnd");
      CDataNode cDataNode0 = new CDataNode("ScriptDataDoubleEscapeEnd");
      document0.appendChild(cDataNode0);
      document0.title("ScriptDataDoubleEscapeEnd");
      Pattern pattern0 = Pattern.compile("ScriptDataDoubleEscapeEnd", (-1791963868));
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataDoubleEscapeEnd");
      CDataNode cDataNode0 = new CDataNode("ScriptDataDoubleEscapeEnd");
      document0.appendChild(cDataNode0);
      Pattern pattern0 = Pattern.compile("ScriptDataDoubleEscapeEnd", (-1791963868));
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parse("a5y^5*", "M");
      Document document1 = document0.clone();
      document1.appendChild(document0);
      Pattern pattern0 = Pattern.compile("      ", (-364));
      document1.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Tag tag0 = Tag.valueOf("D<&{-R");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "br", attributes0);
      Element element0 = pseudoTextElement0.prependElement("br");
      Document document0 = Parser.parse("D<&{-R", "a)%Nr[vY#(YRSY.b0&");
      document0.appendChild(element0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = new Document("body");
      Comment comment0 = new Comment("org.jsoup.select.StructuralEvaluator$ImmediateParent");
      document0.appendChild(comment0);
      document0.getElementsMatchingText("B7vKRDF^s");
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("STOP", "STOP");
      document0.getElementById("org.jsoup.select.Collector$FirstFinder");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.ParseError", "org.jsoup.parser.ParseError");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.selectFirst("html");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.ParseError", "org.jsoup.parser.ParseError");
      Element element0 = document0.head();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = new Document("class");
      document0.appendChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("CX:.", "F0'[a2u')ttaeI");
      Element element0 = document0.prependElement("F0'[a2u')ttaeI");
      Elements elements0 = element0.nextElementSiblings();
      assertEquals("F0'[a2u')ttaeI", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = new Document(":matches(");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      element0.previousElementSibling();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = new Document("%s");
      document0.previousElementSibling();
      assertEquals("%s", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parse("@'$:a*#", "@'$:a*#");
      document0.setParentNode(document0);
      Elements elements0 = document0.previousElementSiblings();
      assertEquals("@'$:a*#", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parse("@'$:a*#", "@'$:a*#");
      document0.prependElement("@'$:a*#");
      document0.setParentNode(document0);
      document0.nextElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#root", "#root");
      document0.nextElementSibling();
      assertEquals("#root", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("body", "body");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren((-1), nodeArray0);
      document0.siblingElements();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.siblingElements();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("F0'[a2u')ttaeI", "z^Q4zrg+sNv!~F");
      Element element0 = document0.body();
      assertEquals(1, element0.siblingIndex());
      
      element0.before(":matches(");
      String string0 = element0.cssSelector();
      assertEquals("html > body:nth-child(4)", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Element element0 = new Element("</");
      element0.toggleClass("CjxvCAl=##h+jgz$iXW");
      String string0 = element0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a5y^5*", "M");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
      try { 
        document0.insertChildren(824, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren((-54), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = new Document("%s");
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      // Undeclared exception!
      try { 
        document0.insertChildren(2984, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = new Document("class");
      Elements elements0 = document0.getElementsByAttributeValueNot(".#;", ".#;");
      // Undeclared exception!
      try { 
        document0.insertChildren((-2), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByIndexEquals(3545);
      Element element0 = document0.insertChildren((-2), (Collection<? extends Node>) elements0);
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.ParseError", "org.jsoup.parser.ParseError");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("org.jsoup.parser.ParseError", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parse("taextarea", "taextarea");
      document0.append("taextarea");
      document0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*')8ohQe*]R->=", "Pattern syntax error: ");
      List<Node> list0 = Parser.parseFragment("*')8ohQe*]R->=", (Element) document0, "+|d:v }o1(%r )Wdq2");
      assertEquals(1, document0.childNodeSize());
      
      document0.childNodes = list0;
      Elements elements0 = document0.children();
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("body", "body");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-126));
      assertEquals("body", document0.baseUri());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Document.createShell("@'$:a*#");
      Element element0 = document0.selectFirst("body");
      assertEquals("@'$:a*#", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a5y^5*", "M");
      document0.is("M");
      assertEquals(1, document0.childNodeSize());
      assertEquals("M", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Element element0 = new Element(";(J.S,IW7,0)og>");
      Elements elements0 = element0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("F0'[a2u')ttaeI", "z^Q4zrg+sNv!~F");
      // Undeclared exception!
      try { 
        document0.before(":matches(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Tag tag0 = Tag.valueOf("@CTjX)@");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "X[C+m\"{&z\"!#v$}", (Attributes) null);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("{L", parseSettings0);
      CDataNode cDataNode0 = new CDataNode(".(3p4m:hEtVn");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "{L", attributes0);
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueNot("~_sU*P9yRE", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parse(",=}Skn1X:b&R*m`X}|", ",=}Skn1X:b&R*m`X}|");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.ParseError", "org.jsoup.parser.ParseError");
      Element element0 = document0.shallowClone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.ParseError", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parse("W?g}hrPS8(#", "W?g}hrPS8(#");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementById("W?g}hrPS8(#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        document0.after((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parse(":J=i", ":J=i");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("body", "body");
      document0.getElementsByAttributeValueContaining("body", "body");
      assertEquals("body", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Tag tag0 = Tag.valueOf("@CTjX)@");
      FormElement formElement0 = new FormElement(tag0, "", (Attributes) null);
      Elements elements0 = formElement0.getElementsByAttributeValueMatching("html", "org.jsoup.nodes.Element$1");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "</", (Attributes) null);
      Elements elements0 = pseudoTextElement0.getElementsContainingText("</");
      assertEquals(0, elements0.size());
      assertEquals("</", pseudoTextElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";(J.S,IW7,0)og>", "%s");
      // Undeclared exception!
      try { 
        document0.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Tag tag0 = Tag.valueOf("`{MST]W6ty");
      Element element0 = new Element(tag0, "!io", (Attributes) null);
      element0.getElementsByAttributeValueEnding("br", "!io");
      assertEquals("!io", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parse("@CTjX)@", "@CTjX)@");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parse("@'$:a*#", "@'$:a*#");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("org.jsoup.select.StructuralEvaluator$ImmediateParent", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("STOP", "");
      Element element0 = document0.attr("", "br");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("CX:.", "F0'[a2u')ttaeI");
      // Undeclared exception!
      try { 
        document0.wrap("`bVAlN#rNa/]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Tag tag0 = Tag.valueOf("`{MST]W6ty");
      Element element0 = new Element(tag0, "!io", (Attributes) null);
      element0.getElementsByAttributeStarting("`{MST]W6ty");
      assertEquals("!io", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",jqDnOjn@,2i.lI+@E", ",jqDnOjn@,2i.lI+@E");
      Elements elements0 = document0.getElementsByIndexLessThan(173);
      assertFalse(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
      assertEquals(",jqDnOjn@,2i.lI+@E", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Document$OutputSettings$Syntax", "Z1jqzx+}L$3<>Ud[");
      // Undeclared exception!
      try { 
        document0.after("cQ|-j-$e>H)Bu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parse("j&>b, e`|!aY0D", "p");
      Elements elements0 = document0.getElementsMatchingOwnText("p");
      assertEquals(0, elements0.size());
      assertEquals("p", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("F0'[a2u')ttaeI", "z^Q4zrg+sNv!~F");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("z^Q4zrg+sNv!~F", element0.baseUri());
      assertEquals("html > body", string0);
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "org.jsoup.select.Elements");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("body", "body");
      document0.getElementsByAttributeValue("body", "body");
      assertEquals("body", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Tag tag0 = Tag.valueOf("taetarea");
      FormElement formElement0 = new FormElement(tag0, "taetarea", (Attributes) null);
      Element element0 = formElement0.html("");
      assertEquals("taetarea", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parse("\"?g}hrPS8(#", "\"?g}hrPS8(#");
      String string0 = document0.wholeText();
      assertEquals("\"?g}hrPS8(#", document0.baseUri());
      assertEquals("\"?g}hrPS8(#", string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("@'$:a*#", "@'$:a*#");
      TextNode textNode0 = new TextNode("@'$:a*#", (String) null);
      // Undeclared exception!
      try { 
        document0.before((Node) textNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.parser.ParseError");
      Element element0 = document0.addClass("@'$:a*#");
      boolean boolean0 = element0.hasClass("org.jsoup.parser.ParseError");
      assertEquals("org.jsoup.parser.ParseError", element0.baseUri());
      assertFalse(boolean0);
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Document.createShell("9WI");
      document0.dataset();
      assertEquals("9WI", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Document.createShell("/Qt>>\"p");
      document0.prependText("/Qt>>\"p");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert position out of bounds.", "Insert position out of bounds.");
      // Undeclared exception!
      try { 
        document0.child((-4101));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parse("@'$:a*#", "@'$:a*#");
      document0.previousElementSiblings();
      assertEquals("@'$:a*#", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Parser.parse(";(J.S,IW7,0)og>", ";(J.S,IW7,0)og>");
      document0.getElementsMatchingText("");
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Tag tag0 = Tag.valueOf("taetarea");
      FormElement formElement0 = new FormElement(tag0, "taetarea", (Attributes) null);
      formElement0.nextElementSiblings();
      assertEquals("taetarea", formElement0.baseUri());
  }
}
