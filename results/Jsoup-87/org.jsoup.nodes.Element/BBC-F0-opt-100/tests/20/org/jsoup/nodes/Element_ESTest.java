/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 16:14:10 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("]M_kp,+{D%oquD", "]M_kp,+{D%oquD");
      document0.addClass(">P6;i,})R");
      document0.hasClass("]M_kp,+{D%oquD");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Document.createShell("]M_kp,+{D%oquD");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("\"Bp+C", "!>|b<Bhx{u]]Y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: !>|b<Bhx{u]]Y
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Document.createShell("charset");
      Document document1 = new Document("charset");
      document0.setParentNode(document1);
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      MockFileWriter mockFileWriter0 = new MockFileWriter(" ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.outerHtmlTail(mockFileWriter0, (-1433506051), document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empy.", "Tag name must not be empy.");
      MockFileWriter mockFileWriter0 = new MockFileWriter("<html>\n <head>\n  <meta charset=\"US-ASCII\">\n </head>\n <body>\n  Tag name must not be empy.\n </body>\n</html>");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(mockPrintWriter0, 1644, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$AttributeStarting");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(?hZ@UR>!~UY70-kwn@", "(?hZ@UR>!~UY70-kwn@");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Document.createShell("id");
      document0.doSetBaseUri("'");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Document.createShell("#.7/g/vl");
      Parser parser0 = Parser.xmlParser();
      document0.parser(parser0);
      document0.wrap("sortable");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("\n", "rtaIKle");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("sortable");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "sortable", attributes0);
      pseudoTextElement0.siblingIndex = (-3773);
      pseudoTextElement0.val(" > ");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Document.createShell("j2NAoU.");
      Element element0 = document0.body();
      element0.val("j2NAoU.");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(?hZ@UR>!~UY70-kwn@", "(?hZ@UR>!~UY70-kwn@");
      document0.val("(?hZ@UR>!~UY70-kwn@");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag ame ust not be empty.", "Tag ame ust not be empty.");
      document0.siblingIndex = (-636);
      document0.toggleClass("Tag ame ust not be empty.");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("irW5s3fg$~CX9", "irW5s3fg$~CX9");
      Element element0 = document0.body();
      element0.toggleClass("tPjZ<~FWp\"E%/d");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("K&|)r]h");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("K&|)r]h", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "irW5s3fg$~CX9", attributes0);
      pseudoTextElement0.toggleClass("abc0ttpg");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parse("(?hZ@UR>!~UY70-kwn@", "(?hZ@UR>!~UY70-kwn@");
      Element element0 = document0.body();
      element0.text("");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parse("(?hZ@UR>!~UY70-kwn@", "(?hZ@UR>!~UY70-kwn@");
      document0.text("");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Document.createShell("caption");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Document.createShell("'lass");
      document0.siblingIndex = (-4586);
      document0.tagName("'lass");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Document.createShell("class");
      Element element0 = document0.body();
      element0.tagName("class");
      element0.wrap("class");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Document.createShell("(?hZ@UR>!~UY70-kwn@");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("u", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("u");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "sortable", attributes0);
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parse("#B [Np;nuX?", "textarea");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(?hZ@UR>!~UY70-kwn@", "(?hZ@UR>!~UY70-kwn@");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "(?hZ@UR>!~UY70-kwn@");
      document0.selectFirst("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]M_kp,+{D%oquD", "]M_kp,+{D%oquD");
      document0.selectFirst("body");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Document.createShell("(?hZ@UR>!~UY70-kwn@");
      document0.select("value");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.prependElement("value");
      document0.select("value");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parse("Insert position out of bounds.", "Insert position out of bounds.");
      Element element0 = document0.body();
      element0.removeClass("s+");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.removeClass("");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(L(uNZiM$>6{#aby@", "(L(uNZiM$>6{#aby@");
      Document document1 = Document.createShell("rL<c|$xQ59OpAKOh1j");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document1;
      document1.insertChildren(1, nodeArray0);
      document1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(L(uNZiM$>6{#aby@", "(L(uNZiM$>6{#aby@");
      Document document1 = Document.createShell("rL<c|$xQ59OpAKOh1j");
      Element element0 = document1.prependChild(document0);
      element0.prependChild(document1);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("irW5s3fg$~CX9", "irW5s3fg$~CX9");
      document0.appendTo(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = new Document("|soO)?");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, ".", (Attributes) null);
      document0.setParentNode(formElement0);
      Element.preserveWhitespace(document0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      document0.setSiblingIndex((-1961));
      document0.prependText(";]tra");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      Element element0 = document0.head();
      element0.prependText("~Dkj~{(q");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parse("]M_kp,+{D%oquD", "Y*8fRN I)]88");
      document0.appendTo(document0);
      document0.prependText("]M_kp,+{D%oquD");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("template", "template");
      document0.prependElement("template");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("[%s~=%s]", "[%s~=%s]");
      Element element0 = document0.appendElement("org.jsoup.nodes.Element");
      element0.prepend("html");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      element1.prepend("ScriptDataLessthanSign");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("sortable");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "sortable", attributes0);
      pseudoTextElement0.prepend("");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Document.createShell("'lass");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      document0.appendTo(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("irW5s3fg$~CX9", "irW5s3fg$~CX9");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("etoD#`", "etoD#`");
      Element element0 = document0.appendElement("af");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("org.jsoup.select.StructuralEvaluator", " Fp");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]M_kp,+{D%oquD", "]M_kp,+{D%oquD");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(L(uNZiM$>6{#aby@", "(L(uNZiM$>6{#aby@");
      Document document1 = Document.createShell("rL<c|$xQ59OpAKOh1j");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document1;
      document1.insertChildren(1, nodeArray0);
      document1.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.parser.Token", "org.jsoup.parser.Token");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$AttributeStarting");
      Evaluator.ContainsText evaluator_ContainsText0 = new Evaluator.ContainsText((String) null);
      document0.is((Evaluator) evaluator_ContainsText0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("af", "af");
      Element element0 = document0.appendElement("af");
      element0.is("af");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Document.createShell("'lass");
      Element element0 = document0.body();
      Node[] nodeArray0 = new Node[0];
      element0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Document.createShell("QWl");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      linkedHashSet0.add(document0);
      document0.insertChildren(1, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Document.createShell("'lass");
      Element element0 = document0.body();
      Elements elements0 = document0.getElementsByIndexEquals(0);
      element0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("K&|)r]h");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("K&|)r]h", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "irW5s3fg$~CX9", attributes0);
      List<TextNode> list0 = pseudoTextElement0.textNodes();
      pseudoTextElement0.insertChildren(0, (Collection<? extends Node>) list0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Document.createShell("'lass");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      document0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.helper.Validate");
      document0.setSiblingIndex((-4657));
      document0.html("A$K'4BiC=TM");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = new Document("(?hZ@UR>!~UY70-kwn@");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      element0.html(".=P]87SWQ,I=r&ObZ");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Tag tag0 = Tag.valueOf("abc0ttpg");
      CDataNode cDataNode0 = new CDataNode("Cu|DAcJEUnb*@mdI^K");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "abc0ttpg", attributes0);
      pseudoTextElement0.html((StringBuilder) null);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parse("(?hZ@UR>!~UY70-kwn@", "(?hZ@UR>!~UY70-kwn@");
      document0.empty();
      document0.html();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Tag tag0 = Tag.valueOf("\"Bp+C");
      CDataNode cDataNode0 = new CDataNode(">6-~:PTGh)[9+Kd");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ">uI@.,$Xn]@u ).&:s", attributes0);
      pseudoTextElement0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&(k4^.$u`6qs&", "&(k4^.$u`6qs&");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Document.createShell("");
      Pattern pattern0 = Pattern.compile("big");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Document.createShell("\"Bp+C");
      Pattern pattern0 = Pattern.compile("", (-1344));
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.getElementsMatchingText("dc");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Document.createShell("\"Bp+C");
      Pattern pattern0 = Pattern.compile("A}FTKkh56kTBfbK$S", 5170);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsMatchingOwnText("");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("af", "af");
      document0.getElementsContainingOwnText("af");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parse("/J]m:$", "</");
      document0.getElementsByTag("/J]m:$");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      CDataNode cDataNode0 = new CDataNode("html");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "html", attributes0);
      element0.getElementsByTag("html");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("K&|)r]h");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("K&|)r]h", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "irW5s3fg$~CX9", attributes0);
      pseudoTextElement0.getElementsByIndexLessThan(3048);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parse("]M_kp,+{D%oquD", "]M_kp,+{D%oquD");
      document0.getElementsByIndexGreaterThan((-1010136927));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "java.lang.string@0000000038");
      Element element0 = document0.addClass("video");
      element0.getElementsByClass("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("sortakle");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "sortakle", attributes0);
      attributes0.putIgnoreCase("sortakle", "sortakle");
      pseudoTextElement0.getElementsByAttributeValueStarting("sortakle", "sortakle");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(?hZ@UR>!~UY70-kwn@", "w=pV&/ SN");
      document0.getElementsByAttributeValueNot("w=pV&/ SN", "w=pV&/ SN");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Tag tag0 = Tag.valueOf("AttributeValue_doubleQuoted");
      CDataNode cDataNode0 = new CDataNode("_57");
      Attributes attributes0 = cDataNode0.attributes();
      attributes0.put("Tag name must not be empty.", "Tag name must not be empty.");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "?y)n7yY2!:y?", attributes0);
      pseudoTextElement0.getElementsByAttributeValueMatching("Tag name must not be empty.", "");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Node", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("org.jsoup.nodes.Node", "org.jsoup.nodes.Node");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Node", attributes1);
      formElement0.getElementsByAttribute("org.jsoup.nodes.node");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling", "org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      Element element0 = document0.insertChildren(0, nodeArray0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      document0.setSiblingIndex((-15));
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      Element element0 = document0.empty();
      document0.doClone(element0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Document.createShell("yKaL3Z<6*c4J2U>xJI");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(?hZ@UR>!~UY70-kwn@", "Insert position out of bounds.");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = new Document("(?hZ@UR>!~UY70-kwn@");
      Set<String> set0 = document0.classNames();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Document.createShell("\"Bp+C");
      document0.toggleClass("\"Bp+C");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("irW5s3fig$~CX9", "irW5s3fig$~CX9");
      document0.addClass("YO?.");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("?KWmgp/|1xl4X", "?KWmgp/|1xl4X");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Document.createShell("QWl");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$AttributeStarting");
      Document document1 = (Document)document0.appendTo(document0);
      document1.setSiblingIndex(30);
      document1.child(0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$AttributeStarting");
      Element element0 = document0.appendTo(document0);
      element0.child(0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("?KWmgp/|1xl4X", "?KWmgp/|1xl4X");
      Element element0 = document0.child(0);
      element0.child(0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+KDY,IpKcm|(UV :6t", "+KDY,IpKcm|(UV :6t");
      Element element0 = document0.body();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pW:U}*VR", "pW:U}*VR");
      Element element0 = document0.appendElement("pW:U}*VR");
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Document.createShell("irW5s3fig$~CX9");
      document0.setParentNode(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = document0.appendElement("Tag name must not be empty.");
      element0.before("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PyeZl@OeJ1X<vc", "PyeZl@OeJ1X<vc");
      Element element0 = document0.body();
      element0.before("class");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("template", "template");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(?hZ@UR>!~UY70-kwn@", "(?hZ@UR>!~UY70-kwn@");
      document0.val("(?hZ@UR>!~UY70-kwn@");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+r^~0%", "+r^~0%");
      document0.setSiblingIndex((-234));
      document0.attr("", true);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+KDY,IpKcm|(UV :6t", "+KDY,IpKcm|(UV :6t");
      Element element0 = document0.body();
      element0.attr("s53/u", false);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Document.createShell(" ");
      Element element0 = document0.createElement("C2;c1X'y[");
      element0.attr("X'%\"d_NusU'6Dg^", false);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(L(uNZiM$>6{#aby@", "(L(uNZiM$>6{#aby@");
      document0.prependChild(document0);
      Element element0 = document0.lastElementSibling();
      document0.remove();
      element0.attr("(L(uNZiM$>6{#aby@", "org.jsoup.parser.token");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("irW5s3fg$~CX9", "irW5s3fg$~CX9");
      Element element0 = document0.appendElement("irW5s3fg$~CX9");
      element0.attr("irW5s3fg$~CX9", "irW5s3fg$~CX9");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("%x", "w=r8:&f6;ru{j");
      Element element0 = document0.attr("%x", "w=r8:&f6;ru{j");
      element0.getElementsByAttributeStarting("%x");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      CDataNode cDataNode0 = new CDataNode("html");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "html", attributes0);
      Element element1 = new Element("<html>\n <head></head>\n <body>\n  |h\n </body>\n</html>");
      element0.appendTo(element1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parse("]M_kp,+{D%oquD", "]M_kp,+{D%oquD");
      document0.prependChild(document0);
      Element element0 = document0.lastElementSibling();
      element0.appendText("]M_kp,+{D%oquD");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parse("]M_kp,+{D%oquD", "]M_kp,+{D%oquD");
      Element element0 = document0.prependChild(document0);
      element0.appendText("]M_kp,+{D%oquD");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Element element0 = new Element("7=D^(*&^$%DV!8gP5T-");
      element0.appendElement("GhYC-<hg`&3u");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Document.createShell("caption");
      document0.appendElement("caption");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      Element element0 = document0.head();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Tag tag0 = Tag.valueOf("SKIP_ENTIRELY");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "SKIP_ENTIRELY", (Attributes) null);
      FormElement formElement0 = new FormElement(tag0, "SKIP_ENTIRELY", (Attributes) null);
      pseudoTextElement0.appendChild(formElement0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Document.createShell("=k");
      Element element0 = document0.body();
      element0.append("(?hZ@UR>!~UY70-kwn@");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Tag name must not be empty.");
      CDataNode cDataNode0 = new CDataNode("Tag name must not be empty.");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Tag name must not be empty.", attributes0);
      pseudoTextElement0.append("");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parse("?fzpcy`wcj-cwx,'", "?fzpcy`wcj-cwx,'");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("ff EGJ&dodq0", parseSettings0);
      Element element0 = new Element(tag0, "?fzpcy`wcj-cwx,'");
      element0.setParentNode(document0);
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Attributes incorrectly present on end tag", "w(wgk||.");
      Element element0 = document0.body();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Document.createShell("\"Bp+C");
      Element element0 = document0.doClone(document0);
      element0.after("\"Bp+C");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("dKV!n+265>", "dKV!n+265>");
      Element element0 = document0.body();
      element0.after("");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Document.createShell("sorRabl9");
      Element element0 = document0.appendElement("org.jsoup.nodes.Element$NodeList");
      element0.addClass("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000038");
      Element element0 = document0.addClass("java.lang.string@0000000038");
      element0.siblingIndex = (-1478);
      document0.addClass("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parse("Insert position out of bounds.", "Insert position out of bounds.");
      Element element0 = document0.head();
      element0.addClass("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = new Document("14 6foN$-rv");
      document0.addClass("ir!.5'3figJ$GCX");
      Element element0 = document0.addClass("14 6foN$-rv");
      element0.hasClass("/u_[vG)");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parse("PDiV", "PDiV");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.wrap("html");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parse("class", "class");
      Element element0 = document0.head();
      element0.siblingIndex = 13;
      // Undeclared exception!
      try { 
        element0.wrap("class");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 13, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("L}m1qE!Z95~*", "gB");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parse("class", "class");
      TextNode textNode0 = new TextNode("class", "div");
      document0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        document0.wrap("class");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parse("class", "class");
      Element element0 = document0.body();
      element0.siblingIndex = (-1224);
      // Undeclared exception!
      try { 
        element0.wrap("class");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parse("]M_kp,+{D%oquD", "]M_kp,+{D%oquD");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.val("]M_kp,+{D%oquD");
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      StringReader stringReader0 = new StringReader("ha~%W");
      Document document0 = parser1.parseInput((Reader) stringReader0, "irW5s3fig$~CX9");
      // Undeclared exception!
      try { 
        document0.val("</");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("tg name ust not be empy.", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("tg name ust not be empy.");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("", true);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "tg name ust not be empy.", attributes1);
      String[] stringArray0 = new String[1];
      attributes0.keys = stringArray0;
      // Undeclared exception!
      try { 
        pseudoTextElement0.val("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Document.createShell("\"Bp+C");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = new Document("SP-Kg(ekG");
      // Undeclared exception!
      try { 
        document0.text("aUxosLS>DQ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("]M_kp,+{D%oquD", "]M_kp,+{D%oquD");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parse("(?hZ@UR>!~UY70-kwn@", "(?hZ@UR>!~UY70-kwn@");
      CDataNode cDataNode0 = new CDataNode("li");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      document0.setSiblingIndex((-15));
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(L(uNZiM$>6{#aby@", "(L(uNZiM$>6{#aby@");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.tagName("(L(uNZiM$>6{#aby@");
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document0 = parser1.parseInput("org.jsoup.select.StructuralEvaluator", " Fp");
      // Undeclared exception!
      try { 
        document0.tagName("org.jsoup.select.StructuralEvaluator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(?hZ@UR>!~UY70-kwn@", "(?hZ@UR>!~UY70-kwn@");
      // Undeclared exception!
      try { 
        document0.tagName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Document.createShell("id");
      Element element0 = document0.empty();
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        element0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = new Document("gt'd!$k/,t1x");
      // Undeclared exception!
      try { 
        document0.selectFirst("F/,gu$-<~$T62r5#");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'F/,gu$-<~$T62r5#': unexpected token at '/,gu$-<~$T62r5#'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]M_kp,+{D%oquD", "]M_kp,+{D%oquD");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      // Undeclared exception!
      try { 
        document0.select("org.jsoup.nodes.Element$1");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.nodes.Element$1': unexpected token at '$1'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = new Document("value");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Document.createShell("ff EGJ&dodq0");
      document0.childNodes = null;
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      DataNode dataNode0 = new DataNode("textarea");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("W=", "W=");
      TextNode textNode0 = TextNode.createFromEncoded("W=", "X_k:oC@g.;q[{");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        Element.preserveWhitespace(document0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.StructuralEvaluator", "org.jsoup.select.StructuralEvaluator");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Document.createShell("irW5s3fig$~CX9");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.prependElement("acttpg");
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document document1 = document0.normalise();
      List<Node> list0 = Parser.parseFragment("", (Element) document1, "");
      document1.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.prependElement("value");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Document$OutputSettings", "org.jsoup.nodes.Document$OutputSettings");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parse("W:v*P/?00", "W:v*P/?00");
      DataNode dataNode0 = new DataNode("strike");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        document0.prependChild(element0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      Document document1 = new Document("java.lang.string@0000000086");
      Document document2 = Document.createShell("java.lang.string@0000000086");
      document2.setParentNode(document1);
      // Undeclared exception!
      try { 
        document0.prependChild(document2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("@(7]FU{*{BY7t0", "&(k4^.$Wu`6qs&");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("irW5s3fig$~CX9", "irW5s3fig$~CX9");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.prepend("CSnDOAnrK-LzBz[kX");
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Tag tag0 = Tag.valueOf("<2heil9V");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "<2heil9V", attributes0);
      Element element1 = element0.tagName("<2heil9V");
      element1.childNodes = null;
      // Undeclared exception!
      try { 
        element0.prepend("!(HK[)oVN>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parse("|h", "|h");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Document.createShell(")4Yw");
      DocumentType documentType0 = new DocumentType(")4Yw", ")4Yw", ")4Yw");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.parent();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name mustnot ae e/ty.", "TuuM]p");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Tag name mustnot ae e/ty.");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      document0.outerHtmlTail(mockPrintStream0, 97692013, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = new Document("\u0003i>2");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " G6&1,8;");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 1287, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parse("W(Wgk||.", "W(Wgk||.");
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 2, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader(":PC4cZ");
      Document document0 = parser0.parseInput((Reader) stringReader0, ":PC4cZ");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(bufferedWriter0, 1180, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")(e", ")(e");
      File file0 = MockFile.createTempFile(")(e", ")(e");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockFileWriter0, (-1671), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("YrAJ]&KpY{\"cG~", "'lass");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        document0.outerHtmlTail(pipedWriter0, 24, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parse("(?hZ@UR>!~UY70-kwn@", "(?hZ@UR>!~UY70-kwn@");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(536);
      // Undeclared exception!
      document0.outerHtmlHead(charArrayWriter0, 536, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = new Document("/");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "/");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, (-1110026255), document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("#root");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(bufferedWriter0, 321, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&tJNMJOO-eNHzlPe", "");
      MockFile mockFile0 = new MockFile("org.jsoup.nodes.Element");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintWriter0, (-254), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parse("af", "af");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlHead(pipedWriter0, 277, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("o", "o");
      DocumentType documentType0 = new DocumentType("}o)i$k8Zf/S]77Bz,", "o", "o", "o", "vfQpp5why9vl");
      Element element0 = document0.doClone(documentType0);
      // Undeclared exception!
      try { 
        element0.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("org.jsoup.select.StructuralEvaluator$PreviousSibling");
      Document document0 = parser0.parseInput((Reader) stringReader0, "org.jsoup.select.StructuralEvaluator$PreviousSibling");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("/IqC!H}R\"CZ", "/IqC!H}R\"CZ");
      DataNode dataNode0 = DataNode.createFromEncoded("G,$S", "/IqC!H}R\"CZ");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("irW5s3fig$~CX9", "irW5s3fig$~CX9");
      document0.setParentNode(document0);
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("T");
      // Undeclared exception!
      document0.is((Evaluator) evaluator_ContainsOwnText0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parse("nS2D+8^coxf", "value");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Document.createShell("]M_kp,+{D%oquD");
      DataNode dataNode0 = new DataNode("org.jsoup.select.Selector$SelectorParseException");
      document0.setParentNode(dataNode0);
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      // Undeclared exception!
      try { 
        document0.is((Evaluator) evaluator_AllElements0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.DataNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Tag tag0 = Tag.valueOf("SKIP_ENTIRELY");
      FormElement formElement0 = new FormElement(tag0, "SKIP_ENTIRELY", (Attributes) null);
      // Undeclared exception!
      try { 
        formElement0.is("        ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '        ': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("$KD6~B^", "sortable");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.is("F1");
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parse("]M_kp,+{D%oquD", "]M_kp,+{D%oquD");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("$KD==^", "$KD==^");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html("$KD==^");
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(?hZ@UR>!~UY70-kwn@", "(?hZ@UR>!~UY70-kwn@");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'lass", "'lass");
      TextNode textNode0 = new TextNode("DOl.,u3;it\rm", (String) null);
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.html("DOl.,u3;it\rm");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parse("'lass", "'lass");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(L(uNZiM$>6{#aby@", "(L(uNZiM$>6{#aby@");
      Document document1 = Document.createShell("rL<c|$xQ59OpAKOh1j");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document1;
      Element element0 = document1.insertChildren(1, nodeArray0);
      MockFile mockFile0 = new MockFile("^xg!;00W'*l]");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      // Undeclared exception!
      element0.html((OutputStreamWriter) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("B]PooSW*Al90@", "B]PooSW*Al90@");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "B]PooSW*Al90@");
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parse("(?hz@ur>!~uy70-kwn@", "(?hz@ur>!~uy70-kwn@");
      CharBuffer charBuffer0 = CharBuffer.allocate(46);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Document.createShell("(?hZ@UR>!~UY70-kwn@");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("af", "af");
      DataNode dataNode0 = DataNode.createFromEncoded("af", "yxUo4;,~z?s{.y$B");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = new Document(":nth-child(");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("CrVov", "org.jsoup.nodes.Element$1");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]M_kp,+{D%oquD");
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput((Reader) stringReader0, "AfterAfterBody");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("]M_kp,+{D%oquD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: ]M_kp,+{D%oquD
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Document.createShell("j2NAoU.");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("id", "#-gp02mlhr~aguc+");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("org.jsoup.nodes.Element$1", "#root");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("#Vvpq_Jra'y?K.T6[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: #Vvpq_Jra'y?K.T6[
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" > ", "java.lang.string@0000000044");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("<Ds8MoBc=H?q^[x:Y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parse("\"", ":x:4]@|");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("body");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("o", "o");
      Comment comment0 = new Comment("af");
      document0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("o");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(": _S", ": _S");
      CDataNode cDataNode0 = new CDataNode((String) null);
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan(24);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Document.createShell("<<mrUNZX,J}.:&0IU");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals(42);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aYdn]QvyATHvdL", "aYdn]QvyATHvdL");
      CDataNode cDataNode0 = new CDataNode("aYdn]QvyATHvdL");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals(38);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("1XML0M!s6*|MAgoRu", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parse("]M_kp,+{D%oquD", "]M_kp,+{D%oquD");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("3YDo,9IQF@|\"C[w", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(?hZ@UR>!~UY70-kwn@", "Children collection to be inserted must not be null.");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("}HYoHjpwq9cqY96B Jc", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parse("Insert position out of bounds.", "Insert position out of bounds.");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("Insert position out of bounds.", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.jsoup.parser.ParseErrorList");
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput((Reader) stringReader0, ">OvQZYun&");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", "_]R;d1l|0x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.StructuralEvaluator", "org.jsoup.select.StructuralEvaluator");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("org.jsoup.nodes.Element$NodeList", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "|&//I+5SVcPWc$Al3o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parse("Insert position out of bounds.", "Insert position out of bounds.");
      Element element0 = document0.head();
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("org.jsoup.select.StructuralEvaluator$Has");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Document.createShell("(?hZ@UR>!~UY70-kwn@");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      document0.setSiblingIndex((-15));
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("#root");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parse("/", "/");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parse("(O!`l+Ebc\"v|B", "ins");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("sortable");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "sortable", attributes0);
      Comment comment0 = new Comment("sortable");
      pseudoTextElement0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.firstElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("irW5s3fg$~CX9", "irW5s3fg$~CX9");
      Element element0 = document0.body();
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      element0.classNames(set0);
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'body.java.lang.String@0000000050.UTF8': unexpected token at '@0000000050.UTF8'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Cu|DAcJEUnb*@mdI^K");
      Document document0 = Document.createShell("l%");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Document.createShell("<D)pg_l:");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("K&|)r]h");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("K&|)r]h", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "irW5s3fg$~CX9", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.child(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      document0.setParentNode(document0);
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Document.createShell("BJ");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.before("ql=tu)qB\",o+\"GV#F");
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Document.createShell("BJ");
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(L(uNZiM$>6{#aby@", "(L(uNZiM$>6{#aby@");
      Document document1 = Document.createShell("rL<c|$xQ59OpAKOh1j");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document1;
      document1.insertChildren(1, nodeArray0);
      // Undeclared exception!
      document0.attr("UV|6_lRMlD`", "UV|6_lRMlD`");
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parse("rHkjLlIU", "rHkjLlIU");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "7K;aI>}.F#4`CGVtc+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parse("$1`gK}_9", "$1`gK}_9");
      DataNode dataNode0 = new DataNode("$1`gK}_9", "$1`gK}_9");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        element0.appendTo(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.body();
      document0.setParentNode(element0);
      // Undeclared exception!
      try { 
        document0.appendTo(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.StructuralEvaluator", "org.jsoup.select.StructuralEvaluator");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Document.createShell("af");
      List<Node> list0 = Parser.parseXmlFragment("JSv}#(`YtK6-@cH", "\"Q`S|mnc`$@g&");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendText("{\"^f ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("org.jsoup.select.StructuralEvaluator$PreviousSibling");
      Document document0 = parser0.parseInput((Reader) stringReader0, "org.jsoup.select.StructuralEvaluator$PreviousSibling");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parse("Insert position out of bounds.", "Insert position out of bounds.");
      Element element0 = document0.head();
      element0.after((Node) document0);
      // Undeclared exception!
      element0.appendElement("dW?| q~f");
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Document.createShell(")(e");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(3277);
      List<Node> list0 = Parser.parseFragment(" > ", (Element) document0, "^", parseErrorList0);
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendElement(")(e");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("org.jsoup.select.StructuralEvaluator$PreviousSibling");
      Document document0 = parser0.parseInput((Reader) stringReader0, "org.jsoup.select.StructuralEvaluator$PreviousSibling");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Document.createShell("<D)pg_l:");
      Document document1 = document0.clone();
      document1.childNodes = null;
      // Undeclared exception!
      try { 
        document1.appendChild(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parse("id", "id");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("id", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "id", attributes0);
      Element element1 = document0.doClone(element0);
      // Undeclared exception!
      try { 
        document0.appendChild(element1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ke`<?", "ke`<?");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(L(uNZiM$>6{#aby@", "(L(uNZiM$>6{#aby@");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.append("v{5o.");
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parse("irW5s3fg$~CX9", "mv!$");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("irW53figJ$GCX", "irW53figJ$GCX");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.after("");
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = document0.body();
      Element element1 = element0.doClone(document0);
      // Undeclared exception!
      try { 
        element1.after("mE~;C>62.U7&MBK3d e");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = new Document("AttributeValue_doubleQuoted");
      DataNode dataNode0 = DataNode.createFromEncoded("|soGjP).", "|soGjP).");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.after(">sJ*Fa");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("value", "J,H)*@Dy8#-m7HPT");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, ":0^3n*c6J.N", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "-N#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      document0.append("textarea");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("iGCc@%-mEFO ", "WOZN");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("\n", "rtaIKle");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      document0.appendChild(document0);
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parse("|h", "|h");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|h", "|h");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(L(uNZiM$>6{#aby@", "(L(uNZiM$>6{#aby@");
      document0.prependChild(document0);
      Element element0 = document0.lastElementSibling();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parse("W=", "W=");
      DataNode dataNode0 = new DataNode("W=");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.nextElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("irW5s3fig$~CX9", "irW5s3fig$~CX9");
      document0.setParentNode(document0);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      document0.tagName("Insert position out of bounds.");
      Element element0 = document0.head();
      element0.wrap("UbI\"");
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parse("|h", "|h");
      document0.removeAttr("|h");
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parse("|h", "|h");
      Element element0 = document0.body();
      Element element1 = element0.wrap("|h");
      element1.attributes();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("irW5s3fig$~CX9", "irW5s3fig$~CX9");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parse("]M_kp,+{D%oquD", "]M_kp,+{D%oquD");
      Pattern pattern0 = Pattern.compile("]M_kp,+{D%oquD", 24);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parse("]M_kp,+{D%oquD", "]M_kp,+{D%oquD");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(L(uNZiM$>6{#aby@", "(L(uNZiM$>6{#aby@");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Element element0 = new Element("SKIP_ENTIRELY");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("irW5s3fig$~CX9", "irW5s3fig$~CX9");
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("T");
      document0.is((Evaluator) evaluator_ContainsOwnText0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("af", "af");
      Pattern pattern0 = Pattern.compile("af", (-2170));
      document0.getElementsByAttributeValueMatching("java.lang.string@0000000072", pattern0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parse("class", "class");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parse("$1`gK}_9", "$1`gK}_9");
      document0.hasClass("$1`gK}_9");
      DataNode dataNode0 = new DataNode("$1`gK}_9", "$1`gK}_9");
      document0.doClone(dataNode0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      document0.html();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      document0.title("Insert position out of bounds.");
      MockFileWriter mockFileWriter0 = new MockFileWriter(")Y{xQ}UzL)dL@", true);
      document0.html(mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parse("Insert position out of bounds.", "Insert position out of bounds.");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("?kwmgp/|1xl4x");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "textarea", attributes0);
      pseudoTextElement0.val();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000038");
      document0.addClass("java.lang.string@0000000038");
      Element element0 = document0.addClass("java.lang.string@0000000038");
      element0.toggleClass("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000038");
      Element element0 = document0.addClass("java.lang.string@0000000038");
      document0.addClass("java.lang.string@0000000038");
      element0.hasClass("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.addClass("video");
      document0.addClass("");
      document0.hasClass("video");
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000038", "java.lang.string@0000000038");
      document0.addClass("video");
      Element element0 = document0.addClass("java.lang.string@0000000038");
      element0.addClass("g`R9Ov')&fV?");
      element0.hasClass("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("id", "Tag name must not be empty.");
      document0.addClass("video");
      document0.addClass(" -0J9)Wt~w0fCG");
      document0.hasClass("id");
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = document0.addClass("Tag name must not be empty.");
      element0.addClass("7_`m-xv");
      document0.hasClass("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("irW5s3fig$~CX9", "irW5s3fig$~CX9");
      Element element0 = document0.addClass("YO?.");
      element0.hasClass("Split offset must be not be negative");
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      CDataNode cDataNode0 = new CDataNode("textarea");
      Element element0 = document0.prependChild(cDataNode0);
      element0.data();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parse("=Kw=jy0<!", "=Kw=jy0<!");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parse("<!doctype", "W");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("$KD6~B^", "sortable");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("irW53figJ$GCX", "irW53figJ$GCX");
      document0.setParentNode(document0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("|soGjP).", "|soGjP).");
      Element.preserveWhitespace(dataNode0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parse("L=Kw=jy0<!", "+");
      document0.getElementsContainingOwnText("sortakle");
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$d@1lWzq");
      Document document0 = Document.createShell("$d@1lWzq");
      document0.prependChild(cDataNode0);
      document0.append("$d@1lWzq");
      document0.getElementsContainingText("NM}f9!0t|cs6Z{;T;");
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      document0.append("textarea");
      document0.getElementsContainingText("textarea");
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      document0.title("Insert position out of bounds.");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("af", "af");
      document0.appendElement("af");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parse("(?hZ@UR>!~UY70-kwn@", "(?hZ@UR>!~UY70-kwn@");
      DocumentType documentType0 = new DocumentType("br", "br", "br");
      document0.prependChild(documentType0);
      document0.getElementsContainingText("(?hZ@UR>!~UY70-kwn@");
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      document0.getElementById("i-5V");
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "s+");
      Element element0 = document0.body();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("marquee", "marquee");
      document0.setParentNode(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("irW5s3fg$~CX9", "irW5s3fg$~CX9");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      element1.after("irW5s3fg$~CX9");
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("irW5s3fig$~CX9", "irW5s3fig$~CX9");
      document0.setParentNode(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parse("(?hZ@UR>!~UY70-kwn@", "(?hZ@UR>!~UY70-kwn@");
      Element element0 = document0.body();
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Document.createShell("ff EGJ&dodq0");
      document0.setParentNode(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parse("Insert position out of bounds.", "Insert position out of bounds.");
      Element element0 = document0.body();
      element0.wrap("Insert position out of bounds.");
      Elements elements0 = element0.nextElementSiblings();
      assertEquals("Insert position out of bounds.", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = new Document("]M_kp,+{D%oquD");
      document0.nextElementSibling();
      assertEquals("]M_kp,+{D%oquD", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      document0.siblingElements();
      assertEquals("textarea", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(L(uNZiM$>6{#aby@", "(L(uNZiM$>6{#aby@");
      document0.prependChild(document0);
      document0.siblingElements();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parse("|h", "|h");
      Element element0 = document0.body();
      element0.wrap("|h");
      String string0 = element0.cssSelector();
      assertEquals("|h", element0.baseUri());
      assertEquals("html > head:nth-child(2) > body:nth-child(1)", string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("irW5s3fg$~CX9", "irW5s3fg$~CX9");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      document0.cssSelector();
      assertEquals("irW5s3fg$~CX9", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("vvE1RieJqBh", "vvE1RieJqBh");
      Node[] nodeArray0 = new Node[5];
      // Undeclared exception!
      try { 
        document0.insertChildren(2975, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1722), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Document.createShell("'lass");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(0, nodeArray0);
      assertEquals("'lass", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      LinkedHashSet<PseudoTextElement> linkedHashSet0 = new LinkedHashSet<PseudoTextElement>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-15), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ", " ");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(0, list0.size());
      assertEquals(" ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.parser.Token", "org.jsoup.parser.Token");
      document0.prependText("SJ V?DavKAR+|*.]");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, list0.size());
      assertEquals("org.jsoup.parser.Token", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = new Document("BJ");
      document0.html("K&|)r]h");
      document0.children();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("iCframe", "iCframe");
      Elements elements0 = document0.getElementsByIndexEquals(1772);
      assertEquals("iCframe", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByIndexGreaterThan(2981);
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Element element0 = new Element("sorJtable");
      Element element1 = element0.selectFirst("sorJtable");
      assertEquals("sorJtable", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.getAllElements();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = new Document("STOP");
      Element element0 = document0.removeClass("STOP");
      assertEquals("STOP", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.before("Tag name must not be empty.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parse("/", "/");
      document0.getElementsByAttribute("/");
      assertEquals("/", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ", " ");
      document0.getElementsByAttributeValueNot(" ", " ");
      assertEquals(" ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.shallowClone();
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parse("Insert position out of bounds.", "Insert position out of bounds.");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val("textarea");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Document.createShell("af");
      document0.getElementsByAttributeValueContaining("=", "JSv}#(`YtK6-@cH");
      assertEquals("af", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      Elements elements0 = document0.getElementsByClass("-yU:/^'$'f(;1PF");
      assertEquals("textarea", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      document0.getElementsByAttributeValueEnding("textarea", "textarea");
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      document0.is("textarea");
      assertEquals("textarea", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsByAttributeValueMatching("", "");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("%x", "w=r8:&f6;ru{j");
      document0.getElementsByAttributeStarting("%x");
      assertEquals("w=r8:&f6;ru{j", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(L(uNZiM$>6{#aby@", "(L(uNZiM$>6{#aby@");
      document0.prependChild(document0);
      assertEquals(2, document0.childNodeSize());
      
      document0.remove();
      Elements elements0 = document0.getElementsByIndexLessThan(889);
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("irW5s3fg$~CX9", "irW5s3fg$~CX9");
      // Undeclared exception!
      try { 
        document0.after("irW5s3fg$~CX9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Elements elements0 = document0.getElementsMatchingOwnText("50:e1!IrG|j");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = Parser.parse("#B [Np;nuX?", "textarea");
      Element element0 = document0.body();
      assertNotNull(element0);
      
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
      assertEquals("textarea", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Element element0 = new Element("sorJtable");
      Elements elements0 = element0.getElementsByAttributeValueStarting("sorJtable", "sorJtable");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Document.createShell("irW5s3fig$~CX9");
      document0.getElementsByAttributeValue("y4<'", "@~_0'Ft_Kn|0hiGv8");
      assertEquals(1, document0.childNodeSize());
      assertEquals("irW5s3fig$~CX9", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("\n", "rtaIKle");
      String string0 = document0.wholeText();
      assertEquals("rtaIKle", document0.baseUri());
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Document document0 = Document.createShell("irW5s3fig$~CX9");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Element element0 = new Element("E9d;`");
      int int0 = element0.childNodeSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = document0.addClass("Tag name must not be empty.");
      boolean boolean0 = element0.hasClass("Tag name must not be empty.");
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      Elements elements0 = document0.getElementsContainingOwnText("(?hZ@UR>!~UY70-kwn@");
      // Undeclared exception!
      try { 
        document0.insertChildren(281, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Document document0 = new Document("w(?hZ8UR>!~UY=0-kwn@");
      Element element0 = document0.tagName("h1");
      assertEquals("w(?hZ8UR>!~UY=0-kwn@", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(?hZ@UR>!~UY70-kwn@", "w=pV&/ SN");
      // Undeclared exception!
      try { 
        document0.child((-639));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Document document0 = Parser.parse("(?hZ@UR>!~UY70-kwn@", "(?hZ@UR>!~UY70-kwn@");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("(?hZ@UR>!~UY70-kwn@", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Document document0 = Document.createShell("'lass");
      Elements elements0 = document0.getElementsMatchingText("");
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Document document0 = Document.createShell("af");
      document0.appendText("{\"^f ");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      // Undeclared exception!
      try { 
        document0.wrap("UbI\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }
}
