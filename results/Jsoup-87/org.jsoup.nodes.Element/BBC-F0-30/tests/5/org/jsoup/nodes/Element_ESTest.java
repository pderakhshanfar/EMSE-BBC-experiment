/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 21:34:22 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.MissingFormatArgumentException;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("5bmv,4B\"#G^g", "5bmv,4B\"#G^g");
      Element element0 = document0.toggleClass("5bmv,4B\"#G^g");
      element0.hasClass("4ogY0j}");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.getElementsByAttributeValueMatching((String) null, "org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("2B", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "2B", (Attributes) null);
      MockFile mockFile0 = new MockFile("2B", "s+");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      formElement0.outerHtmlTail(mockPrintWriter0, (-310), document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("class", "Insert position out of bounds.");
      Tag tag0 = Tag.valueOf("s+");
      FormElement formElement0 = new FormElement(tag0, "]jA#Y J@", attributes0);
      formElement0.getElementsByClass("address");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Document document1 = (Document)document0.doClone(document0);
      document1.wrap("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.head();
      element0.wrap("$7BZ<Hc>");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Com'iningEvaluator$Or", "org.jsoup.select.Com'iningEvaluator$Or");
      Document document1 = Parser.parseBodyFragment("org.jsoup.select.Com'iningEvaluator$Or", "org.jsoup.select.Com'iningEvaluator$Or");
      Element element0 = document1.head();
      Element element1 = element0.appendChild(document0);
      element1.wrap("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("]jA#Y J@", parseSettings0);
      Element element0 = new Element(tag0, "]jA#Y J@", attributes0);
      element0.wholeText();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Element element0 = new Element("multiple");
      element0.siblingIndex = (-1539);
      element0.val("multiple");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Element element0 = document0.body();
      element0.val("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.doClone(document0);
      element0.val("org.jsoup.select.CombiningEvaluator$Or");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Cet>_20+zI");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "Cet>_20+zI", attributes0);
      element0.val("value");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      document0.appendChild(document0);
      document0.toggleClass("[d#8:}GN");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      document0.siblingIndex = (-1306);
      document0.toggleClass("org.jsoup.select.CombiningEvaluator$Or");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("L$zkZ+<Hc>", "L$zkZ+<Hc>");
      document0.setSiblingIndex((-3808));
      document0.text("uzQ8kK=zMV:\"o|!");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("i_8xG", "A#[Sk&Z4suy");
      Element element0 = document0.body();
      element0.text("i_8xG");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.appendTo(document0);
      element0.text(":containsData(text) query +ust not be empty");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("HtK<55QXl@k", "z");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("i_8xG", "^ig+[nvi:FPS");
      Element element0 = document0.body();
      element0.tagName("PV;u");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parse("hcj", "java.lang.string@0000000008 class csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      Element element0 = document0.head();
      element0.tagName("java.lang.string@0000000008 class csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#~C<", "[:>J'4OB");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("title", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ")@bxD@", (Attributes) null);
      pseudoTextElement0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("-Md(:1");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      formElement0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.head();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~C", "~C");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Tag tag0 = Tag.valueOf("HtK<55QXl@k");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "HtK<55QXl@k", attributes0);
      element0.selectFirst("9YKA5XQ");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Tag tag0 = Tag.valueOf("value");
      Element element0 = new Element(tag0, "value");
      Element element1 = element0.text("value");
      Element element2 = element1.appendElement("value");
      element2.selectFirst("value");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Tag tag0 = Tag.valueOf("value");
      Element element0 = new Element(tag0, "value");
      element0.selectFirst("value");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Element element0 = new Element("value");
      element0.select("value");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("@5r7`zW!;N{A1uN}Xf", "@5r7`zW!;N{A1uN}Xf");
      Element element0 = document0.body();
      element0.removeClass("@5r7`zw!;n{a1un}xf");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = new Document("oW2lhFDE9jDcSWK<2");
      document0.removeClass("\"9FO/|/v$Ysz4M#@&9");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.doClone(document0);
      document0.appendTo(element0);
      element0.appendChild(element0);
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.body();
      element0.prependText("z5[l<S:{");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Tag tag0 = Tag.valueOf("value");
      Element element0 = new Element(tag0, "value");
      Attributes attributes0 = element0.attributes();
      FormElement formElement0 = new FormElement(tag0, "Children collection to be inserted must not be null.", attributes0);
      formElement0.prependElement("body");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.tagName("address");
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("FDz}/B4@Um,7p", "FDz}/B4@Um,7p");
      document0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parse("z*@3epxw1", "KRw,z");
      Element element0 = document0.head();
      element0.prepend(":containsOwn(");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("class");
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      formElement0.prepend("");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("?EQd3{sw", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "?EQd3{sw", attributes0);
      formElement0.parents();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Document document1 = (Document)document0.doClone(document0);
      document1.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("class", "org.jsoup.select.evaluator$isnthoftype");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parse("5bmv,4B\"#G^g", "5bmv,4B\"#G^g");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      document0.appendChild(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parse("v|", "v|");
      Element element0 = document0.body();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("value", "#root");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Tag tag0 = Tag.valueOf("HtK<55QXl@k");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "HtK<55QXl@k", attributes0);
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      element0.is((Evaluator) evaluator_IsOnlyOfType0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Tag tag0 = Tag.valueOf("value");
      Element element0 = new Element(tag0, "value");
      Attributes attributes0 = element0.attributes();
      FormElement formElement0 = new FormElement(tag0, "Children collection to be inserted must not be null.", attributes0);
      formElement0.is("value");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Tag tag0 = Tag.valueOf("V{>^");
      Element element0 = new Element(tag0, "f;N2 <:*80[7");
      element0.prependText("");
      Element element1 = element0.clone();
      Node[] nodeArray0 = element1.childNodesAsArray();
      element0.insertChildren(1, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Children collection to be inserted must not be null.", "$7B3Z<Hcj>");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parse("%*gg2ugQb", "=`yQ7.Q");
      LinkedHashSet<CDataNode> linkedHashSet0 = new LinkedHashSet<CDataNode>();
      Element element0 = document0.body();
      element0.insertChildren((-2), (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.body();
      element0.html("UW=E3Wmo@N'");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.CombiningEvaluator$Or");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Tag tag0 = Tag.valueOf("value");
      Element element0 = new Element(tag0, "value");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "UTF8");
      element0.html(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = new Document("=`yQ7.Q");
      document0.cssSelector();
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = new Document("]jA#Y J@");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Children collection to be inserted must not be null.", "$7B3Z<Hcj>");
      Pattern pattern0 = Pattern.compile("Children collection to be inserted must not be null.");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "");
      document0.getElementsMatchingText("");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.CombiningEvaluator$Or");
      Pattern pattern0 = Pattern.compile("textarea", (-2590));
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      document0.getElementsMatchingOwnText("HtK<55QXl@k");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Document.createShell("zdAd<Cq_hZNoEll\"6");
      document0.getElementsContainingText((String) null);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      document0.getElementsByTag("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      document0.getElementsByTag("#root");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Element element0 = new Element("value");
      element0.appendElement("value");
      element0.getElementsByIndexLessThan(2147483645);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      document0.getElementsByIndexGreaterThan(3024);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parse("bIcY<c-at9DqH*A9", ".");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("K&Nj:zY5", "]jA#Y @");
      Tag tag0 = Tag.valueOf("id");
      Element element0 = new Element(tag0, "K&Nj:zY5", attributes0);
      element0.getElementsByAttributeValueStarting("K&Nj:zY5", "]jA#Y @");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("class", "class");
      Tag tag0 = Tag.valueOf("class");
      FormElement formElement0 = new FormElement(tag0, "", attributes1);
      formElement0.getElementsByAttributeValueMatching("class", "class");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.getElementsByAttributeValueEnding("Z6d$-6", "Sh\"r*qeiN8S");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("$7BZ<Hc>");
      Attributes attributes0 = cDataNode0.attributes();
      attributes0.put("$7BZ<Hc>", "$7BZ<Hc>");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("class j@", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, ">C:`rbb\"", attributes0);
      formElement0.getElementsByAttributeValueContaining("$7BZ<Hc>", "$7BZ<Hc>");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsByAttributeValue("#root", "qd/og/*");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("sB8WX", parseSettings0);
      Attributes attributes1 = attributes0.put("sB8WX", "sB8WX");
      Element element0 = new Element(tag0, "org.jsoup.select.CombiningEvaluator$Or", attributes1);
      element0.getElementsByAttributeStarting("sB8WX");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Tag tag0 = Tag.valueOf("u)A+(=(Q'z)");
      Attributes attributes0 = new Attributes();
      attributes0.put("xl)i{yU-b+", "u)A+(=(Q'z)");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "cite", attributes0);
      pseudoTextElement0.getElementsByAttribute("xl)i{yU-b+");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parse("</", "zy^dHQ0(wu 8t");
      Element element0 = document0.body();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      document0.appendChild(document0);
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("value", "#root");
      Element element0 = document0.head();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.appendElement("Insert position out of bounds.");
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.body();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("i_8xG", "^ig+[nvi:FPS");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("org.jsoup.select.CombiningEvaluator$Or");
      FormElement formElement0 = new FormElement(tag0, "267VT", attributes0);
      formElement0.clone();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Document document0 = new Document("class");
      document0.siblingIndex = (-1405);
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("u[`4?By;", "u[`4?By;");
      Element element0 = document0.head();
      Set<String> set0 = document0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      document0.appendTo(document0);
      Set<String> set0 = document0.classNames();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$7BZ<Hc>", "$7BZ<Hc>");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.toggleClass("org.jsoup.select.CombiningEvaluator$Or");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Tag tag0 = Tag.valueOf("HtK<55QXl@k");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "HtK<55QXl@k", attributes0);
      element0.children();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("Y}(pjja69|", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "br", attributes0);
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Tag tag0 = Tag.valueOf("value");
      Element element0 = new Element(tag0, "value");
      Element element1 = element0.text("value");
      element1.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.head();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = new Document("hZ(?L*8bte_,8o");
      Element element0 = document0.doClone(document0);
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parse("v#&a>3p\"", "v#&a>3p\"");
      document0.appendChild(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("frame", "h~?gs4");
      Element element0 = document0.body();
      element0.before("h~?gs4");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Tag tag0 = Tag.valueOf("value");
      Element element0 = new Element(tag0, "value");
      Element element1 = element0.appendElement(", state=");
      element1.before("uwp=ot_nd9vxc(|");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.doClone(document0);
      element0.before("org.jsoup.select.CombiningEvaluator$Or");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("title", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ")@bxD@", (Attributes) null);
      pseudoTextElement0.baseUri();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("]jA#Y J@", true);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("]jA#Y J@", parseSettings0);
      Element element0 = new Element(tag0, "]jA#Y J@", attributes1);
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.setSiblingIndex((-6128));
      document0.attr(" ", true);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parse("v|", "v|");
      Element element0 = document0.body();
      element0.attr("v|", false);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = new Document("L6^'7q]@OGeW");
      document0.attr("org.jsoup.nodes.Element$1", false);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parse("v8a+J2>A7xG>~RF$nkH", "v8a+J2>A7xG>~RF$nkH");
      Element element0 = document0.head();
      document0.appendChild(element0);
      element0.attr("v8a+J2>A7xG>~RF$nkH", "id");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parse("v8a+J2>A7xG>~RF$nkH", "v8a+J2>A7xG>~RF$nkH");
      Element element0 = document0.head();
      element0.attr("v8a+J2>A7xG>~RF$nkH", "id");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.CombiningEvaluator$Or");
      Document document1 = (Document)document0.doClone(document0);
      document1.attr("X_g7|%9.!b9&isE", "X_g7|%9.!b9&isE");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("value", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("value");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "value", attributes0);
      pseudoTextElement0.attr("T1n>yh", "T1n>yh");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("title", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ")@bxD@", (Attributes) null);
      Document document0 = new Document("hYJ>A");
      pseudoTextElement0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Document.createShell("clas");
      Element element0 = document0.head();
      element0.appendText("]jA#Y J@");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("jA#Y J@", "[:>J'4OB");
      Element element0 = document0.appendTo(document0);
      element0.appendText("]ja#y j@");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.appendElement("dt");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.doClone(document0);
      Element element1 = element0.removeClass("}j5b~{i");
      element1.siblingIndex = (-433);
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(".", ".");
      Element element0 = document0.appendElement("2gMgHd}");
      Element element1 = element0.appendElement("r)|$@FkLY$)\"[jTB ");
      element1.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(".", ".");
      Element element0 = document0.appendElement("r)|$@FkLY$)\"[jTB ");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.body();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~C", "~C");
      Element element0 = document0.createElement("~C");
      document0.appendTo(element0);
      document0.after("br");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.body();
      element0.after("!|!RO3-uZ");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("@5r7`zW!;N{A1uN}Xf", "@5r7`zW!;N{A1uN}Xf");
      Element element0 = document0.body();
      element0.addClass("\"|");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.head();
      element0.addClass("org.jsoup.select.CombiningEvaluator$Or");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.doClone(document0);
      element0.addClass("org.jsoup.select.CombiningEvaluator$Or");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Tag tag0 = Tag.valueOf("HtK<55QXl@k");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "HtK<55QXl@k", attributes0);
      element0.addClass("org.jsoup.nodes.Document");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=`yQ7.Q", "Insert position out of bounds.");
      Document document1 = document0.ownerDocument();
      document1.parentNode = (Node) document0;
      // Undeclared exception!
      document1.wrap("=`yQ7.Q");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.doClone(document0);
      element0.appendTo(document0);
      // Undeclared exception!
      try { 
        document0.wholeText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.val("org.jsoup.select.CombiningEvaluator$Or");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("t&J#NMi", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("t&J#NMi", false);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "t&J#NMi", attributes1);
      String[] stringArray0 = new String[5];
      attributes1.keys = stringArray0;
      // Undeclared exception!
      try { 
        pseudoTextElement0.val((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = new Document("value");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("t&J#NMi", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("t&J#NMi", false);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "t&J#NMi", attributes1);
      String[] stringArray0 = new String[5];
      attributes1.keys = stringArray0;
      // Undeclared exception!
      try { 
        pseudoTextElement0.toggleClass("uWp=oT_nD9VXC(|");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("Z4GAD");
      Document document0 = parser0.parseInput((Reader) stringReader0, "");
      // Undeclared exception!
      try { 
        document0.text("#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":last-child");
      Element element0 = new Element(tag0, "M~nN*sxO");
      // Undeclared exception!
      try { 
        element0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Element element0 = new Element("Loj)=Wy $yM");
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        element0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hZ(?L*8bte_Jo", "hZ(?L*8bte_Jo");
      Comment comment0 = new Comment("hZ(?L*8bte_Jo", "org.jsoup.nodes.Element$2");
      document0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = new Document("lLbk%I~3uJ:e:JrZq");
      // Undeclared exception!
      try { 
        document0.tagName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = new Document("!Z(?L*8bte_,8o");
      Element element0 = document0.doClone(document0);
      // Undeclared exception!
      try { 
        element0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = new Document("image");
      DocumentType documentType0 = new DocumentType("                    ", "textarea", "image");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parse("n:*icj)Yqn}!", "n:*icj)Yqn}!");
      // Undeclared exception!
      try { 
        document0.selectFirst("7G:zNzEgu=v\"<+");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '7G:zNzEgu=v\"<+': unexpected token at ':zNzEgu=v\"<+'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Tag tag0 = Tag.valueOf("vaplue");
      Element element0 = new Element(tag0, "vaplue");
      // Undeclared exception!
      try { 
        element0.selectFirst("[w+u-%xp~$#ltR");
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%x'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Tag tag0 = Tag.valueOf("value");
      Element element0 = new Element(tag0, "value");
      // Undeclared exception!
      try { 
        element0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.select("[9Z`-q");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at '9Z`-q'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#~C<", "[:>J'4OB");
      // Undeclared exception!
      try { 
        document0.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Document.createShell("4>tKZ?ryLcmv");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("r.nG<C", ":not");
      CDataNode cDataNode0 = new CDataNode("r.nG<C");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("3zQg6Ah<", "3zQg6Ah<");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.prependElement("vec9;J,97uP");
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("uWp=oT_nD9VXC(|", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "uWp=oT_nD9VXC(|", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Element element0 = new Element("{l-Ht`6,Lij}Z");
      // Undeclared exception!
      try { 
        element0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = new Document("4+br#Q#0pIb]/ari");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.prepend("br");
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("]jA#Y J@", parseSettings0);
      Element element0 = new Element(tag0, "]jA#Y J@", attributes0);
      // Undeclared exception!
      try { 
        element0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Document.createShell("multiple");
      MockFileWriter mockFileWriter0 = new MockFileWriter("1ki@#LdfqL=DFz");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(121);
      // Undeclared exception!
      document0.outerHtmlTail(mockFileWriter0, 3149, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Element element0 = new Element("multiple");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "multiple");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        element0.outerHtmlTail(charBuffer0, 34, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("?gX=/aQe)Q[yv}", "?gX=/aQe)Q[yv}");
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Document.createShell("5bmv,4B\"#G^g");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 0, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "DdB");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "DdB");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringBuilder0, (-820), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = new Document("org.jsoup.parser.Token");
      MockFileWriter mockFileWriter0 = new MockFileWriter("J4H|fH)pOHtrP3", false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(141);
      // Undeclared exception!
      document0.outerHtmlHead(mockFileWriter0, 1202, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#~C<", "[:>J'4OB");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "<html>\n <head></head>\n <body>\n  #~C&lt;\n </body>\n</html>");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 2, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.jsoup.select.combiningevaluator$or");
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintStream0, 0, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = new Document("listing");
      File file0 = MockFile.createTempFile("class", "2%;(-ckPRQDMajZE3", (File) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintStream0, (-1), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("0}&n_v+[YGt( gSC4", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "0}&n_v+[YGt( gSC4", (Attributes) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        formElement0.outerHtmlHead(pipedWriter0, 32, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = new Document("gIokcy]");
      CDataNode cDataNode0 = new CDataNode("Z");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.nextElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("`7B3Z<Hcj>", "`7B3Z<Hcj>");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("(N7KgA<u4z9Tu1!EQ", "`7B3Z<Hcj>", true);
      Element element0 = document0.doClone(xmlDeclaration0);
      // Undeclared exception!
      try { 
        element0.lastElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.appendChild(document0);
      Evaluator.AttributeWithValueStarting evaluator_AttributeWithValueStarting0 = new Evaluator.AttributeWithValueStarting("+pM9BH)b*'B)>S<OZK!", "org.jsoup.select.CombiningEvaluator$Or");
      // Undeclared exception!
      element0.is((Evaluator) evaluator_AttributeWithValueStarting0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsopselect.Combiningvaluator$Or", "org.jsopselect.Combiningvaluator$Or");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      // Undeclared exception!
      try { 
        document0.is((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("L$lkZ><Hc>", "L$lkZ><Hc>");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      CDataNode cDataNode0 = new CDataNode("</");
      nodeArray0[4] = (Node) cDataNode0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.doClone(document0);
      Elements elements0 = element0.getAllElements();
      // Undeclared exception!
      try { 
        element0.insertChildren(0, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.html("UW=E3Wmo@N'");
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Document.createShell("gp F99");
      List<Node> list0 = Parser.parseFragment("gp F99", (Element) document0, "</");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.html("</");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = new Document("]jA#Y J@");
      TextNode textNode0 = new TextNode("I:nXtl\"UEoI", "AfterFrameset");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.html("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      document0.appendChild(document0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("3~5){AKL1? |%A5Xt-", false);
      // Undeclared exception!
      document0.html((OutputStreamWriter) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("LF%rBY{=Nh", "LF%rBY{=Nh");
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#~C<", "[:>J'4OB");
      // Undeclared exception!
      try { 
        document0.html((CharArrayWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~C", "~C");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parse("#root", "org.jsoup.parser.CharacterReader");
      Element element0 = document0.head();
      List<Node> list0 = document0.childNodesCopy();
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parse("[:>J'4OB", "[:>J'4OB");
      Element element0 = document0.head();
      element0.setSiblingIndex((-2259));
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("J", "body");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s%#C'8`jP|Ey", "s%#C'8`jP|Ey");
      Comment comment0 = new Comment("s%#C'8`jP|Ey");
      Element element0 = document0.doClone(comment0);
      document0.appendTo(element0);
      Pattern pattern0 = Pattern.compile("]jA#Y J@", 0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText(pattern0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Document.createShell("gH");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Tag tag0 = Tag.valueOf("value");
      Element element0 = new Element(tag0, "value");
      Attributes attributes0 = element0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "value", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsMatchingText("53[Ea6T8a7cnSN`c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 53[Ea6T8a7cnSN`c
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Element element0 = new Element("1etl_-0+zI");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parse("</", "zy^dHQ0(wu 8t");
      DocumentType documentType0 = new DocumentType("a RwW&", "cgpe!&o-M4bWHt>vP*", "cgpe!&o-M4bWHt>vP*", "</");
      document0.parentNode = (Node) documentType0;
      Element element0 = document0.body();
      // Undeclared exception!
      try { 
        element0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = new Document("=H>Yw4");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("%@LH..h{V;?@t><(An");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: %@LH..h{V;?@t><(An
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.doClone(document0);
      element0.appendTo(document0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("org.jsoup.select.CombiningEvaluator$Or");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.doClone(document0);
      element0.appendTo(document0);
      // Undeclared exception!
      try { 
        document0.getElementsByTag("org.jsoup.select.Evaluator$IsFirstOfType");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":nth-child(%d)", ":nth-child(%d)");
      // Undeclared exception!
      try { 
        document0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("?EQd3{sw", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "?EQd3{sw", attributes0);
      DataNode dataNode0 = DataNode.createFromEncoded("?EQd3{sw", "Pattern syntax error: ");
      Element element0 = formElement0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        element0.getElementsByIndexGreaterThan(23);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("?4=2GkXa$#FRzO;Ro", "7Z#6E=zFl");
      CDataNode cDataNode0 = new CDataNode("attributeDoubleValueCharsSorted");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.getElementsByIndexEquals(205);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.doClone(document0);
      element0.appendTo(document0);
      // Undeclared exception!
      try { 
        document0.getElementsByClass("v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Tag tag0 = Tag.valueOf("HtK<55QXl@k");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "CdataSection", attributes0);
      // Undeclared exception!
      try { 
        element0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("H$;P9J5>g/!md", "Insert position out of bounds.");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("noframes", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(":'H8)!iJ.I", parseSettings0);
      Element element0 = new Element(tag0, "]VP-3x2A25Tc2K`S}?", attributes0);
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueNot("&xv ", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("]jA#Y J@", "#root");
      Element element0 = document0.doClone((Node) null);
      Document document1 = new Document("org.jsoup.nodes.Element$2");
      document1.appendChild(element0);
      Pattern pattern0 = Pattern.compile("+", (-324));
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueMatching("#root", pattern0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("og.jsoup.nod.-lement$NodeLit", "og.jsoup.nod.-lement$NodeLit");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("og.jsoup.nod.-lement$NodeLit", "og.jsoup.nod.-lement$NodeLit");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Document.createShell("5bmv,4B\"#G^g");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("#root", "Gm(gA,OC#RtJ ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: Gm(gA,OC#RtJ 
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("org.jsoup.nodes.Element$NodeList", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("", "]jA#Y J@");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("]jA#Y J@", parseSettings0);
      Element element0 = new Element(tag0, "]jA#Y J@", attributes0);
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeStarting("]jA#Y J@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("]jA#Y J@", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parse("v|", "v|");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("v%?nq;IYvpcdK:g", "v%?nq;IYvpcdK:g");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      CDataNode cDataNode0 = new CDataNode("span");
      document1.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document1.elementSiblingIndex();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("multiple", "multiple");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.dataNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parse("5bmv,4B\"#G^g", "5bmv,4B\"#G^g");
      Element element0 = document0.head();
      Element element1 = element0.toggleClass("5bmv,4B\"#G^g");
      // Undeclared exception!
      try { 
        element1.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'head.java.lang.String@0000000052': unexpected token at '@0000000052'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("HtK<55QXl@k", "HtK<55QXl@k");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]ja#y j@", "Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.child(62);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 62, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("textarea");
      FormElement formElement0 = new FormElement(tag0, "]jA#Y J@", attributes0);
      // Undeclared exception!
      try { 
        formElement0.child((-2438));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.doClone(document0);
      Element element1 = element0.appendChild(document0);
      // Undeclared exception!
      try { 
        document0.before((Node) element1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parse("value", "value");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.CombiningEvaluator$Or");
      Document document1 = (Document)document0.appendChild(document0);
      // Undeclared exception!
      document1.attr("org.jsoup.select.CombiningEvaluator$Or", "oev[R{@0,e\"G/G");
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Document.createShell("5bmv,4B\"#G^g");
      // Undeclared exception!
      try { 
        document0.attr((String) null, " 2Wk");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Element element0 = new Element("]jA#Y J@");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("]jA#Y J@", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("p8fiz");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      Element element1 = element0.doClone(formElement0);
      // Undeclared exception!
      try { 
        element1.appendTo(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Element element0 = new Element("multiple");
      Element element1 = element0.val("multiple");
      element1.childNodes = null;
      // Undeclared exception!
      try { 
        element0.appendText(">=):*<2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("T?8I-xtPyf/~]%e", "T?8I-xtPyf/~]%e");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.appendElement("org.jsoup.select.CombiningEvaluator$Or");
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document0 = parser1.parseInput("=", "=");
      // Undeclared exception!
      try { 
        document0.appendElement("5p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("la=>y[P*SN\" P", "org.jsoup.select.CombiningEvaluator$Or");
      DataNode dataNode0 = DataNode.createFromEncoded("org.jsoup.select.Evaluator$CssNthEvaluator", "org.jsoup.select.Evaluator$CssNthEvaluator");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        document0.appendChild(element0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Document document0 = new Document("pG}9jxUSsyM<KA");
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("pG}9jxUSsyM<KA", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "pG}9jxUSsyM<KA", attributes0);
      Element element0 = document0.doClone(formElement0);
      // Undeclared exception!
      try { 
        document0.appendChild(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$7BZ<Hc>", "$7BZ<Hc>");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.append("$7BZ<Hc>");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("?EQd3{sw", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "?EQd3{sw", attributes0);
      // Undeclared exception!
      try { 
        formElement0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.doClone(document0);
      // Undeclared exception!
      try { 
        element0.after((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.after("|jys%{3z{4#ja6rz4");
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.doClone(document0);
      // Undeclared exception!
      try { 
        element0.after("org.jsoup.select.CombiningEvaluator$Or");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O^@pV", "O^@pV");
      DocumentType documentType0 = new DocumentType((String) null, ":prev*%s", ":prev*%s", "org.jsoup.nodes.DocumentType");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.after("O^@pV");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "org.jsoup.nodes.Element$1", (Attributes) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "5bmv,4B\"#G^g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = new Document("Z,TL*8bte_,81");
      document0.html((OutputStreamWriter) null);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Element element0 = new Element("&@qE__");
      element0.toggleClass("7::7R~Q<;)iW*jKqG#m");
      Element element1 = element0.toggleClass("Pattern syntax error: ");
      element1.hasClass("&amp;?");
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("class", "class");
      Tag tag0 = Tag.valueOf("class");
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      formElement0.hasClass("class");
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("id");
      Element element0 = new Element(tag0, "K&Nj:zY5", attributes0);
      element0.hasClass("]jA#Y @");
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("class", "class");
      Tag tag0 = Tag.valueOf("class");
      Element element0 = new Element(tag0, "org.jsoup.select.CombiningEvaluator$Or", attributes0);
      element0.hasClass("@ns->;ko@=");
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(":nth-child(%d)", "");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Document.createShell("5bmv,4B\"#G^g");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Tag tag0 = Tag.valueOf("value");
      Element element0 = new Element(tag0, "value");
      Element element1 = element0.text("value");
      element1.hasText();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element$NodeList");
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.doClone(document0);
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=`yQ7.Q", "Insert position out of bounds.");
      document0.appendChild(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.doClone(document0);
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000079 value csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.doClone(document0);
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Element element0 = document0.body();
      element0.append(" LV");
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parse("bIcY<c-at9DqH*A9", ".");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parse(".", ".");
      Pattern pattern0 = Pattern.compile(".");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$7BZ<Hc>", "$7BZ<Hc>");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      document0.empty();
      Element element0 = document0.doClone(document0);
      element0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("class");
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      formElement0.baseUri();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$7BZ<Hc>", "$7BZ<Hc>");
      Pattern pattern0 = Pattern.compile("address", 239);
      document0.getElementsByAttributeValueMatching("class", pattern0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Element element0 = new Element("multiple");
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Element element0 = new Element("Loj)=Wy $yM");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("]jA#Y J@", "org.jsopselect.Combiningvaluator$Or");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings0);
      document0.html();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parse("v#&a>3p\"", "v#&a>3p\"");
      document0.updateMetaCharsetElement(true);
      document0.normalise();
      document0.html();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000038 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 listing iso_646.irv:1991 iso646-us ibm367 646 us", "java.lang.string@0000000038 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 listing iso_646.irv:1991 iso646-us ibm367 646 us");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parse("v#&a>3p\"", "v#&a>3p\"");
      document0.title("]I-FiFerq3S~iCiDx`");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Element element0 = new Element("multiple");
      MockFileWriter mockFileWriter0 = new MockFileWriter("multiple", false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      element0.outerHtmlHead(mockFileWriter0, (-42648592), document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "s+", attributes0);
      element0.val("CXa\"O3VV)DI");
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("textarea");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.CombiningEvaluator$Or", attributes0);
      formElement0.val();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$7BZ<Hc>", "$7BZ<Hc>");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      document0.hasClass("$7BZ<Hc>");
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Document document0 = new Document("*7}jENa%>H/jBBrK@8");
      document0.classNames(set0);
      document0.hasClass("646");
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("class", "class");
      Tag tag0 = Tag.valueOf("class");
      FormElement formElement0 = new FormElement(tag0, "", attributes1);
      formElement0.getElementsByClass("class");
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parse("hcj", "java.lang.string@0000000008 class csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      CDataNode cDataNode0 = new CDataNode("java.lang.string@0000000008 class csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      document0.prependChild(cDataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("gu<!K7jRlRH1d7~$K!", "L$lkZ>4<Hc>");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("?EQd3{sw", "?EQd3{sw");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = new Document("                    ");
      TextNode textNode0 = new TextNode("                    ", "u");
      document0.appendChild(textNode0);
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parse("v#&a>3p\"", "v#&a>3p\"");
      Document document1 = Document.createShell("v#&a>3p\"");
      Element element0 = document1.head();
      element0.appendChild(document0);
      document0.html();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("oW2lhFDE9jDcSWK<2");
      Element.preserveWhitespace(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("multiple", "multiple");
      CDataNode cDataNode0 = new CDataNode("multiple");
      document0.appendChild(cDataNode0);
      document0.getElementsContainingOwnText("multiple");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":nth-child(%d)", " ");
      document0.title("=$;v");
      Pattern pattern0 = Pattern.compile("]fq6", 62);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parse("v#&a>3p\"", "v#&a>3p\"");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      Comment comment0 = new Comment("meta[name=charset]");
      nodeArray0[5] = (Node) comment0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parse("                    ", "                    ");
      TextNode textNode0 = TextNode.createFromEncoded("                    ");
      Element element0 = document0.appendChild(textNode0);
      element0.text("                    ");
      Pattern pattern0 = Pattern.compile("                    ");
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parse("<html>\n <head></head>\n <body>\n  #~C&lt;\n </body>\n</html>", "Sfn=i#<]^yF6s");
      Pattern pattern0 = Pattern.compile("Sfn=i#<]^yF6s", 13);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$7BZ<Hc>", "?:L*121_dHIL");
      Pattern pattern0 = Pattern.compile("?:L*121_dHIL", 0);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[:>J'4OB", "java.lang.string@0000000088 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 $7bz<hc> ibm367 646 us");
      DataNode dataNode0 = DataNode.createFromEncoded("Insert position out of bounds.", "insert position out of address");
      document0.prependChild(dataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parse("v|", "v|");
      document0.getElementById("<html>\n <head></head>\n <body>\n  v|\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.doClone(document0);
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Document.createShell("5bmv,4B\"#G^g");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Tag tag0 = Tag.valueOf("value");
      Element element0 = new Element(tag0, "value");
      Element element1 = element0.appendElement("value");
      element1.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=`yQ7.Q", "Insert position out of bounds.");
      document0.appendChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Document.createShell("cass");
      Element element0 = document0.body();
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("?4=2GkXa$#FRzO;Ro", "7Z#6E=zFl");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CominNngEvaluator$Or", "org.jsoup.select.CominNngEvaluator$Or");
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">", "m.ltiple");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals("m.ltiple", element0.baseUri());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      document0.appendTo(document0);
      Elements elements0 = document0.siblingElements();
      assertFalse(elements0.isEmpty());
      assertEquals("org.jsoup.select.CombiningEvaluator$Or", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      document0.siblingElements();
      assertEquals("org.jsoup.select.CombiningEvaluator$Or", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Document.createShell("8a~I[ECx(k");
      Element element0 = document0.body();
      element0.after("8a~I[ECx(k");
      String string0 = element0.cssSelector();
      assertEquals("html > body:nth-child(2)", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("org.jsoup.select.CombiningEvaluator$Or", element0.baseUri());
      assertEquals("html > body", string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("HtK<55QXl@k", "z");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        document0.insertChildren(1618, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "");
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1676), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#~C<", "[:>J'4OB");
      Elements elements0 = document0.nextElementSiblings();
      // Undeclared exception!
      try { 
        document0.insertChildren(46, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parse("      ", "      ");
      List<DataNode> list0 = document0.dataNodes();
      // Undeclared exception!
      try { 
        document0.insertChildren((-114), (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parse("%*gg2ugQb", "=`yQ7.Q");
      LinkedHashSet<CDataNode> linkedHashSet0 = new LinkedHashSet<CDataNode>();
      Element element0 = document0.insertChildren((-2), (Collection<? extends Node>) linkedHashSet0);
      assertEquals("=`yQ7.Q", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = new Document("=`yQ7.Q");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      assertEquals("=`yQ7.Q", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("=`yQ7.Q", "Q&hB\"V98cFP)WnRt");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("Q&hB\"V98cFP)WnRt", document0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.body();
      Element element1 = document0.doClone(element0);
      assertTrue(element1.hasParent());
      
      element1.firstElementSibling();
      assertEquals("org.jsoup.select.CombiningEvaluator$Or", element1.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Document.createShell("u");
      Element element0 = document0.selectFirst("html");
      assertEquals("u", element0.baseUri());
      assertEquals(2, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("id");
      Element element0 = new Element(tag0, "K&Nj:zY5", attributes0);
      element0.is("7gT");
      assertEquals("K&Nj:zY5", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.before("*s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Document.createShell(".");
      document0.getElementsByAttribute("HtK<55QXl@k");
      assertEquals(1, document0.childNodeSize());
      assertEquals(".", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Document.createShell("]jA#Y J@");
      document0.getElementsByAttributeValueNot("]jA#Y J@", ".");
      assertEquals(1, document0.childNodeSize());
      assertEquals("]jA#Y J@", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("org.jsoup.select.CombiningEvaluator$Or");
      FormElement formElement0 = new FormElement(tag0, "267VT", attributes0);
      Element element0 = formElement0.shallowClone();
      assertEquals("267VT", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.doSetBaseUri((String) null);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      document0.getElementsByAttributeValueContaining("org.jsoup.select.CombiningEvaluator$Or", "o~=FB0_/k");
      assertEquals("org.jsoup.select.CombiningEvaluator$Or", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Document.createShell("u");
      Elements elements0 = document0.getElementsContainingText("html");
      assertTrue(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
      assertEquals("u", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding((String) null, "Pattern syntax error: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = new Document("=`yQ7.Q");
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      document0.is((Evaluator) evaluator_IsEmpty0);
      assertEquals("=`yQ7.Q", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("?4=2GkXa$#FRzO;Ro", "7Z#6E=zFl");
      Elements elements0 = document0.getElementsByIndexEquals(205);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertEquals("7Z#6E=zFl", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getElementsByAttributeStarting("$uHA[#X");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      Element element0 = document0.prependElement("vec9;J,97uP");
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("org.jsoup.select.CombiningEvaluator$Or", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Element element0 = new Element("value");
      Elements elements0 = element0.getElementsByIndexLessThan(2147483645);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      // Undeclared exception!
      try { 
        document0.after("!|!RO3-uZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Document.createShell("u");
      document0.select("u");
      assertEquals(1, document0.childNodeSize());
      assertEquals("u", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("id");
      Element element0 = new Element(tag0, "K&Nj:zY5", attributes0);
      element0.getElementsByAttributeValueStarting("K&Nj:zY5", "]jA#Y @");
      assertEquals("K&Nj:zY5", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("mja3|ubp`j@&W|5p{#X", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$7BZ<Hc>", "$7BZ<Hc>");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      document0.wholeText();
      assertEquals("Pattern syntax error: ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = new Document("hZ(?L*8bte_,8o");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Element element0 = new Element("multiple");
      Elements elements0 = element0.getElementsByIndexGreaterThan((-1539));
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("?EQd3{sw", "?EQd3{sw");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("L$zkZ+<Hc>", "L$zkZ+<Hc>");
      Elements elements0 = document0.getElementsContainingOwnText("L$zkZ+<Hc>");
      assertEquals("L$zkZ+<Hc>", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("]jA#Y J@", parseSettings0);
      Element element0 = new Element(tag0, "]jA#Y J@", attributes0);
      element0.dataset();
      assertEquals("]jA#Y J@", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.CombiningEvauato$Or", "org.jsoup.select.CombiningEvauato$Or");
      Element element0 = document0.child(0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.select.CombiningEvauato$Or", element0.baseUri());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Document.createShell(".");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals(".", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.prependText("_H]l^*vyY+Gl&Gw.EL");
      element0.getElementsMatchingText("-W7I5uY4");
      assertEquals(2, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      document0.appendText("JJ");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$Or", "org.jsoup.select.CombiningEvaluator$Or");
      // Undeclared exception!
      try { 
        document0.wrap("$7BZ<Hc>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.id();
  }
}
