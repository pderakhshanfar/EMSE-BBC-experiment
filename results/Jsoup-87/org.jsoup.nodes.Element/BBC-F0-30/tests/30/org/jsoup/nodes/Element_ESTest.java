/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 22:00:38 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("JOh", "");
      document0.prependText("JOh");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = new Document("");
      document0.getElementsByAttributeValueNot("PcauJis8\"", "Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = new Document("3_%k:h+W-4iv>Z,V");
      Element element0 = document0.doClone(document0);
      element0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "br");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(mockPrintWriter0, 13, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Tag name must not be empty.");
      Element element0 = new Element(tag0, "Tag name must not be empty.", (Attributes) null);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("JOh", "");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("JOh", "");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3_%k:h+W-4iv>Z,V", "3_%k:h+W-4iv>Z,V");
      Element element0 = document0.doClone(document0);
      element0.wrap("-");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3qeK9T", "3qeK9T");
      Element element0 = document0.head();
      element0.wrap("!?m?:TaRpf*QP6");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parse("3yeK9T", "Insert position out of bounds.");
      Element element0 = document0.body();
      element0.val("26%");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parse("3yeKT", "Insert position out of bounds.");
      Element element0 = document0.createElement("J}&$ K;x0");
      element0.val("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parse("!?m?:TaRpf*QP6", "!?m?:TaRpf*QP6");
      document0.val("org.jsoup.select.Evaluator$CssNthEvaluator");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("f]AcEiy67IgC", "^");
      Element element0 = document0.prependElement("^");
      document0.prepend("h_O");
      element0.toggleClass("f]AcEiy67IgC");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3qeK9T", "3qeK9T");
      Element element0 = document0.head();
      element0.toggleClass("3qeK9T");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parse("id", "id");
      Element element0 = document0.body();
      element0.text("");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parse("id", "id");
      document0.text("");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("html", "dY79pyGpY#cG(~_bT'");
      Element element0 = document0.body();
      element0.unwrap();
      element0.text();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+EP865m_e'", "f]AcEiy67IgC");
      Element element0 = document0.body();
      element0.tagName("VDl{H\"&w$!k5");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+EP865m_e'", "f]AcEiy67IgC");
      Element element0 = document0.head();
      element0.tagName("VDl{H\"&w$!k5");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parse("3yeKT", "Insert position out of bounds.");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+EP865m_e'", "f]AcEiy67IgC");
      Element element0 = document0.head();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f]AcEiy+67IgC", "f]AcEiy+67IgC");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("JOh", "");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = new Document("id");
      document0.selectFirst("J0");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("var", "3_%k:h+W-4iv>Z,V");
      document0.appendElement("k");
      document0.selectFirst("k");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = new Document("3yea90");
      document0.normalise();
      document0.selectFirst("html");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3yeK9T", "3yeK9T");
      document0.select("output");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evalu(tor$AttributeWithValueNot", "org.jsoup.select.Evalu(tor$AttributeWithValueNot");
      Element element0 = document0.body();
      element0.removeClass("org.jsoup.select.Evalu(tor$AttributeWithValueNot");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parse("3yeKT", "Insert position out of bounds.");
      Element element0 = document0.createElement("J}&$ K;x0");
      element0.removeClass(".>j%j5K8ZBx7=dIb");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("u", "u");
      Element element0 = document0.createElement("F");
      Element element1 = document0.appendChild(element0);
      document0.appendChild(element1);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3_%k:h+W-4iv>Z,V", "3_%k:h+W-4iv>Z,V");
      document0.appendTo(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = new Document("f]AcEiy67IgC");
      document0.appendChild(document0);
      document0.prependText("f]AcEiy67IgC");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "f]AcEiy67IgC");
      Element element0 = document0.head();
      element0.prependText("");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = new Document("body");
      document0.prependElement("body");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "br");
      Document document1 = document0.clone();
      document1.appendChild(document0);
      document0.prependChild(document1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      document0.setSiblingIndex((-1));
      Element element0 = document0.createElement(".");
      document0.prependChild(element0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parse("F", "F");
      Element element0 = document0.head();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "class");
      document0.siblingIndex = 23;
      document0.prepend("");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parse("3yeKT", "3yeKT");
      Element element0 = document0.head();
      element0.prepend("3yKT");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parse("3yeKT", "Insert position out of bounds.");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "f]AcEiy67IgC");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parse("id", "id");
      document0.appendChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f]AcEiy67IgC", "Tag name must not be empty.");
      Element element0 = document0.prependElement("f]AcEiy67IgC");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parse("Insert position out of bounds.", "P${Y.]2t08");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3yeK9T", "3yeK9T");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parse("3yeK9T", "Insert position out of bounds.");
      Element element0 = document0.body();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = new Document("pdpIF\"?sQ?DzP^V");
      Document document1 = Parser.parse("-DciT<0Kf", "-DciT<0Kf");
      document0.appendTo(document1);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("html", "dY79pyGpY#cG(~_bT'");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parse("id", "id");
      Evaluator.ContainsText evaluator_ContainsText0 = new Evaluator.ContainsText("id");
      document0.is((Evaluator) evaluator_ContainsText0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Element element0 = new Element("id");
      element0.is("id");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("org.jsoup.select.Evaluator$IndexLessThan", "cite");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f]AcEiy+67IgC", "f]AcEiy+67IgC");
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3_%k:h+W-4iv>Z,V", "3_%k:h+W-4iv>Z,V");
      Element element0 = document0.doClone(document0);
      Elements elements0 = document0.getElementsByAttributeValueMatching("id", "3_%k:h+W-4iv>Z,V");
      element0.insertChildren((-1), (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = new Document("");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fU", "fU");
      Element element0 = document0.prependElement("fU");
      element0.html((MockFileWriter) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = new Document("3_%k:h+W-4iv>Z,V");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parse("3yeK9T", "Insert position out of bounds.");
      Element element0 = document0.body();
      element0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3_%k:h+W-4iv>Z,V", "3_%k:h+W-4iv>Z,V");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Document.createShell("}_?foi? Aj! Px");
      Pattern pattern0 = Pattern.compile("}_?foi? Aj! Px", (-1730597175));
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parse("3yeKT", "3yeKT");
      Pattern pattern0 = Pattern.compile("3yeKT");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = new Document("id");
      Pattern pattern0 = Pattern.compile("RiG=l;G:-&#");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("utf", "utf");
      Pattern pattern0 = Pattern.compile("utf");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      document0.getElementsMatchingOwnText("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.getElementsContainingOwnText("!pax\"P0aNkI8bY[g*QO");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "f]AcEiy67IgC");
      document0.getElementsByTag("Lg%Y|rW]5#`emQ");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f]AcEiy67IgC", "Tag name must not be empty.");
      document0.prependElement("f]AcEiy67IgC");
      document0.getElementsByTag("f]AcEiy67IgC");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsByIndexLessThan(14);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("org.jsoup.select.Evaluator$AttributeKeyPair", "cite");
      document0.getElementsByIndexGreaterThan(0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.getElementsByIndexEquals(1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", " ");
      document0.getElementsByAttributeValueNot(" ", " ");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parse("3yeK9T", "Insert position out of bounds.");
      document0.appendChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parse("2@Ou6jj", "2@Ou6jj");
      document0.siblingIndex = (-2249);
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parse(":fM{Z2-6R&da~#", "org.jsoup.nodes.Element");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "br");
      Element element0 = document0.appendChild(document0);
      document0.doClone(element0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parse("2@Ou6jj", "2@Ou6jj");
      Element element0 = document0.head();
      DataNode dataNode0 = DataNode.createFromEncoded("&hi1A=9!", "&hi1A=9!");
      element0.doClone(dataNode0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3qeK9T", "3qeK9T");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=", "=");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parse("id", "id");
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Element element0 = document0.head();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse("3yeKT", "Insert position out of bounds.");
      document0.appendChild(document0);
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Element element0 = new Element("J}&$ K;x0");
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "b2T}");
      document0.addClass("");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = new Document("id");
      document0.toggleClass("id");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(":hw:?st$", ":hw:?st$");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Pattern syntax error: ");
      Element element0 = new Element(tag0, "Pattern syntax error: ");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f]AcEiy67IgC", "Tag name must not be empty.");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3yeK9T", "3yeK9T");
      Element element0 = document0.head();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = new Document("f]AcEiy67IgC");
      Element element0 = document0.appendChild(document0);
      document0.before((Node) element0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = new Document("3_%k:h+W-4iv>Z,V");
      Document document1 = (Document)document0.doClone(document0);
      document1.before("3_%k:h+W-4iv>Z,V");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("var", "3_%k:h+W-4iv>Z,V");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Document.createShell("inxogv^w&JJ87;");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parse("3yeK9T", "Insert position out of bounds.");
      document0.val("26%");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "f]AcEiy67IgC");
      Element element0 = document0.body();
      element0.attr("org.jsoup.selct.Evluator$Id", false);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      Document document1 = document0.clone();
      document0.appendChild(document1);
      document1.attr("3lf", "body");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3yeK9T", "3yeK9T");
      Element element0 = document0.head();
      element0.attr(" <[&BK2rs%", " mmmt>WOn3C_H0");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Tag tag0 = Tag.valueOf(";F");
      FormElement formElement0 = new FormElement(tag0, "2", (Attributes) null);
      formElement0.attr("", "WpJ.a7X>p0xL`5;%7W");
      formElement0.getElementsByAttributeValueMatching("", "");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Document.createShell("}_?foi? Aj! Px");
      Element element0 = document0.head();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Document.createShell("inxogv^w&JJ87;");
      Element element0 = document0.body();
      element0.appendText("inxogv^w&JJ87;");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = new Document("var");
      document0.appendElement("<html>\n <head></head>\n <body>\n  var\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.appendElement("html");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3qeK9T", "3qeK9T");
      Element element0 = document0.head();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("?ISJ'", "html");
      document0.tagName("html");
      document0.append("-e1CFj~TWw2'S'ucxdp");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "lr");
      Document document1 = document0.clone();
      document0.appendChild(document1);
      document1.append("#root");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("utf", "utf");
      Element element0 = document0.createElement("^");
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3yeK9T", "3yeK9T");
      Element element0 = document0.head();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rbf2dRw'eXA]T([qJ", "rbf2dRw'eXA]T([qJ");
      document0.appendTo(document0);
      CDataNode cDataNode0 = new CDataNode("wG',-@XY7\"zSQ{BQ\"");
      document0.after((Node) cDataNode0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = new Document("pdpIF\"?sQ?DzP^V");
      Document document1 = Parser.parse("-DciT<0Kf", "-DciT<0Kf");
      document0.appendTo(document1);
      document0.after("pdpIF\"?sQ?DzP^V");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.head();
      element0.after("K9hLh");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "br");
      Element element0 = document0.body();
      element0.addClass("body");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("utf", "utf");
      document0.appendChild(document0);
      document0.addClass("");
      document0.hasClass("4");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = new Document("3_%k:h+W-4iv>Z,V");
      document0.addClass("CommentEndDash");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = new Document("f]AcEiy67IgC");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.wrap("f]AcEiy67IgC");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3_%k:h+W-4iv>Z,V", "3_%k:h+W-4iv>Z,V");
      // Undeclared exception!
      try { 
        document0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.val("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rb|f2dRw'e/A]T([qJ", "rb|f2dRw'e/A]T([qJ");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("EL7z", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("EL7z");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "EL7z", attributes0);
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(2147483645);
      List<Node> list0 = Parser.parseFragment("ETa3L^7q", (Element) pseudoTextElement0, "#a8VDb>k'", parseErrorList0);
      pseudoTextElement0.childNodes = list0;
      // Undeclared exception!
      try { 
        pseudoTextElement0.text("g2hU8p]};B/6(!OX$");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$AttributeKeyPair");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Element element0 = new Element("f]aceiy67igc");
      // Undeclared exception!
      try { 
        element0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3qeK9T", "3qeK9T");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.tagName("id");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Tag tag0 = Tag.valueOf("LQnnR-");
      Element element0 = new Element(tag0, "LQnnR-");
      // Undeclared exception!
      try { 
        element0.tagName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.selectFirst("<html>\n <head></head>\n <body>\n </body>\n</html>");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '<html>
         //  <head></head>
         //  <body>
         //  </body>
         // </html>': unexpected token at '<html>
         //  <head></head>
         //  <body>
         //  </body>
         // </html>'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parse("!?m?:TaRpf*QP6", "!?m?:TaRpf*QP6");
      // Undeclared exception!
      try { 
        document0.select("26%");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '26%': unexpected token at '%'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("9te$rvt\"n*r", "9te$rvt\"n*r");
      TextNode textNode0 = new TextNode("UTF-", "d0`>1]R* h~0");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Document.createShell("");
      TextNode textNode0 = TextNode.createFromEncoded("\"V-x", "F");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        Element.preserveWhitespace(element0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Document.createShell("allowfullscreen");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3qeK9T", "3qeK9T");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.prependElement("<!--");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$CssNthEvaluator", "org.jsoup.select.Evaluator$CssNthEvaluator");
      Document document1 = document0.ownerDocument();
      List<Node> list0 = document0.childNodes();
      document1.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.prependChild(document1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = new Document("3_>%k:h+W-4iv>Z,V");
      Element element0 = document0.doClone(document0);
      // Undeclared exception!
      try { 
        document0.prependChild(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = new Document("l$W<W6lOe{");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3yea90", "3yea90");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.prepend("1C`GW0x-TpE[,a");
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parse("<TkCqI>s", "<TkCqI>s");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      Document document0 = Parser.parseBodyFragment("V_M^|zPU*XM", "ch");
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringBuffer0, (-3717), (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "55s:G7-_qUd6.<");
      Charset charset0 = document0.charset();
      ByteBuffer byteBuffer0 = charset0.encode(".t!c0E>UqKS9b>;");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1010);
      // Undeclared exception!
      document0.outerHtmlHead(charBuffer0, 1010, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "br");
      StringBuffer stringBuffer0 = new StringBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(stringBuffer0, (-19), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parse("3yeK9T", "Insert position out of bounds.");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parse("3yeK9T", "Insert position out of bounds.");
      document0.appendChild(document0);
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      // Undeclared exception!
      document0.is((Evaluator) evaluator_IsRoot0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ShVy", "br");
      // Undeclared exception!
      try { 
        document0.is("uaC}/Ycz24Q;[|vtOv");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'uaC}/Ycz24Q;[|vtOv': unexpected token at '}/Ycz24Q;[|vtOv'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3yeK9T", "3yeK9T");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.is("3yeK9T");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parse("3yeKT", "3yeKT");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3qeK9T", "3qeK9T");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.html("3qeK9T");
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("org.jsoup.select.Evaluator$AttributeKeyPair", "cite");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Qvpeek@F4g", "Qvpeek@F4g");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parse("!?m?:TaRpf*QP6", "!?m?:TaRpf*QP6");
      document0.appendTo(document0);
      MockFile mockFile0 = new MockFile("S<#kLbsI", "?L>=]^b@2Do:],c");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      // Undeclared exception!
      document0.html(outputStreamWriter0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("$\"{cQ\"Jid,", "$\"{cQ\"Jid,");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "br");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f]AcEiy67IgC", "f]AcEiy67IgC");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parse("prompt", "prompt");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("ct'F0Jl)DXuM]{O]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: ct'F0Jl)DXuM]{O]
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("utf", "utf");
      TextNode textNode0 = TextNode.createFromEncoded("^", "10$r$tW");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("^");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(")L!p}EAV[d2x1RZ", ")L!p}EAV[d2x1RZ");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText(")L!p}EAV[d2x1RZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: )L!p}EAV[d2x1RZ
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f]AcEiy67IgC", "Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parse("nzeIM}OC{dk%OQQY%(h", "nzeIM}OC{dk%OQQY%(h");
      DataNode dataNode0 = DataNode.createFromEncoded("nzeIM}OC{dk%OQQY%(h", "nzeIM}OC{dk%OQQY%(h");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals((-4097));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f]AcEiy67IgC", "Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+EP865m_e'", "f]AcEiy67IgC");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "j@ l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f]AcEiy67IgC", "Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("<r8", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Element element0 = new Element("org.jsoup.select.Evaluator$AttributeKeyPair");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueMatching("org.jsoup.select.Evaluator$AttributeKeyPair", "uaC}/Ycz24Q;[|vtOv");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: uaC}/Ycz24Q;[|vtOv
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "Ul.F'T");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("*DK'#", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parse("!?m?:TaRpf*QP6", "!?m?:TaRpf*QP6");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining((String) null, "textarea");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("JOh", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("u", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f]AcEiy67IgC", "Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f]AcEiy67IgC", "Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "@B'>;rUonBY>$h#");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = new Document("style");
      Comment comment0 = new Comment("style");
      Element element0 = document0.doClone(comment0);
      // Undeclared exception!
      try { 
        element0.firstElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = new Document("=");
      DataNode dataNode0 = DataNode.createFromEncoded("type", "=");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=", "=");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fU", "fU");
      // Undeclared exception!
      try { 
        document0.child((-647));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = new Document("3_>%k:h+W-4iv>Z,V");
      Document document1 = (Document)document0.doClone(document0);
      // Undeclared exception!
      try { 
        document1.before((Node) document1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parse("!?m?:TaRpf*QP6", "!?m?:TaRpf*QP6");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.before("org.jsoup.select.Evaluator$AttributeKeyPair");
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3qeK9T", "3qeK9T");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.attr("3yeKT", "\u0007S=(NGn{*-O");
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3qeK9T", "3qeK9T");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "<html>\n <head></head>\n <body>\n  3qeK9T\n </body>\n</html>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("utf", "utf");
      Element element0 = document0.createElement("zs");
      element0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{R<<,G>H?}#-l8L-", "{R<<,G>H?}#-l8L-");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3_%k:h+W-4iv>Z,V", "3_%k:h+W-4iv>Z,V");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parse("3yeKT", "Insert position out of bounds.");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.appendElement("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("utf", "utf");
      TextNode textNode0 = TextNode.createFromEncoded("^", "10$r$tW");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.appendChild(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = new Document("");
      CDataNode cDataNode0 = new CDataNode("");
      Node node0 = cDataNode0.doClone(document0);
      // Undeclared exception!
      try { 
        document0.appendChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = new Document("3yeK9T");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.append("3yeK9T");
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parse("K`;@9lIyv8Gnfc(", "6rb6y#HE8qHD");
      Element element0 = document0.body();
      List<Node> list0 = document0.childNodes();
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.append("org.jsoup.select.Elements");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parse("2@Ou6jj", "2@Ou6jj");
      DataNode dataNode0 = DataNode.createFromEncoded("&hi1A=9!", "&hi1A=9!");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        element0.append("G)2tg(>XM|Mz");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$AttributeWithValueNot", "org.jsoup.select.Evaluator$AttributeWithValueNot");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      try { 
        document0.after((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Element element0 = new Element("#root");
      element0.appendChild(element0);
      // Undeclared exception!
      element0.after("name");
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("html", "");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Tag tag0 = Tag.valueOf("head");
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "jcMo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Tag tag0 = Tag.valueOf("LQnnR-");
      Element element0 = new Element(tag0, "LQnnR-");
      StringWriter stringWriter0 = new StringWriter(1);
      element0.html(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3_>%k:h+W-4iv>Z,V", "3_>%k:h+W-4iv>Z,V");
      document0.hasClass("3_>%k:h+W-4iv>Z,V");
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parse("3yeKT", "Insert position out of bounds.");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("style", "org.jsoup.nodes.Element$NodeList");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evalu(tor$AttributeWithValueNot", "org.jsoup.select.Evalu(tor$AttributeWithValueNot");
      Element element0 = document0.body();
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "f]AcEiy67IgC");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3qeK9T", "3qeK9T");
      document0.appendChild(document0);
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "br");
      document0.appendChild(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=", "=");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = new Document("3_>%k:h+W-4iv>Z,V");
      Element element0 = document0.doClone(document0);
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parse("F", "F");
      Element element0 = document0.body();
      element0.html("F");
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("style", "org.jsoup.nodes.Element$NodeList");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parse("id", "id");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parse(":fM{Z2-6R&da~#", "org.jsoup.nodes.Element");
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("org.jsoup.select.Evaluator$AttributeKeyPair", "cite");
      Pattern pattern0 = Pattern.compile("xEyR#<kfX4ig1Q|&O");
      document0.getElementsByAttributeValueMatching("Tag name must not be empty.", pattern0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3_>%k:h+W-4iv>Z,V", "3_>%k:h+W-4iv>Z,V");
      document0.select("html");
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("org.jsoup.select.Evaluator$AttributeKeyPair", "cite");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("utf", "utf");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "f]AcEiy67IgC");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[tC0jxphc-m[b/<", "[tC0jxphc-m[b/<");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      StringBuilder stringBuilder0 = new StringBuilder("(([+-])?(d+)?)n(s*([+-])?s*d+)?");
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringBuilder0, 3015, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3_%k:h+W-4iv>Z,V", "3_%k:h+W-4iv>Z,V");
      // Undeclared exception!
      try { 
        document0.html((MockPrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3_%k:h+W-4iv>Z,V", "3_%k:h+W-4iv>Z,V");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=", "=");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, (-1639040831), document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("utf", "utf");
      Element element0 = document0.createElement("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = new Document("id");
      Element element0 = document0.toggleClass("J0");
      document0.toggleClass("id");
      element0.toggleClass("id");
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parse("id", "id");
      Element element0 = document0.toggleClass("id");
      element0.clearAttributes();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert position out of bounds.", "7*");
      Element element0 = document0.addClass("Insert position out of bounds.");
      element0.hasClass("org.jsoup.select.Evaluator$AttributeWithValueNot");
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("utf", "utf");
      document0.addClass("");
      document0.hasClass("4");
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3yea90", "3yea90");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("   ", "   ");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = new Document("3yeK9T");
      document0.appendChild(document0);
      Element.preserveWhitespace(document0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("", "");
      Element.preserveWhitespace(dataNode0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parse("prompt", "prompt");
      CDataNode cDataNode0 = new CDataNode("prompt");
      document0.appendChild(cDataNode0);
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Document.createShell("3_>%k:h+W-4iv>Z,V");
      document0.title("title");
      document0.getElementsContainingText("3_>%k:h+W-4iv>Z,V");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3eaN90", "3eaN90");
      DataNode dataNode0 = new DataNode("F'-c8|");
      document0.appendChild(dataNode0);
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qjzUPe2 ", "qjzUPe2 ");
      document0.appendText("Doctype");
      document0.getElementsMatchingText("qjzUPe2 ");
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "X\"*JpZ>_c");
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "X\"*JpZ>_c");
      document0.appendChild(element0);
      document0.getElementsMatchingText("X\"*JpZ>_c");
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fU", "fU");
      Element element0 = document0.prependElement("fU");
      document0.appendChild(element0);
      document0.getElementsMatchingText("fU");
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parse("F", "+qc8y");
      Element element0 = document0.prepend("M[il8kL@=Y?8hSxAdgO");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3eaN90", "3eaN90");
      DataNode dataNode0 = new DataNode("F'-c8|");
      document0.appendChild(dataNode0);
      document0.getElementsMatchingText("org.jsoup.select.Evaluator$AllElements");
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3_%k:h+W-4iv>Z,V", "3_%k:h+W-4iv>Z,V");
      document0.getElementById("J}&$ K;x0");
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("utf", "utf");
      document0.reparentChild(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.head();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3_%k:h+W-4iv>Z,V", "3_%k:h+W-4iv>Z,V");
      Element element0 = document0.doClone(document0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Document.createShell("inxogv^w&JJ87;");
      Element element0 = document0.body();
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = new Document("3_%k:h+W-4iv>Z,V");
      Element element0 = document0.doClone(document0);
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parse("B o|_VV*J>NmY+,I8i", "pX$<uN:8e+LKs");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("pX$<uN:8e+LKs", false);
      Element element0 = document0.doClone(xmlDeclaration0);
      // Undeclared exception!
      try { 
        element0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("\"}$*d", parseSettings0);
      Element element0 = new Element(tag0, "L=Lua-%z");
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parse("F", "F");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertFalse(elements0.isEmpty());
      assertEquals("F", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "f]AcEiy67IgC");
      document0.siblingElements();
      assertEquals("f]AcEiy67IgC", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rbf2dRw'eXA]T([qJ", "rbf2dRw'eXA]T([qJ");
      document0.appendTo(document0);
      document0.siblingElements();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parse("F", "F");
      Element element0 = document0.body();
      element0.before("F");
      String string0 = element0.cssSelector();
      assertEquals("html > body:nth-child(4)", string0);
      assertEquals("F", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "b2T}");
      document0.addClass("");
      document0.cssSelector();
      assertEquals("b2T}", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3yeK9T", "3yeK9T");
      Node[] nodeArray0 = new Node[5];
      // Undeclared exception!
      try { 
        document0.insertChildren((-3166), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("JOh", "JOh");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren(160, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren(766, (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("var", "3_%k:h+W-4iv>Z,V");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1211), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f]AcEiy67IgC", "f]AcEiy67IgC");
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      assertEquals("f]AcEiy67IgC", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3eaN90", "3eaN90");
      DataNode dataNode0 = new DataNode("F'-c8|");
      document0.appendChild(dataNode0);
      document0.dataNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "f]AcEiy67IgC");
      document0.prependText("org.jsoup.select.Evaluator$Id");
      document0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "br");
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      document0.is((Evaluator) evaluator_MatchText0);
      assertEquals("br", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3eaN90", "3eaN90");
      DataNode dataNode0 = new DataNode("F'-c8|");
      Element element0 = document0.appendChild(dataNode0);
      Elements elements0 = element0.getElementsByIndexEquals(76);
      assertEquals(1, dataNode0.siblingIndex());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "f]AcEiy67IgC");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-472));
      assertEquals(1, document0.childNodeSize());
      assertEquals("f]AcEiy67IgC", document0.baseUri());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "f]AcEiy67IgC");
      document0.is("html > body");
      assertEquals(1, document0.childNodeSize());
      assertEquals("f]AcEiy67IgC", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3yeK9T", "3yeK9T");
      document0.getAllElements();
      assertEquals("3yeK9T", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parse("F", "F");
      // Undeclared exception!
      try { 
        document0.before("F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bAasefont", "bAasefont");
      document0.getElementsByAttribute("bAasefont");
      assertEquals("bAasefont", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("utf", "utf");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.shallowClone();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=", "=");
      Element element0 = document0.clone();
      assertNotSame(element0, document0);
      assertEquals("=", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parse("!?m?:TaRpf*QP6", "!?m?:TaRpf*QP6");
      document0.doSetBaseUri("!?m?:TaRpf*QP6");
      assertEquals("!?m?:TaRpf*QP6", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$AttributeWithValueNot", "org.jsoup.select.Evaluator$AttributeWithValueNot");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Document.createShell("allowfullscreen");
      document0.getElementsByAttributeValueContaining("CDxx  MG", "t&I$G)3");
      assertEquals("allowfullscreen", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parse("3yeKT", "Insert position out of bounds.");
      Elements elements0 = document0.getElementsContainingText("3yeKT");
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f]AcEiy67IgC", "Tag name must not be empty.");
      Elements elements0 = document0.getElementsByClass("org.jsoup.nodes.Element$NodeList");
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parse("3yeK9T", "Insert position out of bounds.");
      document0.getElementsByAttributeValueEnding("3yeK9T", "Insert position out of bounds.");
      assertEquals("Insert position out of bounds.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bAasefont", "bAasefont");
      document0.attr("bAasefont", "=W+o0]'y.Re@vw");
      Elements elements0 = document0.getElementsByAttribute("bAasefont");
      assertEquals(1, elements0.size());
      assertEquals("bAasefont", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3_%k:h+W-4iv>Z,V", "3_%k:h+W-4iv>Z,V");
      // Undeclared exception!
      try { 
        document0.wrap("-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!?m?:TaRpf*QP6", "A Rm7t7s(3Uz)|");
      document0.getElementsMatchingOwnText("A Rm7t7s(3Uz)|");
      assertEquals("A Rm7t7s(3Uz)|", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parse("id", "id");
      document0.getElementsByAttributeStarting("id");
      assertEquals("id", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "lr");
      Elements elements0 = document0.getElementsByIndexLessThan((-1110026255));
      assertEquals("lr", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      // Undeclared exception!
      try { 
        document0.after("K9hLh");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parse("}XKc5k!NHP]?Mb?g;", "fnF");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parse("F", "F");
      Element element0 = document0.body();
      assertNotNull(element0);
      
      String string0 = element0.cssSelector();
      assertEquals("F", element0.baseUri());
      assertEquals("html > body", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", " ");
      document0.getElementsByAttributeValueStarting(" ", " ");
      assertEquals(1, document0.childNodeSize());
      assertEquals(" ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = new Document("body");
      document0.getElementsByAttributeValue("body", "u");
      assertEquals("body", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f]AcEiy67IgC", "Tag name must not be empty.");
      Element element0 = document0.attr("f]AcEiy67IgC", true);
      assertEquals(1, element0.childNodeSize());
      assertEquals("Tag name must not be empty.", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3yeK9T", "3yeK9T");
      String string0 = document0.wholeText();
      assertEquals("3yeK9T", string0);
      assertEquals("3yeK9T", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = new Document("3_>%k:h+W-4iv>Z,V");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "3yeKT");
      Elements elements0 = document0.getElementsContainingOwnText("Insert position out of bounds.");
      assertEquals(1, document0.childNodeSize());
      assertEquals("3yeKT", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Tag tag0 = Tag.valueOf("body");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "J+CVUW6X", attributes0);
      pseudoTextElement0.dataset();
      assertEquals("J+CVUW6X", pseudoTextElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val(" n)ae#*vB");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f]AcEiy67IgC", "Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.child(4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Document.createShell("inxogv^w&JJ87;");
      document0.previousElementSiblings();
      assertEquals("inxogv^w&JJ87;", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "3yeKT");
      document0.appendText("J}&$ K;x0");
      document0.getElementsMatchingText("");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$AttributeWithValueNot", "org.jsoup.select.Evaluator$AttributeWithValueNot");
      document0.children();
  }
}
