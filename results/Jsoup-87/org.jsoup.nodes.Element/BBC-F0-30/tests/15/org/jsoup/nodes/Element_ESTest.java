/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 21:46:52 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Spliterator;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;
import sun.nio.cs.US_ASCII;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("asR&HWeEi;2Us Pl\"", "asR&HWeEi;2Us Pl\"");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("asR&HWeEi;2Us Pl\"", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("asR&HWeEi;2Us Pl\"", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      document0.siblingIndex = (-1433);
      assertEquals((-1433), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("asR&HWeEi;2Us Pl\"", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("asR&HWeEi;2Us Pl\"", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.addClass("asR&HWeEi;2Us Pl\"");
      assertEquals((-1433), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("asR&HWeEi;2Us Pl\"", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("asR&HWeEi;2Us Pl\"", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals((-1433), document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("asR&HWeEi;2Us Pl\"", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("asR&HWeEi;2Us Pl\"", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.toggleClass("asR&HWeEi;2Us Pl\"");
      assertEquals((-1433), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("asR&HWeEi;2Us Pl\"", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("asR&HWeEi;2Us Pl\"", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("asR&HWeEi;2Us Pl\"", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("asR&HWeEi;2Us Pl\"", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals((-1433), document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      boolean boolean0 = document0.hasClass("]BY}K5 7pxQ5");
      assertEquals((-1433), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("asR&HWeEi;2Us Pl\"", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("asR&HWeEi;2Us Pl\"", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", " ");
      assertEquals(" ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(" ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByAttributeValueEnding(" ", " ");
      assertEquals(" ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(" ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(" ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(" ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Elements elements1 = document0.getElementsByAttributeValueNot(" ", " ");
      assertEquals(" ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(" ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = new Document("Tag name musf not be empty.");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("Tag name musf not be empty.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Tag name musf not be empty.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      document0.siblingIndex = (-111);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("Tag name musf not be empty.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-111), document0.siblingIndex());
      assertEquals("Tag name musf not be empty.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.toggleClass("Tag name musf not be empty.");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("Tag name musf not be empty.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-111), document0.siblingIndex());
      assertEquals("Tag name musf not be empty.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("Tag name musf not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Tag name musf not be empty.", document1.location());
      assertEquals((-111), document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      boolean boolean0 = document0.hasClass("Tag name musf not be empty.");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("Tag name musf not be empty.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-111), document0.siblingIndex());
      assertEquals("Tag name musf not be empty.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertSame(document0, document1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "i";
      Element element0 = new Element("i");
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("i", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("i", element0.tagName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Attributes attributes0 = element0.attributes();
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("i", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("i", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      List<Node> list0 = element0.childNodes();
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("i", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("i", element0.tagName());
      assertFalse(element0.hasParent());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Elements elements0 = element0.getElementsByAttributeStarting("i");
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("i", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("i", element0.tagName());
      assertFalse(element0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      element0.childNodes = list0;
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("i", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("i", element0.tagName());
      assertFalse(element0.hasParent());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, element0.childNodes.size());
      assertTrue(element0.childNodes.isEmpty());
      
      String string1 = "footer";
      Pattern pattern0 = Pattern.compile("footer");
      assertEquals("footer", pattern0.pattern());
      assertEquals("footer", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNotNull(pattern0);
      
      Elements elements1 = element0.getElementsByAttributeValueMatching("Tj:*vm^7B", pattern0);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("i", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("i", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("footer", pattern0.pattern());
      assertEquals("footer", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      String string2 = element0.val();
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("i", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("i", element0.tagName());
      assertFalse(element0.hasParent());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = element0.hasClass("footer");
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("i", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("i", element0.tagName());
      assertFalse(element0.hasParent());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        element0.appendText("i");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      String string0 = parseSettings0.normalizeAttribute("7y:\"\"k@L &D-x7(");
      assertEquals("7y:\"\"k@l &d-x7(", string0);
      assertNotNull(string0);
      
      String string1 = parseSettings0.normalizeTag("7y:\"\"k@l &d-x7(");
      assertTrue(string1.equals((Object)string0));
      assertEquals("7y:\"\"k@l &d-x7(", string1);
      assertNotNull(string1);
      
      Tag tag0 = Tag.valueOf("7y:\"\"k@L &D-x7(", parseSettings0);
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "7y:\"\"k@L &D-x7(");
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertNotNull(element0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      Document document0 = Parser.parse("zxMHQ='!w/", "org.jsoup.parser.HtmlTreeBuilder");
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Elements elements0 = document0.parents();
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element1 = document0.body();
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      assertNotNull(element1);
      
      Elements elements1 = element1.getElementsByTag("7y:\"\"k@l &d-x7(");
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(element1.equals((Object)element0));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(element1, element0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Element element2 = element1.insertChildren(0, (Collection<? extends Node>) elements1);
      assertEquals("body", element2.tagName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals(1, element2.siblingIndex());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(element2.equals((Object)element0));
      assertFalse(element1.equals((Object)element0));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(element2, element0);
      assertSame(element2, element1);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertNotSame(elements1, elements0);
      assertNotNull(element2);
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Element element3 = (Element)element1.traverse(nodeVisitor0);
      assertEquals("body", element3.tagName());
      assertEquals(1, element3.childNodeSize());
      assertTrue(element3.hasParent());
      assertTrue(element3.isBlock());
      assertEquals("body", element3.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element3.baseUri());
      assertEquals(1, element3.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertFalse(element3.equals((Object)element0));
      assertFalse(element1.equals((Object)element0));
      assertSame(element3, element2);
      assertNotSame(element3, element0);
      assertSame(element3, element1);
      assertSame(element1, element3);
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotNull(element3);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors((-1110026255));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      
      Parser parser2 = parser0.setTrackErrors(0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertNotNull(parser2);
      
      Document document1 = parser2.parseInput("", "");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document1.val("</");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        document2.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("9CM\"", parseSettings0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals("9cm\"", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("9cm\"", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attribute attribute0 = new Attribute("9CM\"", "9CM\"", attributes0);
      assertEquals(0, attributes0.size());
      assertEquals("9CM\"", attribute0.getKey());
      assertEquals("9CM\"", attribute0.getValue());
      assertNotNull(attribute0);
      
      Attribute attribute1 = attribute0.clone();
      assertEquals(0, attributes0.size());
      assertEquals("9CM\"", attribute0.getKey());
      assertEquals("9CM\"", attribute0.getValue());
      assertEquals("9CM\"", attribute1.getValue());
      assertEquals("9CM\"", attribute1.getKey());
      assertTrue(attribute1.equals((Object)attribute0));
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertNotNull(attribute1);
      
      Attributes attributes1 = attributes0.put(attribute1);
      assertEquals(1, attributes0.size());
      assertEquals("9CM\"", attribute0.getKey());
      assertEquals("9CM\"", attribute0.getValue());
      assertEquals("9CM\"", attribute1.getValue());
      assertEquals("9CM\"", attribute1.getKey());
      assertEquals(1, attributes1.size());
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "9CM\"", attributes1);
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals("9cm\"", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("9cm\"", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals("9CM\"", attribute0.getKey());
      assertEquals("9CM\"", attribute0.getValue());
      assertEquals("9CM\"", attribute1.getValue());
      assertEquals("9CM\"", attribute1.getKey());
      assertEquals(1, attributes1.size());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("9cm\"", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("9CM\"", pseudoTextElement0.baseUri());
      assertEquals("9cm\"", pseudoTextElement0.nodeName());
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertNotNull(pseudoTextElement0);
      
      Elements elements0 = pseudoTextElement0.getElementsByAttribute("9CM\"");
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals("9cm\"", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("9cm\"", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals("9CM\"", attribute0.getKey());
      assertEquals("9CM\"", attribute0.getValue());
      assertEquals("9CM\"", attribute1.getValue());
      assertEquals("9CM\"", attribute1.getKey());
      assertEquals(1, attributes1.size());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("9cm\"", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("9CM\"", pseudoTextElement0.baseUri());
      assertEquals("9cm\"", pseudoTextElement0.nodeName());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes1, attributes0);
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "DkERl_Sl";
      Document document0 = Parser.parseBodyFragment("DkERl_Sl", "DkERl_Sl");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("DkERl_Sl", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("DkERl_Sl", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "DkERl_Sl");
      assertEquals("DkERl_Sl", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(8, charBuffer0.limit());
      assertEquals(8, charBuffer0.length());
      assertEquals(8, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotNull(document_OutputSettings2);
      
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, (-642), document_OutputSettings2);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = new Document("zuBPK/BH@)om7UKE");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("zuBPK/BH@)om7UKE", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zuBPK/BH@)om7UKE", document0.baseUri());
      assertNotNull(document0);
      
      document0.parentNode = (Node) document0;
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("zuBPK/BH@)om7UKE", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zuBPK/BH@)om7UKE", document0.baseUri());
      assertTrue(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      Elements elements0 = document0.previousElementSiblings();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("zuBPK/BH@)om7UKE", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zuBPK/BH@)om7UKE", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document document1 = (Document)document0.parent();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("zuBPK/BH@)om7UKE", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zuBPK/BH@)om7UKE", document0.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("zuBPK/BH@)om7UKE", document1.baseUri());
      assertEquals("zuBPK/BH@)om7UKE", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = new Document("zuBPK/BH@)om7UKE");
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("zuBPK/BH@)om7UKE", document0.baseUri());
      assertEquals("zuBPK/BH@)om7UKE", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      document0.parentNode = (Node) document0;
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("zuBPK/BH@)om7UKE", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("zuBPK/BH@)om7UKE", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      Elements elements0 = document0.previousElementSiblings();
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("zuBPK/BH@)om7UKE", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("zuBPK/BH@)om7UKE", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document1 = Parser.parseBodyFragmentRelaxed("gt3i,v;cjk7nn<", "{u]p");
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("{u]p", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("{u]p", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document0.appendTo(document1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")~Zc@>K/RJ\"GwR;tV$", ")~Zc@>K/RJ\"GwR;tV$");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(")~Zc@>K/RJ\"GwR;tV$", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")~Zc@>K/RJ\"GwR;tV$", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      document0.childNodes = null;
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(")~Zc@>K/RJ\"GwR;tV$", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")~Zc@>K/RJ\"GwR;tV$", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      
      boolean boolean1 = document0.hasClass(")~Zc@>K/RJ\"GwR;tV$");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(")~Zc@>K/RJ\"GwR;tV$", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")~Zc@>K/RJ\"GwR;tV$", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(")~Zc@>K/RJ\"GwR;tV$", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")~Zc@>K/RJ\"GwR;tV$", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = new Document("zuBPK/BH@)om7UKE");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("zuBPK/BH@)om7UKE", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zuBPK/BH@)om7UKE", document0.location());
      assertNotNull(document0);
      
      document0.siblingIndex = 2352;
      assertEquals(2352, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("zuBPK/BH@)om7UKE", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zuBPK/BH@)om7UKE", document0.location());
      
      document0.parentNode = (Node) document0;
      assertEquals(2352, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("zuBPK/BH@)om7UKE", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zuBPK/BH@)om7UKE", document0.location());
      assertTrue(document0.parentNode.hasParent());
      assertEquals(2352, document0.parentNode.siblingIndex());
      
      Elements elements0 = document0.previousElementSiblings();
      assertEquals(2352, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("zuBPK/BH@)om7UKE", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zuBPK/BH@)om7UKE", document0.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String string0 = document0.nodeName();
      assertEquals(2352, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("zuBPK/BH@)om7UKE", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zuBPK/BH@)om7UKE", document0.location());
      assertEquals("#document", string0);
      assertNotNull(string0);
      
      Document document1 = document0.clone();
      assertEquals(2352, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("zuBPK/BH@)om7UKE", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zuBPK/BH@)om7UKE", document0.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("zuBPK/BH@)om7UKE", document1.location());
      assertEquals("zuBPK/BH@)om7UKE", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document0.before((Node) document1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2352, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Element element0 = new Element("textarea");
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.nodeName());
      assertEquals("textarea", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.html("GSkw");
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.nodeName());
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("textarea", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Elements elements0 = element1.getAllElements();
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.nodeName());
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("textarea", element1.tagName());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(elements0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("textarea");
      assertNotNull(mockPrintWriter0);
      
      element1.outerHtml((Appendable) mockPrintWriter0);
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.nodeName());
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("textarea", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Elements elements1 = element1.previousElementSiblings();
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.nodeName());
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("textarea", element1.tagName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(elements1.equals((Object)elements0));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      boolean boolean0 = Element.preserveWhitespace(element1);
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.nodeName());
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("textarea", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cs", "cs");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("cs", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("cs", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.createElement("cs");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("cs", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("cs", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(element0.hasParent());
      assertEquals("cs", element0.baseUri());
      assertEquals("cs", element0.nodeName());
      assertEquals("cs", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Document document1 = (Document)document0.appendChild(element0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("cs", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("cs", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("cs", element0.baseUri());
      assertEquals("cs", element0.nodeName());
      assertEquals("cs", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("cs", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("cs", document1.location());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document1.getElementsMatchingText("cs");
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("cs", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("cs", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("cs", element0.baseUri());
      assertEquals("cs", element0.nodeName());
      assertEquals("cs", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("cs", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("cs", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      
      Element element1 = element0.prependChild(document1);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("cs", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("cs", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("cs", element0.baseUri());
      assertEquals("cs", element0.nodeName());
      assertEquals("cs", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("cs", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("cs", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("cs", element1.baseUri());
      assertEquals("cs", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("cs", element1.tagName());
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(document1, document0);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      String string0 = element0.tagName();
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("cs", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("cs", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("cs", element0.baseUri());
      assertEquals("cs", element0.nodeName());
      assertEquals("cs", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertEquals("cs", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Element element0 = new Element("textarea");
      assertEquals("", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      Element element1 = element0.html("%[bCvuJ-TT=1Z*?k");
      assertEquals("", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("textarea", element1.nodeName());
      assertEquals("textarea", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("hSx Q7mp");
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = new Locale("hSx Q7mp", "value");
      assertEquals("VALUE", locale0.getCountry());
      assertEquals("hsx q7mp_VALUE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("hsx q7mp", locale0.getLanguage());
      assertNotNull(locale0);
      
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "rJ", (Object[]) null);
      assertEquals("VALUE", locale0.getCountry());
      assertEquals("hsx q7mp_VALUE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("hsx q7mp", locale0.getLanguage());
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      Element element2 = element1.appendElement("textarea");
      assertEquals("", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertEquals(2, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("textarea", element1.nodeName());
      assertEquals(2, element1.childNodeSize());
      assertEquals("textarea", element1.tagName());
      assertEquals("", element2.baseUri());
      assertEquals("textarea", element2.tagName());
      assertEquals(1, element2.siblingIndex());
      assertEquals("textarea", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.isBlock());
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertNotSame(element1, element2);
      assertSame(element1, element0);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertNotNull(element2);
      
      element1.outerHtml((Appendable) mockPrintWriter0);
      assertEquals("", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertEquals(2, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("textarea", element1.nodeName());
      assertEquals(2, element1.childNodeSize());
      assertEquals("textarea", element1.tagName());
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element2));
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertNotSame(element1, element2);
      assertSame(element1, element0);
      assertSame(mockPrintWriter0, printWriter0);
      
      Elements elements0 = element1.previousElementSiblings();
      assertEquals("", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertEquals(2, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("textarea", element1.nodeName());
      assertEquals(2, element1.childNodeSize());
      assertEquals("textarea", element1.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element2));
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertNotSame(element1, element2);
      assertSame(element1, element0);
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Element element0 = new Element("textarea");
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.html("2SkN");
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.tagName());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("textarea", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("textarea", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("textarea");
      assertNotNull(mockPrintWriter0);
      
      element0.outerHtml((Appendable) mockPrintWriter0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.tagName());
      assertSame(element0, element1);
      
      Element element2 = element0.appendElement("textarea");
      assertEquals(2, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals("textarea", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertEquals("textarea", element2.tagName());
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "~j3QDs1ml[T%m{I(";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~j3QDs1ml[T%m{I(");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Element element0 = new Element("8pFG");
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("8pFG", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("8pFG", element0.nodeName());
      assertNotNull(element0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8pFG");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      Elements elements0 = element0.getElementsByClass("zu45:6_%.HNrp(=");
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("8pFG", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("8pFG", element0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string1 = "Fo8%#Y ";
      Element element1 = element0.appendText("Fo8%#Y ");
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("8pFG", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("8pFG", element0.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("8pFG", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("8pFG", element1.tagName());
      assertFalse(element1.isBlock());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      element1.siblingIndex = (-1278);
      assertEquals((-1278), element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("8pFG", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("8pFG", element0.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("8pFG", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("8pFG", element1.tagName());
      assertEquals((-1278), element1.siblingIndex());
      assertFalse(element1.isBlock());
      
      Element element2 = element1.attr("[Y/]Z0|r+s", "*");
      assertEquals((-1278), element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("8pFG", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("8pFG", element0.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("8pFG", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("8pFG", element1.tagName());
      assertEquals((-1278), element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("8pFG", element2.nodeName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals("8pFG", element2.tagName());
      assertEquals((-1278), element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertNotNull(element2);
      
      Element element3 = element2.attr("8pFG", true);
      assertEquals((-1278), element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("8pFG", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("8pFG", element0.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("8pFG", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("8pFG", element1.tagName());
      assertEquals((-1278), element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("8pFG", element2.nodeName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals("8pFG", element2.tagName());
      assertEquals((-1278), element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertEquals((-1278), element3.siblingIndex());
      assertEquals("8pFG", element3.tagName());
      assertFalse(element3.isBlock());
      assertEquals("8pFG", element3.nodeName());
      assertEquals("", element3.baseUri());
      assertFalse(element3.hasParent());
      assertEquals(1, element3.childNodeSize());
      assertSame(element0, element3);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element3);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertSame(element2, element1);
      assertSame(element2, element3);
      assertSame(element2, element0);
      assertSame(element3, element0);
      assertSame(element3, element2);
      assertSame(element3, element1);
      assertNotNull(element3);
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) element0;
      // Undeclared exception!
      try { 
        element2.addChildren(5561, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5561, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Document.createShell(" ");
      assertEquals("#document", document0.nodeName());
      assertEquals(" ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(" ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass(" ");
      assertEquals("#document", document0.nodeName());
      assertEquals(" ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(" ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" ", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(" ", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.toggleClass(" ");
      assertEquals("#document", document0.nodeName());
      assertEquals(" ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(" ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" ", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(" ", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      boolean boolean0 = document0.hasClass("]]>");
      assertEquals("#document", document0.nodeName());
      assertEquals(" ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(" ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parse("BM<V~d!6!9c", "BM<V~d!6!9c");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("BM<V~d!6!9c", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("BM<V~d!6!9c", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      List<Node> list0 = document0.childNodes();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("BM<V~d!6!9c", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("BM<V~d!6!9c", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      document0.childNodes = list0;
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("BM<V~d!6!9c", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("BM<V~d!6!9c", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document0.childNodes.isEmpty());
      assertEquals(1, document0.childNodes.size());
      
      // Undeclared exception!
      try { 
        document0.prependElement("BM<V~d!6!9c");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("</", "</");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByIndexLessThan(810);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      document0.setSiblingIndex(810);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(810, document0.siblingIndex());
      assertFalse(document0.hasParent());
      
      String string0 = ":parent%s";
      Elements elements1 = document0.previousElementSiblings();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(810, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Elements elements2 = document0.getElementsByClass("!A;");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(810, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      
      Document document1 = document0.clone();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(810, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      MockFile mockFile0 = new MockFile("</");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      assertNotNull(mockFileWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      Charset charset0 = document0.charset();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(810, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.clone();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      
      // Undeclared exception!
      document0.outerHtmlHead(mockFileWriter0, 2147483645, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Element element0 = new Element("dkerl_ol");
      assertEquals("dkerl_ol", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("dkerl_ol", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      element0.setSiblingIndex((-268));
      assertEquals("dkerl_ol", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals((-268), element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("dkerl_ol", element0.nodeName());
      assertEquals("", element0.baseUri());
      
      Element element1 = element0.appendText("dkerl_ol");
      assertEquals("dkerl_ol", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals((-268), element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("dkerl_ol", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals("dkerl_ol", element1.nodeName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals((-268), element1.siblingIndex());
      assertEquals("dkerl_ol", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Element element2 = element0.val("dkerl_ol");
      assertEquals("dkerl_ol", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals((-268), element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("dkerl_ol", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals("dkerl_ol", element2.nodeName());
      assertEquals("dkerl_ol", element2.tagName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertFalse(element2.hasParent());
      assertEquals((-268), element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = new Document("cs");
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("cs", document0.location());
      assertEquals("cs", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("cs");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("cs", document0.location());
      assertEquals("cs", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("cs", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("cs", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("cs", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = document0.prependElement("cs");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("cs", document0.location());
      assertEquals("cs", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("cs", element1.tagName());
      assertEquals("cs", element1.baseUri());
      assertEquals("cs", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      assertNotNull(element1);
      
      List<DataNode> list0 = element1.dataNodes();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("cs", document0.location());
      assertEquals("cs", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("cs", element1.tagName());
      assertEquals("cs", element1.baseUri());
      assertEquals("cs", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      assertNotNull(list0);
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      Element element2 = element1.nextElementSibling();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("cs", document0.location());
      assertEquals("cs", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("cs", element1.tagName());
      assertEquals("cs", element1.baseUri());
      assertEquals("cs", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("cs", element2.baseUri());
      assertEquals("cs", element2.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("cs", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Element element0 = new Element("textarea");
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.nodeName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("textarea");
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter1);
      
      element0.outerHtml((Appendable) mockPrintWriter1);
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.nodeName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      
      Tag tag0 = element0.tag();
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.nodeName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertNotNull(tag0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000048 br name must not be empty.");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Element element0 = document1.head();
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(element0);
      
      Element element1 = element0.nextElementSibling();
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertFalse(element1.equals((Object)element0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      
      Element element2 = element1.removeClass("{x1laFX*t");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertTrue(element2.hasParent());
      assertEquals("body", element2.nodeName());
      assertEquals(1, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.tagName());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertNotSame(element2, element0);
      assertSame(element2, element1);
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Document.createShell("Tagname must not be emty.");
      assertEquals("Tagname must not be emty.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tagname must not be emty.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("Tagname must not be emty.");
      assertEquals("Tagname must not be emty.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tagname must not be emty.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("Tagname must not be emty.", document1.location());
      assertEquals("Tagname must not be emty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document1.attr("Tagname must not be emty.", true);
      assertEquals("Tagname must not be emty.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tagname must not be emty.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("Tagname must not be emty.", document1.location());
      assertEquals("Tagname must not be emty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("Tagname must not be emty.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Tagname must not be emty.", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      boolean boolean0 = document1.hasClass("Tagname must not be emty.");
      assertEquals("Tagname must not be emty.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tagname must not be emty.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("Tagname must not be emty.", document1.location());
      assertEquals("Tagname must not be emty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(boolean0);
      
      Elements elements0 = document0.getElementsByAttributeStarting("Tagname must not be emty.");
      assertEquals("Tagname must not be emty.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tagname must not be emty.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Document.createShell("cs");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("cs", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("cs", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("cs");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("cs", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("cs", document0.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("cs", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("cs", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.toggleClass("cs");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("cs", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("cs", document0.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("cs", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("cs", document2.location());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      boolean boolean0 = document0.hasClass("cs");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("cs", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("cs", document0.baseUri());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertTrue(boolean0);
      
      Elements elements0 = document2.getElementsByIndexEquals((-2717));
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("cs", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("cs", document0.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("cs", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("cs", document2.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Document.createShell("aBFj?");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("aBFj?", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("aBFj?", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("UKR;d");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("aBFj?", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("aBFj?", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("aBFj?", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("aBFj?", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      boolean boolean0 = document1.hasClass("cs");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("aBFj?", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("aBFj?", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("aBFj?", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("aBFj?", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(boolean0);
      
      String string0 = document1.data();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("aBFj?", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("aBFj?", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("aBFj?", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("aBFj?", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Document document2 = (Document)document0.toggleClass("cs");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("aBFj?", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("aBFj?", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("aBFj?", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("aBFj?", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      boolean boolean1 = document0.hasClass("W!");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("aBFj?", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("aBFj?", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(boolean1 == boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Document.createShell("ag name must not be empty.");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ag name must not be empty.", document0.location());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("cs");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ag name must not be empty.", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ag name must not be empty.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("ag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.toggleClass("ag name must not be empty.");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ag name must not be empty.", document0.location());
      assertFalse(document2.isBlock());
      assertEquals("ag name must not be empty.", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("ag name must not be empty.", document2.location());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      boolean boolean0 = document2.hasClass("cs");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ag name must not be empty.", document0.location());
      assertFalse(document2.isBlock());
      assertEquals("ag name must not be empty.", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("ag name must not be empty.", document2.location());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "&YUa'U@'}?zAUg_!kVN";
      Document document0 = new Document("&YUa'U@'}?zAUg_!kVN");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("&YUa'U@'}?zAUg_!kVN", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("&YUa'U@'}?zAUg_!kVN", document0.location());
      assertNotNull(document0);
      
      TextNode textNode0 = TextNode.createFromEncoded("character is not a valid unicode code point", "html");
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Document document1 = (Document)document0.doClone(textNode0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("&YUa'U@'}?zAUg_!kVN", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("&YUa'U@'}?zAUg_!kVN", document0.location());
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("&YUa'U@'}?zAUg_!kVN", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("&YUa'U@'}?zAUg_!kVN", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      String string1 = "";
      String string2 = textNode0.toString();
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("character is not a valid unicode code point", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        document1.elementSiblingIndex();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Document.createShell("ag name must not be empty.");
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ag name must not be empty.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("ag name must not be empty.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("cs");
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ag name must not be empty.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("ag name must not be empty.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("ag name must not be empty.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("ag name must not be empty.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.toggleClass("ag name must not be empty.");
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ag name must not be empty.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("ag name must not be empty.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("ag name must not be empty.", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("ag name must not be empty.", document2.location());
      assertEquals("#root", document2.tagName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      boolean boolean0 = document0.hasClass("ag name must not be empty.");
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ag name must not be empty.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("ag name must not be empty.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(boolean0);
      
      Document document3 = (Document)document0.prependText("ag name must not be empty.");
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("ag name must not be empty.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("ag name must not be empty.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("ag name must not be empty.", document3.location());
      assertEquals(2, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("ag name must not be empty.", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertNotNull(document3);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parse("=J", "=J");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("=J", document0.location());
      assertNotNull(document0);
      
      String string0 = document0.nodeName();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("=J", document0.location());
      assertEquals("#document", string0);
      assertNotNull(string0);
      
      Elements elements0 = document0.nextElementSiblings();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("=J", document0.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string1 = document0.text();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("=J", document0.location());
      assertFalse(string1.equals((Object)string0));
      assertEquals("=J", string1);
      assertNotNull(string1);
      
      document0.setSiblingIndex((-2224));
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("=J", document0.location());
      
      Elements elements1 = document0.getElementsByAttributeValueEnding(":parent%s", "!A;");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("=J", document0.location());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Elements elements2 = document0.previousElementSiblings();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("=J", document0.location());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      
      Elements elements3 = document0.getElementsByClass(":parent%s");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("=J", document0.location());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements2));
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertNotNull(elements3);
      
      Document document1 = document0.clone();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("=J", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("=J", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("=J", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      MockFile mockFile0 = new MockFile("html");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      assertNotNull(mockFileWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(2147483645);
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(2147483645, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(2147483645, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(2147483645, document_OutputSettings2.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotNull(document_OutputSettings2);
      
      Charset charset0 = document0.charset();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("=J", document0.location());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(2147483645, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("=J", document0.location());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(2147483645, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(2147483645, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(2147483645, document_OutputSettings2.indentAmount());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(document0.equals((Object)document1));
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotNull(document_OutputSettings3);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(2147483645, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("=J", document0.location());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(2147483645, document_OutputSettings4.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(2147483645, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(2147483645, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(2147483645, document_OutputSettings2.indentAmount());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document0, document1);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotNull(document_OutputSettings4);
      
      document1.outerHtmlHead(mockFileWriter0, 440, document_OutputSettings4);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(2147483645, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("=J", document0.location());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(2147483645, document_OutputSettings4.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("=J", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("=J", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("html", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("html", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(2147483645, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(2147483645, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(2147483645, document_OutputSettings2.indentAmount());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document0, document1);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      
      Elements elements4 = document0.getElementsByAttributeValueContaining("!A;", "=J");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("=J", document0.location());
      assertEquals(0, elements4.size());
      assertTrue(elements4.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements4.equals((Object)elements3));
      assertTrue(elements4.equals((Object)elements2));
      assertTrue(elements4.equals((Object)elements1));
      assertTrue(elements4.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(elements4, elements2);
      assertNotSame(elements4, elements1);
      assertNotSame(elements4, elements0);
      assertNotSame(elements4, elements3);
      assertNotNull(elements4);
      
      Document document2 = (Document)document0.empty();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("=J", document0.location());
      assertEquals((-2224), document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("=J", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("=J", document2.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("nW", "nW");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("nW", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("nW", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Element element0 = new Element("nW");
      assertEquals("nW", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("nW", element0.nodeName());
      assertNotNull(element0);
      
      String string0 = element0.id();
      assertEquals("nW", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("nW", element0.nodeName());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Document document1 = (Document)document0.appendChild(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("nW", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("nW", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("nW", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("nW", element0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("nW", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("nW", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Pattern pattern0 = Pattern.compile("nW", 1774);
      assertEquals("nW", pattern0.pattern());
      assertEquals(1774, pattern0.flags());
      assertEquals("nW", pattern0.toString());
      assertNotNull(pattern0);
      
      Elements elements0 = element0.getElementsByAttributeValueMatching("", pattern0);
      assertEquals("nW", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("nW", element0.nodeName());
      assertEquals("nW", pattern0.pattern());
      assertEquals(1774, pattern0.flags());
      assertEquals("nW", pattern0.toString());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = document0.getElementsMatchingText("nW");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("nW", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("nW", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(elements1.isEmpty());
      assertEquals(3, elements1.size());
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Element element1 = element0.lastElementSibling();
      assertEquals("nW", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("nW", element0.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("nW", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("nW", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document0.quirksMode(document_QuirksMode0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("nW", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("nW", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("nW", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("nW", document2.location());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      // Undeclared exception!
      try { 
        document1.before((Node) document2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Document.createShell("ag name must not be empty.");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ag name must not be empty.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("ag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Attributes attributes0 = document0.attributes();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ag name must not be empty.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("ag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Document document1 = (Document)document0.toggleClass("ag name must not be empty.");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ag name must not be empty.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("ag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("ag name must not be empty.", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ag name must not be empty.", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      boolean boolean0 = document1.hasClass("ag name must not be empty.");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ag name must not be empty.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("ag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("ag name must not be empty.", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ag name must not be empty.", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(boolean0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("ag name must not be empty.");
      assertNotNull(mockFileWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotNull(document_OutputSettings3);
      
      // Undeclared exception!
      try { 
        document1.outerHtmlTail(mockFileWriter0, (-14), document_OutputSettings3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "!Dc!I\\uW&^L)2%Y,O`";
      Element element0 = new Element(string0);
      assertFalse(element0.isBlock());
      assertEquals("!Dc!I\\uW&^L)2%Y,O`", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("!Dc!I\\uW&^L)2%Y,O`", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        element0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("'gWffpXqZYKrK", parseSettings0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("'gwffpxqzykrk", tag0.toString());
      assertEquals("'gwffpxqzykrk", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.clone();
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotNull(attributes1);
      
      Attributes attributes2 = attributes1.put("lfM8W5I", true);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertNotNull(attributes2);
      
      Attributes attributes3 = attributes2.put("lfM8W5I", "'gWffpXqZYKrK");
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes3);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertNotNull(attributes3);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Tag name must not be empty.", attributes3);
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("'gwffpxqzykrk", tag0.toString());
      assertEquals("'gwffpxqzykrk", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals("'gwffpxqzykrk", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("'gwffpxqzykrk", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("Tag name must not be empty.", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertNotNull(pseudoTextElement0);
      
      // Undeclared exception!
      try { 
        pseudoTextElement0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Element element0 = new Element("dkerl_sl");
      assertFalse(element0.isBlock());
      assertEquals("dkerl_sl", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("dkerl_sl", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      String string0 = element0.val();
      assertFalse(element0.isBlock());
      assertEquals("dkerl_sl", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("dkerl_sl", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Elements elements0 = element0.select("dkerl_sl");
      assertFalse(element0.isBlock());
      assertEquals("dkerl_sl", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("dkerl_sl", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      boolean boolean0 = element0.hasClass("\"G(hz.= 7w1u>,");
      assertFalse(element0.isBlock());
      assertEquals("dkerl_sl", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("dkerl_sl", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parse("z$=rIgu]E`|v\"y", "z$=rIgu]E`|v\"y");
      assertEquals("z$=rIgu]E`|v\"y", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("z$=rIgu]E`|v\"y", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("z$=rIgu]E`|v\"y", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("z$=rIgu]E`|v\"y", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$=rIgu]E`|v\"y", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      Elements elements0 = element0.previousElementSiblings();
      assertEquals("z$=rIgu]E`|v\"y", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("z$=rIgu]E`|v\"y", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$=rIgu]E`|v\"y", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      
      Tag tag0 = element0.tag();
      assertEquals("z$=rIgu]E`|v\"y", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("z$=rIgu]E`|v\"y", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$=rIgu]E`|v\"y", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertEquals("body", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isKnownTag());
      assertNotNull(tag0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text("");
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      document1.parentNode = (Node) document0;
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.parentNode.siblingIndex());
      assertTrue(document1.parentNode.hasParent());
      
      Document document2 = document0.clone();
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = document1.parentNode;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document2;
      nodeArray0[3] = document1.parentNode;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      document2.addChildren(nodeArray0);
      assertEquals(2, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals(6, nodeArray0.length);
      
      Set<String> set0 = document1.classNames();
      assertEquals(2, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(set0.contains(""));
      assertNotNull(set0);
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      Document document3 = (Document)document0.previousElementSibling();
      assertEquals(2, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("", document3.location());
      assertEquals("", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotNull(document3);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Document.createShell("IWs$@yaw;");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("IWs$@yaw;", document0.location());
      assertEquals("IWs$@yaw;", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      String string0 = document0.className();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("IWs$@yaw;", document0.location());
      assertEquals("IWs$@yaw;", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Element element0 = document0.body();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("IWs$@yaw;", document0.location());
      assertEquals("IWs$@yaw;", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("IWs$@yaw;", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Elements elements0 = element0.previousElementSiblings();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("IWs$@yaw;", document0.location());
      assertEquals("IWs$@yaw;", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("IWs$@yaw;", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      
      Element element1 = element0.wrap("V");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("IWs$@yaw;", document0.location());
      assertEquals("IWs$@yaw;", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("IWs$@yaw;", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("IWs$@yaw;", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Element element0 = new Element("wQb2H#arH=Hbt");
      assertFalse(element0.isBlock());
      assertEquals("wQb2H#arH=Hbt", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("wQb2H#arH=Hbt", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration(":%BDS", "dkerl_sl", true);
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertNotNull(xmlDeclaration0);
      
      Element element1 = element0.appendChild(xmlDeclaration0);
      assertFalse(element0.isBlock());
      assertEquals("wQb2H#arH=Hbt", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("wQb2H#arH=Hbt", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertTrue(xmlDeclaration0.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("wQb2H#arH=Hbt", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertEquals("wQb2H#arH=Hbt", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      List<Node> list0 = element1.siblingNodes();
      assertFalse(element0.isBlock());
      assertEquals("wQb2H#arH=Hbt", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("wQb2H#arH=Hbt", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertTrue(xmlDeclaration0.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("wQb2H#arH=Hbt", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertEquals("wQb2H#arH=Hbt", element1.tagName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(list0);
      
      Elements elements0 = element0.getElementsMatchingText("dkerl_sl");
      assertFalse(element0.isBlock());
      assertEquals("wQb2H#arH=Hbt", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("wQb2H#arH=Hbt", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(element0, element1);
      assertNotNull(elements0);
      
      Pattern pattern0 = Pattern.compile("dkerl_sl", 2068);
      assertEquals("dkerl_sl", pattern0.toString());
      assertEquals(2068, pattern0.flags());
      assertEquals("dkerl_sl", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements1 = element1.getElementsMatchingOwnText(pattern0);
      assertFalse(element0.isBlock());
      assertEquals("wQb2H#arH=Hbt", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("wQb2H#arH=Hbt", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertTrue(xmlDeclaration0.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("wQb2H#arH=Hbt", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertEquals("wQb2H#arH=Hbt", element1.tagName());
      assertEquals("dkerl_sl", pattern0.toString());
      assertEquals(2068, pattern0.flags());
      assertEquals("dkerl_sl", pattern0.pattern());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      document0.title("Tag name must not be empty.");
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.appendText("Tag name must not be empty.");
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document1.getElementsMatchingText("Tag name must not be empty.");
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors((-1879438484));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      
      Document document0 = parser1.parseInput("Insert position out of bounds.", "Insert position out of bounds.");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.text("W");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("dkerl_sl", "head");
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("head", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Element element0 = new Element("textarea");
      assertEquals("textarea", element0.nodeName());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("dkerl_sl");
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter1);
      
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "textarea");
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter0.equals((Object)mockPrintWriter0));
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter0, printWriter0);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(mockPrintWriter1, printWriter0);
      assertSame(printWriter0, mockPrintWriter1);
      assertNotSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      element0.outerHtml((Appendable) printWriter0);
      assertEquals("textarea", element0.nodeName());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter0.equals((Object)printWriter0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter0.equals((Object)mockPrintWriter0));
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter0, printWriter0);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(mockPrintWriter1, printWriter0);
      assertSame(printWriter0, mockPrintWriter1);
      assertNotSame(printWriter0, mockPrintWriter0);
      
      String string0 = document0.ownText();
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("head", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("dkerl_sl", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "Tag name must not be empty.";
      Document document0 = Document.createShell("Tag name must not be empty.");
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      DataNode dataNode0 = new DataNode("Tag name must not be empty.", "IDR|~+SQ-L/");
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertNotNull(dataNode0);
      
      DataNode dataNode1 = dataNode0.setWholeData("IDR|~+SQ-L/");
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode1.hasParent());
      assertEquals(0, dataNode1.siblingIndex());
      assertEquals("#data", dataNode1.nodeName());
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode1, dataNode0);
      assertNotNull(dataNode1);
      
      document0.parentNode = (Node) dataNode1;
      assertEquals("Tag name must not be empty.", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode1.hasParent());
      assertEquals(0, dataNode1.siblingIndex());
      assertEquals("#data", dataNode1.nodeName());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      
      // Undeclared exception!
      try { 
        document0.after("Tag name must not be empty.");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("dkerl_sl", "head");
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("head", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("textarea");
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("head", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.tagName());
      assertEquals("head", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("dkerl_sl");
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter1);
      
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "textarea");
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter0.equals((Object)mockPrintWriter0));
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter0, printWriter0);
      assertSame(mockPrintWriter1, printWriter0);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(printWriter0, mockPrintWriter1);
      assertNotSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      element0.outerHtml((Appendable) printWriter0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("head", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.tagName());
      assertEquals("head", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter0.equals((Object)printWriter0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter0.equals((Object)mockPrintWriter0));
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter0, printWriter0);
      assertSame(mockPrintWriter1, printWriter0);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(printWriter0, mockPrintWriter1);
      assertNotSame(printWriter0, mockPrintWriter0);
      
      List<DataNode> list0 = document0.dataNodes();
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("head", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string0 = document0.ownText();
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("head", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("dkerl_sl", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ctZK)(\f", "ctZK)(\f");
      assertEquals("ctZK)(\f", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("ctZK)(\f", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Comment comment0 = new Comment("article");
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertNotNull(comment0);
      
      boolean boolean0 = linkedHashSet0.add(comment0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertTrue(linkedHashSet0.contains(comment0));
      assertTrue(boolean0);
      
      Document document1 = (Document)document0.insertChildren((-2), (Collection<? extends Node>) linkedHashSet0);
      assertEquals("ctZK)(\f", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("ctZK)(\f", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(document1.hasParent());
      assertEquals("ctZK)(\f", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ctZK)(\f", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertTrue(linkedHashSet0.contains(comment0));
      assertNotNull(document1);
      
      boolean boolean1 = document0.hasText();
      assertEquals("ctZK)(\f", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("ctZK)(\f", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(boolean1 == boolean0);
      assertSame(document0, document1);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "s";
      Document document0 = Parser.parseBodyFragmentRelaxed("s", "s");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      List<Node> list0 = document0.childNodesCopy();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      document0.childNodes = list0;
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, document0.childNodes.size());
      assertFalse(document0.childNodes.isEmpty());
      
      Document document1 = (Document)document0.clearAttributes();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("s", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("s", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("s", "xBTf!'E");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Document document0 = Document.createShell("zE30F+b4j4Z7");
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document0.quirksMode(document_QuirksMode0);
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      Elements elements0 = document0.siblingElements();
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      Document document3 = Parser.parse("mkzxVPtO;<C", "org.jsoup.select.StructuralEvaluator$Root");
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("org.jsoup.select.StructuralEvaluator$Root", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("org.jsoup.select.StructuralEvaluator$Root", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotNull(document3);
      
      Elements elements1 = document0.parents();
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Tag tag0 = Tag.valueOf("mkzxVPtO;<C", parseSettings0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("mkzxvpto;<c", tag0.getName());
      assertEquals("mkzxvpto;<c", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "#root");
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("mkzxvpto;<c", tag0.getName());
      assertEquals("mkzxvpto;<c", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("#root", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("mkzxvpto;<c", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mkzxvpto;<c", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      String string0 = element0.html();
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("mkzxvpto;<c", tag0.getName());
      assertEquals("mkzxvpto;<c", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("#root", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("mkzxvpto;<c", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mkzxvpto;<c", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = element0.text();
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("mkzxvpto;<c", tag0.getName());
      assertEquals("mkzxvpto;<c", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("#root", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("mkzxvpto;<c", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mkzxvpto;<c", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Element element1 = element0.text("br");
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("mkzxvpto;<c", tag0.getName());
      assertEquals("mkzxvpto;<c", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("#root", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("mkzxvpto;<c", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("mkzxvpto;<c", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("mkzxvpto;<c", element1.nodeName());
      assertEquals("#root", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("mkzxvpto;<c", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Elements elements2 = document3.getElementsByAttributeValue("head", "body");
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("org.jsoup.select.StructuralEvaluator$Root", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("org.jsoup.select.StructuralEvaluator$Root", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      
      Elements elements3 = document3.siblingElements();
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("org.jsoup.select.StructuralEvaluator$Root", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("org.jsoup.select.StructuralEvaluator$Root", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotNull(elements3);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotNull(document_OutputSettings2);
      
      // Undeclared exception!
      element0.outerHtmlTail(pipedWriter0, 65536, document_OutputSettings2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Document.createShell("br");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("br");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.baseUri());
      assertEquals("br", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = document0.prependElement("br");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("br", element1.baseUri());
      assertEquals("br", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals("br", element1.tagName());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      assertNotNull(element1);
      
      List<DataNode> list0 = document0.dataNodes();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      String string0 = document0.ownText();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Element element0 = new Element("textarea");
      assertEquals("textarea", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.prependText("textarea");
      assertEquals("textarea", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("textarea", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("textarea", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      String string0 = element0.val();
      assertEquals("textarea", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertSame(element0, element1);
      assertEquals("textarea", string0);
      assertNotNull(string0);
      
      int int0 = element0.elementSiblingIndex();
      assertEquals("textarea", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertSame(element0, element1);
      assertEquals(0, int0);
      
      Element element2 = element0.attr("html", true);
      assertEquals("textarea", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("textarea", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals(1, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertEquals("textarea", element2.tagName());
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parse("v", "v");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("v", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("v", document0.location());
      assertNotNull(document0);
      
      document0.parentNode = (Node) document0;
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("v", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("v", document0.location());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertTrue(document0.parentNode.hasParent());
      
      int int0 = document0.elementSiblingIndex();
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("v", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("v", document0.location());
      assertEquals(0, int0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("v", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("v", document0.location());
      assertFalse(parser0.isTrackErrors());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("v", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("v", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.appendTo(document1);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("v", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("v", document0.location());
      assertFalse(parser0.isTrackErrors());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("v", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("v", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("v", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("v", document2.baseUri());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      // Undeclared exception!
      document1.appendElement("v");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Lo0kJe4g", "^rg.jsoup.nodes.Element$P");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^rg.jsoup.nodes.Element$P", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("^rg.jsoup.nodes.Element$P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      String string0 = document0.html();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^rg.jsoup.nodes.Element$P", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("^rg.jsoup.nodes.Element$P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("<html>\n <head></head>\n <body>\n  Lo0kJe4g\n </body>\n</html>", string0);
      assertNotNull(string0);
      
      document0.siblingIndex = 7;
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(7, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^rg.jsoup.nodes.Element$P", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("^rg.jsoup.nodes.Element$P", document0.location());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.toggleClass("Lo0kJe4g");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(7, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^rg.jsoup.nodes.Element$P", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("^rg.jsoup.nodes.Element$P", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("^rg.jsoup.nodes.Element$P", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("^rg.jsoup.nodes.Element$P", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(7, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      boolean boolean0 = document0.hasClass("^rg.jsoup.nodes.Element$P");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(7, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^rg.jsoup.nodes.Element$P", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("^rg.jsoup.nodes.Element$P", document0.location());
      assertFalse(document0.isBlock());
      assertSame(document0, document1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("Tag name must not be empty.");
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      boolean boolean0 = document0.hasClass("Tag name must not be empty.");
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "s";
      Document document0 = Parser.parseBodyFragment("s", "s");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("s", document0.location());
      assertNotNull(document0);
      
      Tag tag0 = Tag.valueOf("s", (ParseSettings) null);
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertEquals("s", tag0.toString());
      assertEquals("s", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode(" ");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      document0.childNodes = null;
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s", document0.location());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Element element0 = new Element(tag0, "Children collection to be inserted must not be null.", attributes0);
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertEquals("s", tag0.toString());
      assertEquals("s", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("s", element0.tagName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("s", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        document0.prependChild(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("br", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("br");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.baseUri());
      assertNotNull(element0);
      
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)22;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-69), (byte)22}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      
      String string0 = document0.ownText();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Elements elements0 = element0.getElementsByIndexLessThan(3203);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element1 = element0.prepend("class");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.baseUri());
      assertEquals("br", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("br", element1.nodeName());
      assertEquals("br", element1.baseUri());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Element element0 = new Element("dkerl_sl");
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("dkerl_sl", element0.tagName());
      assertEquals("dkerl_sl", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.val("dkerl_sl");
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("dkerl_sl", element0.tagName());
      assertEquals("dkerl_sl", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("dkerl_sl", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("dkerl_sl", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Element element2 = element1.selectFirst("dkerl_sl");
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("dkerl_sl", element0.tagName());
      assertEquals("dkerl_sl", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("dkerl_sl", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("dkerl_sl", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertEquals("dkerl_sl", element2.tagName());
      assertFalse(element2.hasParent());
      assertEquals("dkerl_sl", element2.nodeName());
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("br");
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.baseUri());
      assertNotNull(element0);
      
      List<DataNode> list0 = document0.dataNodes();
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      String string0 = document0.ownText();
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = new Document("");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Node node0 = document0.nextSibling();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNull(node0);
      
      document0.parentNode = (Node) document0;
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      int int0 = document0.elementSiblingIndex();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, int0);
      
      Node[] nodeArray0 = new Node[0];
      Document document1 = (Document)document0.insertChildren(0, nodeArray0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document1.location());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, nodeArray0.length);
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "s";
      Document document0 = Parser.parseBodyFragment("s", "s");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("s", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      Document document0 = Parser.parse("m->hq", "]");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("]", document0.location());
      assertEquals("]", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("]", document0.location());
      assertEquals("]", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals("]", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Elements elements0 = element0.getElementsByTag("<Ai%L");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("]", document0.location());
      assertEquals("]", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals("]", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element1 = element0.attr("m->hq", true);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("]", document0.location());
      assertEquals("]", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals("]", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("]", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      Charset charset1 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset1.displayName());
      assertEquals("US-ASCII", charset1.name());
      assertTrue(charset1.isRegistered());
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.toString());
      assertSame(charset1, charset0);
      assertNotNull(charset1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<Ai%L");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertSame(charset0, charset1);
      assertFalse(set0.contains("]"));
      assertNotNull(set0);
      
      boolean boolean3 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Z");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      Element element2 = element1.classNames(set0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("]", document0.location());
      assertEquals("]", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals("]", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("]", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertEquals("body", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertEquals("]", element2.baseUri());
      assertEquals("body", element2.tagName());
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(charset0, charset1);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertFalse(set0.contains("]"));
      assertNotNull(element2);
      
      Element element3 = element2.prependText("AfterAfterFrameset");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("]", document0.location());
      assertEquals("]", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals("]", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("]", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertEquals(2, element2.childNodeSize());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertEquals("]", element2.baseUri());
      assertEquals("body", element2.tagName());
      assertEquals("]", element3.baseUri());
      assertEquals("body", element3.tagName());
      assertTrue(element3.hasParent());
      assertEquals(1, element3.siblingIndex());
      assertEquals(2, element3.childNodeSize());
      assertTrue(element3.isBlock());
      assertEquals("body", element3.nodeName());
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element0, element3);
      assertSame(element1, element0);
      assertSame(element1, element3);
      assertSame(element1, element2);
      assertSame(charset0, charset1);
      assertSame(element2, element3);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertSame(element3, element2);
      assertSame(element3, element1);
      assertSame(element3, element0);
      assertFalse(set0.contains("]"));
      assertNotNull(element3);
      
      Element element4 = element3.previousElementSibling();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("]", document0.location());
      assertEquals("]", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals("]", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("]", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertEquals(2, element2.childNodeSize());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertEquals("]", element2.baseUri());
      assertEquals("body", element2.tagName());
      assertEquals("]", element3.baseUri());
      assertEquals("body", element3.tagName());
      assertTrue(element3.hasParent());
      assertEquals(1, element3.siblingIndex());
      assertEquals(2, element3.childNodeSize());
      assertTrue(element3.isBlock());
      assertEquals("body", element3.nodeName());
      assertEquals("head", element4.tagName());
      assertEquals(0, element4.childNodeSize());
      assertEquals("]", element4.baseUri());
      assertEquals(0, element4.siblingIndex());
      assertTrue(element4.hasParent());
      assertTrue(element4.isBlock());
      assertEquals("head", element4.nodeName());
      assertFalse(element4.equals((Object)element2));
      assertFalse(element4.equals((Object)element1));
      assertFalse(element4.equals((Object)element0));
      assertFalse(element4.equals((Object)element3));
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(element0, element4);
      assertSame(element0, element3);
      assertSame(element1, element0);
      assertNotSame(element1, element4);
      assertSame(element1, element3);
      assertSame(element1, element2);
      assertSame(charset0, charset1);
      assertSame(element2, element3);
      assertSame(element2, element1);
      assertNotSame(element2, element4);
      assertSame(element2, element0);
      assertSame(element3, element2);
      assertSame(element3, element1);
      assertNotSame(element3, element4);
      assertSame(element3, element0);
      assertNotSame(element4, element2);
      assertNotSame(element4, element1);
      assertNotSame(element4, element0);
      assertNotSame(element4, element3);
      assertFalse(set0.contains("]"));
      assertNotNull(element4);
      
      Elements elements1 = element2.getElementsByTag("<Ai%L");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("]", document0.location());
      assertEquals("]", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals("]", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("]", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertEquals(2, element2.childNodeSize());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertEquals("]", element2.baseUri());
      assertEquals("body", element2.tagName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(element0.equals((Object)element4));
      assertFalse(element1.equals((Object)element4));
      assertFalse(element2.equals((Object)element4));
      assertTrue(elements1.equals((Object)elements0));
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(element0, element4);
      assertSame(element0, element3);
      assertSame(element1, element0);
      assertNotSame(element1, element4);
      assertSame(element1, element3);
      assertSame(element1, element2);
      assertSame(charset0, charset1);
      assertSame(element2, element3);
      assertSame(element2, element1);
      assertNotSame(element2, element4);
      assertSame(element2, element0);
      assertNotSame(elements1, elements0);
      assertFalse(set0.contains("]"));
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Element element0 = new Element("dkerl_sl");
      assertEquals(0, element0.siblingIndex());
      assertEquals("dkerl_sl", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("dkerl_sl", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      element0.setSiblingIndex((-1618280579));
      assertEquals((-1618280579), element0.siblingIndex());
      assertEquals("dkerl_sl", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("dkerl_sl", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      
      String string0 = element0.val();
      assertEquals((-1618280579), element0.siblingIndex());
      assertEquals("dkerl_sl", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("dkerl_sl", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Element element1 = element0.val("");
      assertEquals((-1618280579), element0.siblingIndex());
      assertEquals("dkerl_sl", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("dkerl_sl", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals("dkerl_sl", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals((-1618280579), element1.siblingIndex());
      assertEquals("dkerl_sl", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.before("big");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertEquals(2, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      String string0 = element0.cssSelector();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertSame(element0, element1);
      assertEquals("html > head:nth-child(3)", string0);
      assertNotNull(string0);
      
      Elements elements0 = element0.getElementsByIndexGreaterThan(2610);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(element0, element1);
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "gl> ";
      Document document0 = Document.createShell("gl> ");
      assertEquals(1, document0.childNodeSize());
      assertEquals("gl> ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("gl> ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text("gl> ");
      assertEquals(1, document0.childNodeSize());
      assertEquals("gl> ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("gl> ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("gl> ", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("gl> ", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Element element0 = document0.body();
      assertEquals(1, document0.childNodeSize());
      assertEquals("gl> ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("gl> ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("gl> ", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertSame(document0, document1);
      assertNotNull(element0);
      
      Document document2 = element0.ownerDocument();
      assertEquals(1, document0.childNodeSize());
      assertEquals("gl> ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("gl> ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("gl> ", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("gl> ", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("gl> ", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        element0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Element element0 = new Element("dkerl_sl");
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("dkerl_sl", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("dkerl_sl", element0.nodeName());
      assertNotNull(element0);
      
      Document document0 = Parser.parse("", "A<-zml&>=2R");
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("A<-zml&>=2R", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("A<-zml&>=2R", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("ScriptDataEscapedEndTagName");
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Node node0 = cDataNode0.doClone(element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("dkerl_sl", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("dkerl_sl", element0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals("#cdata", node0.nodeName());
      assertTrue(node0.hasParent());
      assertEquals(0, node0.siblingIndex());
      assertFalse(node0.equals((Object)cDataNode0));
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        document0.appendChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      String string0 = element0.cssSelector();
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("html > head", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '6';
      charArray0[1] = 'Y';
      charArray0[2] = 'k';
      charArray0[3] = 'e';
      charArray0[4] = '7';
      charArray0[5] = '$';
      charArray0[6] = 'r';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals("6Yke7$rb", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(8, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(8, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(8, charBuffer0.limit());
      assertArrayEquals(new char[] {'6', 'Y', 'k', 'e', '7', '$', 'r', 'b'}, charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(charBuffer0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(4732);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(4732, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(4732, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(4732, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(4732, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(4732, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(true);
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(4732, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(4732, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(4732, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(4732, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotNull(document_OutputSettings3);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.escapeMode(entities_EscapeMode0);
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertEquals(4732, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(4732, document_OutputSettings4.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(4732, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(4732, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertEquals(4732, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertNotNull(document_OutputSettings4);
      
      // Undeclared exception!
      element0.outerHtmlHead(charBuffer0, 4732, document_OutputSettings4);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = ":nth-child(%d)";
      Document document0 = Parser.parse(":nth-child(%d)", "ory+Y[Ny&%");
      assertEquals("ory+Y[Ny&%", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("ory+Y[Ny&%", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertEquals("ory+Y[Ny&%", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("ory+Y[Ny&%", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ory+Y[Ny&%", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ory+Y[Ny&%", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-84);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)105, (byte) (-84)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)105, (byte) (-84)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1);
      
      String string1 = document1.wholeText();
      assertEquals("ory+Y[Ny&%", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("ory+Y[Ny&%", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ory+Y[Ny&%", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ory+Y[Ny&%", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(":nth-child(%d)", string1);
      assertNotNull(string1);
      
      Document document2 = (Document)document1.appendTo(document0);
      assertEquals("ory+Y[Ny&%", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("ory+Y[Ny&%", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("ory+Y[Ny&%", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ory+Y[Ny&%", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ory+Y[Ny&%", document2.location());
      assertEquals("ory+Y[Ny&%", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Node node0 = document1.nextSibling();
      assertEquals("ory+Y[Ny&%", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("ory+Y[Ny&%", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("ory+Y[Ny&%", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ory+Y[Ny&%", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNull(node0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("pA8sTKePs", false);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      document1.html(mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("DkERl_Sl", "DkERl_Sl");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("DkERl_Sl", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("DkERl_Sl", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Element element0 = new Element("video");
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("video", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("video", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Attributes attributes0 = document0.attributes();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("DkERl_Sl", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("DkERl_Sl", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      String string0 = element0.val();
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("video", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("video", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Element element1 = element0.prependChild(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("DkERl_Sl", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("DkERl_Sl", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("video", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("video", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("video", element1.nodeName());
      assertEquals("video", element1.tagName());
      assertTrue(element1.isBlock());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      String string1 = document0.cssSelector();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("DkERl_Sl", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("DkERl_Sl", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(string1.equals((Object)string0));
      assertEquals("video > #root", string1);
      assertNotNull(string1);
      
      String string2 = element1.text();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("DkERl_Sl", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("DkERl_Sl", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("video", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("video", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("video", element1.nodeName());
      assertEquals("video", element1.tagName());
      assertTrue(element1.isBlock());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("DkERl_Sl", string2);
      assertNotNull(string2);
      
      Document document1 = (Document)document0.before("DkERl_Sl");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("DkERl_Sl", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("DkERl_Sl", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("DkERl_Sl", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("DkERl_Sl", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s", "s");
      assertFalse(document0.hasParent());
      assertEquals("s", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("s", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      document0.siblingIndex = (-323);
      assertFalse(document0.hasParent());
      assertEquals("s", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals((-323), document0.siblingIndex());
      assertEquals("s", document0.baseUri());
      assertFalse(document0.isBlock());
      
      document0.parentNode = (Node) document0;
      assertEquals("s", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals((-323), document0.siblingIndex());
      assertEquals("s", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.parentNode.hasParent());
      assertEquals((-323), document0.parentNode.siblingIndex());
      
      int int0 = document0.elementSiblingIndex();
      assertEquals("s", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals((-323), document0.siblingIndex());
      assertEquals("s", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("s", "s");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Document.createShell("audio");
      assertEquals("audio", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("audio", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.val((String) null);
      assertEquals("audio", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("audio", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("audio", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("audio", document1.location());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.attr(".", "audio");
      assertEquals("audio", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("audio", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("audio", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("audio", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      Elements elements0 = document2.getElementsContainingText("$nN\"E*S");
      assertEquals("audio", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("audio", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("audio", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("audio", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(elements0);
      
      Elements elements1 = document1.getElementsMatchingOwnText("$nN\"E*S");
      assertEquals("audio", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("audio", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("audio", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("audio", document1.location());
      assertEquals("#root", document1.tagName());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      document2.siblingIndex = (-1489);
      assertEquals("audio", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("audio", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals((-1489), document0.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("audio", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("audio", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals((-1489), document2.siblingIndex());
      
      boolean boolean0 = document0.is("audio");
      assertEquals("audio", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("audio", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals((-1489), document0.siblingIndex());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(boolean0);
      
      Document document3 = (Document)document2.html("$nN\"E*S");
      assertEquals("audio", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("audio", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals((-1489), document0.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("audio", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("audio", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals((-1489), document2.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("audio", document3.baseUri());
      assertEquals("audio", document3.location());
      assertEquals((-1489), document3.siblingIndex());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotNull(document3);
      
      Document document4 = (Document)document1.attr("&nbsp;", false);
      assertEquals("audio", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("audio", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals((-1489), document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("audio", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals((-1489), document1.siblingIndex());
      assertEquals("audio", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("audio", document4.baseUri());
      assertEquals("audio", document4.location());
      assertFalse(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals((-1489), document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertNotNull(document4);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Element element0 = new Element("dkerl_sl");
      assertEquals("", element0.baseUri());
      assertEquals("dkerl_sl", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("dkerl_sl", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      DocumentType documentType0 = new DocumentType("dkerl_sl", "dkerl_sl", "dkerl_sl");
      assertEquals("#doctype", documentType0.nodeName());
      assertFalse(documentType0.hasParent());
      assertEquals(0, documentType0.siblingIndex());
      assertNotNull(documentType0);
      
      nodeArray0[3] = (Node) documentType0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) element0;
      nodeArray0[6] = (Node) element0;
      nodeArray0[7] = (Node) element0;
      element0.addChildren(nodeArray0);
      assertEquals("", element0.baseUri());
      assertEquals("dkerl_sl", element0.tagName());
      assertEquals("dkerl_sl", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(8, nodeArray0.length);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("dkerl_sl", "dkerl_sl");
      assertEquals("dkerl_sl", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("dkerl_sl", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("=0m}}87w4W<");
      assertEquals("dkerl_sl", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("dkerl_sl", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("dkerl_sl", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("dkerl_sl", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      boolean boolean0 = document0.hasClass("org.jsoup.nodes.Element$NodeList");
      assertEquals("dkerl_sl", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("dkerl_sl", document0.baseUri());
      assertSame(document0, document1);
      assertFalse(boolean0);
      
      Document document2 = (Document)document0.prepend("=0m}}87w4W<");
      assertEquals("dkerl_sl", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("dkerl_sl", document0.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("dkerl_sl", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("dkerl_sl", document2.baseUri());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s", "s");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("s", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("s", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("s", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("s", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("s", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      
      Elements elements0 = element0.previousElementSiblings();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("s", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("s", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("s", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      
      String string0 = "lTz\\un/;k`EX(";
      Element element1 = element0.tagName(string0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("s", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("s", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("ltz\\un/;k`ex(", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("s", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("ltz\\un/;k`ex(", element0.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("ltz\\un/;k`ex(", element1.nodeName());
      assertEquals("s", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("ltz\\un/;k`ex(", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s", "s");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("s", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.previousElementSibling();
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("s", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertEquals("s", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      
      Elements elements0 = element0.getElementsContainingOwnText("s");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("s", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertFalse(element0.equals((Object)element1));
      assertNotSame(element0, element1);
      assertNotNull(elements0);
      
      Elements elements1 = document0.getElementsMatchingText("s");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(elements1.isEmpty());
      assertEquals(3, elements1.size());
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s", "s");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("s", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Locale locale0 = new Locale("7I{6yoz2Zn0", "s");
      assertEquals("7i{6yoz2zn0", locale0.getLanguage());
      assertEquals("S", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("7i{6yoz2zn0_S", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("7i{6yoz2zn0", locale0.getLanguage());
      assertEquals("S", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("7i{6yoz2zn0_S", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("7i{6yoz2zn0", locale1.getLanguage());
      assertEquals("S", locale1.getCountry());
      assertEquals("7i{6yoz2zn0_S", locale1.toString());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      assertEquals("7i{6yoz2zn0", locale0.getLanguage());
      assertEquals("S", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("7i{6yoz2zn0_S", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("7i{6yoz2zn0", locale1.getLanguage());
      assertEquals("S", locale1.getCountry());
      assertEquals("7i{6yoz2zn0_S", locale1.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertFalse(set0.contains("7I{6yoz2Zn0"));
      assertNotNull(set0);
      
      Document document1 = (Document)document0.classNames(set0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("s", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7i{6yoz2zn0", locale0.getLanguage());
      assertEquals("S", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("7i{6yoz2zn0_S", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("7i{6yoz2zn0", locale1.getLanguage());
      assertEquals("S", locale1.getCountry());
      assertEquals("7i{6yoz2zn0_S", locale1.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("s", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("s", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertSame(document1, document0);
      assertFalse(set0.contains("7I{6yoz2Zn0"));
      assertNotNull(document1);
      
      Document document2 = (Document)document0.text("s");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("s", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("s", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("s", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      Document document3 = (Document)document2.prependChild(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("s", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("s", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("s", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("s", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals("s", document3.baseUri());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertNotNull(document3);
      
      document2.parentNode = (Node) document2;
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("s", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("s", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("s", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.parentNode.hasParent());
      assertEquals(0, document2.parentNode.siblingIndex());
      
      Element element0 = document2.nextElementSibling();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("s", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("s", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("s", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("html", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.tagName());
      assertEquals("s", element0.baseUri());
      assertEquals(2, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+B", "+B");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("+B", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("+B", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("+B", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("+B", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("+B", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      Element element1 = element0.appendText("s+");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("+B", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("+B", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("+B", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("+B", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals(2, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(false);
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotNull(document_OutputSettings3);
      
      Document document1 = document0.outputSettings(document_OutputSettings3);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("+B", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("+B", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("+B", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("+B", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertSame(document0, document1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      String string0 = document0.ownText();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("+B", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("+B", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Element element2 = document0.prependElement("c8_K6$M?");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("+B", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("+B", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("c8_k6$m?", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertEquals("+B", element2.baseUri());
      assertEquals("c8_k6$m?", element2.nodeName());
      assertTrue(element2.hasParent());
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertSame(document0, document1);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s", "s");
      assertFalse(document0.hasParent());
      assertEquals("s", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.prependText("s");
      assertFalse(document0.hasParent());
      assertEquals("s", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("s", document1.location());
      assertEquals("s", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertEquals("s", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("s", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertSame(document0, document1);
      assertNotNull(element0);
      
      Element element1 = new Element("s");
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals("s", element1.nodeName());
      assertEquals("s", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      
      String string0 = document1.text();
      assertFalse(document0.hasParent());
      assertEquals("s", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("s", document1.location());
      assertEquals("s", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("s s", string0);
      assertNotNull(string0);
      
      Elements elements0 = element0.children();
      assertFalse(document0.hasParent());
      assertEquals("s", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("s", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(element0.equals((Object)element1));
      assertSame(document0, document1);
      assertNotSame(element0, element1);
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s", "s");
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text("s");
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("s", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("s", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      document1.parentNode = (Node) document1;
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("s", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("s", document1.location());
      assertEquals(0, document1.parentNode.siblingIndex());
      assertTrue(document1.parentNode.hasParent());
      
      Element element0 = document1.nextElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("s", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("s", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNull(element0);
      
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      assertEquals(":first-child", evaluator_IsFirstChild0.toString());
      assertNotNull(evaluator_IsFirstChild0);
      
      // Undeclared exception!
      document0.is((Evaluator) evaluator_IsFirstChild0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parse("lsI z=1K^}m", "lsI z=1K^}m");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("lsI z=1K^}m", document0.location());
      assertEquals("lsI z=1K^}m", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = new Document("lsI z=1K^}m");
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("lsI z=1K^}m", document1.location());
      assertEquals("lsI z=1K^}m", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      
      Element element0 = document0.head();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("lsI z=1K^}m", document0.location());
      assertEquals("lsI z=1K^}m", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("lsI z=1K^}m", element0.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(element0);
      
      Element element1 = element0.prependText("UK$W-3");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("lsI z=1K^}m", document0.location());
      assertEquals("lsI z=1K^}m", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("lsI z=1K^}m", element0.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("lsI z=1K^}m", element1.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document2 = (Document)document0.appendChild(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("lsI z=1K^}m", document0.location());
      assertEquals("lsI z=1K^}m", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("lsI z=1K^}m", document1.location());
      assertEquals("lsI z=1K^}m", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("lsI z=1K^}m", document2.baseUri());
      assertEquals("lsI z=1K^}m", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      Node node0 = document2.nextSibling();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("lsI z=1K^}m", document0.location());
      assertEquals("lsI z=1K^}m", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("lsI z=1K^}m", document1.location());
      assertEquals("lsI z=1K^}m", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("lsI z=1K^}m", document2.baseUri());
      assertEquals("lsI z=1K^}m", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNull(node0);
      
      String string0 = document2.text();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("lsI z=1K^}m", document0.location());
      assertEquals("lsI z=1K^}m", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("lsI z=1K^}m", document1.location());
      assertEquals("lsI z=1K^}m", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("lsI z=1K^}m", document2.baseUri());
      assertEquals("lsI z=1K^}m", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("UK$W-3 lsI z=1K^}m", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s", "s");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      Element element0 = document0.prependElement("g> ");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("g>", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("s", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("g>", element0.tagName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.tagName("5");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("5", element0.nodeName());
      assertEquals("s", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("5", element0.tagName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertFalse(element1.isBlock());
      assertEquals("5", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("s", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("5", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = document0.ownText();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("+y;uYQ4XtA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: +y;uYQ4XtA
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "s";
      Document document0 = Parser.parseBodyFragment("s", "s");
      assertFalse(document0.hasParent());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("s", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      document0.parentNode = (Node) document0;
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("s", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertTrue(document0.parentNode.hasParent());
      
      // Undeclared exception!
      document0.is("s");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Tag tag0 = Tag.valueOf("dkerl_sl");
      assertEquals("dkerl_sl", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("dkerl_sl", tag0.toString());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "dkerl_sl", attributes0);
      assertEquals("dkerl_sl", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("dkerl_sl", tag0.toString());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals("dkerl_sl", formElement0.baseUri());
      assertEquals("dkerl_sl", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("dkerl_sl", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.addElement((Element) null);
      assertEquals("dkerl_sl", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("dkerl_sl", tag0.toString());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals("dkerl_sl", formElement0.baseUri());
      assertEquals("dkerl_sl", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("dkerl_sl", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("dkerl_sl", formElement1.baseUri());
      assertEquals("dkerl_sl", formElement1.nodeName());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertEquals("dkerl_sl", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertNotNull(formElement1);
      
      boolean boolean0 = formElement1.is("dkerl_sl");
      assertEquals("dkerl_sl", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("dkerl_sl", tag0.toString());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals("dkerl_sl", formElement0.baseUri());
      assertEquals("dkerl_sl", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("dkerl_sl", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("dkerl_sl", formElement1.baseUri());
      assertEquals("dkerl_sl", formElement1.nodeName());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertEquals("dkerl_sl", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s", "s");
      assertEquals("s", document0.location());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.getElementById("s");
      assertEquals("s", document0.location());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNull(element0);
      
      document0.parentNode = (Node) document0;
      assertEquals("s", document0.location());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertTrue(document0.parentNode.hasParent());
      
      Elements elements0 = document0.getElementsMatchingText("s");
      assertEquals("s", document0.location());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      // Undeclared exception!
      document0.prepend("org.jsoup.parser.Token$1");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte) (-116);
      byteArray0[8] = (byte)7;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)3, (byte)18, (byte) (-66), (byte)45, (byte) (-95), (byte)39, (byte) (-116), (byte)7}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = "org.jsoup.nodes.Element";
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("org.jsoup.nodes.Element", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.prepend("");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("org.jsoup.nodes.Element", element0.baseUri());
      assertEquals("org.jsoup.nodes.Element", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Element element2 = element0.clone();
      assertFalse(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.nodeName());
      assertEquals("org.jsoup.nodes.Element", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("org.jsoup.nodes.Element", element0.baseUri());
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertNotNull(element2);
      
      element0.remove();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.nodes.Element", element0.baseUri());
      assertFalse(element0.equals((Object)element2));
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      
      // Undeclared exception!
      try { 
        element1.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`ne.\":P9%D1r");
      assertFalse(boolean0);
      
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("p Vw", parseSettings0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("p vw", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("p vw", tag0.getName());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("p Vw");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "JdbZSFSrf&W?#K4", attributes0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("p vw", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("p vw", tag0.getName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("JdbZSFSrf&W?#K4", formElement0.baseUri());
      assertEquals("p vw", formElement0.tagName());
      assertEquals("p vw", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertNotNull(formElement0);
      
      Spliterator<Attribute> spliterator0 = attributes0.spliterator();
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(spliterator0);
      
      FormElement formElement1 = formElement0.addElement((Element) null);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("p vw", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("p vw", tag0.getName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("JdbZSFSrf&W?#K4", formElement0.baseUri());
      assertEquals("p vw", formElement0.tagName());
      assertEquals("p vw", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals("JdbZSFSrf&W?#K4", formElement1.baseUri());
      assertEquals("p vw", formElement1.tagName());
      assertFalse(formElement1.hasParent());
      assertFalse(formElement1.isBlock());
      assertEquals("p vw", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertNotNull(formElement1);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "v9m");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Tag tag1 = Tag.valueOf("`ne.\":P9%D1r", parseSettings0);
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isEmpty());
      assertEquals("`ne.\":p9%d1r", tag1.getName());
      assertFalse(tag1.preserveWhitespace());
      assertEquals("`ne.\":p9%d1r", tag1.toString());
      assertTrue(tag1.formatAsBlock());
      assertTrue(tag1.isInline());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isData());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.equals((Object)tag0));
      assertNotSame(tag1, tag0);
      assertNotNull(tag1);
      
      String string0 = parseSettings0.normalizeAttribute("DkER8_Sl");
      assertEquals("dker8_sl", string0);
      assertNotNull(string0);
      
      String string1 = attributes0.get("p Vw");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      TextNode textNode0 = cDataNode0.text("<!--");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertEquals("#cdata", textNode0.nodeName());
      assertSame(cDataNode0, textNode0);
      assertSame(textNode0, cDataNode0);
      assertNotNull(textNode0);
      
      Elements elements0 = formElement0.getElementsByIndexEquals(93);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("p vw", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("p vw", tag0.getName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("JdbZSFSrf&W?#K4", formElement0.baseUri());
      assertEquals("p vw", formElement0.tagName());
      assertEquals("p vw", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(tag0.equals((Object)tag1));
      assertNotSame(tag0, tag1);
      assertSame(cDataNode0, textNode0);
      assertSame(formElement0, formElement1);
      assertNotNull(elements0);
      
      Elements elements1 = formElement1.previousElementSiblings();
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("p vw", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("p vw", tag0.getName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("JdbZSFSrf&W?#K4", formElement0.baseUri());
      assertEquals("p vw", formElement0.tagName());
      assertEquals("p vw", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals("JdbZSFSrf&W?#K4", formElement1.baseUri());
      assertEquals("p vw", formElement1.tagName());
      assertFalse(formElement1.hasParent());
      assertFalse(formElement1.isBlock());
      assertEquals("p vw", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(tag0.equals((Object)tag1));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(tag0, tag1);
      assertSame(cDataNode0, textNode0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Element element0 = formElement0.prepend("");
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("p vw", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("p vw", tag0.getName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("JdbZSFSrf&W?#K4", formElement0.baseUri());
      assertEquals("p vw", formElement0.tagName());
      assertEquals("p vw", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals("p vw", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("JdbZSFSrf&W?#K4", element0.baseUri());
      assertEquals("p vw", element0.tagName());
      assertFalse(tag0.equals((Object)tag1));
      assertNotSame(tag0, tag1);
      assertSame(cDataNode0, textNode0);
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertSame(element0, formElement0);
      assertSame(element0, formElement1);
      assertNotNull(element0);
      
      String string2 = element0.id();
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("p vw", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("p vw", tag0.getName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("JdbZSFSrf&W?#K4", formElement0.baseUri());
      assertEquals("p vw", formElement0.tagName());
      assertEquals("p vw", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals("p vw", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("JdbZSFSrf&W?#K4", element0.baseUri());
      assertEquals("p vw", element0.tagName());
      assertFalse(string2.equals((Object)string0));
      assertFalse(tag0.equals((Object)tag1));
      assertNotSame(tag0, tag1);
      assertSame(cDataNode0, textNode0);
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertSame(element0, formElement0);
      assertSame(element0, formElement1);
      assertEquals("", string2);
      assertNotNull(string2);
      
      FormElement formElement2 = (FormElement)element0.html("^rg.jsoup.nodes.Element$P");
      assertEquals("p vw", formElement2.nodeName());
      assertFalse(formElement2.isBlock());
      assertEquals(0, formElement2.siblingIndex());
      assertFalse(formElement2.hasParent());
      assertEquals(1, formElement2.childNodeSize());
      assertEquals("JdbZSFSrf&W?#K4", formElement2.baseUri());
      assertEquals("p vw", formElement2.tagName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("p vw", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("p vw", tag0.getName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals("JdbZSFSrf&W?#K4", formElement0.baseUri());
      assertEquals("p vw", formElement0.tagName());
      assertEquals("p vw", formElement0.nodeName());
      assertEquals(1, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals("p vw", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("JdbZSFSrf&W?#K4", element0.baseUri());
      assertEquals("p vw", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(tag0.equals((Object)tag1));
      assertSame(formElement2, formElement0);
      assertSame(formElement2, formElement1);
      assertSame(formElement2, element0);
      assertNotSame(tag0, tag1);
      assertSame(cDataNode0, textNode0);
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, formElement2);
      assertSame(element0, formElement0);
      assertSame(element0, formElement2);
      assertSame(element0, formElement1);
      assertNotNull(formElement2);
      
      Elements elements2 = element0.getElementsByAttribute("kER4d_l");
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("p vw", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("p vw", tag0.getName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals("JdbZSFSrf&W?#K4", formElement0.baseUri());
      assertEquals("p vw", formElement0.tagName());
      assertEquals("p vw", formElement0.nodeName());
      assertEquals(1, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals("p vw", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("JdbZSFSrf&W?#K4", element0.baseUri());
      assertEquals("p vw", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(tag0.equals((Object)tag1));
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotSame(tag0, tag1);
      assertSame(cDataNode0, textNode0);
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, formElement2);
      assertSame(element0, formElement0);
      assertSame(element0, formElement2);
      assertSame(element0, formElement1);
      assertNotNull(elements2);
      
      List<Node> list0 = formElement2.childNodes();
      assertEquals("p vw", formElement2.nodeName());
      assertFalse(formElement2.isBlock());
      assertEquals(0, formElement2.siblingIndex());
      assertFalse(formElement2.hasParent());
      assertEquals(1, formElement2.childNodeSize());
      assertEquals("JdbZSFSrf&W?#K4", formElement2.baseUri());
      assertEquals("p vw", formElement2.tagName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("p vw", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("p vw", tag0.getName());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals("JdbZSFSrf&W?#K4", formElement0.baseUri());
      assertEquals("p vw", formElement0.tagName());
      assertEquals("p vw", formElement0.nodeName());
      assertEquals(1, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals("p vw", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("JdbZSFSrf&W?#K4", element0.baseUri());
      assertEquals("p vw", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(tag0.equals((Object)tag1));
      assertSame(formElement2, formElement0);
      assertSame(formElement2, formElement1);
      assertSame(formElement2, element0);
      assertNotSame(tag0, tag1);
      assertSame(cDataNode0, textNode0);
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, formElement2);
      assertSame(element0, formElement0);
      assertSame(element0, formElement2);
      assertSame(element0, formElement1);
      assertNotNull(list0);
      
      String string3 = element0.attr("-()$54}Z");
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("p vw", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("p vw", tag0.getName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals("JdbZSFSrf&W?#K4", formElement0.baseUri());
      assertEquals("p vw", formElement0.tagName());
      assertEquals("p vw", formElement0.nodeName());
      assertEquals(1, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals("p vw", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("JdbZSFSrf&W?#K4", element0.baseUri());
      assertEquals("p vw", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(tag0, tag1);
      assertSame(cDataNode0, textNode0);
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, formElement2);
      assertSame(element0, formElement0);
      assertSame(element0, formElement2);
      assertSame(element0, formElement1);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = formElement1.id();
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("p vw", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("p vw", tag0.getName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals("JdbZSFSrf&W?#K4", formElement0.baseUri());
      assertEquals("p vw", formElement0.tagName());
      assertEquals("p vw", formElement0.nodeName());
      assertEquals(1, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals("JdbZSFSrf&W?#K4", formElement1.baseUri());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals("p vw", formElement1.tagName());
      assertFalse(formElement1.hasParent());
      assertFalse(formElement1.isBlock());
      assertEquals("p vw", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(string4.equals((Object)string0));
      assertNotSame(tag0, tag1);
      assertSame(cDataNode0, textNode0);
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, formElement2);
      assertSame(formElement1, formElement0);
      assertSame(formElement1, formElement2);
      assertSame(formElement1, element0);
      assertEquals("", string4);
      assertNotNull(string4);
      
      Tag tag2 = formElement2.tag();
      assertEquals("p vw", formElement2.nodeName());
      assertFalse(formElement2.isBlock());
      assertEquals(0, formElement2.siblingIndex());
      assertFalse(formElement2.hasParent());
      assertEquals(1, formElement2.childNodeSize());
      assertEquals("JdbZSFSrf&W?#K4", formElement2.baseUri());
      assertEquals("p vw", formElement2.tagName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("p vw", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("p vw", tag0.getName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals("JdbZSFSrf&W?#K4", formElement0.baseUri());
      assertEquals("p vw", formElement0.tagName());
      assertEquals("p vw", formElement0.nodeName());
      assertEquals(1, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals("p vw", tag2.toString());
      assertEquals("p vw", tag2.getName());
      assertFalse(tag2.isEmpty());
      assertFalse(tag2.isKnownTag());
      assertFalse(tag2.preserveWhitespace());
      assertFalse(tag2.canContainBlock());
      assertFalse(tag2.isFormListed());
      assertFalse(tag2.isSelfClosing());
      assertFalse(tag2.isFormSubmittable());
      assertTrue(tag2.formatAsBlock());
      assertTrue(tag2.isInline());
      assertFalse(tag2.isBlock());
      assertFalse(tag2.isData());
      assertEquals("p vw", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("JdbZSFSrf&W?#K4", element0.baseUri());
      assertEquals("p vw", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(tag2.equals((Object)tag1));
      assertSame(formElement2, formElement0);
      assertSame(formElement2, formElement1);
      assertSame(formElement2, element0);
      assertSame(tag0, tag2);
      assertNotSame(tag0, tag1);
      assertSame(cDataNode0, textNode0);
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, formElement2);
      assertNotSame(tag2, tag1);
      assertSame(tag2, tag0);
      assertSame(element0, formElement0);
      assertSame(element0, formElement2);
      assertSame(element0, formElement1);
      assertNotNull(tag2);
      
      Elements elements3 = element0.getElementsByAttributeValueMatching("", "-()$54}Z");
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("p vw", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("p vw", tag0.getName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals("JdbZSFSrf&W?#K4", formElement0.baseUri());
      assertEquals("p vw", formElement0.tagName());
      assertEquals("p vw", formElement0.nodeName());
      assertEquals(1, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertEquals("p vw", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("JdbZSFSrf&W?#K4", element0.baseUri());
      assertEquals("p vw", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(tag0.equals((Object)tag1));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements0));
      assertSame(tag0, tag2);
      assertNotSame(tag0, tag1);
      assertSame(cDataNode0, textNode0);
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, formElement2);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertSame(element0, formElement0);
      assertSame(element0, formElement2);
      assertSame(element0, formElement1);
      assertNotNull(elements3);
      
      FormElement formElement3 = (FormElement)formElement2.attr("DkER8_Sl", "org.jsoup.internal.Normalizer");
      assertEquals("p vw", formElement2.nodeName());
      assertFalse(formElement2.isBlock());
      assertEquals(0, formElement2.siblingIndex());
      assertFalse(formElement2.hasParent());
      assertEquals(1, formElement2.childNodeSize());
      assertEquals("JdbZSFSrf&W?#K4", formElement2.baseUri());
      assertEquals("p vw", formElement2.tagName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("p vw", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("p vw", tag0.getName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals("JdbZSFSrf&W?#K4", formElement0.baseUri());
      assertEquals("p vw", formElement0.tagName());
      assertEquals("p vw", formElement0.nodeName());
      assertEquals(1, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals("p vw", formElement3.nodeName());
      assertEquals(0, formElement3.siblingIndex());
      assertEquals("JdbZSFSrf&W?#K4", formElement3.baseUri());
      assertEquals("p vw", formElement3.tagName());
      assertEquals(1, formElement3.childNodeSize());
      assertFalse(formElement3.hasParent());
      assertFalse(formElement3.isBlock());
      assertEquals("p vw", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("JdbZSFSrf&W?#K4", element0.baseUri());
      assertEquals("p vw", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(tag0.equals((Object)tag1));
      assertSame(formElement2, formElement0);
      assertSame(formElement2, formElement1);
      assertSame(formElement2, element0);
      assertSame(formElement2, formElement3);
      assertSame(tag0, tag2);
      assertNotSame(tag0, tag1);
      assertSame(cDataNode0, textNode0);
      assertSame(formElement0, formElement3);
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, formElement2);
      assertSame(formElement3, formElement0);
      assertSame(formElement3, element0);
      assertSame(formElement3, formElement2);
      assertSame(formElement3, formElement1);
      assertSame(element0, formElement0);
      assertSame(element0, formElement2);
      assertSame(element0, formElement1);
      assertSame(element0, formElement3);
      assertNotNull(formElement3);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("U[?>Ih=YN\"gI", "U[?>Ih=YN\"gI");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("U[?>Ih=YN\"gI", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("U[?>Ih=YN\"gI", document0.location());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("U[?>Ih=YN\"gI", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("U[?>Ih=YN\"gI", document0.location());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("U[?>Ih=YN\"gI", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertNotNull(element0);
      
      element0.parentNode = (Node) document0;
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("U[?>Ih=YN\"gI", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("U[?>Ih=YN\"gI", document0.location());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("U[?>Ih=YN\"gI", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.parentNode.siblingIndex());
      assertFalse(element0.parentNode.hasParent());
      
      Element element1 = element0.lastElementSibling();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("U[?>Ih=YN\"gI", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("U[?>Ih=YN\"gI", document0.location());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("U[?>Ih=YN\"gI", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertNull(element1);
      
      Elements elements0 = element0.previousElementSiblings();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("U[?>Ih=YN\"gI", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("U[?>Ih=YN\"gI", document0.location());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("U[?>Ih=YN\"gI", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element2 = element0.html("U[?>Ih=YN\"gI");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("U[?>Ih=YN\"gI", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("U[?>Ih=YN\"gI", document0.location());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("U[?>Ih=YN\"gI", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element2.isBlock());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertEquals("body", element2.nodeName());
      assertEquals("body", element2.tagName());
      assertEquals("U[?>Ih=YN\"gI", element2.baseUri());
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = new Document("s");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("s", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      document0.parentNode = (Node) document0;
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("s", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      CDataNode cDataNode0 = new CDataNode("s");
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Document document1 = (Document)document0.appendChild(cDataNode0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("s", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertTrue(cDataNode0.hasParent());
      assertEquals("s", document1.location());
      assertEquals("s", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      String string0 = document0.text();
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("s", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertSame(document0, document1);
      assertEquals("s", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s", "s");
      assertEquals("s", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Document document1 = new Document("s");
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("s", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("s", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      
      document1.parentNode = (Node) document1;
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("s", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("s", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.parentNode.hasParent());
      assertEquals(0, document1.parentNode.siblingIndex());
      
      Elements elements0 = document0.getElementsMatchingText("s");
      assertEquals("s", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      
      // Undeclared exception!
      try { 
        document1.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Document.createShell("U[?>I=YN\"gD");
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("U[?>I=YN\"gD", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      String string0 = element0.cssSelector();
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("U[?>I=YN\"gD", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("html > body", string0);
      assertNotNull(string0);
      
      Element element1 = element0.val("jr3pl{j\"zj6l|g'`' e");
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("U[?>I=YN\"gD", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("U[?>I=YN\"gD", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Element element2 = element0.empty();
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("U[?>I=YN\"gD", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals(1, element2.siblingIndex());
      assertEquals("U[?>I=YN\"gD", element2.baseUri());
      assertEquals("body", element2.tagName());
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertNotNull(element2);
      
      Elements elements0 = element1.getElementsByAttributeValueNot("html > body", "U[?>I=YN\"gD");
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("U[?>I=YN\"gD", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("U[?>I=YN\"gD", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Element element0 = new Element("DkERl_Sl");
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("DkERl_Sl", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("DkERl_Sl", element0.nodeName());
      assertNotNull(element0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors(9);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      
      Document document0 = parser1.parseInput("DkERl_Sl", "DkERl_Sl");
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("DkERl_Sl", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("DkERl_Sl", document0.location());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(document0);
      
      int int0 = document0.elementSiblingIndex();
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("DkERl_Sl", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("DkERl_Sl", document0.location());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertEquals(0, int0);
      
      Attributes attributes0 = document0.attributes();
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("DkERl_Sl", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("DkERl_Sl", document0.location());
      assertEquals(0, attributes0.size());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(attributes0);
      
      Document document1 = (Document)document0.tagName("style");
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("DkERl_Sl", document0.baseUri());
      assertEquals("style", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("DkERl_Sl", document0.location());
      assertEquals("style", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("DkERl_Sl", document1.baseUri());
      assertTrue(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("DkERl_Sl", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        element0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      String string0 = parseSettings0.normalizeTag(" u~T4'-");
      assertEquals("u~T4'-", string0);
      assertNotNull(string0);
      
      ParseSettings parseSettings1 = ParseSettings.htmlDefault;
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertNotSame(parseSettings1, parseSettings0);
      assertNotNull(parseSettings1);
      
      Tag tag0 = Tag.valueOf("F`):mm0", parseSettings1);
      assertEquals("f`):mm0", tag0.toString());
      assertEquals("f`):mm0", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertNotSame(parseSettings1, parseSettings0);
      assertNotNull(tag0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      Document document0 = Parser.parse("", "body");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Elements elements0 = document0.previousElementSiblings();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document document1 = document0.clone();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("body", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("body", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Set<String> set0 = document0.classNames();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      
      Document document2 = new Document("body");
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("body", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("body", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      
      String string1 = document0.data();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals("", string1);
      assertNotNull(string1);
      
      Set<String> set1 = document2.classNames();
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("body", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("body", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(set1, set0);
      assertFalse(set1.contains(string0));
      assertNotNull(set1);
      
      Element element1 = document1.body();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("body", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("body", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("body", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      
      Element element2 = element0.clone();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.hasParent());
      assertEquals("body", element2.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotNull(element2);
      
      boolean boolean0 = element2.isBlock();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.hasParent());
      assertEquals("body", element2.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("DkERl_S+", "DkERl_S+");
      assertFalse(document0.hasParent());
      assertEquals("DkERl_S+", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("DkERl_S+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasText();
      assertFalse(document0.hasParent());
      assertEquals("DkERl_S+", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("DkERl_S+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(boolean0);
      
      Document document1 = Document.createShell("lq;Y!INoRzUI8O%u}H");
      assertEquals("lq;Y!INoRzUI8O%u}H", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("lq;Y!INoRzUI8O%u}H", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.appendChild(document1);
      assertFalse(document0.hasParent());
      assertEquals("DkERl_S+", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("DkERl_S+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("lq;Y!INoRzUI8O%u}H", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("lq;Y!INoRzUI8O%u}H", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("DkERl_S+", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("DkERl_S+", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      String string0 = document1.text();
      assertEquals("lq;Y!INoRzUI8O%u}H", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("lq;Y!INoRzUI8O%u}H", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Document document3 = (Document)document1.after("DkERl_S+");
      assertEquals("lq;Y!INoRzUI8O%u}H", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("lq;Y!INoRzUI8O%u}H", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertTrue(document3.hasParent());
      assertEquals("lq;Y!INoRzUI8O%u}H", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("lq;Y!INoRzUI8O%u}H", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotNull(document3);
      
      Elements elements0 = document2.getElementsByIndexGreaterThan(3336);
      assertFalse(document0.hasParent());
      assertEquals("DkERl_S+", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("DkERl_S+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("lq;Y!INoRzUI8O%u}H", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("lq;Y!INoRzUI8O%u}H", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("DkERl_S+", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("DkERl_S+", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Tag tag0 = Tag.valueOf("$U2a4BJO5CVE):J&E7");
      assertEquals("$U2a4BJO5CVE):J&E7", tag0.toString());
      assertEquals("$U2a4BJO5CVE):J&E7", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      String string0 = "CiC;?(";
      Tag tag1 = Tag.valueOf("CiC;?(");
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isEmpty());
      assertEquals("CiC;?(", tag1.toString());
      assertTrue(tag1.isInline());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isFormSubmittable());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.canContainBlock());
      assertEquals("CiC;?(", tag1.getName());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isData());
      assertFalse(tag1.equals((Object)tag0));
      assertNotSame(tag1, tag0);
      assertNotNull(tag1);
      
      Element element0 = new Element(tag0, "$U2a4BJO5CVE):J&E7", (Attributes) null);
      assertEquals("$U2a4BJO5CVE):J&E7", tag0.toString());
      assertEquals("$U2a4BJO5CVE):J&E7", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertEquals("$U2a4BJO5CVE):J&E7", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("$U2a4BJO5CVE):J&E7", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("$U2a4BJO5CVE):J&E7", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(tag0.equals((Object)tag1));
      assertNotNull(element0);
      
      String string1 = "uj?l^";
      Elements elements0 = element0.getElementsByAttribute("uj?l^");
      assertEquals("$U2a4BJO5CVE):J&E7", tag0.toString());
      assertEquals("$U2a4BJO5CVE):J&E7", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertEquals("$U2a4BJO5CVE):J&E7", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("$U2a4BJO5CVE):J&E7", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("$U2a4BJO5CVE):J&E7", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(tag0.equals((Object)tag1));
      assertNotSame(tag0, tag1);
      assertNotNull(elements0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CiC;?(");
      assertFalse(boolean0);
      
      Element element1 = element0.tagName("_i$yhp");
      assertEquals("$U2a4BJO5CVE):J&E7", tag0.toString());
      assertEquals("$U2a4BJO5CVE):J&E7", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(element0.hasParent());
      assertEquals("_i$yhp", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("$U2a4BJO5CVE):J&E7", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("_i$yhp", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("_i$yhp", element1.tagName());
      assertEquals("$U2a4BJO5CVE):J&E7", element1.baseUri());
      assertEquals("_i$yhp", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertFalse(tag0.equals((Object)tag1));
      assertNotSame(tag0, tag1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('F');
      assertEquals(1, charArrayWriter0.size());
      assertEquals("F", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter1.size());
      assertEquals("F", charArrayWriter1.toString());
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertNotNull(charArrayWriter1);
      
      int int0 = 4122;
      // Undeclared exception!
      try { 
        charArrayWriter1.append((CharSequence) "_i$yhp", 27, 4122);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s", "s");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("s", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = new Document("s");
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("s", document1.location());
      assertEquals("s", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      
      document1.parentNode = (Node) document1;
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("s", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("s", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.parentNode.siblingIndex());
      assertTrue(document1.parentNode.hasParent());
      
      Element element0 = document1.nextElementSibling();
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("s", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("s", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("UJ?L^", "UJ?L^");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("UJ?L^", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("UJ?L^", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("\"^@eJydYnt]?");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      TextNode textNode0 = cDataNode0.text("i//a2B39(=rpN=tob");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertEquals("#cdata", textNode0.nodeName());
      assertSame(cDataNode0, textNode0);
      assertSame(textNode0, cDataNode0);
      assertNotNull(textNode0);
      
      Element element0 = document0.prependElement("aside");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("UJ?L^", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("UJ?L^", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("aside", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("UJ?L^", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("aside", element0.nodeName());
      assertNotNull(element0);
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("UJ?L^", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("UJ?L^", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("UJ?L^", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("UJ?L^", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      String string1 = document1.ownText();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("UJ?L^", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("UJ?L^", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("UJ?L^", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("UJ?L^", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document2 = (Document)document1.text("");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("UJ?L^", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("UJ?L^", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("UJ?L^", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("UJ?L^", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("UJ?L^", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("UJ?L^", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      Element element1 = document1.nextElementSibling();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("UJ?L^", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("UJ?L^", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("UJ?L^", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("UJ?L^", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "3j*6LlXa";
      Document document0 = Parser.parse("3j*6LlXa", "3j*6LlXa");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("3j*6LlXa", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("3j*6LlXa", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("3j*6LlXa", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("3j*6LlXa", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("3j*6LlXa", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("3j*6LlXa", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document1.val("3j*6LlXa");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("3j*6LlXa", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("3j*6LlXa", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("3j*6LlXa", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("3j*6LlXa", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("3j*6LlXa", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("3j*6LlXa", document2.location());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      document2.siblingIndex = (-1492);
      assertEquals((-1492), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("3j*6LlXa", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("3j*6LlXa", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals((-1492), document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("3j*6LlXa", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("3j*6LlXa", document1.baseUri());
      assertEquals((-1492), document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("3j*6LlXa", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("3j*6LlXa", document2.location());
      
      document2.parentNode = (Node) document0;
      assertEquals((-1492), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("3j*6LlXa", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("3j*6LlXa", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals((-1492), document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("3j*6LlXa", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("3j*6LlXa", document1.baseUri());
      assertEquals((-1492), document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("3j*6LlXa", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("3j*6LlXa", document2.location());
      assertTrue(document2.parentNode.hasParent());
      assertEquals((-1492), document2.parentNode.siblingIndex());
      
      String string1 = "s";
      boolean boolean0 = document2.hasAttr("s");
      assertEquals((-1492), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("3j*6LlXa", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("3j*6LlXa", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals((-1492), document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("3j*6LlXa", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("3j*6LlXa", document1.baseUri());
      assertEquals((-1492), document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("3j*6LlXa", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("3j*6LlXa", document2.location());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(boolean0);
      
      String string2 = "REMOVE";
      // Undeclared exception!
      try { 
        document1.appendTo(document2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "</");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("</", document1.location());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      String string0 = document1.ownText();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("</", document1.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Element element0 = document1.body();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("</", document1.location());
      assertEquals("</", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(element0);
      
      Element element1 = element0.doClone(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("</", document1.location());
      assertEquals("</", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("</", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      
      List<TextNode> list0 = element0.textNodes();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("</", document1.location());
      assertEquals("</", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "s";
      Document document0 = Parser.parseBodyFragmentRelaxed("s", "s");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("s", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasSameValue("s");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("s", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("         ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Document.createShell("LDj`{>/qm4hRM");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("LDj`{>/qm4hRM", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("LDj`{>/qm4hRM", document0.location());
      assertNotNull(document0);
      
      String string0 = document0.cssSelector();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("LDj`{>/qm4hRM", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("LDj`{>/qm4hRM", document0.location());
      assertEquals("#root", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Elements elements0 = document0.getElementsByTag("Iq@w");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("LDj`{>/qm4hRM", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("LDj`{>/qm4hRM", document0.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Document document1 = (Document)document0.attr("tw!4jW>ad*.t.O@r", (String) null);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("LDj`{>/qm4hRM", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("LDj`{>/qm4hRM", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("LDj`{>/qm4hRM", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("LDj`{>/qm4hRM", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Element element0 = document1.prependElement("W_oG7Dq~{");
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("LDj`{>/qm4hRM", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("LDj`{>/qm4hRM", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("LDj`{>/qm4hRM", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("LDj`{>/qm4hRM", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("w_og7dq~{", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("w_og7dq~{", element0.nodeName());
      assertEquals("LDj`{>/qm4hRM", element0.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(element0);
      
      Element element1 = document0.shallowClone();
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("LDj`{>/qm4hRM", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("LDj`{>/qm4hRM", document0.location());
      assertFalse(element1.hasParent());
      assertEquals("LDj`{>/qm4hRM", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("#root", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("#root", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      assertSame(document0, document1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      
      Document document2 = (Document)document1.prependChild(element0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("LDj`{>/qm4hRM", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("LDj`{>/qm4hRM", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("LDj`{>/qm4hRM", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("LDj`{>/qm4hRM", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("w_og7dq~{", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("w_og7dq~{", element0.nodeName());
      assertEquals("LDj`{>/qm4hRM", element0.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("LDj`{>/qm4hRM", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("LDj`{>/qm4hRM", document2.location());
      assertFalse(element0.equals((Object)element1));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(element0, element1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      document2.siblingIndex = (-1634);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-1634), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("LDj`{>/qm4hRM", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("LDj`{>/qm4hRM", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("LDj`{>/qm4hRM", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals((-1634), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("LDj`{>/qm4hRM", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("w_og7dq~{", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("w_og7dq~{", element0.nodeName());
      assertEquals("LDj`{>/qm4hRM", element0.baseUri());
      assertEquals((-1634), document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("LDj`{>/qm4hRM", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("LDj`{>/qm4hRM", document2.location());
      
      Document document3 = (Document)document2.text("#root");
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-1634), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("LDj`{>/qm4hRM", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("LDj`{>/qm4hRM", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("LDj`{>/qm4hRM", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals((-1634), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("LDj`{>/qm4hRM", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("w_og7dq~{", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("w_og7dq~{", element0.nodeName());
      assertEquals("LDj`{>/qm4hRM", element0.baseUri());
      assertEquals((-1634), document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("LDj`{>/qm4hRM", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("LDj`{>/qm4hRM", document2.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals((-1634), document3.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals("LDj`{>/qm4hRM", document3.location());
      assertEquals("LDj`{>/qm4hRM", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(element0.equals((Object)element1));
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(element0, element1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertNotNull(document3);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "DkERl_Sl";
      Element element0 = new Element("DkERl_Sl");
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("DkERl_Sl", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("DkERl_Sl", element0.nodeName());
      assertNotNull(element0);
      
      CDataNode cDataNode0 = new CDataNode("Khbs3{QF| /:n)2");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Node node0 = cDataNode0.doClone(element0);
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("DkERl_Sl", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("DkERl_Sl", element0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#cdata", node0.nodeName());
      assertTrue(node0.hasParent());
      assertFalse(node0.equals((Object)cDataNode0));
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        element0.prependChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("DkERl_S+", "DkERl_S+");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("DkERl_S+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("DkERl_S+", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      document0.setSiblingIndex(65533);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(65533, document0.siblingIndex());
      assertEquals("DkERl_S+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("DkERl_S+", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.appendText("DkERl_S+");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(65533, document0.siblingIndex());
      assertEquals("DkERl_S+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("DkERl_S+", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("DkERl_S+", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("DkERl_S+", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(65533, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("DkERl_S+"));
      assertNotNull(linkedHashSet0);
      
      Elements elements0 = document1.getElementsMatchingText("DkERl_S+");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(65533, document0.siblingIndex());
      assertEquals("DkERl_S+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("DkERl_S+", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("DkERl_S+", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("DkERl_S+", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(65533, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parse("U[?>I=YN\"gD", "U[?>I=YN\"gD");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("7y:\"\"k@L &D-x7(");
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Node node0 = cDataNode0.doClone(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertTrue(node0.hasParent());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#cdata", node0.nodeName());
      assertFalse(node0.equals((Object)cDataNode0));
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertNotNull(node0);
      
      document0.parentNode = node0;
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertTrue(node0.hasParent());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#cdata", node0.nodeName());
      assertTrue(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      Element element0 = document0.getElementById("U[?>I=YN\"gD");
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNull(element0);
      
      // Undeclared exception!
      document0.prependElement("U[?>I=YN\"gD");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Tag tag0 = Tag.valueOf("BeforeDoctypeSystemIdentifier");
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals("BeforeDoctypeSystemIdentifier", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertEquals("BeforeDoctypeSystemIdentifier", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "+_&YD;4LX8DK,L#");
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals("BeforeDoctypeSystemIdentifier", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertEquals("BeforeDoctypeSystemIdentifier", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(element0.hasParent());
      assertEquals("+_&YD;4LX8DK,L#", element0.baseUri());
      assertEquals("BeforeDoctypeSystemIdentifier", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("BeforeDoctypeSystemIdentifier", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Elements elements0 = element0.getElementsByTag("BeforeDoctypeSystemIdentifier");
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals("BeforeDoctypeSystemIdentifier", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertEquals("BeforeDoctypeSystemIdentifier", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(element0.hasParent());
      assertEquals("+_&YD;4LX8DK,L#", element0.baseUri());
      assertEquals("BeforeDoctypeSystemIdentifier", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("BeforeDoctypeSystemIdentifier", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element1 = element0.clone();
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals("BeforeDoctypeSystemIdentifier", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertEquals("BeforeDoctypeSystemIdentifier", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(element0.hasParent());
      assertEquals("+_&YD;4LX8DK,L#", element0.baseUri());
      assertEquals("BeforeDoctypeSystemIdentifier", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("BeforeDoctypeSystemIdentifier", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("BeforeDoctypeSystemIdentifier", element1.nodeName());
      assertEquals("BeforeDoctypeSystemIdentifier", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("+_&YD;4LX8DK,L#", element1.baseUri());
      assertFalse(element1.hasParent());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Document.createShell("<_88=7J");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<_88=7J", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<_88=7J", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Comment comment0 = new Comment("??t", "0_f}");
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      document0.parentNode = (Node) comment0;
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<_88=7J", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<_88=7J", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      
      Element element0 = document0.body();
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<_88=7J", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<_88=7J", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("<_88=7J", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      Element element1 = element0.addClass("");
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<_88=7J", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<_88=7J", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("<_88=7J", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("<_88=7J", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.indentAmount(12);
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(12, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(12, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(12, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotNull(document_OutputSettings3);
      
      CharsetEncoder charsetEncoder0 = document_OutputSettings3.encoder();
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(12, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(12, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(12, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotNull(charsetEncoder0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.syntax(document_OutputSettings_Syntax0);
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(12, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(12, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(12, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(12, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.outline());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotNull(document_OutputSettings4);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document1 = document0.outputSettings(document_OutputSettings4);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<_88=7J", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<_88=7J", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(12, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(12, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(12, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(12, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.outline());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("<_88=7J", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("<_88=7J", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertSame(document0, document1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document1.getAllElements();
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<_88=7J", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<_88=7J", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(12, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(12, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(12, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(12, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.outline());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("<_88=7J", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("<_88=7J", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertSame(document0, document1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document1, document0);
      assertNotNull(elements0);
      
      String string0 = document1.className();
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<_88=7J", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<_88=7J", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(12, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(12, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(12, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(12, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.outline());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("<_88=7J", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("<_88=7J", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertSame(document0, document1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document1, document0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Attributes attributes0 = document0.attributes();
      assertEquals(0, attributes0.size());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<_88=7J", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<_88=7J", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertSame(document0, document1);
      assertNotNull(attributes0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings4.charset(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(12, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.escapeMode());
      assertFalse(document_OutputSettings5.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings5.syntax());
      assertFalse(document_OutputSettings5.outline());
      assertEquals(12, document_OutputSettings5.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(12, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(12, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(12, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.outline());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings5, document_OutputSettings4);
      assertSame(document_OutputSettings5, document_OutputSettings1);
      assertSame(document_OutputSettings5, document_OutputSettings0);
      assertNotSame(document_OutputSettings5, document_OutputSettings2);
      assertSame(document_OutputSettings5, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings5);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings5);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings5);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotNull(document_OutputSettings5);
      
      Attributes attributes1 = document1.attributes();
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<_88=7J", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<_88=7J", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(12, document_OutputSettings0.indentAmount());
      assertEquals(0, attributes1.size());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(12, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(12, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(12, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.outline());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("<_88=7J", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("<_88=7J", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertSame(document0, document1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(attributes1, attributes0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings5);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings5);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings5);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document1, document0);
      assertNotNull(attributes1);
      
      // Undeclared exception!
      try { 
        document1.lastElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("F", "F");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("F", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("F", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("F", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("F", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("F", document1.location());
      assertEquals("F", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.text("F");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("F", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("F", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("F", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("F", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      document2.parentNode = (Node) document0;
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("F", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("F", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("F", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("F", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertTrue(document2.parentNode.hasParent());
      assertEquals(0, document2.parentNode.siblingIndex());
      
      Element element0 = document0.nextElementSibling();
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("F", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("F", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("jr3Pl{J\"ZJ6L|G'`' E", "jr3Pl{J\"ZJ6L|G'`' E");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("jr3Pl{J\"ZJ6L|G'`' E");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      TextNode textNode0 = cDataNode0.text((String) null);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertEquals("#cdata", textNode0.nodeName());
      assertSame(cDataNode0, textNode0);
      assertSame(textNode0, cDataNode0);
      assertNotNull(textNode0);
      
      document0.parentNode = (Node) cDataNode0;
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document0.baseUri());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertFalse(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      Element element0 = document0.prependElement(" > ");
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document0.baseUri());
      assertEquals(">", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.tagName());
      assertNotNull(element0);
      
      String string0 = element0.ownText();
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document0.baseUri());
      assertEquals(">", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.tagName());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = document0.ownText();
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document0.baseUri());
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Document document1 = (Document)document0.text("jr3Pl{J\"ZJ6L|G'`' E");
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document0.nextElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("Children collection to be inserted must not be null.");
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      TextNode textNode0 = cDataNode0.text((String) null);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertEquals("#cdata", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertSame(cDataNode0, textNode0);
      assertSame(textNode0, cDataNode0);
      assertNotNull(textNode0);
      
      document0.parentNode = (Node) cDataNode0;
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      Element element0 = document0.prependElement(" > ");
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.tagName());
      assertNotNull(element0);
      
      String string0 = element0.ownText();
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.tagName());
      assertEquals("", string0);
      assertNotNull(string0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("Children collection to be inserted must not be null."));
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s", "s");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text("s");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("s", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("s", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      document1.setSiblingIndex((-1256));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals((-1256), document0.siblingIndex());
      assertEquals("s", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals((-1256), document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("s", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("s", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.parentNode = (Node) document1;
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals((-1256), document0.siblingIndex());
      assertEquals("s", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("s", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals((-1256), document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("s", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("s", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals((-1256), document1.parentNode.siblingIndex());
      assertTrue(document1.parentNode.hasParent());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("s");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("jr3Pl{J\"ZJ6L|G'`' E", "jr3Pl{J\"ZJ6L|G'`' E");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document0.baseUri());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("jr3Pl{J\"ZJ6L|G'`' E");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      TextNode textNode0 = cDataNode0.text((String) null);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#cdata", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertSame(cDataNode0, textNode0);
      assertSame(textNode0, cDataNode0);
      assertNotNull(textNode0);
      
      document0.parentNode = (Node) cDataNode0;
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document0.baseUri());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      
      Element element0 = document0.prependElement(" > ");
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.tagName());
      assertEquals(">", element0.nodeName());
      assertNotNull(element0);
      
      String string0 = element0.ownText();
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.tagName());
      assertEquals(">", element0.nodeName());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = document0.ownText();
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document0.baseUri());
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Document document1 = (Document)document0.text("jr3Pl{J\"ZJ6L|G'`' E");
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("jr3Pl{J\"ZJ6L|G'`' E", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("\"x5JdYv~vZI");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = new Document("Jv3+_Db&}a*gWm~");
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Jv3+_Db&}a*gWm~", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Jv3+_Db&}a*gWm~", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      MockPrintWriter mockPrintWriter0 = document0.html((MockPrintWriter) null);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Jv3+_Db&}a*gWm~", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Jv3+_Db&}a*gWm~", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNull(mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "time";
      Document document0 = Document.createShell("time");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("time", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("time", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      String string1 = document0.val();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("time", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("time", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Element element0 = document0.nextElementSibling();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("time", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("time", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNull(element0);
      
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("DkERl_Sl", "DkERl_Sl");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("DkERl_Sl", document0.location());
      assertEquals("DkERl_Sl", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = new Element("X`8Kir");
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("X`8Kir", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("X`8Kir", element0.tagName());
      assertNotNull(element0);
      
      Document document1 = (Document)document0.prependChild(element0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("DkERl_Sl", document0.location());
      assertEquals("DkERl_Sl", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("X`8Kir", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("X`8Kir", element0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("DkERl_Sl", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("DkERl_Sl", document1.location());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      String string0 = document1.cssSelector();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("DkERl_Sl", document0.location());
      assertEquals("DkERl_Sl", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("X`8Kir", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("X`8Kir", element0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("DkERl_Sl", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("DkERl_Sl", document1.location());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", string0);
      assertNotNull(string0);
      
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("X`8Kir", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("X`8Kir", element0.tagName());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "^rg.jsoup.nodes.Element$P";
      Document document0 = Parser.parseBodyFragmentRelaxed("^rg.jsoup.nodes.Element$P", "drs+j");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("drs+j", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("drs+j", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("^rg.jsoup.nodes.Element$P");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("drs+j", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("drs+j", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("drs+j", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("drs+j", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = document0.normalise();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("drs+j", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("drs+j", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("drs+j", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("drs+j", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      // Undeclared exception!
      try { 
        document2.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Document.createShell("DkERl_S+");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("DkERl_S+", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("DkERl_S+", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.appendText(" E");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("DkERl_S+", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("DkERl_S+", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("DkERl_S+", document1.baseUri());
      assertEquals("DkERl_S+", document1.location());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      document0.setParentNode(document1);
      assertFalse(document0.isBlock());
      assertEquals("DkERl_S+", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("DkERl_S+", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("DkERl_S+", document1.baseUri());
      assertEquals("DkERl_S+", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsContainingText("DkERl_S+");
      assertFalse(document0.isBlock());
      assertEquals("DkERl_S+", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("DkERl_S+", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      assertNotNull(elements0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(" E"));
      assertNotNull(linkedHashSet0);
      
      String string0 = document0.text();
      assertFalse(document0.isBlock());
      assertEquals("DkERl_S+", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("DkERl_S+", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertSame(document0, document1);
      assertEquals("E", string0);
      assertNotNull(string0);
      
      String string1 = "iDkERl_Sl";
      // Undeclared exception!
      document0.wrap("iDkERl_Sl");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ForeignContent", "time");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("time", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("time", document0.location());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("time", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("time", document0.location());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("time", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("time", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      String string0 = document1.ownText();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("time", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("time", document0.location());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("time", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("time", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Elements elements0 = document0.getElementsByAttributeValue("PV[GA8U|4c+v:X2", "ForeignContent");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("time", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("time", document0.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      assertNotNull(elements0);
      
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text("");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      document1.parentNode = (Node) document1;
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.parentNode.siblingIndex());
      assertTrue(document1.parentNode.hasParent());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(linkedHashSet0);
      
      String string0 = document1.val();
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      document0.before("z$}2tmr%iTI%EwJY");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("lsI z=1K^}m", "lsI z=1K^}m");
      assertEquals(1, document0.childNodeSize());
      assertEquals("lsI z=1K^}m", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("lsI z=1K^}m", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = Parser.parseBodyFragmentRelaxed("lsI z=1K^}m", "lsI z=1K^}m");
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("lsI z=1K^}m", document1.location());
      assertEquals("lsI z=1K^}m", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document document2 = (Document)document1.prependChild(document1);
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("lsI z=1K^}m", document1.location());
      assertEquals("lsI z=1K^}m", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("lsI z=1K^}m", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("lsI z=1K^}m", document2.location());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      
      List<TextNode> list0 = document2.textNodes();
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("lsI z=1K^}m", document1.location());
      assertEquals("lsI z=1K^}m", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("lsI z=1K^}m", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("lsI z=1K^}m", document2.location());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(list0);
      
      String string0 = document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
      assertEquals("lsI z=1K^}m", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("lsI z=1K^}m", document0.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals("#root", string0);
      assertNotNull(string0);
      
      Elements elements0 = document0.nextElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("lsI z=1K^}m", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("lsI z=1K^}m", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(elements0);
      
      Document document3 = (Document)document2.doClone(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("lsI z=1K^}m", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("lsI z=1K^}m", document0.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("lsI z=1K^}m", document1.location());
      assertEquals("lsI z=1K^}m", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("lsI z=1K^}m", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("lsI z=1K^}m", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("lsI z=1K^}m", document3.location());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("lsI z=1K^}m", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotNull(document3);
      
      Document document4 = (Document)document3.prepend("-}u&-ySG");
      assertEquals(1, document0.childNodeSize());
      assertEquals("lsI z=1K^}m", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("lsI z=1K^}m", document0.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("lsI z=1K^}m", document1.location());
      assertEquals("lsI z=1K^}m", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("lsI z=1K^}m", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("lsI z=1K^}m", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("lsI z=1K^}m", document3.location());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("lsI z=1K^}m", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(3, document3.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(3, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("lsI z=1K^}m", document4.location());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals("lsI z=1K^}m", document4.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document4);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document4, document1);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotNull(document4);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("DkERl_Sl", "DkERl_Sl");
      assertFalse(document0.hasParent());
      assertEquals("DkERl_Sl", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("DkERl_Sl", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Element element0 = new Element("video");
      assertEquals("video", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("video", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.prependChild(document0);
      assertEquals("DkERl_Sl", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("DkERl_Sl", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("video", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("video", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("video", element1.nodeName());
      assertEquals("video", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      String string0 = document0.cssSelector();
      assertEquals("DkERl_Sl", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("DkERl_Sl", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("video > #root", string0);
      assertNotNull(string0);
      
      String string1 = element1.text();
      assertEquals("DkERl_Sl", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("DkERl_Sl", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("video", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("video", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("video", element1.nodeName());
      assertEquals("video", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(string1.equals((Object)string0));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("DkERl_Sl", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parse("head", "CMf'\"9E:)+5");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("CMf'\"9E:)+5", document0.location());
      assertEquals("CMf'\"9E:)+5", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Elements elements0 = document0.previousElementSiblings();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("CMf'\"9E:)+5", document0.location());
      assertEquals("CMf'\"9E:)+5", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Element element0 = document0.body();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("CMf'\"9E:)+5", document0.location());
      assertEquals("CMf'\"9E:)+5", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CMf'\"9E:)+5", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.toggleClass("head");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("CMf'\"9E:)+5", document0.location());
      assertEquals("CMf'\"9E:)+5", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CMf'\"9E:)+5", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("CMf'\"9E:)+5", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Document document1 = (Document)document0.appendChild(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("CMf'\"9E:)+5", document0.location());
      assertEquals("CMf'\"9E:)+5", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CMf'\"9E:)+5", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CMf'\"9E:)+5", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("CMf'\"9E:)+5", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document1.val("head");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("CMf'\"9E:)+5", document0.location());
      assertEquals("CMf'\"9E:)+5", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CMf'\"9E:)+5", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CMf'\"9E:)+5", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("CMf'\"9E:)+5", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("CMf'\"9E:)+5", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("CMf'\"9E:)+5", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      String string0 = document1.outerHtml();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("CMf'\"9E:)+5", document0.location());
      assertEquals("CMf'\"9E:)+5", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CMf'\"9E:)+5", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CMf'\"9E:)+5", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("CMf'\"9E:)+5", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotNull(string0);
      
      Elements elements1 = element0.getElementsByAttributeValueStarting("+", "+");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("CMf'\"9E:)+5", document0.location());
      assertEquals("CMf'\"9E:)+5", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CMf'\"9E:)+5", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Elements elements2 = element0.getElementsByAttribute("body");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("CMf'\"9E:)+5", document0.location());
      assertEquals("CMf'\"9E:)+5", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CMf'\"9E:)+5", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      
      Document document3 = (Document)document0.prependText("body");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("CMf'\"9E:)+5", document0.location());
      assertEquals("CMf'\"9E:)+5", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("CMf'\"9E:)+5", document3.location());
      assertEquals(3, document3.childNodeSize());
      assertEquals("CMf'\"9E:)+5", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertNotNull(document3);
      
      Element element2 = element1.before("head");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("CMf'\"9E:)+5", document0.location());
      assertEquals("CMf'\"9E:)+5", document0.baseUri());
      assertEquals(4, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, element0.siblingIndex());
      assertEquals("CMf'\"9E:)+5", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(3, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("CMf'\"9E:)+5", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals(3, element2.siblingIndex());
      assertEquals("body", element2.nodeName());
      assertEquals("CMf'\"9E:)+5", element2.baseUri());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("body", element2.tagName());
      assertTrue(element2.isBlock());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertNotNull(element2);
      
      Document document4 = (Document)element1.parent();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("CMf'\"9E:)+5", document0.location());
      assertEquals("CMf'\"9E:)+5", document0.baseUri());
      assertEquals(4, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, element0.siblingIndex());
      assertEquals("CMf'\"9E:)+5", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(3, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("CMf'\"9E:)+5", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals("CMf'\"9E:)+5", document4.location());
      assertEquals("CMf'\"9E:)+5", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals(4, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertNotNull(document4);
      
      List<Node> list0 = document2.ensureChildNodes();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("CMf'\"9E:)+5", document0.location());
      assertEquals("CMf'\"9E:)+5", document0.baseUri());
      assertEquals(4, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, element0.siblingIndex());
      assertEquals("CMf'\"9E:)+5", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CMf'\"9E:)+5", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(4, document1.childNodeSize());
      assertEquals("CMf'\"9E:)+5", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("CMf'\"9E:)+5", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(4, document2.childNodeSize());
      assertEquals("CMf'\"9E:)+5", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("LF0kJe4g", "org.jsoup.nodes.Element$2");
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("LF0kJe4g");
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document1.prependChild(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      String string0 = document2.cssSelector();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(string0);
      
      Element element0 = document1.lastElementSibling();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("html", element0.nodeName());
      assertEquals(2, element0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertTrue(element0.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotNull(element0);
      
      boolean boolean0 = document0.hasClass("LF0kJe4g");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("LF0kJe4g", "org.jsoup.nodes.Element$2");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("LF0kJe4g");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document1.getElementsByClass("Did not find balanced marker at '");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("z$4n2tmr%iT%EwJW", "z$4n2tmr%iT%EwJW");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("z$4n2tmr%iT%EwJW", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("z$4n2tmr%iT%EwJW", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      String string0 = document0.className();
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("z$4n2tmr%iT%EwJW", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("z$4n2tmr%iT%EwJW", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Element element0 = document0.body();
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("z$4n2tmr%iT%EwJW", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("z$4n2tmr%iT%EwJW", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("z$4n2tmr%iT%EwJW", element0.baseUri());
      assertNotNull(element0);
      
      Elements elements0 = element0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("z$4n2tmr%iT%EwJW", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("z$4n2tmr%iT%EwJW", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("z$4n2tmr%iT%EwJW", element0.baseUri());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document1 = (Document)document0.text("");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("z$4n2tmr%iT%EwJW", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("z$4n2tmr%iT%EwJW", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("z$4n2tmr%iT%EwJW", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("z$4n2tmr%iT%EwJW", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("o8kl");
      assertNotNull(mockFileWriter0);
      
      // Undeclared exception!
      try { 
        element0.outerHtmlTail(mockFileWriter0, (-437), (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("UJ?L^", "UJ?L^");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("UJ?L^", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("UJ?L^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Element element0 = new Element("UJ?L^");
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("UJ?L^", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("UJ?L^", element0.nodeName());
      assertNotNull(element0);
      
      Element element1 = element0.prependChild(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("UJ?L^", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("UJ?L^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("UJ?L^", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("UJ?L^", element0.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("UJ?L^", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("UJ?L^", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      String string0 = document0.cssSelector();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("UJ?L^", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("UJ?L^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("UJ?L^ > #root", string0);
      assertNotNull(string0);
      
      Element element2 = document0.lastElementSibling();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("UJ?L^", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("UJ?L^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNull(element2);
      
      boolean boolean0 = element1.hasText();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("UJ?L^", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("UJ?L^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("UJ?L^", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("UJ?L^", element0.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("UJ?L^", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("UJ?L^", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertTrue(boolean0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        element0.outerHtmlHead(pipedWriter0, (-1198), document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.appendText("");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = document1.hasText();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(boolean0);
      
      Document document2 = (Document)document0.appendChild(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(3, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      Document document3 = Parser.parseBodyFragmentRelaxed(";M!b*", "");
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotNull(document3);
      
      Elements elements0 = document3.getElementsMatchingText("#%s");
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("z$}2tmr%iTI%EwJY", "z$}2tmr%iTI%EwJY");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}2tmr%iTI%EwJY", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("z$}2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text("");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}2tmr%iTI%EwJY", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("z$}2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("z$}2tmr%iTI%EwJY", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("z$}2tmr%iTI%EwJY", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document1.attr((String) null, "z$}2tmr%iTI%EwJY");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Document.createShell("U[?>I=YN\"gD");
      assertFalse(document0.hasParent());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertNotNull(document0);
      
      document0.setBaseUri("U[?>I=YN\"gD");
      assertFalse(document0.hasParent());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      
      boolean boolean0 = document0.hasClass("U[?>I=YN\"gD");
      assertFalse(document0.hasParent());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertFalse(boolean0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("U[?>I=YN\"gD"));
      assertNotNull(linkedHashSet0);
      
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan((-5526));
      assertNotNull(evaluator_IndexGreaterThan0);
      
      boolean boolean1 = document0.is((Evaluator) evaluator_IndexGreaterThan0);
      assertFalse(document0.hasParent());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      String string0 = parseSettings0.normalizeAttribute("7y:\"\"k@L &D-x7(");
      assertEquals("7y:\"\"k@l &d-x7(", string0);
      assertNotNull(string0);
      
      String string1 = Node.EmptyString;
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Tag tag0 = Tag.valueOf("7y:\"\"k@L &D-x7(", parseSettings0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7y:\"\"k@L &D-x7(");
      assertFalse(boolean0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      Document document0 = Parser.parse("zxMHQ='!w/", "org.jsoup.parser.HtmlTreeBuilder");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      Elements elements0 = element0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document1 = document0.clone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.location());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Set<String> set0 = document1.classNames();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.location());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(set0.contains("7y:\"\"k@L &D-x7("));
      assertNotNull(set0);
      
      Document document2 = new Document("org.jsoup.nodes.Element");
      assertEquals("org.jsoup.nodes.Element", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("org.jsoup.nodes.Element", document2.location());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      
      String string2 = document2.data();
      assertEquals("org.jsoup.nodes.Element", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("org.jsoup.nodes.Element", document2.location());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      Set<String> set1 = document1.classNames();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.location());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(set1, set0);
      assertFalse(set1.contains("7y:\"\"k@L &D-x7("));
      assertNotNull(set1);
      
      Element element1 = new Element("1Vy4,\"Y");
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("1Vy4,\"Y", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("1Vy4,\"Y", element1.tagName());
      assertFalse(element1.isBlock());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.ascii;
      document_OutputSettings0.coreCharset = entities_CoreCharset0;
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      
      CharsetEncoder charsetEncoder0 = document_OutputSettings2.encoder();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(charsetEncoder0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(626);
      assertEquals(626, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(626, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(626, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(626, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotNull(document_OutputSettings3);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      assertEquals(626, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(626, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(626, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(626, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertFalse(document_OutputSettings4.outline());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(626, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotNull(document_OutputSettings4);
      
      try { 
        element1.outerHtmlTail(pipedWriter0, (-1090), document_OutputSettings4);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text("");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      document1.parentNode = (Node) document0;
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.parentNode.hasParent());
      assertEquals(0, document1.parentNode.siblingIndex());
      
      // Undeclared exception!
      document0.html(":empty");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("z$}2tmr%iTI%EwJY", "z$}2tmr%iTI%EwJY");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("z$}2tmr%iTI%EwJY", document0.location());
      assertEquals("z$}2tmr%iTI%EwJY", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text("");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("z$}2tmr%iTI%EwJY", document0.location());
      assertEquals("z$}2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("z$}2tmr%iTI%EwJY", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("z$}2tmr%iTI%EwJY", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      document1.parentNode = (Node) document0;
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("z$}2tmr%iTI%EwJY", document0.location());
      assertEquals("z$}2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("z$}2tmr%iTI%EwJY", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("z$}2tmr%iTI%EwJY", document1.location());
      assertEquals(0, document1.parentNode.siblingIndex());
      assertTrue(document1.parentNode.hasParent());
      
      Element element0 = document1.lastElementSibling();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("z$}2tmr%iTI%EwJY", document0.location());
      assertEquals("z$}2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("z$}2tmr%iTI%EwJY", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("z$}2tmr%iTI%EwJY", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("UJ?L^", "UJ?L^");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("UJ?L^", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("UJ?L^", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Element element0 = new Element("UJ?L^");
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("UJ?L^", element0.tagName());
      assertEquals("UJ?L^", element0.nodeName());
      assertNotNull(element0);
      
      Pattern pattern0 = Pattern.compile("UJ?L^");
      assertEquals("UJ?L^", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("UJ?L^", pattern0.toString());
      assertNotNull(pattern0);
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("klsI z2=1K^}m", "klsI z2=1K^}m");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByAttribute("klsI z2=1K^}m");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String string0 = document0.data();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("klsI z2=1K^}m", "klsI z2=1K^}m");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = Parser.parseBodyFragmentRelaxed(">5FTP#w#'S,Q ", "I(Gre(D$@VaWH@");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("I(Gre(D$@VaWH@", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("I(Gre(D$@VaWH@", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      List<DataNode> list0 = document1.dataNodes();
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("I(Gre(D$@VaWH@", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("I(Gre(D$@VaWH@", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("#a`[[$;", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Element element0 = new Element("n(`pX+S");
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("n(`pX+S", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("n(`pX+S", element0.nodeName());
      assertNotNull(element0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("n(`pX+S"));
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add("kERh_l");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains("kERh_l"));
      assertFalse(linkedHashSet0.contains("n(`pX+S"));
      assertTrue(boolean0);
      
      Element element1 = element0.classNames((Set<String>) linkedHashSet0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("n(`pX+S", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("n(`pX+S", element0.nodeName());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("n(`pX+S", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("n(`pX+S", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertTrue(linkedHashSet0.contains("kERh_l"));
      assertFalse(linkedHashSet0.contains("n(`pX+S"));
      assertNotNull(element1);
      
      Tag tag0 = element0.tag();
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("n(`pX+S", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("n(`pX+S", element0.nodeName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("n(`pX+S", tag0.toString());
      assertEquals("n(`pX+S", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertSame(element0, element1);
      assertNotNull(tag0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Element element0 = new Element("textarea");
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.nodeName());
      assertEquals("textarea", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Document document0 = Document.createShell("textarea");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Element element1 = element0.appendTo(document1);
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("textarea", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("textarea", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("textarea", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertSame(element0, element1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Element element2 = element0.append("33?<~x9W%nCE5");
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("textarea", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element2.baseUri());
      assertEquals(1, element2.childNodeSize());
      assertEquals(1, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("textarea", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals("textarea", element2.tagName());
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertNotNull(element2);
      
      Element element3 = element0.after((Node) document1);
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("textarea", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.baseUri());
      assertEquals("textarea", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("", element3.baseUri());
      assertEquals(1, element3.childNodeSize());
      assertEquals("textarea", element3.tagName());
      assertEquals(1, element3.siblingIndex());
      assertTrue(element3.hasParent());
      assertEquals("textarea", element3.nodeName());
      assertFalse(element3.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertSame(element0, element3);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(element3, element0);
      assertSame(element3, element1);
      assertSame(element3, element2);
      assertNotNull(element3);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("UJ?L^", "UJ?L^");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("UJ?L^", document0.location());
      assertEquals("UJ?L^", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Element element0 = new Element("UJ?L^");
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("UJ?L^", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("UJ?L^", element0.nodeName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      Element element1 = element0.prependChild(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("UJ?L^", document0.location());
      assertEquals("UJ?L^", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("UJ?L^", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("UJ?L^", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("UJ?L^", element1.nodeName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals("UJ?L^", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      String string0 = document0.cssSelector();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("UJ?L^", document0.location());
      assertEquals("UJ?L^", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("UJ?L^ > #root", string0);
      assertNotNull(string0);
      
      Document document1 = new Document("UJ?L^");
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("UJ?L^", document1.location());
      assertEquals("UJ?L^", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("UJ?L^", "UJ?L^ > #root");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("UJ?L^", document0.location());
      assertEquals("UJ?L^", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("fr", locale1.toString());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("fr", locale1.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertFalse(set0.contains("UJ?L^"));
      assertNotNull(set0);
      
      Document document2 = (Document)document0.classNames(set0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("UJ?L^", document0.location());
      assertEquals("UJ?L^", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("fr", locale1.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("UJ?L^", document2.baseUri());
      assertEquals("UJ?L^", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(set0.contains("UJ?L^"));
      assertNotNull(document2);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("z$}2tmr%iTI%EwJY", "z$}2tmr%iTI%EwJY");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("z$}2tmr%iTI%EwJY", document0.location());
      assertEquals("z$}2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("z$}2tmr%iTI%EwJY", document0.location());
      assertEquals("z$}2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("z$}2tmr%iTI%EwJY", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("z$}2tmr%iTI%EwJY", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document1;
      // Undeclared exception!
      try { 
        document1.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("Iq@w", " \"");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" \"", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(" \"", document0.baseUri());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = parser0.parseFragmentInput("Iq@w", document0, " \"");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" \"", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(" \"", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      document0.childNodes = list0;
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" \"", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(" \"", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, document0.childNodes.size());
      assertFalse(document0.childNodes.isEmpty());
      
      String string0 = "Iur";
      // Undeclared exception!
      try { 
        document0.append("Iur");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("z$}n2tmr%iTI%EwJY", "z$}n2tmr%iTI%EwJY");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text("z$}n2tmr%iTI%EwJY");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.location());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = document0.clone();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("z$}n2tmr%iTI%EwJY", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      
      Document document3 = (Document)document1.appendText("#root");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.location());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("z$}n2tmr%iTI%EwJY", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("z$}n2tmr%iTI%EwJY", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertNotNull(document3);
      
      Set<String> set0 = document0.classNames();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertFalse(set0.contains("z$}n2tmr%iTI%EwJY"));
      assertNotNull(set0);
      
      String string0 = document1.text();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.location());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertEquals("z$}n2tmr%iTI%EwJY #root", string0);
      assertNotNull(string0);
      
      String string1 = document3.tagName();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.location());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("z$}n2tmr%iTI%EwJY", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("z$}n2tmr%iTI%EwJY", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertEquals("#root", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Pattern syntax error: ", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByAttributeValueStarting("Pattern syntax error: ", "Pattern syntax error: ");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Pattern syntax error: ", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Comment comment0 = new Comment("Pattern syntax error: ");
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertNotNull(comment0);
      
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertNotNull(xmlDeclaration0);
      
      Document document1 = (Document)document0.appendChild(xmlDeclaration0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Pattern syntax error: ", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertTrue(xmlDeclaration0.hasParent());
      assertEquals(1, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Pattern syntax error: ", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("Pattern syntax error: ", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements1 = document1.getElementsMatchingText("Pattern syntax error: ");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Pattern syntax error: ", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertTrue(xmlDeclaration0.hasParent());
      assertEquals(1, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Pattern syntax error: ", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("Pattern syntax error: ", document1.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      String string0 = document0.wholeText();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Pattern syntax error: ", document0.location());
      assertFalse(document0.isBlock());
      assertSame(document0, document1);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text("");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      document1.parentNode = (Node) document0;
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.parentNode.siblingIndex());
      assertTrue(document1.parentNode.hasParent());
      
      Set<String> set0 = document1.classNames();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(set0.contains(""));
      assertNotNull(set0);
      
      Pattern pattern0 = Pattern.compile("", 2643);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(2643, pattern0.flags());
      assertNotNull(pattern0);
      
      Pattern pattern1 = Pattern.compile("");
      assertEquals(0, pattern1.flags());
      assertEquals("", pattern1.toString());
      assertEquals("", pattern1.pattern());
      assertFalse(pattern1.equals((Object)pattern0));
      assertNotSame(pattern1, pattern0);
      assertNotNull(pattern1);
      
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(2643, pattern0.flags());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertFalse(pattern0.equals((Object)pattern1));
      assertSame(document0, document1);
      assertNotSame(pattern0, pattern1);
      assertNotNull(elements0);
      
      Set<String> set1 = document0.classNames();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertTrue(set1.equals((Object)set0));
      assertSame(document0, document1);
      assertNotSame(set1, set0);
      assertFalse(set1.contains(""));
      assertNotNull(set1);
      
      // Undeclared exception!
      document1.after("");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text("");
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      document1.parentNode = (Node) document0;
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.parentNode.hasParent());
      assertEquals(0, document1.parentNode.siblingIndex());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document2 = document0.clone();
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      
      Set<String> set0 = document1.classNames();
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(set0.contains(""));
      assertNotNull(set0);
      
      Elements elements0 = document2.previousElementSiblings();
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(elements0);
      
      // Undeclared exception!
      document0.attr("textarea", "h8NRS\"/{Osf");
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Document.createShell("klsI z2=1K^}m");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("klsI z2=1K^}m", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertNotNull(element0);
      
      List<DataNode> list0 = document0.dataNodes();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Set<String> set0 = document0.classNames();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("klsI z2=1K^}m"));
      assertNotNull(set0);
      
      Document document1 = (Document)document0.prepend("klsI z2=1K^}m");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("klsI z2=1K^}m", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("klsI z2=1K^}m", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Element element1 = element0.parent();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("klsI z2=1K^}m", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("html", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertEquals("klsI z2=1K^}m", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.nodeName());
      assertFalse(element1.equals((Object)element0));
      assertSame(document0, document1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Document.createShell("klsI z2=1K^}m");
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasText();
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(boolean0);
      
      Set<String> set0 = document0.classNames();
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("klsI z2=1K^}m"));
      assertNotNull(set0);
      
      Set<String> set1 = document0.classNames();
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertFalse(set1.contains("klsI z2=1K^}m"));
      assertNotNull(set1);
      
      boolean boolean1 = document0.isBlock();
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("U[?>I=YN\"gD", "U[?>I=YN\"gD");
      assertFalse(document0.hasParent());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertNotNull(document0);
      
      String string0 = document0.val();
      assertFalse(document0.hasParent());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed("UJ?L^", "UJ?L^");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("UJ?L^", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("UJ?L^", document0.baseUri());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      String string1 = "Iq@w";
      Element element0 = new Element("UJ?L^");
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("UJ?L^", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("UJ?L^", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.prependChild(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("UJ?L^", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("UJ?L^", document0.baseUri());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("UJ?L^", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("UJ?L^", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("UJ?L^", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertEquals("UJ?L^", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      String string2 = document0.cssSelector();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("UJ?L^", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("UJ?L^", document0.baseUri());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("UJ?L^ > #root", string2);
      assertNotNull(string2);
      
      Document document1 = new Document("Insert position out of bounds.");
      assertEquals(0, document1.siblingIndex());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      
      Element element2 = document1.previousElementSibling();
      assertEquals(0, document1.siblingIndex());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNull(element2);
      
      boolean boolean0 = document1.hasText();
      assertEquals(0, document1.siblingIndex());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertFalse(boolean0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertEquals(0, document1.siblingIndex());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      
      // Undeclared exception!
      try { 
        document2.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "H.<ut2ii~t=~efQE_m";
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = "body";
      Document document0 = Parser.parseBodyFragmentRelaxed("H.<ut2ii~t=~efQE_m", "body");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      Element element0 = document0.head();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.baseUri());
      assertNotNull(element0);
      
      element0.setParentNode(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.baseUri());
      
      Elements elements0 = element0.siblingElements();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.baseUri());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = document0.getElementsByClass("body");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Element element0 = new Element("DkERl_Sl");
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("DkERl_Sl", element0.nodeName());
      assertEquals("DkERl_Sl", element0.tagName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("DkERl_Sl", "nrbE(Vtd@y");
      assertEquals("nrbE(Vtd@y", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("nrbE(Vtd@y", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = Document.createShell("nrbE(Vtd@y");
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("nrbE(Vtd@y", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("nrbE(Vtd@y", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document1.doClone(document0);
      assertEquals("nrbE(Vtd@y", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("nrbE(Vtd@y", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("nrbE(Vtd@y", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("nrbE(Vtd@y", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("nrbE(Vtd@y", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("nrbE(Vtd@y", document2.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      
      Document document3 = (Document)document1.appendTo(document0);
      assertEquals("nrbE(Vtd@y", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("nrbE(Vtd@y", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("nrbE(Vtd@y", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("nrbE(Vtd@y", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("nrbE(Vtd@y", document3.baseUri());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("nrbE(Vtd@y", document3.location());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotNull(document3);
      
      Element element1 = document1.body();
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("nrbE(Vtd@y", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("nrbE(Vtd@y", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("nrbE(Vtd@y", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(element1.equals((Object)element0));
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("nrbE(Vtd@y", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("nrbE(Vtd@y", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotNull(list0);
      
      Elements elements0 = document0.getElementsByAttribute("|Hl58wC-M&mTfmO=");
      assertEquals("nrbE(Vtd@y", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("nrbE(Vtd@y", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Element element0 = new Element("DkERl_Sl");
      assertEquals(0, element0.childNodeSize());
      assertEquals("DkERl_Sl", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("DkERl_Sl", element0.tagName());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("DkERl_Sl"));
      assertNotNull(linkedHashSet0);
      
      element0.nodelistChanged();
      assertEquals(0, element0.childNodeSize());
      assertEquals("DkERl_Sl", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("DkERl_Sl", element0.tagName());
      assertFalse(element0.isBlock());
      
      boolean boolean0 = linkedHashSet0.add("$^");
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("DkERl_Sl"));
      assertTrue(linkedHashSet0.contains("$^"));
      assertTrue(boolean0);
      
      String string0 = element0.val();
      assertEquals(0, element0.childNodeSize());
      assertEquals("DkERl_Sl", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("DkERl_Sl", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Element element1 = new Element("Uz5>O\u0000gK]<NM|]c");
      assertFalse(element1.isBlock());
      assertEquals("Uz5>O\u0000gK]<NM|]c", element1.tagName());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("Uz5>O\u0000gK]<NM|]c", element1.nodeName());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      
      Set<String> set0 = element1.classNames();
      assertFalse(element1.isBlock());
      assertEquals("Uz5>O\u0000gK]<NM|]c", element1.tagName());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("Uz5>O\u0000gK]<NM|]c", element1.nodeName());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      assertFalse(set0.contains("DkERl_Sl"));
      assertNotNull(set0);
      
      Node[] nodeArray0 = element0.childNodesAsArray();
      assertEquals(0, element0.childNodeSize());
      assertEquals("DkERl_Sl", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("DkERl_Sl", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element0.equals((Object)element1));
      assertNotSame(element0, element1);
      assertEquals(0, nodeArray0.length);
      assertNotNull(nodeArray0);
      
      Element element2 = element0.val("header");
      assertEquals(0, element0.childNodeSize());
      assertEquals("DkERl_Sl", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("DkERl_Sl", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals("DkERl_Sl", element2.tagName());
      assertEquals("DkERl_Sl", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotNull(element2);
      
      Element element3 = element2.clone();
      assertEquals(0, element0.childNodeSize());
      assertEquals("DkERl_Sl", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("DkERl_Sl", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals("DkERl_Sl", element2.tagName());
      assertEquals("DkERl_Sl", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertEquals("", element3.baseUri());
      assertFalse(element3.hasParent());
      assertEquals("DkERl_Sl", element3.tagName());
      assertEquals(0, element3.childNodeSize());
      assertEquals(0, element3.siblingIndex());
      assertFalse(element3.isBlock());
      assertEquals("DkERl_Sl", element3.nodeName());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element2));
      assertNotSame(element0, element1);
      assertNotSame(element0, element3);
      assertSame(element0, element2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertNotSame(element2, element3);
      assertNotSame(element3, element0);
      assertNotSame(element3, element1);
      assertNotSame(element3, element2);
      assertNotNull(element3);
      
      boolean boolean1 = element1.hasClass("Q&WOwgP8$%1");
      assertFalse(element1.isBlock());
      assertEquals("Uz5>O\u0000gK]<NM|]c", element1.tagName());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("Uz5>O\u0000gK]<NM|]c", element1.nodeName());
      assertFalse(element1.equals((Object)element3));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertFalse(boolean1 == boolean0);
      assertNotSame(element1, element3);
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      assertFalse(boolean1);
      
      String string1 = element0.baseUri();
      assertEquals(0, element0.childNodeSize());
      assertEquals("DkERl_Sl", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("DkERl_Sl", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element0.equals((Object)element3));
      assertNotSame(element0, element1);
      assertNotSame(element0, element3);
      assertSame(element0, element2);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("InRow", "</");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("</", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Document document1 = document0.normalise();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      List<DataNode> list0 = document1.dataNodes();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.baseUri());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(list0);
      
      Elements elements0 = document0.getElementsByAttribute("</");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      assertNotNull(elements0);
      
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("z$}2tmr%iTI%EwJY", "z$}2tmr%iTI%EwJY");
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("z$}2tmr%iTI%EwJY", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text("");
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("z$}2tmr%iTI%EwJY", document0.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("z$}2tmr%iTI%EwJY", document1.baseUri());
      assertEquals("z$}2tmr%iTI%EwJY", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Pattern pattern0 = Pattern.compile("");
      assertEquals("", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertNotNull(pattern0);
      
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("z$}2tmr%iTI%EwJY", document0.baseUri());
      assertEquals("", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Element element0 = new Element("DkERl_Sl");
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("DkERl_Sl", element0.nodeName());
      assertEquals("DkERl_Sl", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.appendElement("n(`pX+S");
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("DkERl_Sl", element0.nodeName());
      assertEquals("DkERl_Sl", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("n(`px+s", element1.tagName());
      assertEquals("n(`px+s", element1.nodeName());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      
      Element element2 = element0.val("time");
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("DkERl_Sl", element0.nodeName());
      assertEquals("DkERl_Sl", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("DkERl_Sl", element2.tagName());
      assertEquals("DkERl_Sl", element2.nodeName());
      assertFalse(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotNull(element2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("DkERl_Sl"));
      assertNotNull(linkedHashSet0);
      
      Tag tag0 = Tag.valueOf("^lg]?ElKJ");
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertEquals("^lg]?ElKJ", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertEquals("^lg]?ElKJ", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      Element element3 = element0.clone();
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("DkERl_Sl", element0.nodeName());
      assertEquals("DkERl_Sl", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element3.childNodeSize());
      assertFalse(element3.hasParent());
      assertEquals("DkERl_Sl", element3.nodeName());
      assertEquals("DkERl_Sl", element3.tagName());
      assertEquals("", element3.baseUri());
      assertEquals(0, element3.siblingIndex());
      assertFalse(element3.isBlock());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element2));
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element0, element3);
      assertNotSame(element3, element0);
      assertNotSame(element3, element1);
      assertNotSame(element3, element2);
      assertNotNull(element3);
      
      Element element4 = element1.wrap("^lg]?ElKJ");
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("DkERl_Sl", element0.nodeName());
      assertEquals("DkERl_Sl", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("n(`px+s", element1.tagName());
      assertEquals("n(`px+s", element1.nodeName());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element0.equals((Object)element3));
      assertFalse(element1.equals((Object)element3));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element0, element3);
      assertNotSame(element1, element3);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertNull(element4);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Element element0 = new Element("DkERl_Sl");
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("DkERl_Sl", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("DkERl_Sl", element0.nodeName());
      assertNotNull(element0);
      
      Element element1 = element0.val("JoJ[j-mOB%:");
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("DkERl_Sl", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("DkERl_Sl", element0.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("DkERl_Sl", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals("DkERl_Sl", element1.tagName());
      assertFalse(element1.hasParent());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      element1.setParentNode(element0);
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("DkERl_Sl", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("DkERl_Sl", element0.nodeName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("DkERl_Sl", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals("DkERl_Sl", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("DkERl_Sl"));
      assertNotNull(linkedHashSet0);
      
      Tag tag0 = Tag.valueOf("^lg]?ElKJ");
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("^lg]?ElKJ", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("^lg]?ElKJ", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      Element element2 = element0.clone();
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("DkERl_Sl", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("DkERl_Sl", element0.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("DkERl_Sl", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals("DkERl_Sl", element2.tagName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertNotNull(element2);
      
      Attributes attributes0 = element1.attributes();
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("DkERl_Sl", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("DkERl_Sl", element0.nodeName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("DkERl_Sl", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals("DkERl_Sl", element1.tagName());
      assertEquals(1, attributes0.size());
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element2));
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(element1, element2);
      assertNotNull(attributes0);
      
      // Undeclared exception!
      try { 
        element1.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      assertFalse(document0.isBlock());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.append("Pattern syntax error: ");
      assertFalse(document0.isBlock());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("Pattern syntax error: ", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("Pattern syntax error: ", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      String string0 = document1.val();
      assertFalse(document0.isBlock());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("Pattern syntax error: ", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("Pattern syntax error: ", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Document document2 = (Document)document1.html("");
      assertFalse(document0.isBlock());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("Pattern syntax error: ", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("Pattern syntax error: ", document1.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("Pattern syntax error: ", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("Pattern syntax error: ", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("RawtextEndTagName", "lw.");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("lw.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("lw.", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text(":bp|5;AJ#Wp");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("lw.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("lw.", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("lw.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("lw.", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      String string0 = document0.className();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("lw.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("lw.", document0.baseUri());
      assertSame(document0, document1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document1;
      Document document2 = (Document)document0.insertChildren(0, nodeArray0);
      assertEquals("#root", document0.tagName());
      assertEquals("lw.", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("lw.", document0.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("lw.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("lw.", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(2, nodeArray0.length);
      assertNotNull(document2);
      
      Tag tag0 = Tag.valueOf("z$}n2tmr%iTI%EwJY");
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertEquals("z$}n2tmr%iTI%EwJY", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("z$}n2tmr%iTI%EwJY", tag0.getName());
      assertNotNull(tag0);
      
      Document document3 = (Document)document2.firstElementSibling();
      assertEquals("#root", document0.tagName());
      assertEquals("lw.", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("lw.", document0.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("lw.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("lw.", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("lw.", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("lw.", document3.location());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertEquals(2, nodeArray0.length);
      assertNotNull(document3);
      
      // Undeclared exception!
      document0.tagName("#declaration");
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByAttributeValueStarting("Pattern syntax error: ", "Pattern syntax error: ");
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string0 = document0.data();
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Set<String> set0 = document0.classNames();
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      
      Element element0 = document0.body();
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("Pattern syntax error: ", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.appendTo(document0);
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("Pattern syntax error: ", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Pattern syntax error: ", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Document.createShell("ot Q");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ot Q", document0.baseUri());
      assertEquals("ot Q", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Element element0 = document0.body();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ot Q", document0.baseUri());
      assertEquals("ot Q", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("ot Q", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.removeClass("ot Q");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ot Q", document0.baseUri());
      assertEquals("ot Q", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("ot Q", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("ot Q", element1.baseUri());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "ot Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("klsI z2=1K^}m", "klsI z2=1K^}m");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      List<DataNode> list0 = document0.dataNodes();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Elements elements0 = document0.getElementsByAttribute("klsI z2=1K^}m");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string0 = document0.data();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Document document1 = document0.normalise();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("klsI z2=1K^}m", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("klsI z2=1K^}m", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      boolean boolean0 = Element.preserveWhitespace(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertSame(document0, document1);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        document1.selectFirst("tLo/c@SJ`+8yj");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'tLo/c@SJ`+8yj': unexpected token at '/c@SJ`+8yj'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|03", "|03");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("|03", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("|03", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "|03");
      assertEquals("|03", stringWriter0.toString());
      assertEquals("|03", stringWriter1.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      
      StringWriter stringWriter2 = stringWriter1.append('(');
      assertEquals("|03(", stringWriter0.toString());
      assertEquals("|03(", stringWriter1.toString());
      assertEquals("|03(", stringWriter2.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertNotNull(stringWriter2);
      
      StringWriter stringWriter3 = document0.html(stringWriter2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("|03", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("|03", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("|03(\n<html>\n <head></head>\n <body>\n  |03\n </body>\n</html>", stringWriter0.toString());
      assertEquals("|03(\n<html>\n <head></head>\n <body>\n  |03\n </body>\n</html>", stringWriter1.toString());
      assertEquals("|03(\n<html>\n <head></head>\n <body>\n  |03\n </body>\n</html>", stringWriter2.toString());
      assertEquals("|03(\n<html>\n <head></head>\n <body>\n  |03\n </body>\n</html>", stringWriter3.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter3);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter3);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter3);
      assertSame(stringWriter3, stringWriter2);
      assertSame(stringWriter3, stringWriter1);
      assertSame(stringWriter3, stringWriter0);
      assertNotNull(stringWriter3);
      
      // Undeclared exception!
      try { 
        document0.tagName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Document.createShell("#declaration");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#declaration", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#declaration", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasText();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#declaration", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#declaration", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
      
      Element element0 = document0.body();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#declaration", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#declaration", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("#declaration", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      List<Node> list0 = Parser.parseFragment("#declaration", (Element) document0, "J:z", parseErrorList0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#declaration", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#declaration", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      String string0 = document0.data();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#declaration", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#declaration", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Element element1 = element0.prependText("%,_l^k");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#declaration", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#declaration", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("#declaration", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("#declaration", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Element element2 = document0.previousElementSibling();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#declaration", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#declaration", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNull(element2);
      
      Elements elements0 = element0.getElementsByClass("4b]Wj%unTx4&G}^");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#declaration", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#declaration", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("#declaration", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(element0, element1);
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text("");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      document1.parentNode = (Node) document0;
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.parentNode.siblingIndex());
      assertTrue(document1.parentNode.hasParent());
      
      Document document2 = document0.clone();
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.location());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = document1.parentNode;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document2;
      nodeArray0[3] = document1.parentNode;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      document2.addChildren(nodeArray0);
      assertEquals(2, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(3, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.location());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals(6, nodeArray0.length);
      
      Set<String> set0 = document1.classNames();
      assertEquals(2, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertFalse(set0.contains(""));
      assertNotNull(set0);
      
      String string0 = document1.data();
      assertEquals(2, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Element element0 = document2.previousElementSibling();
      assertEquals(2, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(3, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.location());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.tagName());
      assertEquals("html", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("klsI z2=1K^}m", "klsI z2=1K^}m");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("klsI z2=1K^}m", document0.location());
      assertNotNull(document0);
      
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("klsI z2=1K^}m", document0.location());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Elements elements0 = document0.getElementsByAttribute("klsI z2=1K^}m");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("klsI z2=1K^}m", document0.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String string0 = document0.data();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Document document1 = document0.normalise();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("klsI z2=1K^}m", document0.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("klsI z2=1K^}m", document1.location());
      assertEquals("klsI z2=1K^}m", document1.baseUri());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements1 = document0.parents();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Pattern pattern0 = Pattern.compile("");
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements2 = document1.getElementsMatchingText(pattern0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("klsI z2=1K^}m", document0.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("klsI z2=1K^}m", document1.location());
      assertEquals("klsI z2=1K^}m", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertEquals(4, elements2.size());
      assertFalse(elements2.isEmpty());
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Document.createShell("ot Q");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ot Q", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("ot Q", document0.baseUri());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Element element0 = document0.body();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ot Q", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("ot Q", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("ot Q", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      Elements elements0 = element0.previousElementSiblings();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ot Q", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("ot Q", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("ot Q", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      
      Tag tag0 = Tag.valueOf("~pu%S");
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("~pu%S", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals("~pu%S", tag0.toString());
      assertNotNull(tag0);
      
      Element element1 = element0.append("P\n:)S{Os[*");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ot Q", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("ot Q", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("ot Q", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("ot Q", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Element element2 = new Element(tag0, "9(Fqqu0@(!eI");
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("~pu%S", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals("~pu%S", tag0.toString());
      assertEquals("~pu%S", element2.tagName());
      assertEquals("9(Fqqu0@(!eI", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertEquals("~pu%S", element2.nodeName());
      assertFalse(element2.hasParent());
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertNotNull(element2);
      
      String string0 = element0.html();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ot Q", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("ot Q", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("ot Q", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(element0.equals((Object)element2));
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertEquals("P :)S{Os[*", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Tag tag0 = Tag.valueOf("nth-last-of-type");
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("nth-last-of-type", tag0.toString());
      assertEquals("nth-last-of-type", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertNotNull(tag0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("nth-last-of-type"));
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add("nth-last-of-type");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains("nth-last-of-type"));
      assertTrue(boolean0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("nth-last-of-type", "nth-last-of-type");
      assertEquals("nth-last-of-type", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("nth-last-of-type", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      String string0 = document0.val();
      assertEquals("nth-last-of-type", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("nth-last-of-type", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Document document1 = (Document)document0.toggleClass("nth-last-of-type");
      assertEquals("nth-last-of-type", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("nth-last-of-type", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("nth-last-of-type", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("nth-last-of-type", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      boolean boolean1 = document0.hasAttributes();
      assertEquals("nth-last-of-type", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("nth-last-of-type", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(boolean1 == boolean0);
      assertSame(document0, document1);
      assertTrue(boolean1);
      
      Document document2 = Parser.parse("]4T~E", "]4T~E");
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("]4T~E", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("]4T~E", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      
      Element element0 = document0.head();
      assertEquals("nth-last-of-type", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("nth-last-of-type", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("nth-last-of-type", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(element0);
      
      Element element1 = element0.prependText("DkERl_Sl");
      assertEquals("nth-last-of-type", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("nth-last-of-type", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("nth-last-of-type", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("nth-last-of-type", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertFalse(document0.equals((Object)document2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Node node0 = element1.previousSibling();
      assertEquals("nth-last-of-type", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("nth-last-of-type", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("nth-last-of-type", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("nth-last-of-type", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertFalse(document0.equals((Object)document2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNull(node0);
      
      Element element2 = element0.clone();
      assertEquals("nth-last-of-type", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("nth-last-of-type", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("nth-last-of-type", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element2.nodeName());
      assertEquals("nth-last-of-type", element2.baseUri());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertFalse(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("lsI z=1K^}m", "lsI z=1K^}m");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("lsI z=1K^}m", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("lsI z=1K^}m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.prepareEncoder();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      Element element0 = new Element("Iq@w");
      assertEquals("Iq@w", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("Iq@w", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.prependChild(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("lsI z=1K^}m", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("lsI z=1K^}m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Iq@w", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("Iq@w", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("Iq@w", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("Iq@w", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      String string0 = element1.cssSelector();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("lsI z=1K^}m", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("lsI z=1K^}m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Iq@w", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("Iq@w", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("Iq@w", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("Iq@w", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("Iq@w", string0);
      assertNotNull(string0);
      
      Document document1 = new Document("lsI z=1K^}m");
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("lsI z=1K^}m", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("lsI z=1K^}m", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      
      Element element2 = document0.previousElementSibling();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("lsI z=1K^}m", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("lsI z=1K^}m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNull(element2);
      
      Elements elements0 = document0.nextElementSiblings();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("lsI z=1K^}m", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("lsI z=1K^}m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      
      boolean boolean0 = document1.hasText();
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("lsI z=1K^}m", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("lsI z=1K^}m", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertFalse(boolean0);
      
      Element element3 = element1.appendChild(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("lsI z=1K^}m", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("lsI z=1K^}m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Iq@w", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("Iq@w", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertEquals("Iq@w", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("Iq@w", element1.nodeName());
      assertEquals(2, element1.childNodeSize());
      assertEquals(0, document1.childNodeSize());
      assertEquals("lsI z=1K^}m", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("lsI z=1K^}m", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(element3.isBlock());
      assertEquals(2, element3.childNodeSize());
      assertEquals("", element3.baseUri());
      assertEquals("Iq@w", element3.tagName());
      assertFalse(element3.hasParent());
      assertEquals("Iq@w", element3.nodeName());
      assertEquals(0, element3.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertSame(element1, element0);
      assertSame(element1, element3);
      assertNotSame(document1, document0);
      assertSame(element3, element0);
      assertSame(element3, element1);
      assertNotNull(element3);
      
      Elements elements1 = element1.getElementsMatchingText("#P,5qr~SN:\"VXliUf");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("lsI z=1K^}m", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("lsI z=1K^}m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Iq@w", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("Iq@w", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertEquals("Iq@w", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("Iq@w", element1.nodeName());
      assertEquals(2, element1.childNodeSize());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertSame(element1, element0);
      assertSame(element1, element3);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      String string1 = element0.wholeText();
      assertEquals("Iq@w", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("Iq@w", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertFalse(string1.equals((Object)string0));
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertEquals("lsI z=1K^}m", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("lsI z=1K^}m", "lsI z=1K^}m");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("lsI z=1K^}m", document0.location());
      assertEquals("lsI z=1K^}m", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.prepareEncoder();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      Element element0 = new Element("Iq@w");
      assertEquals(0, element0.siblingIndex());
      assertEquals("Iq@w", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Iq@w", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.prependChild(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("lsI z=1K^}m", document0.location());
      assertEquals("lsI z=1K^}m", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Iq@w", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Iq@w", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("Iq@w", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("Iq@w", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(13);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      List<Node> list0 = Parser.parseFragment("!:$6}=64j_KI(N|mE0Z", (Element) document0, "kERh_l", parseErrorList0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("lsI z=1K^}m", document0.location());
      assertEquals("lsI z=1K^}m", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        element1.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Document document0 = Parser.parse("Insert position out of bounds.", "z$}2tmr%iTI%EwJY");
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.getElementById("z$}2tmr%iTI%EwJY");
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNull(element0);
      
      Elements elements0 = document0.getElementsContainingOwnText("");
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("(kERl_l", "(kERl_l");
      assertFalse(parser0.isTrackErrors());
      assertEquals("(kERl_l", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("(kERl_l", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasText();
      assertFalse(parser0.isTrackErrors());
      assertEquals("(kERl_l", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("(kERl_l", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(boolean0);
      
      Element element0 = document0.body();
      assertFalse(parser0.isTrackErrors());
      assertEquals("(kERl_l", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("(kERl_l", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNull(element0);
      
      ParseErrorList parseErrorList0 = parser0.getErrors();
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      Elements elements0 = document0.getElementsByIndexEquals((-1470));
      assertFalse(parser0.isTrackErrors());
      assertEquals("(kERl_l", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("(kERl_l", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      boolean boolean1 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Document.createShell("U[?>I=YN\"gD");
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      document0.setBaseUri("U[?>I=YN\"gD");
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.body();
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("U[?>I=YN\"gD", element0.baseUri());
      assertNotNull(element0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseErrorList parseErrorList0 = parser0.getErrors();
      assertFalse(parser0.isTrackErrors());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      List<Node> list0 = Parser.parseFragment("U[?>I=YN\"gD", (Element) document0, "U[?>I=YN\"gD", parseErrorList0);
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(parser0.isTrackErrors());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Element element1 = element0.lastElementSibling();
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("U[?>I=YN\"gD", element0.baseUri());
      assertEquals("U[?>I=YN\"gD", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Set<String> set0 = element0.classNames();
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("U[?>I=YN\"gD", element0.baseUri());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertSame(element0, element1);
      assertFalse(set0.contains("U[?>I=YN\"gD"));
      assertNotNull(set0);
      
      String string0 = element1.text();
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("U[?>I=YN\"gD", element0.baseUri());
      assertEquals("U[?>I=YN\"gD", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Element element2 = element0.before((Node) element1);
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("U[?>I=YN\"gD", element0.baseUri());
      assertEquals("U[?>I=YN\"gD", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("U[?>I=YN\"gD", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.tagName());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      Document document0 = Parser.parse("U[?>I=YN\"gD", "U[?>I=YN\"gD");
      assertFalse(document0.hasParent());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertNotNull(document0);
      
      Set<String> set0 = document0.classNames();
      assertFalse(document0.hasParent());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("U[?>I=YN\"gD"));
      assertNotNull(set0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("U[?>I=YN\"gD", element0.baseUri());
      assertNotNull(element0);
      
      Elements elements0 = element0.getElementsMatchingText("[%s^=%s]");
      assertFalse(document0.hasParent());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("U[?>I=YN\"gD", element0.baseUri());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Document.createShell("body");
      assertFalse(document0.isBlock());
      assertEquals("body", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("body", document0.location());
      assertNotNull(document0);
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = document0.hasText();
      assertFalse(document0.isBlock());
      assertEquals("body", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("body", document0.location());
      assertFalse(boolean0);
      
      String string1 = document0.data();
      assertFalse(document0.isBlock());
      assertEquals("body", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("body", document0.location());
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Set<String> set0 = document0.classNames();
      assertFalse(document0.isBlock());
      assertEquals("body", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("body", document0.location());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(string1));
      assertNotNull(set0);
      
      Document document1 = (Document)document0.clone();
      assertFalse(document0.isBlock());
      assertEquals("body", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("body", document0.location());
      assertEquals("body", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("body", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document1.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("z$}n2tmr%iTI%EwJY", "z$}n2tmr%iTI%EwJY");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text("");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document1.previousElementSiblings();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      
      String string0 = document0.className();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertSame(document0, document1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Elements elements1 = document0.getElementsMatchingOwnText("");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(4, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Node[] nodeArray0 = new Node[0];
      Document document2 = (Document)document0.insertChildren(0, nodeArray0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("z$}n2tmr%iTI%EwJY", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("z$}n2tmr%iTI%EwJY", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(0, nodeArray0.length);
      assertNotNull(document2);
      
      Element element0 = document0.body();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("z$}n2tmr%iTI%EwJY", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotNull(element0);
      
      Element element1 = document2.child(0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("z$}n2tmr%iTI%EwJY", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("z$}n2tmr%iTI%EwJY", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("z$}n2tmr%iTI%EwJY", element1.baseUri());
      assertEquals("html", element1.tagName());
      assertFalse(element1.equals((Object)element0));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(element1, element0);
      assertEquals(0, nodeArray0.length);
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Document.createShell("ot Q");
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ot Q", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ot Q", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      CDataNode cDataNode0 = new CDataNode("ot Q");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      TextNode textNode0 = cDataNode0.text("br");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertSame(cDataNode0, textNode0);
      assertSame(textNode0, cDataNode0);
      assertNotNull(textNode0);
      
      document0.parentNode = (Node) textNode0;
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ot Q", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ot Q", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      document0.setBaseUri("w");
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ot Q", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("w", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("z$}2tmr%iTI%EwJY", "z$}2tmr%iTI%EwJY");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}2tmr%iTI%EwJY", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}2tmr%iTI%EwJY", document0.location());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text("");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}2tmr%iTI%EwJY", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}2tmr%iTI%EwJY", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("z$}2tmr%iTI%EwJY", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("z$}2tmr%iTI%EwJY", document1.baseUri());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      document1.parentNode = (Node) document0;
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}2tmr%iTI%EwJY", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}2tmr%iTI%EwJY", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("z$}2tmr%iTI%EwJY", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("z$}2tmr%iTI%EwJY", document1.baseUri());
      assertTrue(document1.parentNode.hasParent());
      assertEquals(0, document1.parentNode.siblingIndex());
      
      Document document2 = document0.clone();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}2tmr%iTI%EwJY", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}2tmr%iTI%EwJY", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("z$}2tmr%iTI%EwJY", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("z$}2tmr%iTI%EwJY", document2.location());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      
      Set<String> set0 = document1.classNames();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}2tmr%iTI%EwJY", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}2tmr%iTI%EwJY", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("z$}2tmr%iTI%EwJY", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("z$}2tmr%iTI%EwJY", document1.baseUri());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(set0.contains("z$}2tmr%iTI%EwJY"));
      assertNotNull(set0);
      
      boolean boolean1 = Element.preserveWhitespace(document1.parentNode);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}2tmr%iTI%EwJY", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}2tmr%iTI%EwJY", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("z$}2tmr%iTI%EwJY", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("z$}2tmr%iTI%EwJY", document1.baseUri());
      assertTrue(document1.parentNode.hasParent());
      assertEquals(0, document1.parentNode.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(boolean1 == boolean0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(boolean1);
      
      Elements elements0 = document0.getAllElements();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}2tmr%iTI%EwJY", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}2tmr%iTI%EwJY", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(elements0);
      
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = document1.text();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}2tmr%iTI%EwJY", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}2tmr%iTI%EwJY", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("z$}2tmr%iTI%EwJY", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("z$}2tmr%iTI%EwJY", document1.baseUri());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "";
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("z$}2tmr%iTI%EwJY", "z$}2tmr%iTI%EwJY");
      assertFalse(document0.isBlock());
      assertEquals("z$}2tmr%iTI%EwJY", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("z$}2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text("");
      assertFalse(document0.isBlock());
      assertEquals("z$}2tmr%iTI%EwJY", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("z$}2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("z$}2tmr%iTI%EwJY", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("z$}2tmr%iTI%EwJY", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      document1.parentNode = (Node) document0;
      assertFalse(document0.isBlock());
      assertEquals("z$}2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("z$}2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("z$}2tmr%iTI%EwJY", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("z$}2tmr%iTI%EwJY", document1.location());
      assertTrue(document1.parentNode.hasParent());
      assertEquals(0, document1.parentNode.siblingIndex());
      
      Elements elements0 = document0.previousElementSiblings();
      assertFalse(document0.isBlock());
      assertEquals("z$}2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("z$}2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      assertNotNull(elements0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document2 = parser0.parseInput("z$}2tmr%iTI%EwJY", "x?2}-^.@[kx'w2*vS");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("x?2}-^.@[kx'w2*vS", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("x?2}-^.@[kx'w2*vS", document2.baseUri());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      
      Elements elements1 = document2.getElementsByIndexEquals(6);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("x?2}-^.@[kx'w2*vS", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("x?2}-^.@[kx'w2*vS", document2.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Tag tag0 = Tag.valueOf("textarea");
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertEquals("textarea", tag0.getName());
      assertNotNull(tag0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", (Attributes) null);
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertEquals("textarea", tag0.getName());
      assertEquals("", pseudoTextElement0.baseUri());
      assertEquals("textarea", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("textarea", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertNotNull(pseudoTextElement0);
      
      Node[] nodeArray0 = pseudoTextElement0.childNodesAsArray();
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertEquals("textarea", tag0.getName());
      assertEquals("", pseudoTextElement0.baseUri());
      assertEquals("textarea", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("textarea", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, nodeArray0.length);
      assertNotNull(nodeArray0);
      
      PseudoTextElement pseudoTextElement1 = (PseudoTextElement)pseudoTextElement0.val("7y:\"\"k@l &d-x7(");
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertEquals("textarea", tag0.getName());
      assertEquals("", pseudoTextElement0.baseUri());
      assertEquals("textarea", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("textarea", pseudoTextElement0.tagName());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.hasParent());
      assertFalse(pseudoTextElement1.hasParent());
      assertEquals("", pseudoTextElement1.baseUri());
      assertEquals(0, pseudoTextElement1.siblingIndex());
      assertFalse(pseudoTextElement1.isBlock());
      assertEquals("textarea", pseudoTextElement1.tagName());
      assertEquals(1, pseudoTextElement1.childNodeSize());
      assertEquals("textarea", pseudoTextElement1.nodeName());
      assertSame(pseudoTextElement0, pseudoTextElement1);
      assertSame(pseudoTextElement1, pseudoTextElement0);
      assertNotNull(pseudoTextElement1);
      
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement(tag0, (String) null, (Attributes) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("z$}n2tmr%iTI%EwJY", "z$}n2tmr%iTI%EwJY");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text("");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      document1.parentNode = (Node) document0;
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.parentNode.hasParent());
      assertEquals(0, document1.parentNode.siblingIndex());
      
      Elements elements0 = document1.previousElementSiblings();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      
      Document document2 = new Document("z$}n2tmr%iTI%EwJY");
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("z$}n2tmr%iTI%EwJY", document2.baseUri());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      
      Set<String> set0 = document2.classNames();
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("z$}n2tmr%iTI%EwJY", document2.baseUri());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(set0.contains(""));
      assertNotNull(set0);
      
      Element element0 = document1.previousElementSibling();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNull(element0);
      
      Elements elements1 = document0.nextElementSiblings();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      boolean boolean1 = document2.hasText();
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("z$}n2tmr%iTI%EwJY", document2.baseUri());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Document.createShell("U[?>I=YN\"gD");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      document0.setBaseUri("U[?>I=YN\"gD");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.body();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("U[?>I=YN\"gD", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseErrorList parseErrorList0 = parser0.getErrors();
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      List<Node> list0 = Parser.parseFragment("U[?>I=YN\"gD", (Element) document0, "U[?>I=YN\"gD", parseErrorList0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Element element1 = element0.lastElementSibling();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("U[?>I=YN\"gD", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("U[?>I=YN\"gD", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Set<String> set0 = element0.classNames();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("U[?>I=YN\"gD", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertSame(element0, element1);
      assertFalse(set0.contains("U[?>I=YN\"gD"));
      assertNotNull(set0);
      
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("z$}n2tmr%iTI%EwJY", "z$}n2tmr%iTI%EwJY");
      assertFalse(document0.isBlock());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text("");
      assertFalse(document0.isBlock());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.location());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      document1.parentNode = (Node) document0;
      assertFalse(document0.isBlock());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.location());
      assertTrue(document1.parentNode.hasParent());
      assertEquals(0, document1.parentNode.siblingIndex());
      
      Elements elements0 = document0.previousElementSiblings();
      assertFalse(document0.isBlock());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      assertNotNull(elements0);
      
      Document document2 = Document.createShell("aNkl>pxpnmB");
      assertEquals("aNkl>pxpnmB", document2.baseUri());
      assertEquals("aNkl>pxpnmB", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      
      Document document3 = new Document("");
      assertEquals("", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotNull(document3);
      
      Element element0 = document3.previousElementSibling();
      assertEquals("", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNull(element0);
      
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Document.createShell("ot Q");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ot Q", document0.baseUri());
      assertEquals("ot Q", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = parser0.parseInput("ot Q", "<UL@W");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals("<UL@W", document1.location());
      assertEquals("<UL@W", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Element element0 = document1.body();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals("<UL@W", document1.location());
      assertEquals("<UL@W", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("<UL@W", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(element0);
      
      Document document2 = Parser.parseBodyFragment("I`}+.LJ|WkMK7f", "Pattern syntax error: ");
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Pattern syntax error: ", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("Pattern syntax error: ", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      
      Pattern pattern0 = Pattern.compile("<UL@W", (-3407));
      assertEquals((-3407), pattern0.flags());
      assertEquals("<UL@W", pattern0.pattern());
      assertEquals("<UL@W", pattern0.toString());
      assertNotNull(pattern0);
      
      Elements elements0 = element0.getElementsMatchingText(pattern0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals("<UL@W", document1.location());
      assertEquals("<UL@W", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("<UL@W", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals((-3407), pattern0.flags());
      assertEquals("<UL@W", pattern0.pattern());
      assertEquals("<UL@W", pattern0.toString());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotNull(elements0);
      
      Elements elements1 = element0.previousElementSiblings();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals("<UL@W", document1.location());
      assertEquals("<UL@W", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("<UL@W", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Document document3 = document1.clone();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals("<UL@W", document1.location());
      assertEquals("<UL@W", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("<UL@W", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("<UL@W", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotNull(document3);
      
      Set<String> set0 = document1.classNames();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals("<UL@W", document1.location());
      assertEquals("<UL@W", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertFalse(set0.contains("ot Q"));
      assertNotNull(set0);
      
      Document document4 = new Document("<UL@W");
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("<UL@W", document4.baseUri());
      assertEquals("<UL@W", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertNotNull(document4);
      
      String string0 = document4.data();
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("<UL@W", document4.baseUri());
      assertEquals("<UL@W", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Set<String> set1 = document1.classNames();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals("<UL@W", document1.location());
      assertEquals("<UL@W", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(set1, set0);
      assertFalse(set1.contains("ot Q"));
      assertNotNull(set1);
      
      Element element1 = document3.body();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals("<UL@W", document1.location());
      assertEquals("<UL@W", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("<UL@W", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("<UL@W", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals("<UL@W", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document3, document4);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      
      Element element2 = document3.getElementById("PkxS1ZpiF:9h^m2r");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals("<UL@W", document1.location());
      assertEquals("<UL@W", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("<UL@W", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("<UL@W", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document3, document4);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNull(element2);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("z$}n2tmr%iTI%EwJY", "z$}n2tmr%iTI%EwJY");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text("");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.baseUri());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      document1.parentNode = (Node) document0;
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.baseUri());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.parentNode.siblingIndex());
      assertTrue(document1.parentNode.hasParent());
      
      Elements elements0 = document0.previousElementSiblings();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      assertNotNull(elements0);
      
      Document document2 = Document.createShell("aNkl>pxpnmB");
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("aNkl>pxpnmB", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("aNkl>pxpnmB", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      
      Document document3 = new Document("");
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotNull(document3);
      
      Element element0 = document3.previousElementSibling();
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNull(element0);
      
      Elements elements1 = document0.nextElementSiblings();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Element element1 = document1.firstElementSibling();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.baseUri());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parse("U[?>I=YN\"gD", "U[?>I=YN\"gD");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Set<String> set0 = document0.classNames();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("U[?>I=YN\"gD"));
      assertNotNull(set0);
      
      Element element0 = document0.body();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("U[?>I=YN\"gD", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertNotNull(element0);
      
      Element element1 = element0.firstElementSibling();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("U[?>I=YN\"gD", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("U[?>I=YN\"gD", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Element$NodeList");
      assertEquals("org.jsoup.nodes.Element$NodeList", pattern0.toString());
      assertEquals("org.jsoup.nodes.Element$NodeList", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertNotNull(pattern0);
      
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("U[?>I=YN\"gD", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("U[?>I=YN\"gD", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$NodeList", pattern0.toString());
      assertEquals("org.jsoup.nodes.Element$NodeList", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Children collection to be inserted must not be null.");
      assertFalse(boolean0);
      
      Document document0 = Parser.parseBodyFragment("Children collection to be inserted must not be null.", "|Ty");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("|Ty", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|Ty", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("|Ty", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|Ty", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("|Ty", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("|Ty", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Element element0 = document1.body();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("|Ty", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|Ty", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("|Ty", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("|Ty", document1.location());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("|Ty", element0.baseUri());
      assertTrue(element0.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(element0);
      
      ParseErrorList parseErrorList0 = parser0.getErrors();
      assertFalse(parser0.isTrackErrors());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      List<Node> list0 = Parser.parseFragment("Children collection to be inserted must not be null.", (Element) document1, "Children collection to be inserted must not be null.", parseErrorList0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("|Ty", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|Ty", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("|Ty", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("|Ty", document1.location());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(list0);
      
      Element element1 = element0.lastElementSibling();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("|Ty", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|Ty", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("|Ty", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("|Ty", document1.location());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("|Ty", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("|Ty", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Set<String> set0 = element0.classNames();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("|Ty", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|Ty", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("|Ty", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("|Ty", document1.location());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("|Ty", element0.baseUri());
      assertTrue(element0.hasParent());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(element0, element1);
      assertFalse(set0.contains("Children collection to be inserted must not be null."));
      assertNotNull(set0);
      
      Document document2 = document0.clone();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("|Ty", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|Ty", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("|Ty", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("|Ty", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      
      String string0 = document1.text();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("|Ty", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|Ty", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("|Ty", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("|Ty", document1.location());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertEquals("Children collection to be inserted must not be null.", string0);
      assertNotNull(string0);
      
      Element element2 = document1.appendElement("Children collection to be inserted must not be null.");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("|Ty", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("|Ty", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("|Ty", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("|Ty", document1.location());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertEquals("children collection to be inserted must not be null.", element2.nodeName());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals("|Ty", element2.baseUri());
      assertEquals("children collection to be inserted must not be null.", element2.tagName());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotNull(element2);
      
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      String string0 = parseSettings0.normalizeAttribute("7y:\"\"k@L &D-x7(");
      assertEquals("7y:\"\"k@l &d-x7(", string0);
      assertNotNull(string0);
      
      String string1 = parseSettings0.normalizeTag("7y:\"\"k@l &d-x7(");
      assertTrue(string1.equals((Object)string0));
      assertEquals("7y:\"\"k@l &d-x7(", string1);
      assertNotNull(string1);
      
      Tag tag0 = Tag.valueOf("7y:\"\"k@L &D-x7(", parseSettings0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      Document document0 = Parser.parse("zxMHQ='!w/", "org.jsoup.parser.HtmlTreeBuilder");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      Elements elements0 = element0.previousElementSiblings();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document1 = document0.clone();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.location());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Set<String> set0 = document1.classNames();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.location());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(set0.contains("7y:\"\"k@l &d-x7("));
      assertNotNull(set0);
      
      Document document2 = new Document("org.jsoup.nodes.Element");
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("org.jsoup.nodes.Element", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("org.jsoup.nodes.Element", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      
      String string2 = document2.data();
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("org.jsoup.nodes.Element", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("org.jsoup.nodes.Element", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals("", string2);
      assertNotNull(string2);
      
      Set<String> set1 = document1.classNames();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.location());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(set1, set0);
      assertFalse(set1.contains("7y:\"\"k@l &d-x7("));
      assertNotNull(set1);
      
      Element element1 = document1.body();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.location());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element1.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      
      // Undeclared exception!
      try { 
        document1.getElementsMatchingText("7y:\"\"k@L &D-x7(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 7y:\"\"k@L &D-x7(
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("7y:\"\"k@L &D-x7(", parseSettings0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("7y:\"\"k@L &D-x7(", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertEquals("7y:\"\"k@L &D-x7(", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "7y:\"\"k@L &D-x7(");
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("7y:\"\"k@L &D-x7(", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertEquals("7y:\"\"k@L &D-x7(", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("7y:\"\"k@L &D-x7(", element0.nodeName());
      assertEquals("7y:\"\"k@L &D-x7(", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("abs:", "7y:\"\"k@L &D-x7(");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("7y:\"\"k@L &D-x7(", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7y:\"\"k@L &D-x7(", document0.baseUri());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByAttributeValueContaining("abs:", "id");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("7y:\"\"k@L &D-x7(", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7y:\"\"k@L &D-x7(", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document1 = (Document)document0.text("abs:");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("7y:\"\"k@L &D-x7(", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7y:\"\"k@L &D-x7(", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("7y:\"\"k@L &D-x7(", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("7y:\"\"k@L &D-x7(", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements1 = element0.previousElementSiblings();
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("7y:\"\"k@L &D-x7(", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertEquals("7y:\"\"k@L &D-x7(", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("7y:\"\"k@L &D-x7(", element0.nodeName());
      assertEquals("7y:\"\"k@L &D-x7(", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Document document2 = new Document("abs:");
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("abs:", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("abs:", document2.baseUri());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      
      Set<String> set0 = document2.classNames();
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("abs:", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("abs:", document2.baseUri());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(set0.contains("abs:"));
      assertNotNull(set0);
      
      Document document3 = new Document("&*");
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("&*", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("&*", document3.location());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      
      Element element1 = document3.body();
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("&*", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("&*", document3.location());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNull(element1);
      
      Element element2 = document3.getElementById("7y:\"\"k@L &D-x7(");
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("&*", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("&*", document3.location());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNull(element2);
      
      // Undeclared exception!
      try { 
        document1.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("[a-zA-Z_:][-a-zA-Z0-9_:.]*", "=%HUq");
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=%HUq", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=%HUq", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=%HUq", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=%HUq", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("=%HUq", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("=%HUq", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = document1.clone();
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=%HUq", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=%HUq", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("=%HUq", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("=%HUq", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("=%HUq", document2.baseUri());
      assertEquals("=%HUq", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)54;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[6] = (byte)105;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)117, (byte)56, (byte) (-92), (byte)58, (byte) (-34), (byte)54, (byte)105}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean2);
      
      Element element0 = document2.body();
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=%HUq", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=%HUq", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("=%HUq", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("=%HUq", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("=%HUq", document2.baseUri());
      assertEquals("=%HUq", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("=%HUq", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(element0);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      Element element1 = element0.wrap("=%HUq");
      assertFalse(parser0.isTrackErrors());
      assertTrue(element1.hasParent());
      assertEquals("=%HUq", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=%HUq", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=%HUq", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("=%HUq", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("=%HUq", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("=%HUq", document2.baseUri());
      assertEquals("=%HUq", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("=%HUq", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertSame(element1, element0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(element0, element1);
      assertNotNull(element1);
      
      String string0 = element0.val();
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=%HUq", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=%HUq", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("=%HUq", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("=%HUq", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("=%HUq", document2.baseUri());
      assertEquals("=%HUq", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("=%HUq", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(element0, element1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = element0.className();
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=%HUq", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=%HUq", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("=%HUq", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("=%HUq", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("=%HUq", document2.baseUri());
      assertEquals("=%HUq", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("=%HUq", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(element0, element1);
      assertEquals("", string1);
      assertNotNull(string1);
      
      Element element2 = element1.appendChild(document2);
      assertFalse(parser0.isTrackErrors());
      assertTrue(element1.hasParent());
      assertEquals("=%HUq", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=%HUq", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=%HUq", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("=%HUq", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("=%HUq", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("=%HUq", document2.baseUri());
      assertEquals("=%HUq", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("=%HUq", element2.baseUri());
      assertEquals("body", element2.tagName());
      assertEquals("body", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertTrue(element2.hasParent());
      assertEquals(2, element2.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("=%HUq", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("z$}n2tmr%iTI%EwJY", "z$}n2tmr%iTI%EwJY");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text("");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      document1.parentNode = (Node) document0;
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.location());
      assertTrue(document1.parentNode.hasParent());
      assertEquals(0, document1.parentNode.siblingIndex());
      
      Elements elements0 = document0.previousElementSiblings();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      assertNotNull(elements0);
      
      Document document2 = Document.createShell("aNkl>pxpnmB");
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("aNkl>pxpnmB", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("aNkl>pxpnmB", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      
      Document document3 = new Document("");
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertNotNull(document3);
      
      Element element0 = document3.previousElementSibling();
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNull(element0);
      
      Elements elements1 = document0.nextElementSiblings();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      boolean boolean1 = document3.hasText();
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(boolean1 == boolean0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      String string0 = parseSettings0.normalizeAttribute("7y:\"\"k@L &D-x7(");
      assertEquals("7y:\"\"k@l &d-x7(", string0);
      assertNotNull(string0);
      
      String string1 = parseSettings0.normalizeTag("7y:\"\"k@l &d-x7(");
      assertTrue(string1.equals((Object)string0));
      assertEquals("7y:\"\"k@l &d-x7(", string1);
      assertNotNull(string1);
      
      Tag tag0 = Tag.valueOf("7y:\"\"k@L &D-x7(", parseSettings0);
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      Document document0 = Parser.parse("zxMHQ='!w/", "org.jsoup.parser.HtmlTreeBuilder");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element0.baseUri());
      assertNotNull(element0);
      
      Document document1 = document0.clone();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Set<String> set0 = document1.classNames();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.location());
      assertFalse(document1.hasParent());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(set0.contains("7y:\"\"k@L &D-x7("));
      assertNotNull(set0);
      
      Document document2 = new Document("org.jsoup.nodes.Element");
      assertEquals("org.jsoup.nodes.Element", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      
      String string2 = document2.data();
      assertEquals("org.jsoup.nodes.Element", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      Set<String> set1 = document1.classNames();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.location());
      assertFalse(document1.hasParent());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(set1, set0);
      assertFalse(set1.contains("7y:\"\"k@L &D-x7("));
      assertNotNull(set1);
      
      Element element1 = document1.body();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      
      Element element2 = document1.getElementById("org.jsoup.parser.HtmlTreeBuilder");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNull(element2);
      
      boolean boolean0 = document1.hasClass("");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertFalse(boolean0);
      
      Element element3 = element1.text("7y:\"\"k@l &d-x7(");
      assertEquals(1, element3.siblingIndex());
      assertTrue(element3.hasParent());
      assertTrue(element3.isBlock());
      assertEquals(1, element3.childNodeSize());
      assertEquals("body", element3.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element3.baseUri());
      assertEquals("body", element3.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertFalse(element3.equals((Object)element0));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element3, element0);
      assertSame(element3, element1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(element1, element3);
      assertNotSame(element1, element0);
      assertNotNull(element3);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "#root";
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = document1.clone();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#root", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.baseUri());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      
      Element element0 = document2.head();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#root", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("#root", element0.baseUri());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(element0);
      
      Element element1 = element0.after((Node) document2);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#root", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("#root", element0.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertEquals("head", element1.tagName());
      assertEquals("#root", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      // Undeclared exception!
      try { 
        document1.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      String string0 = document1.wholeText();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("Children collection to be inserted must not be null.", string0);
      assertNotNull(string0);
      
      Set<String> set0 = document1.classNames();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(set0.contains("Children collection to be inserted must not be null."));
      assertNotNull(set0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7y:\"\"k@l &d-x7(");
      assertFalse(boolean0);
      
      Elements elements0 = document0.getElementsByIndexEquals(2813);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      assertNotNull(elements0);
      
      String string1 = document0.data();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertEquals("", string1);
      assertNotNull(string1);
      
      Set<String> set1 = document0.classNames();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertTrue(set1.equals((Object)set0));
      assertSame(document0, document1);
      assertNotSame(set1, set0);
      assertFalse(set1.contains("Children collection to be inserted must not be null."));
      assertNotNull(set1);
      
      Element element0 = document1.body();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        element0.select("org.jsoup.nodes.Element$NodeList");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.nodes.Element$NodeList': unexpected token at '$NodeList'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document1.prepend("Children collection to be inserted must not be null.");
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      String string0 = document2.wholeText();
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("Children collection to be inserted must not be null.Children collection to be inserted must not be null.", string0);
      assertNotNull(string0);
      
      Document document3 = document0.normalise();
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotNull(document3);
      
      Tag tag0 = document1.tag();
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertEquals("#root", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertEquals("#root", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotNull(tag0);
      
      Set<String> set0 = document2.classNames();
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      
      Node[] nodeArray0 = document3.childNodesAsArray();
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertEquals(1, nodeArray0.length);
      assertNotNull(nodeArray0);
      
      Document document4 = Parser.parseBodyFragment("zE30F+b4j4Z7", "zE30F+b4j4Z7");
      assertFalse(document4.hasParent());
      assertEquals("zE30F+b4j4Z7", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotNull(document4);
      
      Element element0 = document1.createElement("Children collection to be inserted must not be null.");
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", element0.nodeName());
      assertEquals("Children collection to be inserted must not be null.", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertNotNull(element0);
      
      Elements elements0 = element0.getElementsMatchingText("'3RFdU");
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", element0.nodeName());
      assertEquals("Children collection to be inserted must not be null.", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertNotNull(elements0);
      
      String string1 = document1.html();
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertEquals("<html>\n <head></head>\n <body>\n  Children collection to be inserted must not be null. Children collection to be inserted must not be null.\n </body>\n</html>", string1);
      assertNotNull(string1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        document4.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ot Q", "ot Q");
      assertEquals("ot Q", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ot Q", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.encoder();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      
      Document document1 = document0.outputSettings(document_OutputSettings2);
      assertEquals("ot Q", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ot Q", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ot Q", document1.baseUri());
      assertEquals("ot Q", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document0.getElementsByAttribute("KE!s)d:rrP");
      assertEquals("ot Q", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ot Q", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
      assertNotNull(elements0);
      
      Entities.EscapeMode entities_EscapeMode1 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings0.escapeMode(entities_EscapeMode1);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(entities_EscapeMode1.equals((Object)entities_EscapeMode0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(entities_EscapeMode1, entities_EscapeMode0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotNull(document_OutputSettings3);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors(1458);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      
      Document document2 = parser1.parseInput("ot Q", "KE!s)d:rrP");
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("KE!s)d:rrP", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("KE!s)d:rrP", document2.baseUri());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      
      boolean boolean0 = Element.preserveWhitespace(document2);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("KE!s)d:rrP", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("KE!s)d:rrP", document2.baseUri());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      String string0 = parseSettings0.normalizeAttribute("7y:\"\"k@L &D-x7(");
      assertEquals("7y:\"\"k@l &d-x7(", string0);
      assertNotNull(string0);
      
      String string1 = parseSettings0.normalizeTag("7y:\"\"k@l &d-x7(");
      assertTrue(string1.equals((Object)string0));
      assertEquals("7y:\"\"k@l &d-x7(", string1);
      assertNotNull(string1);
      
      Tag tag0 = Tag.valueOf("7y:\"\"k@L &D-x7(", parseSettings0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertNotNull(tag0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      Document document0 = Parser.parse("zxMHQ='!w/", "org.jsoup.parser.HtmlTreeBuilder");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertNotNull(element0);
      
      Elements elements0 = element0.previousElementSiblings();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document1 = document0.clone();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Set<String> set0 = document1.classNames();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(set0.contains("7y:\"\"k@L &D-x7("));
      assertNotNull(set0);
      
      Document document2 = new Document("org.jsoup.nodes.Element");
      assertFalse(document2.isBlock());
      assertEquals("org.jsoup.nodes.Element", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("org.jsoup.nodes.Element", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      
      String string2 = document2.data();
      assertFalse(document2.isBlock());
      assertEquals("org.jsoup.nodes.Element", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("org.jsoup.nodes.Element", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals("", string2);
      assertNotNull(string2);
      
      Set<String> set1 = document1.classNames();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(set1, set0);
      assertFalse(set1.contains("7y:\"\"k@L &D-x7("));
      assertNotNull(set1);
      
      Element element1 = new Element("1Vy4,\"Y");
      assertEquals(0, element1.siblingIndex());
      assertEquals("1Vy4,\"Y", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("1Vy4,\"Y", element1.nodeName());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotNull(document_OutputSettings2);
      
      CharsetEncoder charsetEncoder0 = document_OutputSettings2.encoder();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotNull(charsetEncoder0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(601);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(601, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(601, document_OutputSettings2.indentAmount());
      assertEquals(601, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(601, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotNull(document_OutputSettings3);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(601, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(601, document_OutputSettings2.indentAmount());
      assertEquals(601, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(601, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.outline());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(601, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotNull(document_OutputSettings4);
      
      element1.outerHtmlTail(pipedWriter0, (-1090), document_OutputSettings4);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(601, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(601, document_OutputSettings2.indentAmount());
      assertEquals(601, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(601, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.outline());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(0, element1.siblingIndex());
      assertEquals("1Vy4,\"Y", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("1Vy4,\"Y", element1.nodeName());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(601, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(element1, element0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      String string0 = document1.wholeText();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("Children collection to be inserted must not be null.", string0);
      assertNotNull(string0);
      
      Document document2 = document0.normalise();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      Set<String> set0 = document1.classNames();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      int int0 = 2544;
      Parser parser1 = parser0.setTrackErrors(2544);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      
      ParseErrorList parseErrorList0 = parser1.getErrors();
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parseErrorList0);
      
      List<Node> list0 = Parser.parseFragment("org.jsoup.nodes.Entities$1", (Element) document1, "?F*5F#x)y d\"D|T%'wQ", parseErrorList0);
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        document2.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("klsI z2=1K^}m", "klsI z2=1K^}m");
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Element element0 = document0.body();
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("klsI z2=1K^}m", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Tag tag0 = Tag.valueOf("body");
      assertFalse(tag0.isInline());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals("body", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("klsI z2=1K^}m");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Attribute attribute0 = new Attribute("A&m", "9`\"wB<UD.(,-3(;-:q");
      assertEquals("A&m", attribute0.getKey());
      assertEquals("9`\"wB<UD.(,-3(;-:q", attribute0.getValue());
      assertNotNull(attribute0);
      
      Attribute attribute1 = attribute0.clone();
      assertEquals("A&m", attribute0.getKey());
      assertEquals("9`\"wB<UD.(,-3(;-:q", attribute0.getValue());
      assertEquals("9`\"wB<UD.(,-3(;-:q", attribute1.getValue());
      assertEquals("A&m", attribute1.getKey());
      assertTrue(attribute1.equals((Object)attribute0));
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertNotNull(attribute1);
      
      Attributes attributes1 = attributes0.put(attribute1);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals("A&m", attribute0.getKey());
      assertEquals("9`\"wB<UD.(,-3(;-:q", attribute0.getValue());
      assertEquals("9`\"wB<UD.(,-3(;-:q", attribute1.getValue());
      assertEquals("A&m", attribute1.getKey());
      assertEquals(2, attributes1.size());
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "zE30F+b4j4Z7", attributes1);
      assertFalse(tag0.isInline());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals("body", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals("A&m", attribute0.getKey());
      assertEquals("9`\"wB<UD.(,-3(;-:q", attribute0.getValue());
      assertEquals("9`\"wB<UD.(,-3(;-:q", attribute1.getValue());
      assertEquals("A&m", attribute1.getKey());
      assertEquals(2, attributes1.size());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("zE30F+b4j4Z7", pseudoTextElement0.baseUri());
      assertTrue(pseudoTextElement0.isBlock());
      assertEquals("body", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("body", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertNotNull(pseudoTextElement0);
      
      Element element1 = pseudoTextElement0.toggleClass("zE30F+b4j4Z7");
      assertFalse(tag0.isInline());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals("body", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(3, attributes0.size());
      assertEquals("A&m", attribute0.getKey());
      assertEquals("9`\"wB<UD.(,-3(;-:q", attribute0.getValue());
      assertEquals("9`\"wB<UD.(,-3(;-:q", attribute1.getValue());
      assertEquals("A&m", attribute1.getKey());
      assertEquals(3, attributes1.size());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("zE30F+b4j4Z7", pseudoTextElement0.baseUri());
      assertTrue(pseudoTextElement0.isBlock());
      assertEquals("body", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("body", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertSame(attributes0, attributes1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes1, attributes0);
      assertSame(pseudoTextElement0, element1);
      assertSame(element1, pseudoTextElement0);
      assertNotNull(element1);
      
      boolean boolean0 = document0.hasAttributes();
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(boolean0);
      
      Document document1 = document0.normalise();
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("klsI z2=1K^}m", document1.location());
      assertEquals("klsI z2=1K^}m", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document1.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      String string0 = "kERh_l";
      Element element0 = new Element("kERh_l");
      assertFalse(element0.isBlock());
      assertEquals("kERh_l", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("kERh_l", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Element element1 = element0.val("time");
      assertFalse(element0.isBlock());
      assertEquals("kERh_l", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("kERh_l", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("kERh_l", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("kERh_l", element1.nodeName());
      assertFalse(element1.hasParent());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Document document0 = parser0.parseInput("kERh_l", "kERh_l");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("kERh_l", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("kERh_l", document0.baseUri());
      assertNotNull(document0);
      
      boolean boolean1 = document0.hasText();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("kERh_l", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("kERh_l", document0.baseUri());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("kERh_l"));
      assertNotNull(linkedHashSet0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "kERh_l");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = element1.val();
      assertFalse(element0.isBlock());
      assertEquals("kERh_l", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("kERh_l", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("kERh_l", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("kERh_l", element1.nodeName());
      assertFalse(element1.hasParent());
      assertFalse(string1.equals((Object)string0));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("time", string1);
      assertNotNull(string1);
      
      boolean boolean3 = document0.hasClass("wb':iM@rl%34");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("kERh_l", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("kERh_l", document0.baseUri());
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string2 = "</";
      Document document1 = Parser.parseBodyFragment("wb':iM@rl%34", "</");
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("</", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      String string3 = document1.className();
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("</", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.equals((Object)document0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(document1, document0);
      assertEquals("", string3);
      assertNotNull(string3);
      
      Elements elements0 = element1.getElementsByAttributeValue("wb':iM@rl%34", "kERh_l");
      assertFalse(element0.isBlock());
      assertEquals("kERh_l", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("kERh_l", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("kERh_l", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("kERh_l", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(elements0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      String string4 = document0.ownText();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("kERh_l", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("kERh_l", document0.baseUri());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals("kERh_l", string4);
      assertNotNull(string4);
      
      Parser parser1 = Parser.htmlParser();
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser1.equals((Object)parser0));
      assertNotSame(parser1, parser0);
      assertNotNull(parser1);
      
      Parser parser2 = parser0.settings(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser0.equals((Object)parser1));
      assertFalse(parser2.equals((Object)parser1));
      assertNotSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertNotSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertNotNull(parser2);
      
      Parser parser3 = parser2.setTrackErrors((-1994606164));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser3.isTrackErrors());
      assertFalse(parser0.equals((Object)parser1));
      assertFalse(parser2.equals((Object)parser1));
      assertFalse(parser3.equals((Object)parser1));
      assertNotSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser0, parser3);
      assertNotSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertSame(parser2, parser3);
      assertNotSame(parser3, parser1);
      assertSame(parser3, parser0);
      assertSame(parser3, parser2);
      assertNotNull(parser3);
      
      Parser parser4 = parser3.setTrackErrors((-1994606164));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser3.isTrackErrors());
      assertFalse(parser4.isTrackErrors());
      assertFalse(parser0.equals((Object)parser1));
      assertFalse(parser2.equals((Object)parser1));
      assertFalse(parser3.equals((Object)parser1));
      assertFalse(parser4.equals((Object)parser1));
      assertNotSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser0, parser3);
      assertSame(parser0, parser4);
      assertSame(parser2, parser4);
      assertNotSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertSame(parser2, parser3);
      assertNotSame(parser3, parser1);
      assertSame(parser3, parser0);
      assertSame(parser3, parser2);
      assertSame(parser3, parser4);
      assertSame(parser4, parser0);
      assertSame(parser4, parser2);
      assertNotSame(parser4, parser1);
      assertSame(parser4, parser3);
      assertNotNull(parser4);
      
      // Undeclared exception!
      try { 
        parser1.parseInput((String) null, "time");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Children collection to be inserted must not be null.");
      assertFalse(boolean0);
      
      Document document0 = Parser.parseBodyFragment("Children collection to be inserted must not be null.", "|Ty");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("|Ty", document0.baseUri());
      assertEquals("|Ty", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("|Ty", document0.baseUri());
      assertEquals("|Ty", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertEquals("|Ty", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("|Ty", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Element element0 = document1.body();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("|Ty", document0.baseUri());
      assertEquals("|Ty", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertEquals("|Ty", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("|Ty", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("|Ty", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(element0);
      
      ParseErrorList parseErrorList0 = parser0.getErrors();
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      List<Node> list0 = Parser.parseFragment("Children collection to be inserted must not be null.", (Element) document1, "org.jsoup.nodes.Entities$1", parseErrorList0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("|Ty", document0.baseUri());
      assertEquals("|Ty", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertEquals("|Ty", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("|Ty", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(list0);
      
      Element element1 = element0.lastElementSibling();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("|Ty", document0.baseUri());
      assertEquals("|Ty", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertEquals("|Ty", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("|Ty", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("|Ty", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals("|Ty", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      element1.remove();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("|Ty", document0.baseUri());
      assertEquals("|Ty", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertEquals("|Ty", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("|Ty", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("|Ty", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals("|Ty", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Pattern pattern0 = Pattern.compile("|Ty");
      assertEquals("|Ty", pattern0.pattern());
      assertEquals("|Ty", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNotNull(pattern0);
      
      Elements elements0 = document1.getElementsByAttributeValueMatching("80!N5%+A_", pattern0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("|Ty", document0.baseUri());
      assertEquals("|Ty", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertEquals("|Ty", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("|Ty", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("|Ty", pattern0.pattern());
      assertEquals("|Ty", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document1.prepend("Children collection to be inserted must not be null.");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      String string0 = document2.wholeText();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("Children collection to be inserted must not be null.Children collection to be inserted must not be null.", string0);
      assertNotNull(string0);
      
      Document document3 = document0.normalise();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotNull(document3);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors((-1845103978));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      
      Document document4 = document0.parser(parser1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("Children collection to be inserted must not be null.", document4.location());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertNotNull(document4);
      
      Document document5 = document4.normalise();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("Children collection to be inserted must not be null.", document4.location());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document5.baseUri());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals("Children collection to be inserted must not be null.", document5.location());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(1, document5.childNodeSize());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document4, document5);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document5, document0);
      assertSame(document5, document4);
      assertSame(document5, document2);
      assertSame(document5, document1);
      assertSame(document5, document3);
      assertNotNull(document5);
      
      Tag tag0 = document4.tag();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("Children collection to be inserted must not be null.", document4.location());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(tag0.isEmpty());
      assertEquals("#root", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document4, document5);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertNotNull(tag0);
      
      Set<String> set0 = document2.classNames();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertSame(document2, document1);
      assertFalse(set0.contains("Children collection to be inserted must not be null."));
      assertNotNull(set0);
      
      String string1 = document4.data();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("Children collection to be inserted must not be null.", document4.location());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document4, document5);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      Set<String> set1 = document4.classNames();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("Children collection to be inserted must not be null.", document4.location());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertTrue(set1.equals((Object)set0));
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document4, document5);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertNotSame(set1, set0);
      assertFalse(set1.contains("Children collection to be inserted must not be null."));
      assertNotNull(set1);
      
      Element element0 = document1.body();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(3, element0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotNull(element0);
      
      String string2 = element0.html();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(3, element0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertEquals("Children collection to be inserted must not be null. Children collection to be inserted must not be null.", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        document3.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("z$}n2tmr%iTI%EwJY", "z$}n2tmr%iTI%EwJY");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text("");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document1.previousElementSiblings();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      
      String string0 = document0.className();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertSame(document0, document1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Elements elements1 = document0.getElementsMatchingOwnText("");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertEquals(4, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Node[] nodeArray0 = new Node[0];
      Document document2 = (Document)document0.insertChildren(0, nodeArray0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("z$}n2tmr%iTI%EwJY", document2.baseUri());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(0, nodeArray0.length);
      assertNotNull(document2);
      
      Element element0 = document1.getElementById("z$}n2tmr%iTI%EwJY");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parse("A.eHBLi`&JC[@w", "A.eHBLi`&JC[@w");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("7y:\"\"k@l &d-x7(", parseSettings0);
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertNotNull(tag0);
      
      Element element1 = new Element(tag0, "7y:\"\"k@l &d-x7(");
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertEquals("7y:\"\"k@l &d-x7(", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element1.tagName());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      Document document1 = Parser.parse("}v?UVPy$me3u8", "pa8cad'geB|?OII");
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("pa8cad'geB|?OII", document1.location());
      assertEquals("pa8cad'geB|?OII", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = element0.parents();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element1));
      assertNotSame(document0, document1);
      assertNotSame(element0, element1);
      assertNotNull(elements0);
      
      Element element2 = document0.body();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertEquals("body", element2.tagName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("A.eHBLi`&JC[@w", element2.baseUri());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertNotSame(document0, document1);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotNull(element2);
      
      Elements elements1 = document1.previousElementSiblings();
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("pa8cad'geB|?OII", document1.location());
      assertEquals("pa8cad'geB|?OII", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document1.equals((Object)document0));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Document document2 = document0.clone();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("A.eHBLi`&JC[@w", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("A.eHBLi`&JC[@w", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      
      Set<String> set0 = element1.classNames();
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertEquals("7y:\"\"k@l &d-x7(", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element1.tagName());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertFalse(set0.contains("A.eHBLi`&JC[@w"));
      assertNotNull(set0);
      
      Document document3 = new Document("zxMHQ='!w/");
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("zxMHQ='!w/", document3.location());
      assertEquals("zxMHQ='!w/", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      
      String string0 = document2.data();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("A.eHBLi`&JC[@w", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("A.eHBLi`&JC[@w", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Set<String> set1 = element1.classNames();
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertEquals("7y:\"\"k@l &d-x7(", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element1.tagName());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(set1, set0);
      assertFalse(set1.contains("A.eHBLi`&JC[@w"));
      assertNotNull(set1);
      
      Element element3 = document2.body();
      assertTrue(element3.isBlock());
      assertEquals(1, element3.childNodeSize());
      assertEquals("A.eHBLi`&JC[@w", element3.baseUri());
      assertEquals(1, element3.siblingIndex());
      assertTrue(element3.hasParent());
      assertEquals("body", element3.nodeName());
      assertEquals("body", element3.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("A.eHBLi`&JC[@w", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("A.eHBLi`&JC[@w", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(element3, element0);
      assertNotSame(element3, element1);
      assertNotSame(element3, element2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotNull(element3);
      
      String string1 = element1.html();
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertEquals("7y:\"\"k@l &d-x7(", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element1.tagName());
      assertTrue(string1.equals((Object)string0));
      assertFalse(element1.equals((Object)element3));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element3);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document1.prepend("Children collection to be inserted must not be null.");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      String string0 = document0.wholeText();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertEquals("Children collection to be inserted must not be null.Children collection to be inserted must not be null.", string0);
      assertNotNull(string0);
      
      Document document3 = document2.normalise();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotNull(document3);
      
      Document document4 = document3.normalise();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document4.location());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertNotNull(document4);
      
      Tag tag0 = document4.tag();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document4.location());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.toString());
      assertEquals("#root", tag0.getName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertNotNull(tag0);
      
      Set<String> set0 = document1.classNames();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      
      String string1 = document3.data();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertEquals("", string1);
      assertNotNull(string1);
      
      Set<String> set1 = document1.classNames();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertTrue(set1.equals((Object)set0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(set1, set0);
      assertFalse(set1.contains(string1));
      assertNotNull(set1);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document5 = document1.quirksMode(document_QuirksMode0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals("Children collection to be inserted must not be null.", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document5.baseUri());
      assertEquals(Document.QuirksMode.quirks, document5.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document2);
      assertSame(document5, document4);
      assertSame(document5, document3);
      assertSame(document5, document0);
      assertSame(document5, document1);
      assertSame(document5, document2);
      assertNotNull(document5);
      
      Document document6 = (Document)document5.text("Children collection to be inserted must not be null.Children collection to be inserted must not be null.");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals("Children collection to be inserted must not be null.", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document5.baseUri());
      assertEquals(Document.QuirksMode.quirks, document5.quirksMode());
      assertFalse(document6.isBlock());
      assertEquals("#document", document6.nodeName());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertEquals(1, document6.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document6.location());
      assertEquals("Children collection to be inserted must not be null.", document6.baseUri());
      assertFalse(document6.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document6);
      assertSame(document1, document5);
      assertSame(document1, document2);
      assertSame(document5, document4);
      assertSame(document5, document6);
      assertSame(document5, document3);
      assertSame(document5, document0);
      assertSame(document5, document1);
      assertSame(document5, document2);
      assertSame(document6, document5);
      assertSame(document6, document4);
      assertSame(document6, document2);
      assertSame(document6, document0);
      assertSame(document6, document1);
      assertSame(document6, document3);
      assertNotNull(document6);
      
      Map<String, String> map0 = document1.dataset();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document6);
      assertSame(document1, document5);
      assertSame(document1, document2);
      assertNotNull(map0);
      
      String string2 = document4.html();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document4.location());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document6);
      assertSame(document1, document5);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document3, document0);
      assertSame(document3, document6);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document6);
      assertSame(document4, document5);
      assertEquals("<html>\n <head></head>\n <body>\n  Children collection to be inserted must not be null.Children collection to be inserted must not be null.\n </body>\n</html>", string2);
      assertNotNull(string2);
      
      Element element0 = document4.body();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document4.location());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document6);
      assertSame(document1, document5);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document3, document0);
      assertSame(document3, document6);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document6);
      assertSame(document4, document5);
      assertNotNull(element0);
      
      String string3 = document4.className();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document4.location());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document6);
      assertSame(document1, document5);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document3, document0);
      assertSame(document3, document6);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document6);
      assertSame(document4, document5);
      assertEquals("", string3);
      assertNotNull(string3);
      
      Element element1 = document2.appendElement("head");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("Children collection to be inserted must not be null.", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(element1.equals((Object)element0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertNotSame(element1, element0);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document6);
      assertSame(document1, document5);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("zE30F+b4j4Z7");
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertEquals("zE30F+b4j4Z7", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("zE30F+b4j4Z7", tag0.toString());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "");
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertEquals("zE30F+b4j4Z7", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("zE30F+b4j4Z7", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("zE30F+b4j4Z7", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.append("");
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertEquals("zE30F+b4j4Z7", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("zE30F+b4j4Z7", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("zE30F+b4j4Z7", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals("zE30F+b4j4Z7", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals("zE30F+b4j4Z7", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      String string0 = element0.html();
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertEquals("zE30F+b4j4Z7", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("zE30F+b4j4Z7", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("zE30F+b4j4Z7", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertSame(element0, element1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Elements elements0 = element1.getElementsByIndexLessThan((-3357));
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertEquals("zE30F+b4j4Z7", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("zE30F+b4j4Z7", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("zE30F+b4j4Z7", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals("zE30F+b4j4Z7", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals("zE30F+b4j4Z7", element1.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(elements0);
      
      // Undeclared exception!
      try { 
        element0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document1.getAllElements();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      
      Document document2 = (Document)document1.prepend("Children collection to be inserted must not be null.");
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      String string0 = document2.wholeText();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("Children collection to be inserted must not be null.Children collection to be inserted must not be null.", string0);
      assertNotNull(string0);
      
      Document document3 = document0.normalise();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertNotNull(document3);
      
      Tag tag0 = document1.tag();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("#root", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotNull(tag0);
      
      Set<String> set0 = document2.classNames();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertFalse(set0.contains("Children collection to be inserted must not be null."));
      assertNotNull(set0);
      
      String string1 = document3.data();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertEquals("", string1);
      assertNotNull(string1);
      
      Set<String> set1 = document3.classNames();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertTrue(set1.equals((Object)set0));
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(set1, set0);
      assertFalse(set1.contains("Children collection to be inserted must not be null."));
      assertNotNull(set1);
      
      Elements elements1 = document1.siblingElements();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors((-2042));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      
      Document document4 = parser1.parseInput("", "Children collection to be inserted must not be null.");
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(document4);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("7y:\"\"k@L &D-x7(", parseSettings0);
      assertFalse(tag0.isSelfClosing());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "7y:\"\"k@L &D-x7(");
      assertFalse(tag0.isSelfClosing());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals(0, element0.childNodeSize());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Tag tag1 = Tag.valueOf("7y:\"\"k@L &D-x7(", parseSettings0);
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isEmpty());
      assertTrue(tag1.isInline());
      assertEquals("7y:\"\"k@l &d-x7(", tag1.toString());
      assertEquals("7y:\"\"k@l &d-x7(", tag1.getName());
      assertFalse(tag1.isData());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isBlock());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isFormSubmittable());
      assertTrue(tag1.equals((Object)tag0));
      assertNotSame(tag1, tag0);
      assertNotNull(tag1);
      
      Element element1 = element0.toggleClass("7y:\"\"k@L &D-x7(");
      assertFalse(tag0.isSelfClosing());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals(0, element0.childNodeSize());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7y:\"\"k@L &D-x7(", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("7y:\"\"k@l &d-x7(", element1.nodeName());
      assertEquals("7y:\"\"k@l &d-x7(", element1.tagName());
      assertTrue(tag0.equals((Object)tag1));
      assertNotSame(tag0, tag1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Element element2 = element1.prependChild(element0);
      assertFalse(tag0.isSelfClosing());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals(1, element0.childNodeSize());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7y:\"\"k@L &D-x7(", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("7y:\"\"k@l &d-x7(", element1.tagName());
      assertFalse(element2.isBlock());
      assertEquals("7y:\"\"k@L &D-x7(", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals("7y:\"\"k@l &d-x7(", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element2.tagName());
      assertTrue(tag0.equals((Object)tag1));
      assertNotSame(tag0, tag1);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertNotNull(element2);
      
      DocumentType documentType0 = new DocumentType("ws-HE+eWc!~Dr", "<![CDATA[", "<![CDATA[", "<![CDATA[");
      assertFalse(documentType0.hasParent());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      assertNotNull(documentType0);
      
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(documentType0));
      assertNotNull(linkedHashSet0);
      
      Element element3 = new Element(tag1, "org.jsoup.UncheckedIOException");
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isEmpty());
      assertTrue(tag1.isInline());
      assertEquals("7y:\"\"k@l &d-x7(", tag1.toString());
      assertEquals("7y:\"\"k@l &d-x7(", tag1.getName());
      assertFalse(tag1.isData());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isBlock());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isFormSubmittable());
      assertEquals("org.jsoup.UncheckedIOException", element3.baseUri());
      assertFalse(element3.hasParent());
      assertEquals(0, element3.childNodeSize());
      assertEquals("7y:\"\"k@l &d-x7(", element3.nodeName());
      assertEquals("7y:\"\"k@l &d-x7(", element3.tagName());
      assertEquals(0, element3.siblingIndex());
      assertFalse(element3.isBlock());
      assertTrue(tag1.equals((Object)tag0));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element2));
      assertNotNull(element3);
      
      Element element4 = element3.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isEmpty());
      assertTrue(tag1.isInline());
      assertEquals("7y:\"\"k@l &d-x7(", tag1.toString());
      assertEquals("7y:\"\"k@l &d-x7(", tag1.getName());
      assertFalse(tag1.isData());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isBlock());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isFormSubmittable());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("org.jsoup.UncheckedIOException", element3.baseUri());
      assertFalse(element3.hasParent());
      assertEquals(0, element3.childNodeSize());
      assertEquals("7y:\"\"k@l &d-x7(", element3.nodeName());
      assertEquals("7y:\"\"k@l &d-x7(", element3.tagName());
      assertEquals(0, element3.siblingIndex());
      assertFalse(element3.isBlock());
      assertEquals(0, element4.childNodeSize());
      assertFalse(element4.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element4.tagName());
      assertEquals("7y:\"\"k@l &d-x7(", element4.nodeName());
      assertEquals("org.jsoup.UncheckedIOException", element4.baseUri());
      assertEquals(0, element4.siblingIndex());
      assertFalse(element4.isBlock());
      assertTrue(tag1.equals((Object)tag0));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element4.equals((Object)element0));
      assertFalse(element4.equals((Object)element1));
      assertFalse(element4.equals((Object)element2));
      assertNotSame(tag1, tag0);
      assertNotSame(element3, element0);
      assertNotSame(element3, element1);
      assertSame(element3, element4);
      assertNotSame(element3, element2);
      assertNotSame(element4, element0);
      assertSame(element4, element3);
      assertNotSame(element4, element1);
      assertNotSame(element4, element2);
      assertFalse(linkedHashSet0.contains(documentType0));
      assertNotNull(element4);
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Element element5 = (Element)element3.traverse(nodeVisitor0);
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isEmpty());
      assertTrue(tag1.isInline());
      assertEquals("7y:\"\"k@l &d-x7(", tag1.toString());
      assertEquals("7y:\"\"k@l &d-x7(", tag1.getName());
      assertFalse(tag1.isData());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isBlock());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isFormSubmittable());
      assertEquals("org.jsoup.UncheckedIOException", element3.baseUri());
      assertFalse(element3.hasParent());
      assertEquals(0, element3.childNodeSize());
      assertEquals("7y:\"\"k@l &d-x7(", element3.nodeName());
      assertEquals("7y:\"\"k@l &d-x7(", element3.tagName());
      assertEquals(0, element3.siblingIndex());
      assertFalse(element3.isBlock());
      assertFalse(element5.hasParent());
      assertEquals(0, element5.childNodeSize());
      assertEquals("7y:\"\"k@l &d-x7(", element5.tagName());
      assertFalse(element5.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", element5.nodeName());
      assertEquals("org.jsoup.UncheckedIOException", element5.baseUri());
      assertEquals(0, element5.siblingIndex());
      assertTrue(tag1.equals((Object)tag0));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element5.equals((Object)element0));
      assertFalse(element5.equals((Object)element2));
      assertFalse(element5.equals((Object)element1));
      assertNotSame(tag1, tag0);
      assertSame(element3, element5);
      assertNotSame(element3, element0);
      assertNotSame(element3, element1);
      assertSame(element3, element4);
      assertNotSame(element3, element2);
      assertSame(element5, element3);
      assertNotSame(element5, element0);
      assertSame(element5, element4);
      assertNotSame(element5, element2);
      assertNotSame(element5, element1);
      assertNotNull(element5);
      
      String string0 = element1.ownText();
      assertFalse(tag0.isSelfClosing());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals(1, element0.childNodeSize());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7y:\"\"k@L &D-x7(", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("7y:\"\"k@l &d-x7(", element1.tagName());
      assertTrue(tag0.equals((Object)tag1));
      assertFalse(element0.equals((Object)element5));
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.equals((Object)element4));
      assertFalse(element1.equals((Object)element3));
      assertFalse(element1.equals((Object)element4));
      assertFalse(element1.equals((Object)element5));
      assertNotSame(tag0, tag1);
      assertSame(element0, element2);
      assertNotSame(element0, element5);
      assertSame(element0, element1);
      assertNotSame(element0, element3);
      assertNotSame(element0, element4);
      assertNotSame(element1, element3);
      assertSame(element1, element0);
      assertNotSame(element1, element4);
      assertNotSame(element1, element5);
      assertSame(element1, element2);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors(0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      
      Document document0 = null;
      try {
        document0 = new Document((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Element element0 = new Element("DkERl_l");
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("DkERl_l", element0.tagName());
      assertEquals("DkERl_l", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Element element1 = element0.val("time");
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("DkERl_l", element0.tagName());
      assertEquals("DkERl_l", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("DkERl_l", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("DkERl_l", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Document document0 = parser0.parseInput("DkERl_l", "DkERl_l");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("DkERl_l", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("DkERl_l", document0.location());
      assertNotNull(document0);
      
      boolean boolean1 = document0.hasText();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("DkERl_l", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("DkERl_l", document0.location());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("DkERl_l"));
      assertNotNull(linkedHashSet0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DkERl_l");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string0 = element1.val();
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("DkERl_l", element0.tagName());
      assertEquals("DkERl_l", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("DkERl_l", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("DkERl_l", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("time", string0);
      assertNotNull(string0);
      
      Document document1 = Parser.parseBodyFragment("wb':iM@rl%34", "</");
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      String string1 = document1.className();
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("</", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document1, document0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      Elements elements0 = element1.getElementsByAttributeValue("wb':iM@rl%34", "DkERl_l");
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("DkERl_l", element0.tagName());
      assertEquals("DkERl_l", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("DkERl_l", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("DkERl_l", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(elements0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      String string2 = document0.ownText();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("DkERl_l", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("DkERl_l", document0.location());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals("DkERl_l", string2);
      assertNotNull(string2);
      
      Parser parser1 = Parser.htmlParser();
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser1.equals((Object)parser0));
      assertNotSame(parser1, parser0);
      assertNotNull(parser1);
      
      Parser parser2 = parser0.settings(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser0.equals((Object)parser1));
      assertFalse(parser2.equals((Object)parser1));
      assertNotSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertNotSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertNotNull(parser2);
      
      Parser parser3 = parser2.setTrackErrors((-1994606164));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser3.isTrackErrors());
      assertFalse(parser0.equals((Object)parser1));
      assertFalse(parser2.equals((Object)parser1));
      assertFalse(parser3.equals((Object)parser1));
      assertSame(parser0, parser3);
      assertNotSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser2, parser3);
      assertSame(parser2, parser0);
      assertNotSame(parser2, parser1);
      assertSame(parser3, parser2);
      assertSame(parser3, parser0);
      assertNotSame(parser3, parser1);
      assertNotNull(parser3);
      
      Parser parser4 = parser3.setTrackErrors((-1994606164));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser3.isTrackErrors());
      assertFalse(parser4.isTrackErrors());
      assertFalse(parser0.equals((Object)parser1));
      assertFalse(parser2.equals((Object)parser1));
      assertFalse(parser3.equals((Object)parser1));
      assertFalse(parser4.equals((Object)parser1));
      assertSame(parser0, parser3);
      assertNotSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser0, parser4);
      assertSame(parser2, parser3);
      assertSame(parser2, parser0);
      assertNotSame(parser2, parser1);
      assertSame(parser2, parser4);
      assertSame(parser3, parser2);
      assertSame(parser3, parser4);
      assertSame(parser3, parser0);
      assertNotSame(parser3, parser1);
      assertSame(parser4, parser2);
      assertSame(parser4, parser3);
      assertSame(parser4, parser0);
      assertNotSame(parser4, parser1);
      assertNotNull(parser4);
      
      // Undeclared exception!
      try { 
        parser1.parseInput((String) null, "time");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Document document0 = Document.createShell("zE30F+b4j4Z7");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.text("zE30F+b4j4Z7");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      
      String string0 = document1.className();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document3 = (Document)document1.addClass("org.jsoup.nodes.Element");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotNull(document3);
      
      Document document4 = Document.createShell("5#dZbX{;(uL|3");
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("5#dZbX{;(uL|3", document4.location());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("5#dZbX{;(uL|3", document4.baseUri());
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotNull(document4);
      
      Document document5 = (Document)document4.addClass("org.jsoup.nodes.Element");
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("5#dZbX{;(uL|3", document4.location());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("5#dZbX{;(uL|3", document4.baseUri());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(1, document5.childNodeSize());
      assertEquals("5#dZbX{;(uL|3", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals("5#dZbX{;(uL|3", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertNotSame(document4, document2);
      assertSame(document4, document5);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotNull(document5);
      
      Elements elements0 = document1.getElementsMatchingOwnText("value");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document5);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotNull(elements0);
      
      DataNode dataNode0 = new DataNode("");
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode0.hasParent());
      assertNotNull(dataNode0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(0);
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(true);
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotNull(document_OutputSettings3);
      
      Document document6 = document2.outputSettings(document_OutputSettings3);
      assertEquals(1, document6.childNodeSize());
      assertEquals("#root", document6.tagName());
      assertEquals("zE30F+b4j4Z7", document6.location());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document6.baseUri());
      assertFalse(document6.hasParent());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertSame(document6, document0);
      assertNotSame(document6, document3);
      assertNotSame(document6, document4);
      assertNotSame(document6, document1);
      assertSame(document6, document2);
      assertNotSame(document6, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document2, document5);
      assertSame(document2, document6);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotNull(document6);
      
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document4;
      Document document7 = (Document)document6.insertChildren(0, nodeArray0);
      assertEquals("#root", document6.tagName());
      assertEquals("zE30F+b4j4Z7", document6.location());
      assertEquals("#document", document6.nodeName());
      assertTrue(document6.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document6.baseUri());
      assertEquals(3, document6.childNodeSize());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(3, document2.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals("#document", document7.nodeName());
      assertFalse(document7.isBlock());
      assertTrue(document7.hasParent());
      assertEquals("zE30F+b4j4Z7", document7.baseUri());
      assertEquals(3, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertEquals("zE30F+b4j4Z7", document7.location());
      assertEquals("#root", document7.tagName());
      assertEquals(0, document7.siblingIndex());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document4));
      assertSame(document6, document0);
      assertNotSame(document6, document3);
      assertNotSame(document6, document4);
      assertNotSame(document6, document1);
      assertSame(document6, document2);
      assertSame(document6, document7);
      assertNotSame(document6, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertSame(document0, document7);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document2, document5);
      assertSame(document2, document7);
      assertSame(document2, document6);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document7, document5);
      assertSame(document7, document6);
      assertNotSame(document7, document3);
      assertNotSame(document7, document1);
      assertSame(document7, document0);
      assertSame(document7, document2);
      assertNotSame(document7, document4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertEquals(2, nodeArray0.length);
      assertNotNull(document7);
      
      Document document8 = (Document)document2.removeClass("body");
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(3, document2.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals("zE30F+b4j4Z7", document8.location());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertEquals("#root", document8.tagName());
      assertEquals("zE30F+b4j4Z7", document8.baseUri());
      assertEquals(3, document8.childNodeSize());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals("#document", document8.nodeName());
      assertFalse(document8.isBlock());
      assertTrue(document8.hasParent());
      assertEquals(0, document8.siblingIndex());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document8.equals((Object)document5));
      assertFalse(document8.equals((Object)document4));
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertSame(document0, document7);
      assertNotSame(document0, document1);
      assertSame(document0, document8);
      assertNotSame(document0, document5);
      assertNotSame(document2, document5);
      assertSame(document2, document7);
      assertSame(document2, document6);
      assertSame(document2, document8);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document8, document7);
      assertSame(document8, document6);
      assertSame(document8, document0);
      assertNotSame(document8, document3);
      assertNotSame(document8, document1);
      assertSame(document8, document2);
      assertNotSame(document8, document5);
      assertNotSame(document8, document4);
      assertNotNull(document8);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parse("A.eHBLi`&JC[@w", "A.eHBLi`&JC[@w");
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      Elements elements0 = document0.getElementsByAttributeValueStarting("A.eHBLi`&JC[@w", "A.eHBLi`&JC[@w");
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = element0.previousElementSiblings();
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Elements elements2 = document0.getElementsByClass("meta");
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      
      Element element1 = document0.nextElementSibling();
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNull(element1);
      
      Node node0 = document0.nextSibling();
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNull(node0);
      
      element0.nodelistChanged();
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      
      DocumentType documentType0 = new DocumentType("A.eHBLi`&JC[@w", "meta", "A.eHBLi`&JC[@w", "A.eHBLi`&JC[@w");
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      assertFalse(documentType0.hasParent());
      assertNotNull(documentType0);
      
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(documentType0));
      assertNotNull(linkedHashSet0);
      
      Document document1 = (Document)document0.insertChildren(0, (Collection<? extends Node>) elements1);
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(elements1.equals((Object)elements0));
      assertTrue(elements1.equals((Object)elements2));
      assertSame(document0, document1);
      assertNotSame(elements1, elements2);
      assertNotSame(elements1, elements0);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document2 = (Document)document1.traverse(nodeVisitor0);
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("A.eHBLi`&JC[@w", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("A.eHBLi`&JC[@w", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertTrue(elements1.equals((Object)elements0));
      assertTrue(elements1.equals((Object)elements2));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements1, elements2);
      assertNotSame(elements1, elements0);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      String string0 = document0.ownText();
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Element element2 = document1.body();
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("A.eHBLi`&JC[@w", element2.baseUri());
      assertEquals(1, element2.childNodeSize());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals("body", element2.nodeName());
      assertEquals("body", element2.tagName());
      assertTrue(element2.isBlock());
      assertTrue(elements1.equals((Object)elements0));
      assertTrue(elements1.equals((Object)elements2));
      assertFalse(element2.equals((Object)element0));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(element0, element2);
      assertNotSame(elements1, elements2);
      assertNotSame(elements1, elements0);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(element2, element0);
      assertNotNull(element2);
      
      String string1 = document2.className();
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("A.eHBLi`&JC[@w", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("A.eHBLi`&JC[@w", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(element0.equals((Object)element2));
      assertTrue(elements1.equals((Object)elements0));
      assertTrue(elements1.equals((Object)elements2));
      assertTrue(string1.equals((Object)string0));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(element0, element2);
      assertNotSame(elements1, elements2);
      assertNotSame(elements1, elements0);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("", string1);
      assertNotNull(string1);
      
      Element element3 = element0.appendElement(":GP'Vz@.!v");
      assertEquals(":gp'vz@.!v", element3.tagName());
      assertEquals(":gp'vz@.!v", element3.nodeName());
      assertEquals("A.eHBLi`&JC[@w", element3.baseUri());
      assertFalse(element3.isBlock());
      assertTrue(element3.hasParent());
      assertEquals(0, element3.childNodeSize());
      assertEquals(0, element3.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element0.equals((Object)element2));
      assertNotSame(element3, element0);
      assertNotSame(element3, element2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(element0, element3);
      assertNotSame(element0, element2);
      assertNotNull(element3);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = "Children collection to be inserted must not be null.";
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document1.prepend("Children collection to be inserted must not be null.");
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      String string1 = document2.wholeText();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("Children collection to be inserted must not be null.Children collection to be inserted must not be null.", string1);
      assertNotNull(string1);
      
      Document document3 = document0.normalise();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotNull(document3);
      
      Tag tag0 = document1.tag();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals("#root", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotNull(tag0);
      
      Set<String> set0 = document2.classNames();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      int int0 = (-1440);
      // Undeclared exception!
      try { 
        document1.insertChildren((-1440), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = "lQ10Wf\"~XXzu~P";
      Tag tag0 = Tag.valueOf("lQ10Wf\"~XXzu~P");
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("lQ10Wf\"~XXzu~P", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("lQ10Wf\"~XXzu~P", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.clone();
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotNull(attributes1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Map<String, String> map0 = attributes1.dataset();
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotNull(map0);
      
      Attributes attributes2 = attributes1.put("7x)Ze@rB", "lQ10Wf\"~XXzu~P");
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      
      Element element0 = new Element(tag0, "lQ10Wf\"~XXzu~P", attributes1);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("lQ10Wf\"~XXzu~P", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("lQ10Wf\"~XXzu~P", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(element0.isBlock());
      assertEquals("lQ10Wf\"~XXzu~P", element0.tagName());
      assertEquals("lQ10Wf\"~XXzu~P", element0.nodeName());
      assertEquals("lQ10Wf\"~XXzu~P", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertNotNull(element0);
      
      Element element1 = element0.clone();
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("lQ10Wf\"~XXzu~P", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("lQ10Wf\"~XXzu~P", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(element0.isBlock());
      assertEquals("lQ10Wf\"~XXzu~P", element0.tagName());
      assertEquals("lQ10Wf\"~XXzu~P", element0.nodeName());
      assertEquals("lQ10Wf\"~XXzu~P", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("lQ10Wf\"~XXzu~P", element1.tagName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("lQ10Wf\"~XXzu~P", element1.baseUri());
      assertEquals("lQ10Wf\"~XXzu~P", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      
      int int0 = (-349150780);
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        element1.insertChildren((-349150780), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.val("textarea");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("textarea", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Document document2 = (Document)document0.appendText("textarea");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("textarea", document2.location());
      assertEquals("textarea", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      List<TextNode> list0 = document2.textNodes();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("textarea", document2.location());
      assertEquals("textarea", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(list0);
      
      Document document3 = (Document)document2.attr("9co0AG9@o'", false);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("textarea", document2.location());
      assertEquals("textarea", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("textarea", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("textarea", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotNull(document3);
      
      String string0 = document2.tagName();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("textarea", document2.location());
      assertEquals("textarea", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertEquals("#root", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      ParseSettings parseSettings1 = new ParseSettings(false, false);
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertNotNull(parseSettings1);
      
      Tag tag0 = Tag.valueOf("z$}n2tmr%iTI%EwJY", parseSettings1);
      assertFalse(tag0.isEmpty());
      assertEquals("z$}n2tmr%iti%ewjy", tag0.getName());
      assertEquals("z$}n2tmr%iti%ewjy", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertNotSame(parseSettings1, parseSettings0);
      assertNotNull(tag0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("z$}n2tmr%iTI%EwJY", "svg");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("svg", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("svg", document0.location());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text("z$}n2tmr%iTI%EwJY");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("svg", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("svg", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("svg", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("svg", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document1.previousElementSiblings();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("svg", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("svg", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("svg", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("svg", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = document1.elementSiblingIndex();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("svg", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("svg", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("svg", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("svg", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, int0);
      
      Element element0 = new Element(tag0, "svg");
      assertFalse(tag0.isEmpty());
      assertEquals("z$}n2tmr%iti%ewjy", tag0.getName());
      assertEquals("z$}n2tmr%iti%ewjy", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("z$}n2tmr%iti%ewjy", element0.nodeName());
      assertEquals("svg", element0.baseUri());
      assertEquals("z$}n2tmr%iti%ewjy", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertNotNull(element0);
      
      List<DataNode> list0 = element0.dataNodes();
      assertFalse(tag0.isEmpty());
      assertEquals("z$}n2tmr%iti%ewjy", tag0.getName());
      assertEquals("z$}n2tmr%iti%ewjy", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("z$}n2tmr%iti%ewjy", element0.nodeName());
      assertEquals("svg", element0.baseUri());
      assertEquals("z$}n2tmr%iti%ewjy", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertNotSame(parseSettings1, parseSettings0);
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = "z30F+b4jZ7";
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Document document0 = Document.createShell("z30F+b4jZ7");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("z30F+b4jZ7", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("z30F+b4jZ7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("z30F+b4jZ7", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("z30F+b4jZ7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("z30F+b4jZ7", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("z30F+b4jZ7", document1.location());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.text("z30F+b4jZ7");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("z30F+b4jZ7", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("z30F+b4jZ7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("z30F+b4jZ7", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("z30F+b4jZ7", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      
      ParseSettings parseSettings1 = ParseSettings.htmlDefault;
      assertSame(parseSettings1, parseSettings0);
      assertNotNull(parseSettings1);
      
      Tag tag0 = Tag.valueOf("z30F+b4jZ7", parseSettings1);
      assertTrue(tag0.formatAsBlock());
      assertEquals("z30f+b4jz7", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals("z30f+b4jz7", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertSame(parseSettings1, parseSettings0);
      assertNotNull(tag0);
      
      // Undeclared exception!
      try { 
        document1.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = "7y:\"\"k@L &D-x7(";
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      String string1 = parseSettings0.normalizeAttribute("7y:\"\"k@L &D-x7(");
      assertFalse(string1.equals((Object)string0));
      assertEquals("7y:\"\"k@l &d-x7(", string1);
      assertNotNull(string1);
      
      String string2 = parseSettings0.normalizeTag("7y:\"\"k@l &d-x7(");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("7y:\"\"k@l &d-x7(", string2);
      assertNotNull(string2);
      
      Tag tag0 = Tag.valueOf("7y:\"\"k@L &D-x7(", parseSettings0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "7y:\"\"k@L &D-x7(");
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(element0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertNotNull(element0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(string1));
      assertNotNull(linkedHashSet0);
      
      Element element1 = element0.doClone((Node) null);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(element0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertEquals("7y:\"\"k@l &d-x7(", element1.nodeName());
      assertEquals("7y:\"\"k@l &d-x7(", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("7y:\"\"k@L &D-x7(", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Elements elements0 = element1.getElementsByIndexEquals(6387);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(element0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertEquals("7y:\"\"k@l &d-x7(", element1.nodeName());
      assertEquals("7y:\"\"k@l &d-x7(", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("7y:\"\"k@L &D-x7(", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(elements0);
      
      Node[] nodeArray0 = element1.childNodesAsArray();
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(element0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertEquals("7y:\"\"k@l &d-x7(", element1.nodeName());
      assertEquals("7y:\"\"k@l &d-x7(", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("7y:\"\"k@L &D-x7(", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertEquals(0, nodeArray0.length);
      assertNotNull(nodeArray0);
      
      Element element2 = element0.val("ViC?vTgNh.D?M");
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(element0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertEquals("7y:\"\"k@l &d-x7(", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("7y:\"\"k@L &D-x7(", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element2.tagName());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotNull(element2);
      
      Tag tag1 = Tag.valueOf("ViC?vTgNh.D?M");
      assertEquals("ViC?vTgNh.D?M", tag1.getName());
      assertFalse(tag1.preserveWhitespace());
      assertEquals("ViC?vTgNh.D?M", tag1.toString());
      assertTrue(tag1.isInline());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isData());
      assertFalse(tag1.isKnownTag());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.equals((Object)tag0));
      assertNotSame(tag1, tag0);
      assertNotNull(tag1);
      
      Element element3 = new Element(tag0, "_>bBORNz7aR8V_ga8o");
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertEquals(0, element3.childNodeSize());
      assertFalse(element3.hasParent());
      assertEquals("_>bBORNz7aR8V_ga8o", element3.baseUri());
      assertFalse(element3.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", element3.tagName());
      assertEquals(0, element3.siblingIndex());
      assertEquals("7y:\"\"k@l &d-x7(", element3.nodeName());
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertNotNull(element3);
      
      String string3 = element1.html();
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(element0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertEquals("7y:\"\"k@l &d-x7(", element1.nodeName());
      assertEquals("7y:\"\"k@l &d-x7(", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("7y:\"\"k@L &D-x7(", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(tag0, tag1);
      assertNotSame(element0, element3);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      assertNotSame(element1, element3);
      assertEquals("", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        element0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Document document0 = Document.createShell("zE30F+b4j4Z7");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document0.previousElementSiblings();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      
      String string0 = document1.className();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document2 = (Document)document1.addClass("html");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      
      Document document3 = (Document)document1.addClass("systemId");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotNull(document3);
      
      Elements elements1 = document0.getElementsMatchingOwnText(":nth-child(%d)");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      DataNode dataNode0 = new DataNode("zE30F+b4j4Z7");
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document3;
      nodeArray0[1] = (Node) document2;
      Tag tag0 = Tag.valueOf("zE30F+b4j4Z7");
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("zE30F+b4j4Z7", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("zE30F+b4j4Z7", tag0.getName());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("systemId");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, ":nth-child(%d)", attributes0);
      assertEquals("zE30F+b4j4Z7", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("zE30F+b4j4Z7", formElement0.nodeName());
      assertEquals(":nth-child(%d)", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("zE30F+b4j4Z7", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("zE30F+b4j4Z7", tag0.getName());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.addElement(document2);
      assertEquals("zE30F+b4j4Z7", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("zE30F+b4j4Z7", formElement0.nodeName());
      assertEquals(":nth-child(%d)", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement1.isBlock());
      assertEquals("zE30F+b4j4Z7", formElement1.tagName());
      assertEquals("zE30F+b4j4Z7", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(":nth-child(%d)", formElement1.baseUri());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("zE30F+b4j4Z7", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("zE30F+b4j4Z7", tag0.getName());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotNull(formElement1);
      
      nodeArray0[2] = (Node) formElement1;
      nodeArray0[3] = (Node) dataNode0;
      Document document4 = new Document("br");
      assertEquals(0, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("br", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals("br", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertNotNull(document4);
      
      nodeArray0[4] = (Node) document4;
      nodeArray0[5] = (Node) document0;
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "AfterAfterBody", attributes0);
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("zE30F+b4j4Z7", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("AfterAfterBody", pseudoTextElement0.baseUri());
      assertEquals("zE30F+b4j4Z7", pseudoTextElement0.nodeName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("zE30F+b4j4Z7", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("zE30F+b4j4Z7", tag0.getName());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(pseudoTextElement0);
      
      nodeArray0[6] = (Node) pseudoTextElement0;
      Document document5 = (Document)document0.insertChildren(0, nodeArray0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(7, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(5, document0.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals("#document", document5.nodeName());
      assertTrue(document5.hasParent());
      assertEquals(7, document5.childNodeSize());
      assertEquals(5, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("zE30F+b4j4Z7", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document5.location());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertSame(document5, document0);
      assertNotSame(document5, document2);
      assertEquals(7, nodeArray0.length);
      assertNotNull(document5);
      
      Document document6 = (Document)document0.removeClass(" />");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(7, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(5, document0.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document6.updateMetaCharsetElement());
      assertFalse(document6.isBlock());
      assertEquals("zE30F+b4j4Z7", document6.baseUri());
      assertEquals(5, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertEquals("#document", document6.nodeName());
      assertTrue(document6.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals(7, document6.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document6.location());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document3));
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document0, document5);
      assertNotSame(document6, document4);
      assertNotSame(document6, document1);
      assertNotSame(document6, document2);
      assertSame(document6, document5);
      assertSame(document6, document0);
      assertNotSame(document6, document3);
      assertNotNull(document6);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("br", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("br", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      document0.reparentChild(document1);
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("br", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("br", document1.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document0.child((-1625949436));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Parser parser1 = parser0.setTrackErrors((-1432352094));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser2 = parser1.settings(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertNotNull(parser2);
      
      Document document0 = parser2.parseInput("0oDks%$", "0oDks%$");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("0oDks%$", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("0oDks%$", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertNotNull(document0);
      
      Document document1 = document0.ownerDocument();
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("0oDks%$", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("0oDks%$", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("0oDks%$", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("0oDks%$", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Parser parser3 = parser0.settings(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser3.isTrackErrors());
      assertSame(parser0, parser3);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser3, parser2);
      assertSame(parser3, parser0);
      assertSame(parser3, parser1);
      assertNotNull(parser3);
      
      Document document2 = document1.parser(parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("0oDks%$", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("0oDks%$", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("0oDks%$", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("0oDks%$", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("0oDks%$", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("0oDks%$", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertSame(parser0, parser3);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser3);
      assertSame(parser2, parser3);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      Set<String> set0 = document2.classNames();
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("0oDks%$", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("0oDks%$", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("0oDks%$", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("0oDks%$", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("0oDks%$", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("0oDks%$", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertSame(parser0, parser3);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser3);
      assertSame(parser2, parser3);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(set0.contains("0oDks%$"));
      assertNotNull(set0);
      
      Document document3 = document2.clone();
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("0oDks%$", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("0oDks%$", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("0oDks%$", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("0oDks%$", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("0oDks%$", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("0oDks%$", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("0oDks%$", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("0oDks%$", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertSame(parser0, parser3);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser3);
      assertSame(parser2, parser3);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotNull(document3);
      
      int int0 = document1.elementSiblingIndex();
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("0oDks%$", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("0oDks%$", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("0oDks%$", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("0oDks%$", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertSame(parser0, parser3);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser3);
      assertSame(parser2, parser3);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertEquals(0, int0);
      
      Document document4 = (Document)document2.val("org.jsoup.nodes.Element");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("0oDks%$", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("0oDks%$", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("0oDks%$", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("0oDks%$", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("0oDks%$", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("0oDks%$", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("0oDks%$", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("0oDks%$", document4.baseUri());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertSame(parser0, parser3);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser3);
      assertSame(parser2, parser3);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertNotNull(document4);
      
      Element element0 = document2.previousElementSibling();
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("0oDks%$", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("0oDks%$", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("0oDks%$", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("0oDks%$", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("0oDks%$", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("0oDks%$", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertSame(parser0, parser3);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser3);
      assertSame(parser2, parser3);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertNull(element0);
      
      // Undeclared exception!
      try { 
        document2.after((Node) document3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      String string0 = parseSettings0.normalizeAttribute("7y:\"\"k@L &D-x7(");
      assertEquals("7y:\"\"k@l &d-x7(", string0);
      assertNotNull(string0);
      
      String string1 = parseSettings0.normalizeTag("7y:\"\"k@l &d-x7(");
      assertTrue(string1.equals((Object)string0));
      assertEquals("7y:\"\"k@l &d-x7(", string1);
      assertNotNull(string1);
      
      Tag tag0 = Tag.valueOf("7y:\"\"k@L &D-x7(", parseSettings0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "7y:\"\"k@L &D-x7(");
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(element0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      Document document0 = Parser.parse("zxMHQ='!w/", "org.jsoup.parser.HtmlTreeBuilder");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Elements elements0 = document0.parents();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element1 = document0.body();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      assertNotNull(element1);
      
      Elements elements1 = element1.previousElementSiblings();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(element1.equals((Object)element0));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(element1, element0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Element element2 = element1.insertChildren(0, (Collection<? extends Node>) elements1);
      assertEquals(2, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.tagName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals("body", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(element2.equals((Object)element0));
      assertFalse(element1.equals((Object)element0));
      assertFalse(elements1.equals((Object)elements0));
      assertSame(element2, element1);
      assertNotSame(element2, element0);
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(elements1, elements0);
      assertNotNull(element2);
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Element element3 = (Element)element1.traverse(nodeVisitor0);
      assertEquals(0, element3.siblingIndex());
      assertEquals("body", element3.nodeName());
      assertTrue(element3.hasParent());
      assertEquals(2, element3.childNodeSize());
      assertTrue(element3.isBlock());
      assertEquals("body", element3.tagName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element3.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertFalse(element3.equals((Object)element0));
      assertFalse(element1.equals((Object)element0));
      assertSame(element3, element2);
      assertNotSame(element3, element0);
      assertSame(element3, element1);
      assertSame(element1, element2);
      assertSame(element1, element3);
      assertNotSame(element1, element0);
      assertNotNull(element3);
      
      String string2 = element1.ownText();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(element1.equals((Object)element0));
      assertSame(element1, element2);
      assertSame(element1, element3);
      assertNotSame(element1, element0);
      assertEquals("zxMHQ='!w/", string2);
      assertNotNull(string2);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors((-1110026255));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      
      Parser parser2 = Parser.htmlParser();
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser2.equals((Object)parser0));
      assertFalse(parser2.equals((Object)parser1));
      assertNotSame(parser2, parser0);
      assertNotSame(parser2, parser1);
      assertNotNull(parser2);
      
      Document document1 = parser2.parseInput("", "");
      assertFalse(parser2.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(parser2.equals((Object)parser0));
      assertFalse(parser2.equals((Object)parser1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(parser2, parser0);
      assertNotSame(parser2, parser1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document1.val("</");
      assertFalse(parser2.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(parser2.equals((Object)parser0));
      assertFalse(parser2.equals((Object)parser1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(parser2, parser0);
      assertNotSame(parser2, parser1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        document2.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parse("R", "R");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("R", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("R", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      document0.parentNode = (Node) document0;
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("R", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("R", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("R", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("R", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, int0);
      
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("R", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("R", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Document document1 = (Document)document0.insertChildren(0, (Collection<? extends Node>) list0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("R", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("R", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("R", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("R", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parse("A.eHBLi`&JC[@w", "A.eHBLi`&JC[@w");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertNotNull(element0);
      
      Elements elements0 = document0.getElementsByAttributeValueStarting("A.eHBLi`&JC[@w", "A.eHBLi`&JC[@w");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = element0.previousElementSiblings();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Elements elements2 = document0.getElementsByClass("meta");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      
      Element element1 = document0.nextElementSibling();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNull(element1);
      
      Node node0 = document0.nextSibling();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNull(node0);
      
      DocumentType documentType0 = new DocumentType("A.eHBLi`&JC[@w", "meta", "A.eHBLi`&JC[@w", "A.eHBLi`&JC[@w");
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      assertFalse(documentType0.hasParent());
      assertNotNull(documentType0);
      
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(documentType0));
      assertNotNull(linkedHashSet0);
      
      Document document1 = (Document)document0.insertChildren(0, (Collection<? extends Node>) elements1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("A.eHBLi`&JC[@w", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("A.eHBLi`&JC[@w", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(elements1.equals((Object)elements2));
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotSame(elements1, elements2);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document2 = (Document)document1.traverse(nodeVisitor0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("A.eHBLi`&JC[@w", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("A.eHBLi`&JC[@w", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("A.eHBLi`&JC[@w", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(elements1.equals((Object)elements2));
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements1, elements0);
      assertNotSame(elements1, elements2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      String string0 = document0.ownText();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors(0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      
      Document document3 = parser1.parseInput("SYSTEM", "SYSTEM");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("SYSTEM", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("SYSTEM", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotNull(document3);
      
      Document document4 = (Document)document0.val("meta");
      assertEquals("A.eHBLi`&JC[@w", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document4.equals((Object)document3));
      assertFalse(document0.equals((Object)document3));
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotNull(document4);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Element element0 = new Element("DkERl_Sl");
      assertEquals("DkERl_Sl", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("DkERl_Sl", element0.tagName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Element element1 = element0.val("time");
      assertEquals("DkERl_Sl", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("DkERl_Sl", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("DkERl_Sl", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("DkERl_Sl", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Document document0 = Parser.parseBodyFragment("time", "DkERl_Sl");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("DkERl_Sl", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("DkERl_Sl", document0.location());
      assertNotNull(document0);
      
      boolean boolean1 = document0.hasText();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("DkERl_Sl", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("DkERl_Sl", document0.location());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("time"));
      assertNotNull(linkedHashSet0);
      
      boolean boolean2 = linkedHashSet0.add("time");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(linkedHashSet0.contains("time"));
      assertFalse(linkedHashSet0.contains("DkERl_Sl"));
      assertTrue(boolean2);
      
      String string0 = element1.val();
      assertEquals("DkERl_Sl", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("DkERl_Sl", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("DkERl_Sl", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("DkERl_Sl", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("time", string0);
      assertNotNull(string0);
      
      Document document1 = Parser.parseBodyFragment("wb':iM@rl%34", "</");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      String string1 = document1.className();
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("</", document1.location());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document1, document0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      Elements elements0 = element0.siblingElements();
      assertEquals("DkERl_Sl", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("DkERl_Sl", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(element0, element1);
      assertNotNull(elements0);
      
      Appendable appendable0 = null;
      int int0 = (-1994606164);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotNull(document_OutputSettings1);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">Z(:x ,bja3+p5i0o+");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        document_OutputSettings1.indentAmount((-1110026255));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = "blockquote";
      Document document0 = Parser.parseBodyFragment("P%8U", "blockquote");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("blockquote", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("blockquote", document0.location());
      assertNotNull(document0);
      
      String string1 = document0.toString();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("blockquote", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("blockquote", document0.location());
      assertFalse(string1.equals((Object)string0));
      assertEquals("<html>\n <head></head>\n <body>\n  P%8U\n </body>\n</html>", string1);
      assertNotNull(string1);
      
      Document document1 = document0.clone();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("blockquote", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("blockquote", document0.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("blockquote", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("blockquote", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      String string2 = null;
      CDataNode cDataNode0 = new CDataNode((String) null);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      TextNode textNode0 = cDataNode0.text("");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertEquals("#cdata", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertSame(cDataNode0, textNode0);
      assertSame(textNode0, cDataNode0);
      assertNotNull(textNode0);
      
      nodeArray0[2] = (Node) textNode0;
      document1.addChildren(1, nodeArray0);
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("blockquote", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("blockquote", document0.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(4, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("blockquote", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("blockquote", document1.location());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(3, nodeArray0.length);
      
      String string3 = " />";
      document0.reparentChild(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("blockquote", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("blockquote", document0.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("blockquote", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("blockquote", document1.location());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " />");
      assertFalse(boolean0);
      
      Element element0 = document0.selectFirst("e");
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("blockquote", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("blockquote", document0.location());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNull(element0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        document0.child(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      ParseSettings parseSettings1 = ParseSettings.htmlDefault;
      assertSame(parseSettings1, parseSettings0);
      assertNotNull(parseSettings1);
      
      String string0 = parseSettings1.normalizeAttribute("zE30F+b4j4Z7");
      assertSame(parseSettings1, parseSettings0);
      assertEquals("ze30f+b4j4z7", string0);
      assertNotNull(string0);
      
      String string1 = parseSettings0.normalizeTag("zE30F+b4j4Z7");
      assertTrue(string1.equals((Object)string0));
      assertSame(parseSettings0, parseSettings1);
      assertEquals("ze30f+b4j4z7", string1);
      assertNotNull(string1);
      
      Tag tag0 = Tag.valueOf("ze30f+b4j4z7", parseSettings0);
      assertFalse(tag0.isKnownTag());
      assertEquals("ze30f+b4j4z7", tag0.getName());
      assertEquals("ze30f+b4j4z7", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertSame(parseSettings0, parseSettings1);
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "*`J0# `*k3L");
      assertFalse(tag0.isKnownTag());
      assertEquals("ze30f+b4j4z7", tag0.getName());
      assertEquals("ze30f+b4j4z7", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("ze30f+b4j4z7", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ze30f+b4j4z7", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("*`J0# `*k3L", element0.baseUri());
      assertNotNull(element0);
      
      Document document0 = new Document("textarea");
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Element element1 = new Element("textarea");
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("textarea", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("textarea", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Elements elements0 = element0.getElementsByIndexEquals((-1110026255));
      assertFalse(tag0.isKnownTag());
      assertEquals("ze30f+b4j4z7", tag0.getName());
      assertEquals("ze30f+b4j4z7", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("ze30f+b4j4z7", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ze30f+b4j4z7", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("*`J0# `*k3L", element0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(element0.equals((Object)element1));
      assertSame(parseSettings0, parseSettings1);
      assertNotSame(element0, element1);
      assertNotNull(elements0);
      
      Node[] nodeArray0 = document1.childNodesAsArray();
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, nodeArray0.length);
      assertNotNull(nodeArray0);
      
      Element element2 = document1.body();
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNull(element2);
      
      Element element3 = document0.createElement("ze30f+b4j4z7");
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ze30f+b4j4z7", element3.nodeName());
      assertFalse(element3.hasParent());
      assertEquals("textarea", element3.baseUri());
      assertFalse(element3.isBlock());
      assertEquals(0, element3.siblingIndex());
      assertEquals("ze30f+b4j4z7", element3.tagName());
      assertEquals(0, element3.childNodeSize());
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertSame(document0, document1);
      assertNotSame(element3, element0);
      assertNotSame(element3, element1);
      assertNotNull(element3);
      
      Document document2 = (Document)document0.removeClass("Rz?n`hMK%");
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("textarea", document2.location());
      assertEquals("textarea", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      Document document3 = (Document)document2.appendText("textarea");
      assertFalse(document3.hasParent());
      assertEquals("textarea", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("textarea", document3.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("textarea", document2.location());
      assertEquals("textarea", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotNull(document3);
      
      Node[] nodeArray1 = new Node[8];
      assertFalse(nodeArray1.equals((Object)nodeArray0));
      
      nodeArray1[0] = (Node) element0;
      nodeArray1[1] = (Node) document2;
      nodeArray1[2] = (Node) document0;
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("N}q2$", "character outside of valid range", true);
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertNotNull(xmlDeclaration0);
      
      nodeArray1[3] = (Node) xmlDeclaration0;
      CDataNode cDataNode0 = new CDataNode("ze30f+b4j4z7");
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      CDataNode cDataNode1 = (CDataNode)cDataNode0.clone();
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode1.siblingIndex());
      assertEquals("#cdata", cDataNode1.nodeName());
      assertFalse(cDataNode1.hasParent());
      assertFalse(cDataNode1.equals((Object)cDataNode0));
      assertNotSame(cDataNode0, cDataNode1);
      assertNotSame(cDataNode1, cDataNode0);
      assertNotNull(cDataNode1);
      
      nodeArray1[4] = (Node) cDataNode1;
      nodeArray1[5] = (Node) document0;
      nodeArray1[6] = (Node) element0;
      nodeArray1[7] = (Node) document2;
      // Undeclared exception!
      try { 
        document1.insertChildren((-1110026255), nodeArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      String string0 = parseSettings0.normalizeAttribute("7y:\"\"k@L &D-x7(");
      assertEquals("7y:\"\"k@l &d-x7(", string0);
      assertNotNull(string0);
      
      String string1 = parseSettings0.normalizeTag("7y:\"\"k@l &d-x7(");
      assertTrue(string1.equals((Object)string0));
      assertEquals("7y:\"\"k@l &d-x7(", string1);
      assertNotNull(string1);
      
      Tag tag0 = Tag.valueOf("7y:\"\"k@L &D-x7(", parseSettings0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "7y:\"\"k@L &D-x7(");
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertNotNull(element0);
      
      Document document0 = new Document("7y:\"\"k@l &d-x7(");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("7y:\"\"k@l &d-x7(", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("7y:\"\"k@l &d-x7(", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("7y:\"\"k@l &d-x7(", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Element element1 = new Element("DkERl_Sl");
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("DkERl_Sl", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("DkERl_Sl", element1.nodeName());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document2 = (Document)document0.addClass("F\"l5,Yn{");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("7y:\"\"k@l &d-x7(", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("7y:\"\"k@l &d-x7(", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("7y:\"\"k@l &d-x7(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 7y:\"\"k@l &d-x7(
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      String string0 = parseSettings0.normalizeAttribute("7y:\"\"k@L &D-x7(");
      assertEquals("7y:\"\"k@l &d-x7(", string0);
      assertNotNull(string0);
      
      String string1 = parseSettings0.normalizeTag("7y:\"\"k@l &d-x7(");
      assertTrue(string1.equals((Object)string0));
      assertEquals("7y:\"\"k@l &d-x7(", string1);
      assertNotNull(string1);
      
      Tag tag0 = Tag.valueOf("7y:\"\"k@L &D-x7(", parseSettings0);
      assertFalse(tag0.isKnownTag());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "7y:\"\"k@L &D-x7(");
      assertFalse(tag0.isKnownTag());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      Document document0 = Parser.parse("zxMHQ='!w/", "org.jsoup.parser.HtmlTreeBuilder");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Elements elements0 = document0.parents();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element1 = document0.body();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      assertNotNull(element1);
      
      Elements elements1 = element1.previousElementSiblings();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(element1.equals((Object)element0));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(element1, element0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      String string2 = parseSettings0.normalizeTag("id");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("id", string2);
      assertNotNull(string2);
      
      Document document1 = (Document)document0.doClone(element1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(element1.equals((Object)element0));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(element1, element0);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Element element2 = (Element)element1.traverse(nodeVisitor0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("body", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element2.baseUri());
      assertEquals("body", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals(1, element2.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertNotSame(document0, document1);
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertSame(element2, element1);
      assertNotSame(element2, element0);
      assertNotNull(element2);
      
      Elements elements2 = element1.getElementsContainingText("7y:\"\"k@L &D-x7(");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      
      String string3 = document1.ownText();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(document1, document0);
      assertEquals("", string3);
      assertNotNull(string3);
      
      Element element3 = new Element("7y:\"\"k@l &d-x7(");
      assertEquals("", element3.baseUri());
      assertEquals("7y:\"\"k@l &d-x7(", element3.nodeName());
      assertEquals(0, element3.childNodeSize());
      assertFalse(element3.isBlock());
      assertEquals(0, element3.siblingIndex());
      assertEquals("7y:\"\"k@l &d-x7(", element3.tagName());
      assertFalse(element3.hasParent());
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element1));
      assertNotNull(element3);
      
      Element element4 = element1.parent();
      assertTrue(element4.isBlock());
      assertEquals("html", element4.nodeName());
      assertEquals(0, element4.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element4.baseUri());
      assertEquals(2, element4.childNodeSize());
      assertTrue(element4.hasParent());
      assertEquals("html", element4.tagName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertFalse(element4.equals((Object)element1));
      assertFalse(element4.equals((Object)element3));
      assertFalse(element4.equals((Object)element0));
      assertFalse(element4.equals((Object)element2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element3));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element4, element1);
      assertNotSame(element4, element3);
      assertNotSame(element4, element0);
      assertNotSame(element4, element2);
      assertNotSame(document0, document1);
      assertNotSame(element1, element3);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertNotSame(element1, element4);
      assertNotNull(element4);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document2 = parser0.parseInput("", "value");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document2.hasParent());
      assertEquals("value", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("value", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      
      document2.setBaseUri("class");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("class", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("value", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document document3 = (Document)document2.val("id");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("class", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("value", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals("class", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("value", document3.location());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotNull(document3);
      
      // Undeclared exception!
      try { 
        document3.wrap("h2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("z$}n2tmr%iTI%EwJY", "z$}n2tmr%iTI%EwJY");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text("");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document1.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      
      String string0 = document1.className();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("z$}n2tmr%iTI%EwJY", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document2 = (Document)document0.addClass("");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("z$}n2tmr%iTI%EwJY", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("z$}n2tmr%iTI%EwJY", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      Document document3 = (Document)document0.addClass("z$}n2tmr%iTI%EwJY");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("z$}n2tmr%iTI%EwJY", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("z$}n2tmr%iTI%EwJY", document3.location());
      assertFalse(document3.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertNotNull(document3);
      
      Elements elements1 = document0.getElementsMatchingOwnText("z$}n2tmr%iTI%EwJY");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.location());
      assertEquals("z$}n2tmr%iTI%EwJY", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Node[] nodeArray0 = new Node[7];
      DataNode dataNode0 = new DataNode("");
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertNotNull(dataNode0);
      
      nodeArray0[0] = (Node) dataNode0;
      nodeArray0[1] = (Node) document3;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document3;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document2;
      // Undeclared exception!
      try { 
        document1.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parse("A.eHBLi`&JC[@w", "A.eHBLi`&JC[@w");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      
      Elements elements0 = document0.getElementsByAttributeValueStarting("A.eHBLi`&JC[@w", "A.eHBLi`&JC[@w");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Elements elements1 = element0.previousElementSiblings();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Elements elements2 = document0.getElementsByClass("meta");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      
      Element element1 = document0.nextElementSibling();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNull(element1);
      
      Node node0 = document0.nextSibling();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNull(node0);
      
      DocumentType documentType0 = new DocumentType("A.eHBLi`&JC[@w", "meta", "A.eHBLi`&JC[@w", "A.eHBLi`&JC[@w");
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      assertFalse(documentType0.hasParent());
      assertNotNull(documentType0);
      
      Elements elements3 = document0.getElementsContainingText("SYSTEM");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements1));
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotNull(elements3);
      
      String string0 = document0.ownText();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Element element2 = new Element("meta");
      assertTrue(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals("meta", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("meta", element2.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.equals((Object)element0));
      assertNotNull(element2);
      
      Element element3 = element2.parent();
      assertTrue(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals("meta", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("meta", element2.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.equals((Object)element0));
      assertNotSame(element2, element0);
      assertNull(element3);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = Parser.htmlParser();
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser1.equals((Object)parser0));
      assertNotSame(parser1, parser0);
      assertNotNull(parser1);
      
      Document document1 = parser1.parseInput("`7S", "PUBLIC");
      assertFalse(parser1.isTrackErrors());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("PUBLIC", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("PUBLIC", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(parser1.equals((Object)parser0));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.val("org.jsoup.nodes.Element$2");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("A.eHBLi`&JC[@w", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document2.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      Element element4 = element0.after("SYSTEM");
      assertEquals("A.eHBLi`&JC[@w", element4.baseUri());
      assertEquals("head", element4.tagName());
      assertTrue(element4.isBlock());
      assertEquals("head", element4.nodeName());
      assertTrue(element4.hasParent());
      assertEquals(0, element4.childNodeSize());
      assertEquals(0, element4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertTrue(element0.isBlock());
      assertFalse(element4.equals((Object)element2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element2));
      assertNotSame(element4, element2);
      assertSame(element4, element0);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(element0, element2);
      assertSame(element0, element4);
      assertNotNull(element4);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      String string0 = parseSettings0.normalizeAttribute("7y:\"\"k@L &D-x7(");
      assertEquals("7y:\"\"k@l &d-x7(", string0);
      assertNotNull(string0);
      
      String string1 = parseSettings0.normalizeTag("7y:\"\"k@l &d-x7(");
      assertTrue(string1.equals((Object)string0));
      assertEquals("7y:\"\"k@l &d-x7(", string1);
      assertNotNull(string1);
      
      Tag tag0 = Tag.valueOf("7y:\"\"k@L &D-x7(", parseSettings0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "7y:\"\"k@L &D-x7(");
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(element0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertNotNull(element0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      Document document0 = Parser.parse("zxMHQ='!w/", "org.jsoup.parser.HtmlTreeBuilder");
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Elements elements0 = document0.parents();
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element1 = document0.body();
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      assertNotNull(element1);
      
      Elements elements1 = element1.previousElementSiblings();
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(element1.equals((Object)element0));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(element1, element0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(false);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotNull(document_OutputSettings2);
      
      Tag tag1 = Tag.valueOf("7y:\"\"k@l &d-x7(");
      assertFalse(tag1.isData());
      assertFalse(tag1.isFormSubmittable());
      assertEquals("7y:\"\"k@l &d-x7(", tag1.toString());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isKnownTag());
      assertTrue(tag1.isInline());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isEmpty());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.isSelfClosing());
      assertEquals("7y:\"\"k@l &d-x7(", tag1.getName());
      assertTrue(tag1.equals((Object)tag0));
      assertNotSame(tag1, tag0);
      assertNotNull(tag1);
      
      Element element2 = new Element(tag1, "^gD@Zr");
      assertFalse(tag1.isData());
      assertFalse(tag1.isFormSubmittable());
      assertEquals("7y:\"\"k@l &d-x7(", tag1.toString());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isKnownTag());
      assertTrue(tag1.isInline());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isEmpty());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.isSelfClosing());
      assertEquals("7y:\"\"k@l &d-x7(", tag1.getName());
      assertFalse(element2.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertEquals("^gD@Zr", element2.baseUri());
      assertTrue(tag1.equals((Object)tag0));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertNotNull(element2);
      
      String string2 = element0.html();
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(element0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(tag0.equals((Object)tag1));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element0.equals((Object)element2));
      assertNotSame(tag0, tag1);
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      assertEquals("", string2);
      assertNotNull(string2);
      
      Element element3 = element1.firstElementSibling();
      assertEquals("head", element3.tagName());
      assertEquals(0, element3.childNodeSize());
      assertEquals("head", element3.nodeName());
      assertTrue(element3.hasParent());
      assertEquals(0, element3.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element3.baseUri());
      assertTrue(element3.isBlock());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertNotSame(element3, element2);
      assertNotSame(element3, element0);
      assertNotSame(element3, element1);
      assertNotSame(element1, element0);
      assertNotSame(element1, element3);
      assertNotSame(element1, element2);
      assertNotNull(element3);
      
      Element element4 = element3.addClass("4*P$a!");
      assertEquals("head", element3.tagName());
      assertEquals(0, element3.childNodeSize());
      assertEquals("head", element3.nodeName());
      assertTrue(element3.hasParent());
      assertEquals(0, element3.siblingIndex());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element3.baseUri());
      assertTrue(element3.isBlock());
      assertEquals(0, element4.childNodeSize());
      assertEquals(0, element4.siblingIndex());
      assertTrue(element4.hasParent());
      assertEquals("head", element4.nodeName());
      assertTrue(element4.isBlock());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element4.baseUri());
      assertEquals("head", element4.tagName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element4.equals((Object)element2));
      assertFalse(element4.equals((Object)element0));
      assertFalse(element4.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element3));
      assertFalse(element1.equals((Object)element2));
      assertNotSame(element3, element2);
      assertNotSame(element3, element0);
      assertSame(element3, element4);
      assertNotSame(element3, element1);
      assertSame(element4, element3);
      assertNotSame(element4, element2);
      assertNotSame(element4, element0);
      assertNotSame(element4, element1);
      assertNotSame(element1, element0);
      assertNotSame(element1, element3);
      assertNotSame(element1, element4);
      assertNotSame(element1, element2);
      assertNotNull(element4);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Document.createShell("ot Q");
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ot Q", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ot Q", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      
      Document document1 = document0.outputSettings(document_OutputSettings2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ot Q", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ot Q", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ot Q", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ot Q", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertSame(document0, document1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Element element0 = document0.body();
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ot Q", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ot Q", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("ot Q", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertSame(document0, document1);
      assertNotNull(element0);
      
      Element element1 = element0.toggleClass("?");
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ot Q", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ot Q", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("ot Q", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ot Q", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      boolean boolean0 = element0.hasAttributes();
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ot Q", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ot Q", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("ot Q", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        document1.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Document document0 = Document.createShell("zE30F+b4j4Z7");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.text("zE30F+b4j4Z7");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(linkedHashSet0);
      
      Document document3 = (Document)document2.classNames((Set<String>) linkedHashSet0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(document3);
      
      Document document4 = (Document)document2.doClone(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("zE30F+b4j4Z7", document4.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotNull(document4);
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = document1.hasText();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertFalse(boolean0);
      
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertFalse(linkedHashSet1.contains(string0));
      assertNotNull(linkedHashSet1);
      
      boolean boolean1 = linkedHashSet1.add("zE30F+b4j4Z7");
      assertEquals(1, linkedHashSet1.size());
      assertFalse(linkedHashSet1.isEmpty());
      assertFalse(linkedHashSet1.equals((Object)linkedHashSet0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertTrue(linkedHashSet1.contains("zE30F+b4j4Z7"));
      assertFalse(linkedHashSet1.contains(string0));
      assertTrue(boolean1);
      
      String string1 = "'%'ANmsP|WP]";
      Document document5 = Parser.parseBodyFragment("", "'%'ANmsP|WP]");
      assertFalse(document5.hasParent());
      assertEquals("'%'ANmsP|WP]", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.isBlock());
      assertEquals(1, document5.childNodeSize());
      assertEquals("'%'ANmsP|WP]", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document0);
      assertNotNull(document5);
      
      String string2 = document5.className();
      assertFalse(document5.hasParent());
      assertEquals("'%'ANmsP|WP]", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.isBlock());
      assertEquals(1, document5.childNodeSize());
      assertEquals("'%'ANmsP|WP]", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Document document6 = (Document)document0.addClass("");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("zE30F+b4j4Z7", document6.location());
      assertFalse(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document6.baseUri());
      assertEquals(1, document6.childNodeSize());
      assertFalse(document6.isBlock());
      assertEquals("#document", document6.nodeName());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document5));
      assertNotSame(document0, document5);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document6, document4);
      assertSame(document6, document2);
      assertNotSame(document6, document1);
      assertSame(document6, document0);
      assertNotSame(document6, document5);
      assertSame(document6, document3);
      assertNotNull(document6);
      
      Document document7 = (Document)document0.addClass("");
      assertFalse(document7.hasParent());
      assertEquals("#root", document7.tagName());
      assertFalse(document7.isBlock());
      assertEquals(0, document7.siblingIndex());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("#document", document7.nodeName());
      assertEquals(1, document7.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertEquals("zE30F+b4j4Z7", document7.baseUri());
      assertEquals("zE30F+b4j4Z7", document7.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertSame(document7, document2);
      assertNotSame(document7, document1);
      assertSame(document7, document3);
      assertSame(document7, document6);
      assertNotSame(document7, document4);
      assertSame(document7, document0);
      assertNotSame(document7, document5);
      assertNotSame(document0, document5);
      assertSame(document0, document6);
      assertSame(document0, document7);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotNull(document7);
      
      Elements elements0 = document1.getElementsMatchingOwnText("");
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document5);
      assertSame(document0, document6);
      assertSame(document0, document7);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document1, document4);
      assertNotSame(document1, document5);
      assertNotSame(document1, document7);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document6);
      assertNotSame(document1, document0);
      assertNotNull(elements0);
      
      Elements elements1 = document2.getElementsByIndexGreaterThan((-3));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(elements1.isEmpty());
      assertEquals(4, elements1.size());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document5));
      assertNotSame(document0, document5);
      assertSame(document0, document6);
      assertSame(document0, document7);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(elements1, elements0);
      assertSame(document2, document3);
      assertSame(document2, document6);
      assertSame(document2, document7);
      assertNotSame(document2, document1);
      assertNotSame(document2, document4);
      assertNotSame(document2, document5);
      assertSame(document2, document0);
      assertNotNull(elements1);
      
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document3;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document4;
      // Undeclared exception!
      try { 
        document2.insertChildren(60, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      String string0 = parseSettings0.normalizeAttribute("7y:\"\"k@L &D-x7(");
      assertEquals("7y:\"\"k@l &d-x7(", string0);
      assertNotNull(string0);
      
      String string1 = parseSettings0.normalizeTag("7y:\"\"k@l &d-x7(");
      assertTrue(string1.equals((Object)string0));
      assertEquals("7y:\"\"k@l &d-x7(", string1);
      assertNotNull(string1);
      
      Tag tag0 = Tag.valueOf("7y:\"\"k@L &D-x7(", parseSettings0);
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "7y:\"\"k@L &D-x7(");
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      Document document0 = Parser.parse("zxMHQ='!w/", "org.jsoup.parser.HtmlTreeBuilder");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertNotNull(document0);
      
      Elements elements0 = document0.parents();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element1 = document0.body();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element1.baseUri());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      assertNotNull(element1);
      
      Elements elements1 = element1.previousElementSiblings();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element1.baseUri());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(element1.equals((Object)element0));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(element1, element0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(false);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings0.prettyPrint(false);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotNull(document_OutputSettings3);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings0.charset(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotNull(document_OutputSettings4);
      
      Appendable appendable0 = element0.html((Appendable) pipedWriter0);
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.equals((Object)element1));
      assertSame(appendable0, pipedWriter0);
      assertNotSame(element0, element1);
      assertSame(pipedWriter0, appendable0);
      assertNotNull(appendable0);
      
      element1.outerHtmlHead(appendable0, (-121), document_OutputSettings2);
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", document0.location());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("org.jsoup.parser.HtmlTreeBuilder", element1.baseUri());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertSame(appendable0, pipedWriter0);
      assertNotSame(element0, element1);
      assertSame(pipedWriter0, appendable0);
      assertNotSame(element1, element0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Document document0 = Document.createShell("zE30F+b4j4Z7");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.text("zE30F+b4j4Z7");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(linkedHashSet0);
      
      Document document3 = (Document)document2.classNames((Set<String>) linkedHashSet0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertFalse(document3.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(document3);
      
      Document document4 = (Document)document2.doClone(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotNull(document4);
      
      Document document5 = (Document)document0.attr("Bx6poFZ&Q2}rkCv", true);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals("zE30F+b4j4Z7", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("zE30F+b4j4Z7", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document5, document1);
      assertSame(document5, document3);
      assertSame(document5, document0);
      assertSame(document5, document2);
      assertNotSame(document5, document4);
      assertNotNull(document5);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Elements elements0 = document3.getElementsByIndexEquals((-3198));
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertFalse(document3.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document2, document4);
      assertSame(document2, document5);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document5);
      assertNotSame(document3, document4);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(elements0);
      
      Document document6 = (Document)document2.val("Children collection to be inserted must not be null.");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("#document", document6.nodeName());
      assertEquals(1, document6.childNodeSize());
      assertFalse(document6.isBlock());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.hasParent());
      assertEquals("zE30F+b4j4Z7", document6.location());
      assertEquals("zE30F+b4j4Z7", document6.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document2, document4);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document6, document4);
      assertNotSame(document6, document1);
      assertSame(document6, document3);
      assertSame(document6, document0);
      assertSame(document6, document5);
      assertSame(document6, document2);
      assertNotNull(document6);
      
      Document document7 = (Document)document1.val("Znrv ju/){^");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertEquals("zE30F+b4j4Z7", document7.location());
      assertFalse(document7.hasParent());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document7.baseUri());
      assertEquals(1, document7.childNodeSize());
      assertFalse(document7.isBlock());
      assertEquals("#root", document7.tagName());
      assertEquals("#document", document7.nodeName());
      assertEquals(0, document7.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document6));
      assertNotSame(document0, document7);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document1, document6);
      assertNotSame(document1, document2);
      assertNotSame(document1, document5);
      assertSame(document1, document7);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document1, document3);
      assertNotSame(document7, document5);
      assertNotSame(document7, document0);
      assertSame(document7, document1);
      assertNotSame(document7, document2);
      assertNotSame(document7, document4);
      assertNotSame(document7, document3);
      assertNotSame(document7, document6);
      assertNotNull(document7);
      
      Document document8 = Document.createShell("Children collection to be inserted must not be null.");
      assertEquals(1, document8.childNodeSize());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document8.location());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document8.baseUri());
      assertFalse(document8.hasParent());
      assertFalse(document8.isBlock());
      assertEquals("#document", document8.nodeName());
      assertEquals(0, document8.siblingIndex());
      assertEquals("#root", document8.tagName());
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document8.equals((Object)document0));
      assertFalse(document8.equals((Object)document5));
      assertFalse(document8.equals((Object)document6));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document8.equals((Object)document1));
      assertNotSame(document8, document4);
      assertNotSame(document8, document2);
      assertNotSame(document8, document0);
      assertNotSame(document8, document5);
      assertNotSame(document8, document6);
      assertNotSame(document8, document3);
      assertNotSame(document8, document7);
      assertNotSame(document8, document1);
      assertNotNull(document8);
      
      Element element0 = document8.shallowClone();
      assertEquals(1, document8.childNodeSize());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document8.location());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document8.baseUri());
      assertFalse(document8.hasParent());
      assertFalse(document8.isBlock());
      assertEquals("#document", document8.nodeName());
      assertEquals(0, document8.siblingIndex());
      assertEquals("#root", document8.tagName());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("#root", element0.nodeName());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document8.equals((Object)document0));
      assertFalse(document8.equals((Object)document5));
      assertFalse(document8.equals((Object)document6));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document8.equals((Object)document1));
      assertNotSame(document8, document4);
      assertNotSame(document8, document2);
      assertNotSame(document8, document0);
      assertNotSame(document8, document5);
      assertNotSame(document8, document6);
      assertNotSame(document8, document3);
      assertNotSame(document8, document7);
      assertNotSame(document8, document1);
      assertNotNull(element0);
      
      Element element1 = document5.body();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals("zE30F+b4j4Z7", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("zE30F+b4j4Z7", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals(0, document5.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("zE30F+b4j4Z7", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document8));
      assertFalse(document5.equals((Object)document7));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(document0, document7);
      assertNotSame(document0, document1);
      assertNotSame(document0, document8);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document5, document1);
      assertSame(document5, document3);
      assertSame(document5, document0);
      assertSame(document5, document2);
      assertSame(document5, document6);
      assertNotSame(document5, document4);
      assertNotSame(document5, document8);
      assertNotSame(document5, document7);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      
      Elements elements1 = element1.siblingElements();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals("zE30F+b4j4Z7", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("zE30F+b4j4Z7", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals(0, document5.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("zE30F+b4j4Z7", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document8));
      assertFalse(document5.equals((Object)document7));
      assertFalse(element1.equals((Object)element0));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document7);
      assertNotSame(document0, document1);
      assertNotSame(document0, document8);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document5, document1);
      assertSame(document5, document3);
      assertSame(document5, document0);
      assertSame(document5, document2);
      assertSame(document5, document6);
      assertNotSame(document5, document4);
      assertNotSame(document5, document8);
      assertNotSame(document5, document7);
      assertNotSame(element1, element0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Element element2 = document3.createElement("time");
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("time", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals("time", element2.tagName());
      assertEquals("zE30F+b4j4Z7", element2.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertFalse(document3.hasParent());
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document7));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document8));
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotSame(document0, document7);
      assertNotSame(document0, document1);
      assertNotSame(document0, document8);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document2, document4);
      assertNotSame(document2, document8);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertSame(document2, document3);
      assertNotSame(document2, document7);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document5);
      assertNotSame(document3, document4);
      assertNotSame(document3, document7);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document8);
      assertSame(document3, document6);
      assertSame(document3, document2);
      assertFalse(linkedHashSet0.contains("Bx6poFZ&Q2}rkCv"));
      assertNotNull(element2);
      
      Pattern pattern0 = Pattern.compile("mark");
      assertEquals("mark", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("mark", pattern0.pattern());
      assertNotNull(pattern0);
      
      Evaluator.AttributeWithValueMatching evaluator_AttributeWithValueMatching0 = new Evaluator.AttributeWithValueMatching(" />", pattern0);
      assertEquals("mark", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("mark", pattern0.pattern());
      assertNotNull(evaluator_AttributeWithValueMatching0);
      
      boolean boolean1 = element2.is((Evaluator) evaluator_AttributeWithValueMatching0);
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("time", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals("time", element2.tagName());
      assertEquals("zE30F+b4j4Z7", element2.baseUri());
      assertEquals("mark", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("mark", pattern0.pattern());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertFalse(document3.hasParent());
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document4));
      assertTrue(boolean1 == boolean0);
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document7));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document8));
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotSame(document0, document7);
      assertNotSame(document0, document1);
      assertNotSame(document0, document8);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document2, document4);
      assertNotSame(document2, document8);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertSame(document2, document3);
      assertNotSame(document2, document7);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document5);
      assertNotSame(document3, document4);
      assertNotSame(document3, document7);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document8);
      assertSame(document3, document6);
      assertSame(document3, document2);
      assertFalse(linkedHashSet0.contains("Bx6poFZ&Q2}rkCv"));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Document.createShell("zE30F+b4j4Z7");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertNotNull(document0);
      
      Elements elements0 = document0.siblingElements();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      Document document1 = Parser.parse("zE30F+b4j4Z7", "textarea");
      assertEquals("textarea", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Tag tag0 = Tag.valueOf("textarea");
      assertEquals("textarea", tag0.toString());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.preserveWhitespace());
      assertTrue(tag0.isFormListed());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "textarea");
      assertEquals("textarea", tag0.toString());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.preserveWhitespace());
      assertTrue(tag0.isFormListed());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      String string0 = document0.html();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertNotNull(string0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      element0.outerHtmlTail(pipedWriter0, 4, document_OutputSettings0);
      assertEquals("textarea", tag0.toString());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.preserveWhitespace());
      assertTrue(tag0.isFormListed());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      
      Elements elements1 = element0.getElementsByAttributeStarting("=J");
      assertEquals("textarea", tag0.toString());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.preserveWhitespace());
      assertTrue(tag0.isFormListed());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Document document0 = Document.createShell("zE30F+b4j4Z7");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.text("zE30F+b4j4Z7");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(linkedHashSet0);
      
      Document document3 = (Document)document2.classNames((Set<String>) linkedHashSet0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(document3);
      
      Document document4 = (Document)document2.doClone(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals("zE30F+b4j4Z7", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#root", document4.tagName());
      assertEquals("zE30F+b4j4Z7", document4.location());
      assertFalse(document4.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotNull(document4);
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = document1.hasText();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertFalse(boolean0);
      
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertFalse(linkedHashSet1.contains(string0));
      assertNotNull(linkedHashSet1);
      
      boolean boolean1 = linkedHashSet1.add("zE30F+b4j4Z7");
      assertEquals(1, linkedHashSet1.size());
      assertFalse(linkedHashSet1.isEmpty());
      assertFalse(linkedHashSet1.equals((Object)linkedHashSet0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertFalse(linkedHashSet1.contains(string0));
      assertTrue(linkedHashSet1.contains("zE30F+b4j4Z7"));
      assertTrue(boolean1);
      
      String string1 = Node.EmptyString;
      assertEquals("", string1);
      assertNotNull(string1);
      
      Document document5 = Parser.parseBodyFragment("", "'%'ANmsPWP]");
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals("'%'ANmsPWP]", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("'%'ANmsPWP]", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document2));
      assertNotSame(document5, document3);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document2);
      assertNotNull(document5);
      
      String string2 = document5.className();
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals("'%'ANmsPWP]", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("'%'ANmsPWP]", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document2));
      assertNotSame(document5, document3);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document2);
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Document document6 = (Document)document0.addClass("");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("zE30F+b4j4Z7", document6.baseUri());
      assertEquals("#document", document6.nodeName());
      assertEquals(1, document6.childNodeSize());
      assertFalse(document6.hasParent());
      assertFalse(document6.isBlock());
      assertEquals("zE30F+b4j4Z7", document6.location());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document5));
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document6, document0);
      assertNotSame(document6, document4);
      assertSame(document6, document3);
      assertSame(document6, document2);
      assertNotSame(document6, document1);
      assertNotSame(document6, document5);
      assertNotNull(document6);
      
      Document document7 = (Document)document0.addClass("");
      assertEquals("#root", document7.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertEquals("zE30F+b4j4Z7", document7.baseUri());
      assertEquals("zE30F+b4j4Z7", document7.location());
      assertEquals(1, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertFalse(document7.hasParent());
      assertEquals("#document", document7.nodeName());
      assertFalse(document7.isBlock());
      assertEquals(0, document7.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document7, document5);
      assertSame(document7, document3);
      assertNotSame(document7, document1);
      assertSame(document7, document0);
      assertNotSame(document7, document4);
      assertSame(document7, document2);
      assertSame(document7, document6);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document7);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertNotNull(document7);
      
      Node[] nodeArray0 = document6.childNodesAsArray();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("zE30F+b4j4Z7", document6.baseUri());
      assertEquals("#document", document6.nodeName());
      assertEquals(1, document6.childNodeSize());
      assertFalse(document6.hasParent());
      assertFalse(document6.isBlock());
      assertEquals("zE30F+b4j4Z7", document6.location());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document5));
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document7);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document6, document0);
      assertNotSame(document6, document4);
      assertSame(document6, document3);
      assertSame(document6, document2);
      assertNotSame(document6, document1);
      assertSame(document6, document7);
      assertNotSame(document6, document5);
      assertEquals(1, nodeArray0.length);
      assertNotNull(nodeArray0);
      
      String string3 = document3.val();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      assertFalse(linkedHashSet0.equals((Object)linkedHashSet1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document5));
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document7);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document2, document3);
      assertNotSame(document2, document5);
      assertNotSame(document2, document1);
      assertNotSame(document2, document4);
      assertSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document2, document7);
      assertNotSame(linkedHashSet0, linkedHashSet1);
      assertSame(document3, document0);
      assertNotSame(document3, document4);
      assertNotSame(document3, document1);
      assertSame(document3, document7);
      assertSame(document3, document6);
      assertSame(document3, document2);
      assertNotSame(document3, document5);
      assertFalse(linkedHashSet0.contains(string3));
      assertEquals("", string3);
      assertNotNull(string3);
      
      Element element0 = document6.head();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("zE30F+b4j4Z7", document6.baseUri());
      assertEquals("#document", document6.nodeName());
      assertEquals(1, document6.childNodeSize());
      assertFalse(document6.hasParent());
      assertFalse(document6.isBlock());
      assertEquals("zE30F+b4j4Z7", document6.location());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document5));
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document7);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document6, document0);
      assertNotSame(document6, document4);
      assertSame(document6, document3);
      assertSame(document6, document2);
      assertNotSame(document6, document1);
      assertSame(document6, document7);
      assertNotSame(document6, document5);
      assertNotNull(element0);
      
      Element element1 = element0.prependElement("'%'ANmsPWP]");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("head", element0.tagName());
      assertEquals("zE30F+b4j4Z7", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("'%'anmspwp]", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("zE30F+b4j4Z7", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("'%'anmspwp]", element1.nodeName());
      assertFalse(element1.isBlock());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("zE30F+b4j4Z7", document6.baseUri());
      assertEquals("#document", document6.nodeName());
      assertEquals(1, document6.childNodeSize());
      assertFalse(document6.hasParent());
      assertFalse(document6.isBlock());
      assertEquals("zE30F+b4j4Z7", document6.location());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document5));
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document7);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertSame(document6, document0);
      assertNotSame(document6, document4);
      assertSame(document6, document3);
      assertSame(document6, document2);
      assertNotSame(document6, document1);
      assertSame(document6, document7);
      assertNotSame(document6, document5);
      assertNotNull(element1);
      
      String string4 = document2.className();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document7);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document2, document3);
      assertNotSame(document2, document5);
      assertNotSame(document2, document1);
      assertNotSame(document2, document4);
      assertSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document2, document7);
      assertNotNull(string4);
      
      Document document8 = (Document)document4.before((Node) document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("zE30F+b4j4Z7", document8.location());
      assertEquals("#root", document8.tagName());
      assertEquals(1, document8.childNodeSize());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document8.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertFalse(document8.isBlock());
      assertTrue(document8.hasParent());
      assertEquals("#document", document8.nodeName());
      assertEquals(0, document8.siblingIndex());
      assertEquals(0, document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals("zE30F+b4j4Z7", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#root", document4.tagName());
      assertEquals("zE30F+b4j4Z7", document4.location());
      assertFalse(document4.isBlock());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document8.equals((Object)document5));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document8.equals((Object)document6));
      assertFalse(document8.equals((Object)document0));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document6));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document7));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document3));
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document7);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(document0, document8);
      assertSame(document0, document6);
      assertNotSame(document1, document8);
      assertNotSame(document1, document3);
      assertNotSame(document1, document7);
      assertNotSame(document1, document5);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document6);
      assertNotSame(document1, document4);
      assertSame(document2, document3);
      assertNotSame(document2, document5);
      assertNotSame(document2, document1);
      assertNotSame(document2, document4);
      assertSame(document2, document6);
      assertSame(document2, document0);
      assertNotSame(document2, document8);
      assertSame(document2, document7);
      assertNotSame(document8, document5);
      assertNotSame(document8, document7);
      assertNotSame(document8, document2);
      assertNotSame(document8, document6);
      assertNotSame(document8, document0);
      assertNotSame(document8, document1);
      assertNotSame(document8, document3);
      assertSame(document8, document4);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document6);
      assertSame(document4, document8);
      assertNotSame(document4, document0);
      assertNotSame(document4, document7);
      assertNotSame(document4, document5);
      assertNotSame(document4, document3);
      assertNotNull(document8);
      
      Element element2 = document1.shallowClone();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals("zE30F+b4j4Z7", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("#root", element2.nodeName());
      assertEquals("#root", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document4));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document7);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(document0, document8);
      assertSame(document0, document6);
      assertNotSame(document1, document8);
      assertNotSame(document1, document3);
      assertNotSame(document1, document7);
      assertNotSame(document1, document5);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document6);
      assertNotSame(document1, document4);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("7y:\"\"k@L &D-x7(", parseSettings0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "7y:\"\"k@L &D-x7(");
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        element0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = "zE30F+b4j4Z+7";
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Document document0 = Document.createShell("zE30F+b4j4Z+7");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("zE30F+b4j4Z+7", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("zE30F+b4j4Z+7", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("zE30F+b4j4Z+7", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("zE30F+b4j4Z+7", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("zE30F+b4j4Z+7", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("zE30F+b4j4Z+7", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.text("zE30F+b4j4Z+7");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("zE30F+b4j4Z+7", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("zE30F+b4j4Z+7", document0.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("zE30F+b4j4Z+7", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("zE30F+b4j4Z+7", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(string0));
      assertNotNull(linkedHashSet0);
      
      Document document3 = (Document)document2.classNames((Set<String>) linkedHashSet0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("zE30F+b4j4Z+7", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("zE30F+b4j4Z+7", document0.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("zE30F+b4j4Z+7", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("zE30F+b4j4Z+7", document2.location());
      assertEquals("#root", document2.tagName());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("zE30F+b4j4Z+7", document3.location());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("zE30F+b4j4Z+7", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertFalse(linkedHashSet0.contains(string0));
      assertNotNull(document3);
      
      Document document4 = (Document)document1.doClone(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("zE30F+b4j4Z+7", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("zE30F+b4j4Z+7", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("zE30F+b4j4Z+7", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("zE30F+b4j4Z+7", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document4.isBlock());
      assertEquals(1, document4.childNodeSize());
      assertEquals("zE30F+b4j4Z+7", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("zE30F+b4j4Z+7", document4.baseUri());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotNull(document4);
      
      // Undeclared exception!
      try { 
        document3.getElementsByAttributeValueMatching("textarea", "GGQ'W{T3BRYPU8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: GGQ'W{T3BRYPU8
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Document document0 = Document.createShell("zE30F+b4j4Z7");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.text("zE30F+b4j4Z7");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(linkedHashSet0);
      
      Document document3 = (Document)document2.classNames((Set<String>) linkedHashSet0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(document3);
      
      Document document4 = (Document)document3.doClone(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("zE30F+b4j4Z7", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals("zE30F+b4j4Z7", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document4);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(document4);
      
      EvoSuiteFile evoSuiteFile0 = null;
      Document document5 = (Document)document2.attr("Bx6poFZ&Q2}rkCv", false);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("zE30F+b4j4Z7", document5.baseUri());
      assertEquals("zE30F+b4j4Z7", document5.location());
      assertFalse(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document5, document2);
      assertSame(document5, document3);
      assertNotSame(document5, document4);
      assertSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotNull(document5);
      
      Elements elements0 = document3.getElementsByAttributeValueMatching("Bx6poFZ&Q2}rkCv", "Bx6poFZ&Q2}rkCv");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertNotSame(document3, document1);
      assertNotSame(document3, document4);
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(elements0);
      
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      Node[] nodeArray0 = document4.childNodesAsArray();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("zE30F+b4j4Z7", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals("zE30F+b4j4Z7", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertNotSame(document3, document1);
      assertNotSame(document3, document4);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document5);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertEquals(1, nodeArray0.length);
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(nodeArray0);
      
      String string0 = document5.val();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("zE30F+b4j4Z7", document5.baseUri());
      assertEquals("zE30F+b4j4Z7", document5.location());
      assertFalse(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document5, document2);
      assertSame(document5, document3);
      assertNotSame(document5, document4);
      assertSame(document5, document0);
      assertNotSame(document5, document1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Element element0 = document2.head();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", element0.baseUri());
      assertTrue(element0.isBlock());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertNotNull(element0);
      
      String string1 = document1.className();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document5);
      assertNotSame(document1, document4);
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        document2.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("zE30F+b4j4Z7");
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("zE30F+b4j4Z7", tag0.toString());
      assertEquals("zE30F+b4j4Z7", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "zE30F+b4j4Z7");
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("zE30F+b4j4Z7", tag0.toString());
      assertEquals("zE30F+b4j4Z7", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("zE30F+b4j4Z7", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", element0.tagName());
      assertEquals("zE30F+b4j4Z7", element0.baseUri());
      assertNotNull(element0);
      
      ParseSettings parseSettings1 = ParseSettings.htmlDefault;
      assertSame(parseSettings1, parseSettings0);
      assertNotNull(parseSettings1);
      
      Tag tag1 = Tag.valueOf("{rhD<zd%", parseSettings1);
      assertFalse(tag1.preserveWhitespace());
      assertTrue(tag1.isInline());
      assertFalse(tag1.isBlock());
      assertEquals("{rhd<zd%", tag1.getName());
      assertFalse(tag1.isData());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isFormListed());
      assertEquals("{rhd<zd%", tag1.toString());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isEmpty());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.equals((Object)tag0));
      assertSame(parseSettings1, parseSettings0);
      assertNotSame(tag1, tag0);
      assertNotNull(tag1);
      
      Element element1 = element0.toggleClass("n(`pX+S");
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("zE30F+b4j4Z7", tag0.toString());
      assertEquals("zE30F+b4j4Z7", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("zE30F+b4j4Z7", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", element0.tagName());
      assertEquals("zE30F+b4j4Z7", element0.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("zE30F+b4j4Z7", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("zE30F+b4j4Z7", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals("zE30F+b4j4Z7", element1.tagName());
      assertFalse(tag0.equals((Object)tag1));
      assertNotSame(tag0, tag1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Comment comment0 = new Comment("class");
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertNotNull(comment0);
      
      String string0 = element0.cssSelector();
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("zE30F+b4j4Z7", tag0.toString());
      assertEquals("zE30F+b4j4Z7", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("zE30F+b4j4Z7", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", element0.tagName());
      assertEquals("zE30F+b4j4Z7", element0.baseUri());
      assertFalse(tag0.equals((Object)tag1));
      assertNotSame(tag0, tag1);
      assertSame(element0, element1);
      assertNotNull(string0);
      
      Tag tag2 = Tag.valueOf("n(`pX+S");
      assertEquals("n(`pX+S", tag2.getName());
      assertFalse(tag2.preserveWhitespace());
      assertFalse(tag2.isBlock());
      assertFalse(tag2.isFormSubmittable());
      assertFalse(tag2.isSelfClosing());
      assertTrue(tag2.isInline());
      assertTrue(tag2.formatAsBlock());
      assertFalse(tag2.isFormListed());
      assertFalse(tag2.canContainBlock());
      assertEquals("n(`pX+S", tag2.toString());
      assertFalse(tag2.isEmpty());
      assertFalse(tag2.isData());
      assertFalse(tag2.isKnownTag());
      assertFalse(tag2.equals((Object)tag1));
      assertFalse(tag2.equals((Object)tag0));
      assertNotSame(tag2, tag1);
      assertNotSame(tag2, tag0);
      assertNotNull(tag2);
      
      String string1 = "";
      String string2 = parseSettings1.normalizeTag("zE30F+b4j4Z7.java.lang.String@0000000024");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(parseSettings1, parseSettings0);
      assertNotNull(string2);
      
      CDataNode cDataNode0 = new CDataNode("n(`pX+S");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      Node node0 = cDataNode0.shallowClone();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(0, node0.siblingIndex());
      assertFalse(node0.hasParent());
      assertEquals("#cdata", node0.nodeName());
      assertFalse(node0.equals((Object)cDataNode0));
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertNotNull(node0);
      
      Element element2 = new Element(tag2, "InColumnGroup");
      assertEquals("n(`pX+S", tag2.getName());
      assertFalse(tag2.preserveWhitespace());
      assertFalse(tag2.isBlock());
      assertFalse(tag2.isFormSubmittable());
      assertFalse(tag2.isSelfClosing());
      assertTrue(tag2.isInline());
      assertTrue(tag2.formatAsBlock());
      assertFalse(tag2.isFormListed());
      assertFalse(tag2.canContainBlock());
      assertEquals("n(`pX+S", tag2.toString());
      assertFalse(tag2.isEmpty());
      assertFalse(tag2.isData());
      assertFalse(tag2.isKnownTag());
      assertEquals("InColumnGroup", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("n(`pX+S", element2.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertEquals("n(`pX+S", element2.tagName());
      assertFalse(tag2.equals((Object)tag1));
      assertFalse(tag2.equals((Object)tag0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertNotNull(element2);
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        element2.insertChildren(1476, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = "$+K[ P";
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "$+K[ P");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("$+K[ P", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("$+K[ P", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = document0.parser((Parser) null);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("$+K[ P", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("$+K[ P", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("$+K[ P", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("$+K[ P", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document1.children();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("$+K[ P", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("$+K[ P", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("$+K[ P", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("$+K[ P", document1.baseUri());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document2 = (Document)document0.removeClass("");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("$+K[ P", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("$+K[ P", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("$+K[ P", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("$+K[ P", document2.baseUri());
      assertFalse(document2.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-3);
      Document document3 = (Document)document0.removeAttr("$+K[ P");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("$+K[ P", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("$+K[ P", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("$+K[ P", document3.baseUri());
      assertEquals("$+K[ P", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertNotNull(document3);
      
      byteArray0[1] = (byte)6;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)97;
      byteArray0[8] = (byte)56;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)6, (byte) (-2), (byte) (-123), (byte) (-84), (byte)66, (byte)4, (byte)97, (byte)56}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        document1.insertChildren(4, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      String string0 = parseSettings0.normalizeAttribute("7y:\"\"k@L &D-x7(");
      assertEquals("7y:\"\"k@l &d-x7(", string0);
      assertNotNull(string0);
      
      String string1 = parseSettings0.normalizeTag("7y:\"\"k@l &d-x7(");
      assertTrue(string1.equals((Object)string0));
      assertEquals("7y:\"\"k@l &d-x7(", string1);
      assertNotNull(string1);
      
      Tag tag0 = Tag.valueOf("7y:\"\"k@L &D-x7(", parseSettings0);
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "7y:\"\"k@L &D-x7(");
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      ParseSettings parseSettings1 = ParseSettings.htmlDefault;
      assertSame(parseSettings1, parseSettings0);
      assertNotNull(parseSettings1);
      
      Tag tag1 = Tag.valueOf("7y:\"\"k@L &D-x7(", parseSettings1);
      assertFalse(tag1.isKnownTag());
      assertEquals("7y:\"\"k@l &d-x7(", tag1.toString());
      assertFalse(tag1.isData());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.preserveWhitespace());
      assertTrue(tag1.isInline());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", tag1.getName());
      assertTrue(tag1.equals((Object)tag0));
      assertSame(parseSettings1, parseSettings0);
      assertNotSame(tag1, tag0);
      assertNotNull(tag1);
      
      Document document0 = new Document("7y:\"\"k@l &d-x7(");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.prependChild(element0);
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(element0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", document1.baseUri());
      assertEquals("7y:\"\"k@l &d-x7(", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(tag0.equals((Object)tag1));
      assertSame(parseSettings0, parseSettings1);
      assertNotSame(tag0, tag1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      String string2 = element0.cssSelector();
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(element0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(tag0.equals((Object)tag1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(parseSettings0, parseSettings1);
      assertNotSame(tag0, tag1);
      assertEquals("7y|\"\"k@l &d-x7(", string2);
      assertNotNull(string2);
      
      Tag tag2 = Tag.valueOf("7y|\"\"k@l &d-x7(");
      assertEquals("7y|\"\"k@l &d-x7(", tag2.toString());
      assertEquals("7y|\"\"k@l &d-x7(", tag2.getName());
      assertFalse(tag2.preserveWhitespace());
      assertFalse(tag2.isBlock());
      assertFalse(tag2.isSelfClosing());
      assertTrue(tag2.isInline());
      assertFalse(tag2.canContainBlock());
      assertFalse(tag2.isData());
      assertFalse(tag2.isFormListed());
      assertFalse(tag2.isFormSubmittable());
      assertFalse(tag2.isEmpty());
      assertTrue(tag2.formatAsBlock());
      assertFalse(tag2.isKnownTag());
      assertFalse(tag2.equals((Object)tag0));
      assertFalse(tag2.equals((Object)tag1));
      assertNotSame(tag2, tag0);
      assertNotSame(tag2, tag1);
      assertNotNull(tag2);
      
      String string3 = parseSettings0.normalizeTag("");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertSame(parseSettings0, parseSettings1);
      assertEquals("", string3);
      assertNotNull(string3);
      
      Element element1 = element0.doClone(document0);
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(element0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("7y:\"\"k@l &d-x7(", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("7y:\"\"k@L &D-x7(", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element1.tagName());
      assertFalse(tag0.equals((Object)tag2));
      assertTrue(tag0.equals((Object)tag1));
      assertFalse(element1.equals((Object)element0));
      assertSame(parseSettings0, parseSettings1);
      assertNotSame(tag0, tag2);
      assertNotSame(tag0, tag1);
      assertNotSame(element0, element1);
      assertSame(document0, document1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document2 = (Document)document0.traverse(nodeVisitor0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("7y:\"\"k@l &d-x7(", document2.location());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      Elements elements0 = document1.getElementsContainingText("7y|\"\"k@l &d-x7(");
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(element0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", document1.baseUri());
      assertEquals("7y:\"\"k@l &d-x7(", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(tag0.equals((Object)tag2));
      assertTrue(tag0.equals((Object)tag1));
      assertFalse(element0.equals((Object)element1));
      assertSame(parseSettings0, parseSettings1);
      assertNotSame(tag0, tag2);
      assertNotSame(tag0, tag1);
      assertNotSame(element0, element1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotNull(elements0);
      
      String string4 = document1.ownText();
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(element0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", document1.baseUri());
      assertEquals("7y:\"\"k@l &d-x7(", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(tag0.equals((Object)tag2));
      assertTrue(tag0.equals((Object)tag1));
      assertFalse(element0.equals((Object)element1));
      assertSame(parseSettings0, parseSettings1);
      assertNotSame(tag0, tag2);
      assertNotSame(tag0, tag1);
      assertNotSame(element0, element1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertEquals("", string4);
      assertNotNull(string4);
      
      Element element2 = null;
      try {
        element2 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Document document0 = Parser.parseBodyFragment("zE30F+b4j4Z7", "zE30F+b4j4Z7");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.text("zE30F+b4j4Z7");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(linkedHashSet0);
      
      Document document3 = (Document)document2.doClone(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotNull(document3);
      
      Node[] nodeArray0 = document3.childNodesAsArray();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertEquals(1, nodeArray0.length);
      assertNotNull(nodeArray0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = document3.cssSelector();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertEquals("#root", string1);
      assertNotNull(string1);
      
      Elements elements0 = document2.parents();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotNull(elements0);
      
      Tag tag0 = Tag.valueOf("N");
      assertFalse(tag0.isKnownTag());
      assertEquals("N", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertEquals("N", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertNotNull(tag0);
      
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Document document0 = Document.createShell("zE30F+b4j4Z7");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(linkedHashSet0);
      
      Document document2 = (Document)document1.classNames((Set<String>) linkedHashSet0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(document2);
      
      Document document3 = (Document)document1.doClone(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotNull(document3);
      
      Elements elements0 = document0.select("zE30F+b4j4Z7");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(elements0);
      
      Document document4 = (Document)document0.attr("Bx6poFZ&Q2}rkCv", true);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document4, document2);
      assertSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotNull(document4);
      
      Elements elements1 = document0.getElementsByAttributeValueMatching("textarea", "org.jsoup.nodes.Attributes$Dataset$EntrySet");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Node[] nodeArray0 = document1.childNodesAsArray();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertEquals(1, nodeArray0.length);
      assertNotNull(nodeArray0);
      
      String string0 = document3.val();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document3, document1);
      assertNotSame(document3, document4);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Element element0 = document0.head();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("zE30F+b4j4Z7", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(element0);
      
      String string1 = document3.className();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document3, document1);
      assertNotSame(document3, document4);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        document1.before((Node) document3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "Children collection to be inserted must not be null.";
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document1.prepend("Children collection to be inserted must not be null.");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      String string1 = document2.wholeText();
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("Children collection to be inserted must not be null.Children collection to be inserted must not be null.", string1);
      assertNotNull(string1);
      
      String string2 = "#WxRS*a*_^H@\"|c";
      Document document3 = (Document)document1.toggleClass("#WxRS*a*_^H@\"|c");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertFalse(document3.hasParent());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertNotNull(document3);
      
      Element element0 = document2.createElement("#WxRS*a*_^H@\"|c");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#WxRS*a*_^H@\"|c", element0.tagName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("#WxRS*a*_^H@\"|c", element0.nodeName());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotNull(element0);
      
      Element element1 = element0.prependChild(document0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#WxRS*a*_^H@\"|c", element0.tagName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("#WxRS*a*_^H@\"|c", element0.nodeName());
      assertEquals("Children collection to be inserted must not be null.", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("#WxRS*a*_^H@\"|c", element1.nodeName());
      assertEquals("#WxRS*a*_^H@\"|c", element1.tagName());
      assertFalse(element1.hasParent());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      PipedReader pipedReader0 = new PipedReader(58);
      assertNotNull(pipedReader0);
      
      // Undeclared exception!
      try { 
        parser0.parseInput((Reader) pipedReader0, "=J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      String string0 = parseSettings0.normalizeAttribute("7y:\"\"k@L &D-x7(");
      assertEquals("7y:\"\"k@l &d-x7(", string0);
      assertNotNull(string0);
      
      String string1 = parseSettings0.normalizeTag("7y:\"\"k@l &d-x7(");
      assertTrue(string1.equals((Object)string0));
      assertEquals("7y:\"\"k@l &d-x7(", string1);
      assertNotNull(string1);
      
      Tag tag0 = Tag.valueOf("7y:\"\"k@L &D-x7(", parseSettings0);
      assertFalse(tag0.isKnownTag());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "7y:\"\"k@L &D-x7(");
      assertFalse(tag0.isKnownTag());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertNotNull(element0);
      
      Document document0 = new Document("7y:\"\"k@l &d-x7(");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7y:\"\"k@l &d-x7(", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", document0.location());
      assertNotNull(document0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7y:\"\"k@l &d-x7(", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", document0.location());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("7y:\"\"k@l &d-x7(", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("7y:\"\"k@l &d-x7(", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Element element1 = new Element("DkERl_Sl");
      assertFalse(element1.isBlock());
      assertEquals("DkERl_Sl", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("DkERl_Sl", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Elements elements0 = document1.getElementsByIndexEquals(0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7y:\"\"k@l &d-x7(", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", document0.location());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("7y:\"\"k@l &d-x7(", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("7y:\"\"k@l &d-x7(", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7y:\"\"k@l &d-x7(", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", document0.location());
      assertSame(document0, document1);
      assertEquals(0, nodeArray0.length);
      assertNotNull(nodeArray0);
      
      Element element2 = element1.val("time");
      assertFalse(element1.isBlock());
      assertEquals("DkERl_Sl", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("DkERl_Sl", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("DkERl_Sl", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals("DkERl_Sl", element2.tagName());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element2, element0);
      assertSame(element2, element1);
      assertNotNull(element2);
      
      Element element3 = document1.createElement("time");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7y:\"\"k@l &d-x7(", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", document0.location());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("7y:\"\"k@l &d-x7(", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("7y:\"\"k@l &d-x7(", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("7y:\"\"k@l &d-x7(", element3.baseUri());
      assertFalse(element3.hasParent());
      assertEquals("time", element3.nodeName());
      assertEquals(0, element3.childNodeSize());
      assertEquals(0, element3.siblingIndex());
      assertFalse(element3.isBlock());
      assertEquals("time", element3.tagName());
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element2));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(element3, element0);
      assertNotSame(element3, element1);
      assertNotSame(element3, element2);
      assertNotNull(element3);
      
      Document document2 = (Document)document0.removeClass("time");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7y:\"\"k@l &d-x7(", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", document0.location());
      assertEquals("7y:\"\"k@l &d-x7(", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("7y:\"\"k@l &d-x7(", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = ",] _qe;K";
      Tag tag0 = Tag.valueOf(",] _qe;K");
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals(",] _qe;K", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals(",] _qe;K", tag0.getName());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, ",] _qe;K");
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals(",] _qe;K", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals(",] _qe;K", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(",] _qe;K", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(",] _qe;K", element0.baseUri());
      assertEquals(",] _qe;K", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.clone();
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals(",] _qe;K", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals(",] _qe;K", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(",] _qe;K", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(",] _qe;K", element0.baseUri());
      assertEquals(",] _qe;K", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(",] _qe;K", element1.tagName());
      assertEquals(",] _qe;K", element1.baseUri());
      assertEquals(",] _qe;K", element1.nodeName());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      
      String string1 = "html";
      Element element2 = element0.attr(" _9.*KN!Y1Y?x", "");
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals(",] _qe;K", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals(",] _qe;K", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(",] _qe;K", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(",] _qe;K", element0.baseUri());
      assertEquals(",] _qe;K", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertEquals(",] _qe;K", element2.baseUri());
      assertEquals(",] _qe;K", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals(",] _qe;K", element2.tagName());
      assertFalse(element2.isBlock());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertNotNull(element2);
      
      Element element3 = element2.prependText("textarea");
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals(",] _qe;K", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals(",] _qe;K", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(",] _qe;K", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(",] _qe;K", element0.baseUri());
      assertEquals(",] _qe;K", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals(",] _qe;K", element2.baseUri());
      assertEquals(",] _qe;K", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals(",] _qe;K", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(",] _qe;K", element3.baseUri());
      assertEquals(0, element3.siblingIndex());
      assertEquals(1, element3.childNodeSize());
      assertFalse(element3.isBlock());
      assertEquals(",] _qe;K", element3.tagName());
      assertEquals(",] _qe;K", element3.nodeName());
      assertFalse(element3.hasParent());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element1));
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element0, element3);
      assertNotSame(element2, element1);
      assertSame(element2, element3);
      assertSame(element2, element0);
      assertSame(element3, element2);
      assertSame(element3, element0);
      assertNotSame(element3, element1);
      assertNotNull(element3);
      
      // Undeclared exception!
      try { 
        element2.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "</";
      Document document0 = Parser.parseBodyFragment("</", "</");
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      String string1 = "=J";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=J");
      assertFalse(boolean0);
      
      Document document1 = (Document)document0.tagName("</");
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.tagName());
      assertEquals("</", document1.tagName());
      assertEquals("</", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("</", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      String string2 = document1.ownText();
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("</", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.tagName());
      assertEquals("</", document1.tagName());
      assertEquals("</", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("</", document1.baseUri());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Parser.parseFragment((String) null, (Element) document0, "=J", (ParseErrorList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parse("A.eHBLi`&JC[@w", "A.eHBLi`&JC[@w");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertNotNull(element0);
      
      Elements elements0 = document0.getElementsByAttributeValueStarting("A.eHBLi`&JC[@w", "A.eHBLi`&JC[@w");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Elements elements1 = element0.getElementsByTag("A.eHBLi`&JC[@w");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      String string0 = "meta";
      Element element1 = document0.nextElementSibling();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNull(element1);
      
      Node node0 = document0.nextSibling();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNull(node0);
      
      TextNode textNode0 = new TextNode("meta", "meta");
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Element element2 = element0.val("A.eHBLi`&JC[@w");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", element2.baseUri());
      assertEquals("body", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals("body", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertNotNull(element2);
      
      Document document1 = (Document)document0.val("$1?~ ~");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("A.eHBLi`&JC[@w", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      Element element3 = element0.shallowClone();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element3.tagName());
      assertTrue(element3.isBlock());
      assertEquals("body", element3.nodeName());
      assertEquals(0, element3.siblingIndex());
      assertFalse(element3.hasParent());
      assertEquals("A.eHBLi`&JC[@w", element3.baseUri());
      assertEquals(0, element3.childNodeSize());
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertSame(document0, document1);
      assertSame(element0, element2);
      assertNotSame(element0, element3);
      assertNotSame(element3, element0);
      assertNotSame(element3, element2);
      assertNotNull(element3);
      
      Elements elements2 = document0.siblingElements();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertSame(document0, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      
      Document document2 = document0.clone();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("A.eHBLi`&JC[@w", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("A.eHBLi`&JC[@w", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      
      // Undeclared exception!
      try { 
        document2.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Document document0 = Document.createShell("zE30F+b4j4Z7");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.text("zE30F+b4j4Z7");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(linkedHashSet0);
      
      Document document3 = (Document)document2.classNames((Set<String>) linkedHashSet0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(document3);
      
      Document document4 = (Document)document2.doClone(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("zE30F+b4j4Z7", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertTrue(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotNull(document4);
      
      Document document5 = (Document)document0.attr("Bx6poFZ&Q2}rkCv", true);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document5.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals("zE30F+b4j4Z7", document5.location());
      assertFalse(document5.hasParent());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document5, document4);
      assertSame(document5, document2);
      assertSame(document5, document0);
      assertSame(document5, document3);
      assertNotSame(document5, document1);
      assertNotNull(document5);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("textarea", "org.jsoup.nodes.Attributes$Dataset$EntrySet");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotNull(elements0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Node[] nodeArray0 = document1.childNodesAsArray();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document5);
      assertNotSame(document1, document0);
      assertEquals(1, nodeArray0.length);
      assertNotNull(nodeArray0);
      
      String string0 = document4.val();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("zE30F+b4j4Z7", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertTrue(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document2, document4);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document5);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Element element0 = document2.head();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertEquals("zE30F+b4j4Z7", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document2, document4);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotNull(element0);
      
      String string1 = document4.className();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("zE30F+b4j4Z7", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertTrue(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document2, document4);
      assertSame(document2, document5);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document5);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        document2.before((Node) document4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("klsI z2=1K^}m", "klsI z2=1K^}m");
      assertEquals("klsI z2=1K^}m", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      String string0 = "org.jsoup.select.StructuralEvaluator$Parent";
      Elements elements0 = document0.getElementsByAttributeValueStarting("org.jsoup.select.StructuralEvaluator$Parent", ")cX]v\"+oh6o=$eIW");
      assertEquals("klsI z2=1K^}m", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Document.createShell("zE30F+b4j4Z7");
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Elements elements0 = document0.siblingElements();
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(linkedHashSet0);
      
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertFalse(linkedHashSet1.contains("zE30F+b4j4Z7"));
      assertNotNull(linkedHashSet1);
      
      Document document1 = (Document)document0.classNames((Set<String>) linkedHashSet1);
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertFalse(document1.hasParent());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertSame(document0, document1);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertSame(document1, document0);
      assertFalse(linkedHashSet1.contains("zE30F+b4j4Z7"));
      assertNotNull(document1);
      
      String string0 = document1.id();
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertFalse(document1.hasParent());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertSame(document0, document1);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertSame(document1, document0);
      assertFalse(linkedHashSet1.contains(string0));
      assertEquals("", string0);
      assertNotNull(string0);
      
      Document document2 = (Document)document1.doClone(document0);
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertFalse(document1.hasParent());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(linkedHashSet1.contains(string0));
      assertNotNull(document2);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Elements elements1 = document1.getElementsByIndexEquals((-1436010313));
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertFalse(document1.hasParent());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document0.equals((Object)document2));
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertFalse(document1.equals((Object)document2));
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertFalse(linkedHashSet1.contains(string0));
      assertNotNull(elements1);
      
      Node[] nodeArray0 = document1.childNodesAsArray();
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertFalse(document1.hasParent());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertFalse(document1.equals((Object)document2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertEquals(1, nodeArray0.length);
      assertFalse(linkedHashSet1.contains(string0));
      assertNotNull(nodeArray0);
      
      Document document3 = (Document)document0.val("$3y_b/");
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotNull(document3);
      
      Document document4 = null;
      try {
        document4 = new Document((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Document document0 = Document.createShell("zE30F+b4j4Z7");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.text("zE30F+b4j4Z7");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(linkedHashSet0);
      
      Document document3 = (Document)document2.classNames((Set<String>) linkedHashSet0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(document3);
      
      Document document4 = (Document)document2.doClone(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("zE30F+b4j4Z7", document4.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotNull(document4);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Elements elements0 = document4.getElementsByIndexEquals(6387);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("zE30F+b4j4Z7", document4.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotNull(elements0);
      
      Node[] nodeArray0 = document1.childNodesAsArray();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertEquals(1, nodeArray0.length);
      assertNotNull(nodeArray0);
      
      Document document5 = (Document)document3.val("zE30F+b4j4Z7");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("zE30F+b4j4Z7", document5.location());
      assertFalse(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document2, document5);
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document3, document4);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document5, document4);
      assertSame(document5, document0);
      assertSame(document5, document2);
      assertNotSame(document5, document1);
      assertSame(document5, document3);
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(document5);
      
      String string0 = "qp. p~9b\\K.1K!&^\"h";
      Document document6 = (Document)document1.val("qp. p~9bK.1K!&^\"h");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document6.hasParent());
      assertFalse(document6.isBlock());
      assertEquals("zE30F+b4j4Z7", document6.location());
      assertEquals("zE30F+b4j4Z7", document6.baseUri());
      assertEquals(1, document6.childNodeSize());
      assertEquals("#root", document6.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document3));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document5);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document5);
      assertSame(document1, document6);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document6, document2);
      assertNotSame(document6, document5);
      assertSame(document6, document1);
      assertNotSame(document6, document0);
      assertNotSame(document6, document4);
      assertNotSame(document6, document3);
      assertNotNull(document6);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "zE30F+b4j4Z7");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("^5j");
      assertNotNull(mockFileWriter0);
      
      document1.outerHtml((Appendable) mockFileWriter0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document5);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document5);
      assertSame(document1, document6);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      
      Element element0 = document3.shallowClone();
      assertEquals("#root", element0.tagName());
      assertEquals("zE30F+b4j4Z7", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("#root", element0.nodeName());
      assertFalse(element0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document6));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document5);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document2, document5);
      assertNotSame(document2, document6);
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document3, document4);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document6);
      assertSame(document3, document0);
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(element0);
      
      Elements elements1 = element0.siblingElements();
      assertEquals("#root", element0.tagName());
      assertEquals("zE30F+b4j4Z7", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("#root", element0.nodeName());
      assertFalse(element0.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document6));
      assertNotSame(elements1, elements0);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertSame(document0, document5);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document2, document5);
      assertNotSame(document2, document6);
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document3, document4);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document6);
      assertSame(document3, document0);
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(elements1);
      
      // Undeclared exception!
      try { 
        document1.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Document.createShell("                 ");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("                 ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("                 ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      String string0 = document0.baseUri();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("                 ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("                 ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("                 ", string0);
      assertNotNull(string0);
      
      Element element0 = document0.shallowClone();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("                 ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("                 ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("                 ", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("#root", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("#root", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      PipedWriter pipedWriter1 = element0.html(pipedWriter0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("                 ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("                 ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("                 ", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("#root", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("#root", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertSame(pipedWriter0, pipedWriter1);
      assertSame(pipedWriter1, pipedWriter0);
      assertNotNull(pipedWriter1);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("=`.=bQ'vN", parseSettings0);
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals("=`.=bq'vn", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("=`.=bq'vn", tag0.getName());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "=`.=bQ'vN");
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals("=`.=bq'vn", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("=`.=bq'vn", tag0.getName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("=`.=bQ'vN", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("=`.=bq'vn", element0.tagName());
      assertEquals("=`.=bq'vn", element0.nodeName());
      assertNotNull(element0);
      
      Element element1 = element0.appendText("=`.=bQ'vN");
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals("=`.=bq'vn", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("=`.=bq'vn", tag0.getName());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("=`.=bQ'vN", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("=`.=bq'vn", element0.tagName());
      assertEquals("=`.=bq'vn", element0.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals("=`.=bq'vn", element1.tagName());
      assertEquals("=`.=bQ'vN", element1.baseUri());
      assertEquals("=`.=bq'vn", element1.nodeName());
      assertFalse(element1.hasParent());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Element element2 = element0.clone();
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals("=`.=bq'vn", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("=`.=bq'vn", tag0.getName());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("=`.=bQ'vN", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("=`.=bq'vn", element0.tagName());
      assertEquals("=`.=bq'vn", element0.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertEquals("=`.=bq'vn", element2.nodeName());
      assertEquals("=`.=bQ'vN", element2.baseUri());
      assertEquals("=`.=bq'vn", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotNull(element2);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = (-2990);
      // Undeclared exception!
      try { 
        stringBuilder0.appendCodePoint((-2990));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3cI{74g>T!8", "3cI{74g>T!8");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("3cI{74g>T!8", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("3cI{74g>T!8", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByIndexLessThan(810);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("3cI{74g>T!8", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("3cI{74g>T!8", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      assertNotNull(elements0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Elements elements1 = document0.getElementsByIndexEquals(810);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("3cI{74g>T!8", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("3cI{74g>T!8", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("3cI{74g>T!8", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("3cI{74g>T!8", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, nodeArray0.length);
      assertNotNull(nodeArray0);
      
      Document document1 = (Document)document0.val("3cI{74g>T!8");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("3cI{74g>T!8", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("3cI{74g>T!8", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("3cI{74g>T!8", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("3cI{74g>T!8", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.val((String) null);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("3cI{74g>T!8", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("3cI{74g>T!8", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("3cI{74g>T!8", document2.location());
      assertEquals("3cI{74g>T!8", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      Element element0 = document0.shallowClone();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("3cI{74g>T!8", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("3cI{74g>T!8", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("3cI{74g>T!8", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#root", element0.nodeName());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        element0.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("</", "</");
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByIndexLessThan(444);
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      assertNotNull(elements0);
      
      Elements elements1 = document0.getElementsByIndexEquals(444);
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, nodeArray0.length);
      assertNotNull(nodeArray0);
      
      Document document1 = (Document)document0.val("</");
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.val("DkERl_Sl");
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("</", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      Element element0 = document1.shallowClone();
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("</", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("#root", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotNull(element0);
      
      Elements elements2 = document1.siblingElements();
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      
      Evaluator.IsNthLastOfType evaluator_IsNthLastOfType0 = new Evaluator.IsNthLastOfType(2, 0);
      assertNotNull(evaluator_IsNthLastOfType0);
      
      boolean boolean0 = document1.is((Evaluator) evaluator_IsNthLastOfType0);
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("</", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document1.prepend("Children collection to be inserted must not be null.");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      String string0 = document2.wholeText();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("Children collection to be inserted must not be null.Children collection to be inserted must not be null.", string0);
      assertNotNull(string0);
      
      Document document3 = document0.normalise();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertNotNull(document3);
      
      Document document4 = document0.normalise();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("Children collection to be inserted must not be null.", document4.location());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertNotNull(document4);
      
      Tag tag0 = document3.tag();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("#root", tag0.toString());
      assertEquals("#root", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertNotNull(tag0);
      
      Set<String> set0 = document3.classNames();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertFalse(set0.contains("Children collection to be inserted must not be null."));
      assertNotNull(set0);
      
      Document document5 = document1.clone();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document4);
      assertNotNull(document5);
      
      String string1 = document5.val();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document4);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = document3.childNodeSize();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document3.equals((Object)document5));
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertNotSame(document3, document5);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertEquals(1, int0);
      
      Document document6 = Document.createShell("-5,CF`9ia@$79$F=u");
      assertFalse(document6.isBlock());
      assertEquals("-5,CF`9ia@$79$F=u", document6.location());
      assertFalse(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("#document", document6.nodeName());
      assertEquals("-5,CF`9ia@$79$F=u", document6.baseUri());
      assertEquals(1, document6.childNodeSize());
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document5));
      assertNotSame(document6, document0);
      assertNotSame(document6, document3);
      assertNotSame(document6, document2);
      assertNotSame(document6, document1);
      assertNotSame(document6, document4);
      assertNotSame(document6, document5);
      assertNotNull(document6);
      
      String string2 = document6.cssSelector();
      assertFalse(document6.isBlock());
      assertEquals("-5,CF`9ia@$79$F=u", document6.location());
      assertFalse(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("#document", document6.nodeName());
      assertEquals("-5,CF`9ia@$79$F=u", document6.baseUri());
      assertEquals(1, document6.childNodeSize());
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(document6, document0);
      assertNotSame(document6, document3);
      assertNotSame(document6, document2);
      assertNotSame(document6, document1);
      assertNotSame(document6, document4);
      assertNotSame(document6, document5);
      assertEquals("#root", string2);
      assertNotNull(string2);
      
      List<Node> list0 = document6.ensureChildNodes();
      assertFalse(document6.isBlock());
      assertEquals("-5,CF`9ia@$79$F=u", document6.location());
      assertFalse(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("#document", document6.nodeName());
      assertEquals("-5,CF`9ia@$79$F=u", document6.baseUri());
      assertEquals(1, document6.childNodeSize());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document5));
      assertNotSame(document6, document0);
      assertNotSame(document6, document3);
      assertNotSame(document6, document2);
      assertNotSame(document6, document1);
      assertNotSame(document6, document4);
      assertNotSame(document6, document5);
      assertNotNull(list0);
      
      Elements elements0 = document2.getElementsContainingText("org.jsoup.nodes.Element$NodeList");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document5));
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertNotSame(document1, document6);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document6);
      assertNotSame(document2, document5);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotNull(elements0);
      
      String string3 = document2.ownText();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document5));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertNotSame(document1, document6);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document6);
      assertNotSame(document2, document5);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertEquals("", string3);
      assertNotNull(string3);
      
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document1.prepend("Children collection to be inserted must not be null.");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      String string0 = document2.wholeText();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("Children collection to be inserted must not be null.Children collection to be inserted must not be null.", string0);
      assertNotNull(string0);
      
      Tag tag0 = document0.tag();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("#root", tag0.toString());
      assertEquals("#root", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotNull(tag0);
      
      Set<String> set0 = document1.classNames();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertFalse(set0.contains("Children collection to be inserted must not be null."));
      assertNotNull(set0);
      
      Elements elements0 = document2.parents();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(elements0);
      
      String string1 = document1.data();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        document0.replaceChild(document1, document2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("</", "</");
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByIndexLessThan(810);
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = document0.hasText();
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(boolean0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("</"));
      assertNotNull(linkedHashSet0);
      
      boolean boolean1 = linkedHashSet0.add("");
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedHashSet0.contains("</"));
      assertTrue(linkedHashSet0.contains(""));
      assertTrue(boolean1);
      
      String string1 = document0.val();
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", string1);
      assertNotNull(string1);
      
      Document document1 = Parser.parseBodyFragment("", "%HG Na=*T");
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("%HG Na=*T", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("%HG Na=*T", document1.location());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      String string2 = document0.className();
      assertEquals("#root", document0.tagName());
      assertEquals("</", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Document document2 = new Document("");
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      
      // Undeclared exception!
      try { 
        document1.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Document document0 = Document.createShell("zE30F+b4j4Z7");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.text("zE30F+b4j4Z7");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(linkedHashSet0);
      
      Document document3 = (Document)document2.classNames((Set<String>) linkedHashSet0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(document3);
      
      Document document4 = (Document)document2.doClone(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertTrue(document4.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals("zE30F+b4j4Z7", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotNull(document4);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Elements elements0 = document4.getElementsByIndexEquals(6387);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertTrue(document4.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals("zE30F+b4j4Z7", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotNull(elements0);
      
      Node[] nodeArray0 = document1.childNodesAsArray();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document1, document4);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertEquals(1, nodeArray0.length);
      assertNotNull(nodeArray0);
      
      Document document5 = (Document)document3.val("zE30F+b4j4Z7");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.hasParent());
      assertEquals("zE30F+b4j4Z7", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document5.baseUri());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document2, document4);
      assertSame(document2, document5);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document4);
      assertSame(document3, document5);
      assertNotSame(document5, document1);
      assertSame(document5, document2);
      assertSame(document5, document0);
      assertNotSame(document5, document4);
      assertSame(document5, document3);
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(document5);
      
      String string0 = "qp. p~9b\\K.1K!&^\"h";
      Document document6 = (Document)document1.val("qp. p~9bK.1K!&^\"h");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("zE30F+b4j4Z7", document6.baseUri());
      assertEquals("#document", document6.nodeName());
      assertEquals(1, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertEquals("zE30F+b4j4Z7", document6.location());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document0));
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertSame(document0, document5);
      assertNotSame(document1, document4);
      assertNotSame(document1, document3);
      assertSame(document1, document6);
      assertNotSame(document1, document0);
      assertNotSame(document1, document5);
      assertNotSame(document1, document2);
      assertSame(document6, document1);
      assertNotSame(document6, document3);
      assertNotSame(document6, document5);
      assertNotSame(document6, document2);
      assertNotSame(document6, document4);
      assertNotSame(document6, document0);
      assertNotNull(document6);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "zE30F+b4j4Z7");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Element element0 = document3.shallowClone();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", element0.nodeName());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("zE30F+b4j4Z7", element0.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document3.equals((Object)document4));
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertSame(document0, document5);
      assertNotSame(document2, document4);
      assertSame(document2, document5);
      assertNotSame(document2, document6);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertNotSame(document3, document6);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document4);
      assertSame(document3, document5);
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(element0);
      
      Elements elements1 = element0.siblingElements();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", element0.nodeName());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("zE30F+b4j4Z7", element0.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document3.equals((Object)document4));
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertSame(document0, document5);
      assertNotSame(document2, document4);
      assertSame(document2, document5);
      assertNotSame(document2, document6);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertNotSame(document3, document6);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document4);
      assertSame(document3, document5);
      assertNotSame(elements1, elements0);
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(elements1);
      
      // Undeclared exception!
      try { 
        document1.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Document document0 = Document.createShell("zE30F+b4j4Z7");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.text("zE30F+b4j4Z7");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add("zE30F+b4j4Z7");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertTrue(boolean0);
      
      Document document3 = (Document)document1.classNames((Set<String>) linkedHashSet0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertTrue(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(document3);
      
      Document document4 = (Document)document3.doClone(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("zE30F+b4j4Z7", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals("zE30F+b4j4Z7", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document4);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertTrue(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(document4);
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = document0.hasText();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertTrue(boolean1 == boolean0);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertTrue(boolean1);
      
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertFalse(linkedHashSet1.equals((Object)linkedHashSet0));
      assertFalse(linkedHashSet1.contains("zE30F+b4j4Z7"));
      assertNotNull(linkedHashSet1);
      
      boolean boolean2 = linkedHashSet0.add("textarea");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.equals((Object)linkedHashSet1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(linkedHashSet0, linkedHashSet1);
      assertFalse(linkedHashSet0.contains(string0));
      assertTrue(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertTrue(boolean2);
      
      String string1 = document3.val();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document4));
      assertFalse(linkedHashSet0.equals((Object)linkedHashSet1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document4));
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(linkedHashSet0, linkedHashSet1);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document4);
      assertFalse(linkedHashSet0.contains(string0));
      assertTrue(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Parser.parseBodyFragment((String) null, "'%'ANmsPWP]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("</", "</");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByIndexLessThan(810);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Elements elements1 = document0.getElementsByIndexEquals(810);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, nodeArray0.length);
      assertNotNull(nodeArray0);
      
      Document document1 = (Document)document0.val("</");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("</", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.val((String) null);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      Element element0 = document0.shallowClone();
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", element0.tagName());
      assertEquals("</", element0.baseUri());
      assertEquals("#root", element0.nodeName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotNull(element0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Document document3 = (Document)document0.addClass("aoO&8c,GJh");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("</", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("</", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertNotNull(document3);
      
      Document document4 = new Document("</");
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("</", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals(0, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("</", document4.location());
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertNotNull(document4);
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Document document0 = Document.createShell("zE30F+b4j4Z7");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document0.siblingElements();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      Document document2 = Parser.parse("mkzxVPtO;<C", "enwi01<zNz:&oA7m");
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("enwi01<zNz:&oA7m", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("enwi01<zNz:&oA7m", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      
      Elements elements1 = document0.parents();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Tag tag0 = Tag.valueOf("mkzxVPtO;<C", parseSettings0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("mkzxvpto;<c", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("mkzxvpto;<c", tag0.getName());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "#root");
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("mkzxvpto;<c", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("mkzxvpto;<c", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("mkzxvpto;<c", element0.tagName());
      assertEquals("#root", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mkzxvpto;<c", element0.nodeName());
      assertNotNull(element0);
      
      String string0 = element0.html();
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("mkzxvpto;<c", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("mkzxvpto;<c", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("mkzxvpto;<c", element0.tagName());
      assertEquals("#root", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mkzxvpto;<c", element0.nodeName());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = element0.text();
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("mkzxvpto;<c", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("mkzxvpto;<c", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("mkzxvpto;<c", element0.tagName());
      assertEquals("#root", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mkzxvpto;<c", element0.nodeName());
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Element element1 = element0.text("br");
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("mkzxvpto;<c", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("mkzxvpto;<c", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("mkzxvpto;<c", element0.tagName());
      assertEquals("#root", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("mkzxvpto;<c", element0.nodeName());
      assertEquals("#root", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("mkzxvpto;<c", element1.nodeName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("mkzxvpto;<c", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Elements elements2 = document2.getElementsByAttributeValue("head", "body");
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("enwi01<zNz:&oA7m", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("enwi01<zNz:&oA7m", document2.location());
      assertEquals("#document", document2.nodeName());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      
      Elements elements3 = document2.siblingElements();
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("enwi01<zNz:&oA7m", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("enwi01<zNz:&oA7m", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements2));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertNotNull(elements3);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Document document0 = Document.createShell("zE30F+b4j4Z7");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.text("zE30F+b4j4Z7");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(linkedHashSet0);
      
      Document document3 = (Document)document2.classNames((Set<String>) linkedHashSet0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(document3.hasParent());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(document3);
      
      Document document4 = (Document)document2.doClone(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("zE30F+b4j4Z7", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotNull(document4);
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = document1.hasText();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertFalse(boolean0);
      
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertFalse(linkedHashSet1.contains(string0));
      assertNotNull(linkedHashSet1);
      
      boolean boolean1 = linkedHashSet1.add("zE30F+b4j4Z7");
      assertFalse(linkedHashSet1.isEmpty());
      assertEquals(1, linkedHashSet1.size());
      assertFalse(linkedHashSet1.equals((Object)linkedHashSet0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertFalse(linkedHashSet1.contains(string0));
      assertTrue(linkedHashSet1.contains("zE30F+b4j4Z7"));
      assertTrue(boolean1);
      
      String string1 = document3.val();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(document3.hasParent());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(linkedHashSet0.equals((Object)linkedHashSet1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(linkedHashSet0, linkedHashSet1);
      assertSame(document3, document0);
      assertNotSame(document3, document4);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertFalse(linkedHashSet0.contains(string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Document document5 = Parser.parseBodyFragment("", "'%'ANmsPWP]");
      assertFalse(document5.isBlock());
      assertEquals("'%'ANmsPWP]", document5.location());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertEquals("'%'ANmsPWP]", document5.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      assertNotSame(document5, document0);
      assertNotSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertNotSame(document5, document2);
      assertNotNull(document5);
      
      String string2 = document5.className();
      assertFalse(document5.isBlock());
      assertEquals("'%'ANmsPWP]", document5.location());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertEquals("'%'ANmsPWP]", document5.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      assertNotSame(document5, document0);
      assertNotSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertNotSame(document5, document2);
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Document document6 = (Document)document0.addClass("");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals("zE30F+b4j4Z7", document6.baseUri());
      assertEquals(1, document6.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.updateMetaCharsetElement());
      assertFalse(document6.hasParent());
      assertEquals("zE30F+b4j4Z7", document6.location());
      assertFalse(document6.isBlock());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#document", document6.nodeName());
      assertEquals("#root", document6.tagName());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document1));
      assertSame(document0, document6);
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document6, document0);
      assertNotSame(document6, document5);
      assertSame(document6, document3);
      assertNotSame(document6, document4);
      assertSame(document6, document2);
      assertNotSame(document6, document1);
      assertNotNull(document6);
      
      Document document7 = (Document)document0.addClass("");
      assertFalse(document7.hasParent());
      assertEquals(0, document7.siblingIndex());
      assertFalse(document7.isBlock());
      assertEquals(1, document7.childNodeSize());
      assertEquals("#root", document7.tagName());
      assertEquals("zE30F+b4j4Z7", document7.location());
      assertEquals("#document", document7.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document7.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertSame(document7, document3);
      assertNotSame(document7, document1);
      assertSame(document7, document2);
      assertNotSame(document7, document4);
      assertSame(document7, document6);
      assertSame(document7, document0);
      assertNotSame(document7, document5);
      assertSame(document0, document6);
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document7);
      assertSame(document0, document3);
      assertNotNull(document7);
      
      Elements elements0 = document1.getElementsMatchingOwnText("");
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertSame(document0, document6);
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document7);
      assertSame(document0, document3);
      assertNotSame(document1, document7);
      assertNotSame(document1, document4);
      assertNotSame(document1, document5);
      assertNotSame(document1, document0);
      assertNotSame(document1, document6);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotNull(elements0);
      
      // Undeclared exception!
      try { 
        document5.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Document document0 = Document.createShell("zE30F+b4j4Z7");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.text("zE30F+b4j4Z7");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(linkedHashSet0);
      
      Document document3 = (Document)document2.classNames((Set<String>) linkedHashSet0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertFalse(linkedHashSet0.contains("zE30F+b4j4Z7"));
      assertNotNull(document3);
      
      Document document4 = (Document)document2.doClone(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("zE30F+b4j4Z7", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document4.location());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotNull(document4);
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = document1.hasText();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertFalse(boolean0);
      
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertFalse(linkedHashSet1.contains("zE30F+b4j4Z7"));
      assertNotNull(linkedHashSet1);
      
      boolean boolean1 = linkedHashSet1.add("zE30F+b4j4Z7");
      assertFalse(linkedHashSet1.isEmpty());
      assertEquals(1, linkedHashSet1.size());
      assertFalse(linkedHashSet1.equals((Object)linkedHashSet0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertTrue(linkedHashSet1.contains("zE30F+b4j4Z7"));
      assertFalse(linkedHashSet1.contains(string0));
      assertTrue(boolean1);
      
      String string1 = Node.EmptyString;
      assertEquals("", string1);
      assertNotNull(string1);
      
      Document document5 = Parser.parseBodyFragment("", "'%'ANmsPWP]");
      assertEquals("'%'ANmsPWP]", document5.baseUri());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#root", document5.tagName());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.childNodeSize());
      assertEquals("'%'ANmsPWP]", document5.location());
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertNotNull(document5);
      
      String string2 = document5.className();
      assertEquals("'%'ANmsPWP]", document5.baseUri());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#root", document5.tagName());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.childNodeSize());
      assertEquals("'%'ANmsPWP]", document5.location());
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Document document6 = (Document)document0.addClass("");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("zE30F+b4j4Z7", document6.location());
      assertFalse(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("zE30F+b4j4Z7", document6.baseUri());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(1, document6.childNodeSize());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document5));
      assertSame(document0, document6);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document6, document2);
      assertNotSame(document6, document4);
      assertNotSame(document6, document1);
      assertSame(document6, document3);
      assertNotSame(document6, document5);
      assertSame(document6, document0);
      assertNotNull(document6);
      
      Document document7 = (Document)document0.addClass("");
      assertEquals("zE30F+b4j4Z7", document7.baseUri());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(0, document7.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.isBlock());
      assertEquals("zE30F+b4j4Z7", document7.location());
      assertFalse(document7.hasParent());
      assertEquals("#document", document7.nodeName());
      assertEquals("#root", document7.tagName());
      assertEquals(1, document7.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertSame(document7, document0);
      assertNotSame(document7, document5);
      assertSame(document7, document6);
      assertNotSame(document7, document1);
      assertSame(document7, document2);
      assertNotSame(document7, document4);
      assertSame(document7, document3);
      assertSame(document0, document6);
      assertNotSame(document0, document5);
      assertSame(document0, document7);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotNull(document7);
      
      Elements elements0 = document1.getElementsMatchingOwnText("");
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertSame(document0, document6);
      assertNotSame(document0, document5);
      assertSame(document0, document7);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document1, document5);
      assertNotSame(document1, document2);
      assertNotSame(document1, document7);
      assertNotSame(document1, document3);
      assertNotSame(document1, document6);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotNull(elements0);
      
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document3;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document4;
      nodeArray0[3] = (Node) document7;
      nodeArray0[4] = (Node) document5;
      // Undeclared exception!
      try { 
        document2.insertChildren(2894, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document1.prepend("Children collection to be inserted must not be null.");
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      String string0 = document2.wholeText();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("Children collection to be inserted must not be null.Children collection to be inserted must not be null.", string0);
      assertNotNull(string0);
      
      Document document3 = (Document)document2.addClass("Insert position out of bounds.");
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotNull(document3);
      
      Document document4 = document0.normalise();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("Children collection to be inserted must not be null.", document4.location());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertNotNull(document4);
      
      Tag tag0 = document1.tag();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("#root", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertEquals("#root", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotNull(tag0);
      
      Set<String> set0 = document2.classNames();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertFalse(set0.contains("Insert position out of bounds."));
      assertNotNull(set0);
      
      String string1 = document0.val();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = document2.childNodeSize();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertEquals(1, int0);
      
      String string2 = document1.cssSelector();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotNull(string2);
      
      String string3 = document0.ownText();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertEquals("", string3);
      assertNotNull(string3);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotNull(list0);
      
      Elements elements0 = document0.getElementsByAttribute("Children collection to be inserted must not be null.");
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotNull(elements0);
      
      Elements elements1 = document1.getElementsByAttributeValueMatching("", (Pattern) null);
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Document document0 = Document.createShell("zE30F+b4j4Z7");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document1.siblingElements();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(elements0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      Elements elements1 = document1.parents();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Elements elements2 = document1.previousElementSiblings();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.outline(true);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings0.charset(charset0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotNull(document_OutputSettings3);
      
      Set<String> set0 = document0.classNames();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertFalse(set0.contains("zE30F+b4j4Z7"));
      assertNotNull(set0);
      
      String string0 = document1.cssSelector();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("#root", string0);
      assertNotNull(string0);
      
      Document document2 = Parser.parseBodyFragment("zE30F+b4j4Z7", "Insert position out of bounds.");
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      
      Document document3 = (Document)document2.html("#root");
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Insert position out of bounds.", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertNotNull(document3);
      
      // Undeclared exception!
      try { 
        document3.wrap("zE30F+b4j4Z7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parse("=J", "=J");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("=J", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      String string0 = document0.nodeName();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("=J", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#document", string0);
      assertNotNull(string0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("=J", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("=J", document1.location());
      assertEquals("=J", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      List<Node> list0 = parser0.parseFragmentInput("1MUGB\"", document1, "1MUGB\"");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("=J", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("=J", document1.location());
      assertEquals("=J", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        document0.wrap("br");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      String string0 = parseSettings0.normalizeAttribute("7y:\"\"k@L &D-x7(");
      assertEquals("7y:\"\"k@l &d-x7(", string0);
      assertNotNull(string0);
      
      String string1 = parseSettings0.normalizeTag("7y:\"\"k@l &d-x7(");
      assertTrue(string1.equals((Object)string0));
      assertEquals("7y:\"\"k@l &d-x7(", string1);
      assertNotNull(string1);
      
      Tag tag0 = Tag.valueOf("7y:\"\"k@L &D-x7(", parseSettings0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "7y:\"\"k@L &D-x7(");
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertNotNull(element0);
      
      Document document0 = new Document("7y:\"\"k@l &d-x7(");
      assertEquals("7y:\"\"k@l &d-x7(", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7y:\"\"k@l &d-x7(", document0.location());
      assertNotNull(document0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals("7y:\"\"k@l &d-x7(", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7y:\"\"k@l &d-x7(", document0.location());
      assertFalse(parser0.isTrackErrors());
      assertEquals("7y:\"\"k@l &d-x7(", document1.baseUri());
      assertEquals("7y:\"\"k@l &d-x7(", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document1.getElementsByIndexLessThan(8211);
      assertEquals("7y:\"\"k@l &d-x7(", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7y:\"\"k@l &d-x7(", document0.location());
      assertFalse(parser0.isTrackErrors());
      assertEquals("7y:\"\"k@l &d-x7(", document1.baseUri());
      assertEquals("7y:\"\"k@l &d-x7(", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      
      Element element1 = new Element("DkERl_Sl");
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("DkERl_Sl", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("DkERl_Sl", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Elements elements1 = document1.getElementsByIndexEquals(0);
      assertEquals("7y:\"\"k@l &d-x7(", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7y:\"\"k@l &d-x7(", document0.location());
      assertFalse(parser0.isTrackErrors());
      assertEquals("7y:\"\"k@l &d-x7(", document1.baseUri());
      assertEquals("7y:\"\"k@l &d-x7(", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertEquals("7y:\"\"k@l &d-x7(", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7y:\"\"k@l &d-x7(", document0.location());
      assertSame(document0, document1);
      assertEquals(0, nodeArray0.length);
      assertNotNull(nodeArray0);
      
      Element element2 = element1.val("time");
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("DkERl_Sl", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("DkERl_Sl", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("DkERl_Sl", element2.tagName());
      assertFalse(element2.hasParent());
      assertEquals("DkERl_Sl", element2.nodeName());
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertNotSame(element2, element0);
      assertSame(element2, element1);
      assertNotNull(element2);
      
      Document document2 = (Document)document0.val("7y:\"\"k@l &d-x7(");
      assertEquals("7y:\"\"k@l &d-x7(", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7y:\"\"k@l &d-x7(", document0.location());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("7y:\"\"k@l &d-x7(", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("7y:\"\"k@l &d-x7(", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      Element element3 = document2.shallowClone();
      assertEquals("7y:\"\"k@l &d-x7(", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7y:\"\"k@l &d-x7(", document0.location());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("7y:\"\"k@l &d-x7(", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("7y:\"\"k@l &d-x7(", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(element3.isBlock());
      assertEquals("#root", element3.nodeName());
      assertEquals(0, element3.siblingIndex());
      assertEquals("#root", element3.tagName());
      assertEquals(0, element3.childNodeSize());
      assertEquals("7y:\"\"k@l &d-x7(", element3.baseUri());
      assertFalse(element3.hasParent());
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element1));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(element3, element0);
      assertNotSame(element3, element2);
      assertNotSame(element3, element1);
      assertNotNull(element3);
      
      Elements elements2 = element1.siblingElements();
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("DkERl_Sl", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("DkERl_Sl", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element3));
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertNotSame(element1, element3);
      assertNotNull(elements2);
      
      // Undeclared exception!
      try { 
        document1.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.prepareEncoder();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      Element element0 = new Element("z$}2tmr%iTI%EwJY");
      assertEquals("z$}2tmr%iTI%EwJY", element0.nodeName());
      assertEquals("z$}2tmr%iTI%EwJY", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        element0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document1.prepend("Children collection to be inserted must not be null.");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      String string0 = document2.wholeText();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("Children collection to be inserted must not be null.Children collection to be inserted must not be null.", string0);
      assertNotNull(string0);
      
      Document document3 = document0.normalise();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotNull(document3);
      
      Tag tag0 = document1.tag();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("#root", tag0.getName());
      assertTrue(tag0.isInline());
      assertEquals("#root", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotNull(tag0);
      
      Set<String> set0 = document2.classNames();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertFalse(set0.contains("Children collection to be inserted must not be null."));
      assertNotNull(set0);
      
      Elements elements0 = document2.parents();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotNull(elements0);
      
      String string1 = document3.data();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        document2.replaceChild(document1, document3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("Insert position out of bounds.", parseSettings0);
      assertFalse(tag0.isKnownTag());
      assertEquals("Insert position out of bounds.", tag0.toString());
      assertEquals("Insert position out of bounds.", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      String string0 = parseSettings0.normalizeAttribute("&pIr");
      assertEquals("&pIr", string0);
      assertNotNull(string0);
      
      Element element0 = new Element(tag0, "{#&/");
      assertFalse(tag0.isKnownTag());
      assertEquals("Insert position out of bounds.", tag0.toString());
      assertEquals("Insert position out of bounds.", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Insert position out of bounds.", element0.nodeName());
      assertEquals("Insert position out of bounds.", element0.tagName());
      assertEquals("{#&/", element0.baseUri());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      Elements elements0 = element0.parents();
      assertFalse(tag0.isKnownTag());
      assertEquals("Insert position out of bounds.", tag0.toString());
      assertEquals("Insert position out of bounds.", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Insert position out of bounds.", element0.nodeName());
      assertEquals("Insert position out of bounds.", element0.tagName());
      assertEquals("{#&/", element0.baseUri());
      assertFalse(element0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document document0 = Parser.parse("&pIr", "=>_");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=>_", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("=>_", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element1 = document0.body();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=>_", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("=>_", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("=>_", element1.baseUri());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      assertNotNull(element1);
      
      Tag tag1 = Tag.valueOf(":ImmediateParent%s");
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isKnownTag());
      assertEquals(":ImmediateParent%s", tag1.toString());
      assertEquals(":ImmediateParent%s", tag1.getName());
      assertFalse(tag1.isData());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.preserveWhitespace());
      assertTrue(tag1.isInline());
      assertFalse(tag1.equals((Object)tag0));
      assertNotSame(tag1, tag0);
      assertNotNull(tag1);
      
      Elements elements1 = document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=>_", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("=>_", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = element1.elementSiblingIndex();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=>_", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("=>_", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("=>_", element1.baseUri());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      assertEquals(1, int0);
      
      List<DataNode> list0 = element0.dataNodes();
      assertFalse(tag0.isKnownTag());
      assertEquals("Insert position out of bounds.", tag0.toString());
      assertEquals("Insert position out of bounds.", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Insert position out of bounds.", element0.nodeName());
      assertEquals("Insert position out of bounds.", element0.tagName());
      assertEquals("{#&/", element0.baseUri());
      assertFalse(element0.hasParent());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(element0.equals((Object)element1));
      assertNotSame(tag0, tag1);
      assertNotSame(element0, element1);
      assertNotNull(list0);
      
      Element element2 = document0.body();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=>_", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("=>_", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertEquals("=>_", element2.baseUri());
      assertEquals("body", element2.tagName());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.nodeName());
      assertFalse(element2.equals((Object)element0));
      assertNotSame(element2, element0);
      assertSame(element2, element1);
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parse("A.eHBLi`&JC[@w", "A.eHBLi`&JC[@w");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      Elements elements0 = element0.children();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = element0.getElementsByTag("A.eHBLi`&JC[@w");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      String string0 = "meta";
      Elements elements2 = document0.getElementsByClass("meta");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      
      Element element1 = document0.nextElementSibling();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertNull(element1);
      
      Node node0 = document0.nextSibling();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertNull(node0);
      
      // Undeclared exception!
      try { 
        document0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("LhV[ej]z[6DddBS_)V", "LhV[ej]z[6DddBS_)V");
      assertEquals(0, document0.siblingIndex());
      assertEquals("LhV[ej]z[6DddBS_)V", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("LhV[ej]z[6DddBS_)V", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertEquals(0, document0.siblingIndex());
      assertEquals("LhV[ej]z[6DddBS_)V", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("LhV[ej]z[6DddBS_)V", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals("LhV[ej]z[6DddBS_)V", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("LhV[ej]z[6DddBS_)V", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document1.children();
      assertEquals(0, document0.siblingIndex());
      assertEquals("LhV[ej]z[6DddBS_)V", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("LhV[ej]z[6DddBS_)V", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals("LhV[ej]z[6DddBS_)V", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("LhV[ej]z[6DddBS_)V", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      Document document2 = Parser.parse("EW7,%?=MX|SpH_8X", "textarea");
      assertEquals("textarea", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("textarea", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      
      Elements elements1 = document0.parents();
      assertEquals(0, document0.siblingIndex());
      assertEquals("LhV[ej]z[6DddBS_)V", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("LhV[ej]z[6DddBS_)V", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Elements elements2 = document0.previousElementSiblings();
      assertEquals(0, document0.siblingIndex());
      assertEquals("LhV[ej]z[6DddBS_)V", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("LhV[ej]z[6DddBS_)V", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.outline(false);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.prettyPrint(false);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotNull(document_OutputSettings3);
      
      Charset charset0 = document2.charset();
      assertEquals("textarea", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("textarea", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(charset0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings4);
      
      Document document3 = Parser.parseBodyFragment("EW7,%?=MX|SpH_8X", "EW7,%?=MX|SpH_8X");
      assertEquals("EW7,%?=MX|SpH_8X", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("EW7,%?=MX|SpH_8X", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotNull(document3);
      
      Charset charset1 = document3.charset();
      assertEquals("EW7,%?=MX|SpH_8X", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("EW7,%?=MX|SpH_8X", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("UTF-8", charset1.toString());
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.displayName());
      assertTrue(charset1.canEncode());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(charset1, charset0);
      assertNotNull(charset1);
      
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings4.charset(charset1);
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals("EW7,%?=MX|SpH_8X", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("EW7,%?=MX|SpH_8X", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("UTF-8", charset1.toString());
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.displayName());
      assertTrue(charset1.canEncode());
      assertFalse(document_OutputSettings5.outline());
      assertFalse(document_OutputSettings5.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings5.syntax());
      assertEquals(1, document_OutputSettings5.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings5);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(charset1, charset0);
      assertSame(document_OutputSettings5, document_OutputSettings3);
      assertSame(document_OutputSettings5, document_OutputSettings0);
      assertSame(document_OutputSettings5, document_OutputSettings4);
      assertSame(document_OutputSettings5, document_OutputSettings1);
      assertSame(document_OutputSettings5, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings5);
      
      // Undeclared exception!
      try { 
        document3.html((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Document document0 = Document.createShell("zE30F+b4j4Z7");
      assertEquals(1, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document0.prepend("zE30F+b4j4Z7");
      assertEquals(2, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      String string0 = document2.wholeText();
      assertEquals(2, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("zE30F+b4j4Z7", document2.baseUri());
      assertEquals("zE30F+b4j4Z7", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("zE30F+b4j4Z7", string0);
      assertNotNull(string0);
      
      Document document3 = document1.normalise();
      assertEquals(2, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotNull(document3);
      
      Tag tag0 = document0.tag();
      assertEquals(2, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals("#root", tag0.getName());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotNull(tag0);
      
      Set<String> set0 = document0.classNames();
      assertEquals(2, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertFalse(set0.contains("zE30F+b4j4Z7"));
      assertNotNull(set0);
      
      String string1 = document0.val();
      assertEquals(2, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals("", string1);
      assertNotNull(string1);
      
      Set<String> set1 = document1.classNames();
      assertEquals(2, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(set1, set0);
      assertFalse(set1.contains("zE30F+b4j4Z7"));
      assertNotNull(set1);
      
      int int0 = document0.childNodeSize();
      assertEquals(2, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals(2, int0);
      
      String string2 = document0.cssSelector();
      assertEquals(2, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals("#root", string2);
      assertNotNull(string2);
      
      List<Node> list0 = document3.ensureChildNodes();
      assertEquals(2, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotNull(list0);
      
      Elements elements0 = document1.getElementsByAttribute("jp.tqN7l#SS1");
      assertEquals(2, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotNull(elements0);
      
      Elements elements1 = document1.getElementsByAttributeValueMatching("zE30F+b4j4Z7", (Pattern) null);
      assertEquals(2, document0.childNodeSize());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors((-197));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      
      Document document0 = parser1.parseInput("", "");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(document0);
      
      Document document1 = document0.ownerDocument();
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document1.addClass("");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      String string0 = document0.className();
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Document document0 = Document.createShell("zE30F+b4j4Z7");
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document1.siblingElements();
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(elements0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      Document document2 = Parser.parse("zE30F+b4j4Z7", "textarea");
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("textarea", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("textarea", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      
      Elements elements1 = document2.parents();
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("textarea", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("textarea", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Elements elements2 = document2.previousElementSiblings();
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("textarea", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("textarea", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.outline(true);
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.prettyPrint(false);
      assertFalse(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotNull(document_OutputSettings3);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings0.charset(charset0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertNotNull(document_OutputSettings4);
      
      Appendable appendable0 = document2.html((Appendable) pipedWriter0);
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("textarea", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("textarea", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(appendable0, pipedWriter0);
      assertSame(pipedWriter0, appendable0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(appendable0);
      
      document2.outerHtmlHead(appendable0, (-121), document_OutputSettings3);
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("textarea", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("textarea", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(appendable0, pipedWriter0);
      assertSame(pipedWriter0, appendable0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Document document0 = Document.createShell("zE30F+b4j4Z7");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document1.siblingElements();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(elements0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      Document document2 = Parser.parse("zE30F+b4j4Z7", "textarea");
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("textarea", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("textarea", document2.location());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      
      Elements elements1 = document2.parents();
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("textarea", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("textarea", document2.location());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Tag tag0 = Tag.valueOf("textarea");
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isFormSubmittable());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "BeforeAttributeValue");
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isFormSubmittable());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.preserveWhitespace());
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("BeforeAttributeValue", element0.baseUri());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      String string0 = document1.html();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parse("=J", "=J");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      String string0 = document0.nodeName();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", string0);
      assertNotNull(string0);
      
      Document document1 = document0.normalise();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("=J", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("=J", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = document1.clone();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("=J", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("=J", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("=J", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("=J", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      
      Elements elements0 = document2.children();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("=J", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("=J", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("=J", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("=J", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(elements0);
      
      Document document3 = (Document)document1.text("");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("=J", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("=J", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("=J", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals("=J", document3.baseUri());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotNull(document3);
      
      String string1 = document3.className();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("=J", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("=J", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("=J", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals("=J", document3.baseUri());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertEquals("", string1);
      assertNotNull(string1);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(string1));
      assertNotNull(linkedHashSet0);
      
      Document document4 = (Document)document0.classNames((Set<String>) linkedHashSet0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals("=J", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("=J", document4.location());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document4, document2);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertFalse(linkedHashSet0.contains(string1));
      assertNotNull(document4);
      
      Document document5 = Document.createShell("");
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals("", document5.baseUri());
      assertEquals("", document5.location());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document3);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotNull(document5);
      
      CDataNode cDataNode0 = new CDataNode("UMy}XaV'X.");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      List<Node> list0 = cDataNode0.ensureChildNodes();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      document1.childNodes = list0;
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("=J", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("=J", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(document1.childNodes.isEmpty());
      assertEquals(0, document1.childNodes.size());
      
      Document document6 = (Document)document5.doClone(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("=J", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("=J", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals("", document5.baseUri());
      assertEquals("", document5.location());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("", document6.location());
      assertEquals("", document6.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(1, document6.childNodeSize());
      assertFalse(document6.isBlock());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document4));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document1, document6);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document5);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document3);
      assertNotSame(document5, document6);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(document6, document0);
      assertNotSame(document6, document2);
      assertNotSame(document6, document3);
      assertNotSame(document6, document1);
      assertNotSame(document6, document5);
      assertNotSame(document6, document4);
      assertNotNull(document6);
      
      boolean boolean0 = document0.hasText();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertFalse(boolean0);
      
      boolean boolean1 = linkedHashSet0.add("0cj$>k C.V9(sGT/AE");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(linkedHashSet0.contains(string1));
      assertTrue(linkedHashSet0.contains("0cj$>k C.V9(sGT/AE"));
      assertTrue(boolean1);
      
      String string2 = document4.val();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.childNodeSize());
      assertEquals("=J", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("=J", document4.location());
      assertFalse(string2.equals((Object)string0));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document6));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document4, document3);
      assertNotSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertNotSame(document4, document5);
      assertNotSame(document4, document6);
      assertFalse(linkedHashSet0.contains(string1));
      assertTrue(linkedHashSet0.contains("0cj$>k C.V9(sGT/AE"));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Document document7 = Parser.parseBodyFragment("", "</");
      assertFalse(document7.isBlock());
      assertEquals(0, document7.siblingIndex());
      assertEquals("</", document7.location());
      assertEquals("#document", document7.nodeName());
      assertEquals("</", document7.baseUri());
      assertEquals(1, document7.childNodeSize());
      assertEquals("#root", document7.tagName());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.hasParent());
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document6));
      assertNotSame(document7, document4);
      assertNotSame(document7, document5);
      assertNotSame(document7, document2);
      assertNotSame(document7, document3);
      assertNotSame(document7, document0);
      assertNotSame(document7, document1);
      assertNotSame(document7, document6);
      assertNotNull(document7);
      
      String string3 = document5.className();
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals("", document5.baseUri());
      assertEquals("", document5.location());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(string3.equals((Object)string0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document7));
      assertFalse(document5.equals((Object)document6));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document3);
      assertNotSame(document5, document7);
      assertNotSame(document5, document6);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Document document8 = (Document)document7.addClass("#document");
      assertFalse(document7.isBlock());
      assertEquals(0, document7.siblingIndex());
      assertEquals("</", document7.location());
      assertEquals("#document", document7.nodeName());
      assertEquals("</", document7.baseUri());
      assertEquals(1, document7.childNodeSize());
      assertEquals("#root", document7.tagName());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.hasParent());
      assertEquals(0, document8.siblingIndex());
      assertEquals("#document", document8.nodeName());
      assertEquals("</", document8.baseUri());
      assertFalse(document8.isBlock());
      assertFalse(document8.hasParent());
      assertEquals("#root", document8.tagName());
      assertEquals(1, document8.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals("</", document8.location());
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document5));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document6));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document8.equals((Object)document0));
      assertFalse(document8.equals((Object)document2));
      assertNotSame(document7, document4);
      assertNotSame(document7, document5);
      assertSame(document7, document8);
      assertNotSame(document7, document2);
      assertNotSame(document7, document3);
      assertNotSame(document7, document0);
      assertNotSame(document7, document1);
      assertNotSame(document7, document6);
      assertNotSame(document8, document4);
      assertNotSame(document8, document5);
      assertNotSame(document8, document3);
      assertNotSame(document8, document6);
      assertNotSame(document8, document1);
      assertNotSame(document8, document0);
      assertSame(document8, document7);
      assertNotSame(document8, document2);
      assertNotNull(document8);
      
      Document document9 = (Document)document2.addClass("");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("=J", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("=J", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("=J", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("=J", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document9.hasParent());
      assertEquals(1, document9.childNodeSize());
      assertEquals("=J", document9.location());
      assertEquals("#root", document9.tagName());
      assertEquals(0, document9.siblingIndex());
      assertEquals("#document", document9.nodeName());
      assertFalse(document9.isBlock());
      assertFalse(document9.updateMetaCharsetElement());
      assertEquals("=J", document9.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document9.quirksMode());
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document9.equals((Object)document0));
      assertFalse(document9.equals((Object)document6));
      assertFalse(document9.equals((Object)document7));
      assertFalse(document9.equals((Object)document3));
      assertFalse(document9.equals((Object)document4));
      assertFalse(document9.equals((Object)document5));
      assertFalse(document9.equals((Object)document1));
      assertFalse(document9.equals((Object)document8));
      assertSame(document0, document1);
      assertNotSame(document0, document7);
      assertNotSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertSame(document0, document3);
      assertNotSame(document0, document9);
      assertNotSame(document0, document8);
      assertSame(document0, document4);
      assertNotSame(document1, document8);
      assertNotSame(document1, document7);
      assertNotSame(document1, document6);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document9);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document5);
      assertSame(document2, document9);
      assertNotSame(document2, document0);
      assertNotSame(document2, document6);
      assertNotSame(document2, document8);
      assertNotSame(document2, document1);
      assertNotSame(document2, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document7);
      assertNotSame(document2, document4);
      assertNotSame(document9, document0);
      assertSame(document9, document2);
      assertNotSame(document9, document6);
      assertNotSame(document9, document7);
      assertNotSame(document9, document3);
      assertNotSame(document9, document4);
      assertNotSame(document9, document5);
      assertNotSame(document9, document1);
      assertNotSame(document9, document8);
      assertNotNull(document9);
      
      Elements elements1 = document7.getElementsMatchingOwnText("#document");
      assertFalse(document7.isBlock());
      assertEquals(0, document7.siblingIndex());
      assertEquals("</", document7.location());
      assertEquals("#document", document7.nodeName());
      assertEquals("</", document7.baseUri());
      assertEquals(1, document7.childNodeSize());
      assertEquals("#root", document7.tagName());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document9));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document7, document4);
      assertNotSame(document7, document5);
      assertSame(document7, document8);
      assertNotSame(document7, document2);
      assertNotSame(document7, document3);
      assertNotSame(document7, document0);
      assertNotSame(document7, document1);
      assertNotSame(document7, document6);
      assertNotSame(document7, document9);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document1.removeAttr("Children collection to be inserted must not be null.");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      Document document3 = (Document)document1.prepend("Children collection to be inserted must not be null.");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertNotNull(document3);
      
      String string0 = document3.wholeText();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertEquals("Children collection to be inserted must not be null.Children collection to be inserted must not be null.", string0);
      assertNotNull(string0);
      
      Document document4 = document0.normalise();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document4.location());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertNotNull(document4);
      
      String string1 = document3.toString();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertEquals("<html>\n <head></head>\n <body>\n  Children collection to be inserted must not be null. Children collection to be inserted must not be null.\n </body>\n</html>", string1);
      assertNotNull(string1);
      
      Tag tag0 = document1.tag();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals("#root", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotNull(tag0);
      
      Set<String> set0 = document3.classNames();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertFalse(set0.contains("Children collection to be inserted must not be null."));
      assertNotNull(set0);
      
      String string2 = document0.val();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = document3.childNodeSize();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertEquals(1, int0);
      
      String string3 = document1.cssSelector();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertEquals("#root", string3);
      assertNotNull(string3);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertNotNull(list0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.outline(true);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotNull(document_OutputSettings2);
      
      Elements elements0 = document1.getElementsByAttributeStarting("Children collection to be inserted must not be null.Children collection to be inserted must not be null.");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotNull(elements0);
      
      Document document5 = (Document)document4.text("#root");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("Children collection to be inserted must not be null.", document5.location());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document4.location());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document5, document0);
      assertSame(document5, document4);
      assertSame(document5, document3);
      assertSame(document5, document2);
      assertSame(document5, document1);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document5);
      assertNotNull(document5);
      
      // Undeclared exception!
      try { 
        document1.outerHtmlHead((Appendable) null, (-1350), document_OutputSettings2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.ownerDocument();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document2 = document1.parser(parser0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      List<Node> list0 = parser0.parseFragmentInput("", document2, "");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(list0);
      
      Document document3 = (Document)document2.removeClass("S.=kal;gjrv?84Fi];j");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertNotNull(document3);
      
      String string0 = document3.attr("");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = document3.is("declare");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertFalse(boolean0);
      
      Elements elements0 = document2.parents();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotNull(elements0);
      
      String string1 = document0.data();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(string1.equals((Object)string0));
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        document0.replaceChild(document1, document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document1.children();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      
      Document document2 = (Document)document1.text("");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(linkedHashSet0);
      
      Document document3 = (Document)document2.classNames((Set<String>) linkedHashSet0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(document3);
      
      Document document4 = (Document)document3.doClone(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals("", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document4);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(document4);
      
      String string0 = document2.ownText();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = document0.hasText();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.equals((Object)document4));
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertFalse(boolean0);
      
      boolean boolean1 = linkedHashSet0.add("");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedHashSet0.contains(""));
      assertTrue(boolean1);
      
      String string1 = document4.val();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals("", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertTrue(string1.equals((Object)string0));
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document4);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertTrue(linkedHashSet0.contains(""));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Document document5 = Parser.parseBodyFragment("InSelectInTable", "@2A*}09&o22}nUj}~UI");
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals("@2A*}09&o22}nUj}~UI", document5.baseUri());
      assertFalse(document5.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("@2A*}09&o22}nUj}~UI", document5.location());
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertNotSame(document5, document2);
      assertNotNull(document5);
      
      String string2 = document3.className();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document4));
      assertTrue(string2.equals((Object)string0));
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document4);
      assertSame(document1, document2);
      assertNotSame(document1, document5);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertNotSame(document2, document5);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document5);
      assertSame(document3, document1);
      assertNotSame(document3, document4);
      assertFalse(linkedHashSet0.contains("InSelectInTable"));
      assertTrue(linkedHashSet0.contains(string2));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Document document6 = (Document)document0.addClass("KC{wbI5D-vXGBV0/#[");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document6.location());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.hasParent());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals(1, document6.childNodeSize());
      assertEquals("#root", document6.tagName());
      assertEquals(0, document6.siblingIndex());
      assertEquals("", document6.baseUri());
      assertFalse(document6.isBlock());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document5));
      assertSame(document0, document3);
      assertSame(document0, document6);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document6, document4);
      assertSame(document6, document1);
      assertSame(document6, document3);
      assertSame(document6, document0);
      assertSame(document6, document2);
      assertNotSame(document6, document5);
      assertNotNull(document6);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.outline(false);
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotNull(document_OutputSettings3);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.prettyPrint(true);
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotNull(document_OutputSettings4);
      
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.isRegistered());
      assertNotNull(uS_ASCII0);
      
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings1.charset((Charset) uS_ASCII0);
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.escapeMode());
      assertEquals(1, document_OutputSettings5.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings5.syntax());
      assertFalse(document_OutputSettings5.outline());
      assertTrue(document_OutputSettings5.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings5);
      assertSame(document_OutputSettings5, document_OutputSettings2);
      assertSame(document_OutputSettings5, document_OutputSettings0);
      assertNotSame(document_OutputSettings5, document_OutputSettings3);
      assertNotSame(document_OutputSettings5, document_OutputSettings4);
      assertSame(document_OutputSettings5, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings5);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotNull(document_OutputSettings5);
      
      String string3 = document0.wholeText();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertSame(document0, document3);
      assertSame(document0, document6);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertEquals("", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        document6.outerHtmlHead((Appendable) null, (-1300), document_OutputSettings2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parse("=J", "=J");
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      String string0 = document0.nodeName();
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", string0);
      assertNotNull(string0);
      
      Elements elements0 = document0.nextElementSiblings();
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String string1 = document0.text();
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(string1.equals((Object)string0));
      assertEquals("=J", string1);
      assertNotNull(string1);
      
      document0.setSiblingIndex((-2224));
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Elements elements1 = document0.previousElementSiblings();
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Elements elements2 = document0.getElementsByClass(":parent%s");
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      
      Document document1 = document0.clone();
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("=J", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("=J", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      MockFile mockFile0 = new MockFile("!A;");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("value", "value");
      assertEquals("/tmp/value0value", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals("value0value", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(mockFileWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(440);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(440, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(440, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(440, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      
      Charset charset0 = document1.charset();
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("=J", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("=J", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(charset0);
      
      Charset charset1 = document1.charset();
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("=J", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("=J", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.displayName());
      assertTrue(charset1.canEncode());
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.toString());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(charset1, charset0);
      assertNotNull(charset1);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset1);
      assertEquals(440, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("=J", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("=J", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(440, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(440, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(440, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.displayName());
      assertTrue(charset1.canEncode());
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.toString());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(charset1, charset0);
      assertNotNull(document_OutputSettings3);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(440, document_OutputSettings4.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(440, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotNull(document_OutputSettings4);
      
      document1.outerHtmlHead(mockFileWriter0, 1650, document_OutputSettings1);
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("=J", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("=J", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("/tmp/value0value", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals("value0value", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(440, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(440, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(file0, mockFile0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      
      Document document2 = (Document)document1.appendChild(document0);
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("=J", document2.location());
      assertFalse(document1.hasParent());
      assertEquals("=J", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("=J", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotNull(document2);
      
      // Undeclared exception!
      try { 
        document1.is(":parent%s");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ':parent%s': unexpected token at ':parent%s'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("Insert position out of bounds.", parseSettings0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertEquals("Insert position out of bounds.", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("Insert position out of bounds.", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      String string0 = "&pIr";
      Element element0 = new Element(tag0, "&pIr");
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertEquals("Insert position out of bounds.", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("Insert position out of bounds.", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("Insert position out of bounds.", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("&pIr", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Insert position out of bounds.", element0.nodeName());
      assertNotNull(element0);
      
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) element0;
      nodeArray0[6] = (Node) element0;
      element0.addChildren(nodeArray0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertEquals("Insert position out of bounds.", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("Insert position out of bounds.", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("Insert position out of bounds.", element0.tagName());
      assertEquals("&pIr", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Insert position out of bounds.", element0.nodeName());
      assertEquals(7, nodeArray0.length);
      
      String string1 = element0.nodeName();
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertEquals("Insert position out of bounds.", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("Insert position out of bounds.", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("Insert position out of bounds.", element0.tagName());
      assertEquals("&pIr", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Insert position out of bounds.", element0.nodeName());
      assertFalse(string1.equals((Object)string0));
      assertEquals("Insert position out of bounds.", string1);
      assertNotNull(string1);
      
      Document document0 = Parser.parseBodyFragment("=J", "R5O`(");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R5O`(", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("R5O`(", document0.location());
      assertNotNull(document0);
      
      int int0 = 2;
      Elements elements0 = document0.getElementsByIndexGreaterThan(2);
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R5O`(", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("R5O`(", document0.location());
      assertNotNull(elements0);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R5O`(", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("R5O`(", document0.location());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        document0.before("ZH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Document document0 = Document.createShell("zE30F+b4j4Z7");
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Elements elements0 = document0.nextElementSiblings();
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String string0 = document0.text();
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", string0);
      assertNotNull(string0);
      
      document0.setSiblingIndex(62);
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(62, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Elements elements1 = document0.previousElementSiblings();
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(62, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Elements elements2 = document0.getElementsByClass("<Pt[AKX}");
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(62, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      
      Document document1 = document0.clone();
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(62, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      MockFile mockFile0 = new MockFile("zE30F+b4j4Z7");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("<Pt[AKX}", "br");
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("<Pt[AKX}0br", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/tmp/<Pt[AKX}0br", file0.toString());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(mockFileWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      int int0 = 2147483645;
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotNull(document_OutputSettings2);
      
      // Undeclared exception!
      try { 
        document_OutputSettings2.indentAmount((-1844023714));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parse("OB&n-cMCSczUoZS~)>k", "value");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByAttributeStarting("value");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "value");
      assertEquals("value", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      assertEquals("eulav", stringBuilder0.toString());
      assertEquals("eulav", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder1.append(false);
      assertEquals("eulavfalse", stringBuilder0.toString());
      assertEquals("eulavfalse", stringBuilder1.toString());
      assertEquals("eulavfalse", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotNull(stringBuilder2);
      
      StringBuilder stringBuilder3 = stringBuilder2.append(false);
      assertEquals("eulavfalsefalse", stringBuilder0.toString());
      assertEquals("eulavfalsefalse", stringBuilder1.toString());
      assertEquals("eulavfalsefalse", stringBuilder2.toString());
      assertEquals("eulavfalsefalse", stringBuilder3.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertNotNull(stringBuilder3);
      
      char[] charArray0 = new char[5];
      String string0 = document0.cssSelector();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", string0);
      assertNotNull(string0);
      
      charArray0[0] = 'V';
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("value"));
      assertNotNull(linkedHashSet0);
      
      Document document1 = (Document)document0.classNames((Set<String>) linkedHashSet0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(linkedHashSet0.contains("value"));
      assertNotNull(document1);
      
      Elements elements1 = document0.getElementsContainingText("|9=J&z)V5/G[");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      String string1 = document0.ownText();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertEquals("", string1);
      assertNotNull(string1);
      
      Element element0 = document0.parent();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertSame(document0, document1);
      assertNull(element0);
      
      Document document2 = (Document)document0.val("");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("value", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("value", document2.location());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      Elements elements2 = document2.getElementsContainingText((String) null);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("value", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("value", document2.location());
      assertEquals(4, elements2.size());
      assertFalse(elements2.isEmpty());
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parse("=J", "=J");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document0.location());
      assertNotNull(document0);
      
      String string0 = document0.nodeName();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document0.location());
      assertEquals("#document", string0);
      assertNotNull(string0);
      
      Elements elements0 = document0.nextElementSiblings();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document0.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String string1 = document0.text();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document0.location());
      assertFalse(string1.equals((Object)string0));
      assertEquals("=J", string1);
      assertNotNull(string1);
      
      Document document1 = (Document)document0.attr("textarea", false);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("=J", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("=J", document1.baseUri());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Tag tag0 = Tag.valueOf("=J");
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("=J", tag0.toString());
      assertEquals("=J", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("#document");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.clone();
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotNull(attributes1);
      
      Attributes attributes2 = attributes1.put("#root", "=J");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertNotNull(attributes2);
      
      FormElement formElement0 = new FormElement(tag0, "=J", attributes2);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("=J", tag0.toString());
      assertEquals("=J", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("=J", formElement0.nodeName());
      assertEquals("=J", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("=J", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotNull(formElement0);
      
      Elements elements1 = formElement0.getElementsByIndexEquals((-2224));
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("=J", tag0.toString());
      assertEquals("=J", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("=J", formElement0.nodeName());
      assertEquals("=J", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("=J", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document0.location());
      assertSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      assertNotNull(nodeArray0);
      
      FormElement formElement1 = (FormElement)formElement0.val("#document");
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("=J", tag0.toString());
      assertEquals("=J", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals(3, attributes2.size());
      assertEquals("=J", formElement0.nodeName());
      assertEquals("=J", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("=J", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("=J", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals("=J", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertEquals("=J", formElement1.tagName());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertNotNull(formElement1);
      
      Document document2 = (Document)document0.val("#document");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document0.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("=J", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("=J", document2.location());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      Element element0 = document2.shallowClone();
      assertEquals("#root", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("=J", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("#root", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document0.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("=J", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("=J", document2.location());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(element0);
      
      Element element1 = element0.appendTo(formElement1);
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("=J", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("#root", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document0.location());
      assertEquals("=J", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("#root", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("#root", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("=J", tag0.toString());
      assertEquals("=J", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(3, attributes1.size());
      assertEquals(3, attributes2.size());
      assertEquals("=J", formElement0.nodeName());
      assertEquals("=J", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("=J", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals("=J", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals("=J", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertEquals("=J", formElement1.tagName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("=J", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("=J", document2.location());
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertSame(element0, element1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element1, element0);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(element1);
      
      Elements elements2 = document0.siblingElements();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document0.location());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      
      // Undeclared exception!
      try { 
        element0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("</", "</");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByIndexLessThan(810);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      document0.setSiblingIndex(810);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(810, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      String string0 = ":parent%s";
      Elements elements1 = document0.previousElementSiblings();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(810, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Elements elements2 = document0.getElementsByClass("!A;");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(810, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      
      Document document1 = document0.clone();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(810, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      MockFile mockFile0 = new MockFile("</");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      assertNotNull(mockFileWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.indentAmount(382);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(382, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(382, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotNull(document_OutputSettings2);
      
      Charset charset0 = document0.charset();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(810, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings0.charset(charset0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(810, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("</", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(382, document_OutputSettings0.indentAmount());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(382, document_OutputSettings3.indentAmount());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotNull(document_OutputSettings3);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(382, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(382, document_OutputSettings4.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.outline());
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotNull(document_OutputSettings4);
      
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockFileWriter0, 2147483645, document_OutputSettings2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document1.prepend("Children collection to be inserted must not be null.");
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      String string0 = document2.wholeText();
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("Children collection to be inserted must not be null.Children collection to be inserted must not be null.", string0);
      assertNotNull(string0);
      
      Document document3 = document0.normalise();
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotNull(document3);
      
      Tag tag0 = document1.tag();
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.getName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotNull(tag0);
      
      Set<String> set0 = document2.classNames();
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      
      String string1 = document0.val();
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = document2.childNodeSize();
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertEquals(1, int0);
      
      String string2 = document1.cssSelector();
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertEquals("#root", string2);
      assertNotNull(string2);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotNull(list0);
      
      Appendable appendable0 = null;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.outline(true);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      
      // Undeclared exception!
      try { 
        document1.outerHtmlHead((Appendable) null, (-1350), document_OutputSettings2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parse("=J", "=J");
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("=J", document0.baseUri());
      assertNotNull(document0);
      
      String string0 = document0.nodeName();
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("=J", document0.baseUri());
      assertEquals("#document", string0);
      assertNotNull(string0);
      
      Elements elements0 = document0.nextElementSiblings();
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("=J", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string1 = document0.text();
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("=J", document0.baseUri());
      assertFalse(string1.equals((Object)string0));
      assertEquals("=J", string1);
      assertNotNull(string1);
      
      document0.setSiblingIndex((-2189));
      assertEquals("=J", document0.location());
      assertEquals((-2189), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("=J", document0.baseUri());
      
      Elements elements1 = document0.getElementsByAttributeValueEnding(":parent%s", "!A;");
      assertEquals("=J", document0.location());
      assertEquals((-2189), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("=J", document0.baseUri());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Elements elements2 = document0.previousElementSiblings();
      assertEquals("=J", document0.location());
      assertEquals((-2189), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("=J", document0.baseUri());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      
      Elements elements3 = document0.getElementsByClass(":parent%s");
      assertEquals("=J", document0.location());
      assertEquals((-2189), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("=J", document0.baseUri());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotNull(elements3);
      
      MockFile mockFile0 = new MockFile("html");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      assertNotNull(mockFileWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(2147483645);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(2147483645, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(2147483645, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(2147483645, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotNull(document_OutputSettings2);
      
      Document document1 = (Document)document0.appendChild(document0);
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("=J", document0.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("=J", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("=J", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document0.is("'o");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ''o': unexpected token at ''o'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document1.children();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      
      Document document2 = (Document)document1.text("");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals("", document2.location());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(linkedHashSet0);
      
      Document document3 = (Document)document2.classNames((Set<String>) linkedHashSet0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals("", document2.location());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("", document3.location());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(document3);
      
      Document document4 = (Document)document3.doClone(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals("", document2.location());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("", document3.location());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertEquals("", document4.location());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document4);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document4);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(document4);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = linkedHashSet0.add("");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedHashSet0.contains(""));
      assertTrue(boolean1);
      
      String string0 = document4.val();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals("", document2.location());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("", document3.location());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertEquals("", document4.location());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document4);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document4);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertTrue(linkedHashSet0.contains(""));
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Document document5 = Parser.parseBodyFragment("InSelectInTable", "@2A*}09&o22}nUj}~UI");
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals("@2A*}09&o22}nUj}~UI", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.childNodeSize());
      assertEquals("@2A*}09&o22}nUj}~UI", document5.location());
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertNotSame(document5, document2);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotNull(document5);
      
      String string1 = document3.className();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals("", document2.location());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("", document3.location());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document4));
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document1, document4);
      assertNotSame(document1, document5);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document5);
      assertNotSame(document2, document4);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document5);
      assertSame(document3, document1);
      assertNotSame(document3, document4);
      assertTrue(linkedHashSet0.contains(""));
      assertFalse(linkedHashSet0.contains("@2A*}09&o22}nUj}~UI"));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Document document6 = (Document)document0.addClass("KC{wbI5D-vXGBV0/#[");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("", document6.baseUri());
      assertEquals("#root", document6.tagName());
      assertEquals(1, document6.childNodeSize());
      assertEquals("#document", document6.nodeName());
      assertEquals("", document6.location());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.hasParent());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document4));
      assertSame(document0, document6);
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document6, document2);
      assertSame(document6, document0);
      assertSame(document6, document3);
      assertSame(document6, document1);
      assertNotSame(document6, document5);
      assertNotSame(document6, document4);
      assertNotNull(document6);
      
      Document document7 = (Document)document2.addClass("A");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals("", document2.location());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document7.isBlock());
      assertEquals(0, document7.siblingIndex());
      assertEquals("#document", document7.nodeName());
      assertEquals("", document7.location());
      assertEquals("#root", document7.tagName());
      assertEquals(1, document7.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertEquals("", document7.baseUri());
      assertFalse(document7.updateMetaCharsetElement());
      assertFalse(document7.hasParent());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document4));
      assertSame(document0, document6);
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document7);
      assertSame(document0, document1);
      assertNotSame(document1, document4);
      assertNotSame(document1, document5);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document7);
      assertSame(document1, document6);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document7);
      assertSame(document2, document1);
      assertNotSame(document2, document5);
      assertSame(document2, document6);
      assertNotSame(document2, document4);
      assertNotSame(document7, document5);
      assertSame(document7, document0);
      assertNotSame(document7, document4);
      assertSame(document7, document6);
      assertSame(document7, document1);
      assertSame(document7, document2);
      assertSame(document7, document3);
      assertNotNull(document7);
      
      Set<String> set0 = document5.classNames();
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals("@2A*}09&o22}nUj}~UI", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.childNodeSize());
      assertEquals("@2A*}09&o22}nUj}~UI", document5.location());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document6));
      assertFalse(document5.equals((Object)document7));
      assertFalse(document5.equals((Object)document1));
      assertNotSame(document5, document2);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document6);
      assertNotSame(document5, document7);
      assertNotSame(document5, document1);
      assertFalse(set0.contains(""));
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document1.children();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      
      Document document2 = (Document)document1.text("");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(linkedHashSet0);
      
      Document document3 = (Document)document2.classNames((Set<String>) linkedHashSet0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(document3);
      
      Document document4 = (Document)document3.doClone(document2);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertTrue(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.location());
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document4);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document4);
      assertSame(document3, document2);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(document4);
      
      String string0 = document2.ownText();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document4);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = document0.hasText();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.equals((Object)document4));
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(boolean0);
      
      boolean boolean1 = linkedHashSet0.add("");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedHashSet0.contains(""));
      assertTrue(boolean1);
      
      String string1 = document4.val();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertTrue(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.location());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document4);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document4);
      assertSame(document3, document2);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertTrue(linkedHashSet0.contains(""));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Document document5 = Parser.parseBodyFragment("InSelectInTable", "@2A*}09&o22}nUj}~UI");
      assertEquals("@2A*}09&o22}nUj}~UI", document5.baseUri());
      assertFalse(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("@2A*}09&o22}nUj}~UI", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertNotSame(document5, document4);
      assertNotSame(document5, document3);
      assertNotNull(document5);
      
      String string2 = document3.className();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document4));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document5);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document5);
      assertNotSame(document2, document4);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document5);
      assertNotSame(document3, document4);
      assertSame(document3, document2);
      assertTrue(linkedHashSet0.contains(""));
      assertFalse(linkedHashSet0.contains("@2A*}09&o22}nUj}~UI"));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Document document6 = (Document)document0.addClass("KC{wbI5D-vXGBV0/#[");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document6.hasParent());
      assertEquals("", document6.location());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(0, document6.siblingIndex());
      assertEquals(1, document6.childNodeSize());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertEquals("#root", document6.tagName());
      assertEquals("", document6.baseUri());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document5));
      assertNotSame(document0, document4);
      assertSame(document0, document6);
      assertSame(document0, document3);
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document6, document4);
      assertSame(document6, document3);
      assertSame(document6, document2);
      assertNotSame(document6, document5);
      assertSame(document6, document0);
      assertSame(document6, document1);
      assertNotNull(document6);
      
      Document document7 = (Document)document2.addClass("A");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(1, document7.childNodeSize());
      assertFalse(document7.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertEquals("", document7.location());
      assertEquals("#document", document7.nodeName());
      assertFalse(document7.isBlock());
      assertEquals("", document7.baseUri());
      assertEquals("#root", document7.tagName());
      assertEquals(0, document7.siblingIndex());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document4));
      assertNotSame(document0, document4);
      assertSame(document0, document7);
      assertSame(document0, document6);
      assertSame(document0, document3);
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document6);
      assertNotSame(document1, document5);
      assertSame(document1, document7);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document2, document3);
      assertSame(document2, document7);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document5);
      assertSame(document2, document6);
      assertNotSame(document2, document4);
      assertNotSame(document7, document5);
      assertSame(document7, document2);
      assertSame(document7, document6);
      assertNotSame(document7, document4);
      assertSame(document7, document3);
      assertSame(document7, document0);
      assertSame(document7, document1);
      assertNotNull(document7);
      
      Elements elements1 = document1.getElementsMatchingOwnText("");
      assertFalse(elements1.isEmpty());
      assertEquals(4, elements1.size());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertNotSame(elements1, elements0);
      assertNotSame(document0, document4);
      assertSame(document0, document7);
      assertSame(document0, document6);
      assertSame(document0, document3);
      assertNotSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document6);
      assertNotSame(document1, document5);
      assertSame(document1, document7);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parse("=J", "=J");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      String string0 = document0.nodeName();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", string0);
      assertNotNull(string0);
      
      Elements elements0 = document0.nextElementSiblings();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String string1 = document0.text();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(string1.equals((Object)string0));
      assertEquals("=J", string1);
      assertNotNull(string1);
      
      document0.setSiblingIndex((-2224));
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("html");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      Elements elements1 = document0.getElementsByAttributeValueEnding(":parent%s", "!A;");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Elements elements2 = document0.previousElementSiblings();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      
      Elements elements3 = document0.getElementsByClass(":parent%s");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements0));
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotNull(elements3);
      
      Document document1 = document0.clone();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("=J", document1.location());
      assertEquals("=J", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      MockFile mockFile0 = new MockFile("html");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      assertNotNull(mockFileWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(2147483645);
      assertEquals(2147483645, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(2147483645, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(2147483645, document_OutputSettings2.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotNull(document_OutputSettings2);
      
      Charset charset0 = document0.charset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(2147483645, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(2147483645, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(2147483645, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(2147483645, document_OutputSettings2.indentAmount());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotNull(document_OutputSettings3);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(2147483645, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings4.outline());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(2147483645, document_OutputSettings4.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(2147483645, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(2147483645, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(2147483645, document_OutputSettings2.indentAmount());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertNotSame(document0, document1);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotNull(document_OutputSettings4);
      
      document1.outerHtmlHead(mockFileWriter0, 440, document_OutputSettings4);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(2147483645, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings4.outline());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(2147483645, document_OutputSettings4.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals("=J", document1.location());
      assertEquals("=J", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("html", mockFile0.getName());
      assertEquals("html", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(2147483645, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(2147483645, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(2147483645, document_OutputSettings2.indentAmount());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertNotSame(document0, document1);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      
      Document document2 = (Document)document0.appendChild(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("=J", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("=J", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals((-2224), document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("=J", document1.location());
      assertEquals("=J", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotNull(document2);
      
      Element element0 = document0.selectFirst("body");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("=J", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        document0.is("'o");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ''o': unexpected token at ''o'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parse("=J", "=J");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      String string0 = document0.nodeName();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", string0);
      assertNotNull(string0);
      
      Elements elements0 = document0.nextElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string1 = document0.text();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(string1.equals((Object)string0));
      assertEquals("=J", string1);
      assertNotNull(string1);
      
      document0.setSiblingIndex((-2224));
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Elements elements1 = document0.getElementsByAttributeValueEnding(":parent%s", "!A;");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Elements elements2 = document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      
      Elements elements3 = document0.getElementsByClass(":parent%s");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements2));
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotNull(elements3);
      
      Document document1 = document0.clone();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("=J", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("=J", document1.location());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      MockFile mockFile0 = new MockFile("html");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      assertNotNull(mockFileWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(2147483645);
      assertEquals(2147483645, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(2147483645, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(2147483645, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      
      Charset charset0 = document0.charset();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2147483645, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(2147483645, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(2147483645, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(2147483645, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotNull(document_OutputSettings3);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(2147483645, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.outline());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2147483645, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(2147483645, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(2147483645, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(2147483645, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document0, document1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertNotNull(document_OutputSettings4);
      
      document1.outerHtmlHead(mockFileWriter0, 440, document_OutputSettings4);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(2147483645, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.outline());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("=J", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("=J", document1.location());
      assertTrue(mockFile0.canExecute());
      assertEquals("html", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("html", mockFile0.toString());
      assertEquals(2147483645, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(2147483645, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(2147483645, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(2147483645, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings4));
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      
      Document document2 = (Document)document0.appendChild(document1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("=J", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("=J", document2.location());
      assertFalse(document2.isBlock());
      assertEquals((-2224), document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("=J", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("=J", document1.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotNull(document2);
      
      Document document3 = (Document)document1.addClass("html");
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(1, document3.siblingIndex());
      assertEquals("=J", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals("=J", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("=J", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("=J", document1.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotNull(document3);
      
      Elements elements4 = document0.getElementsByAttributeValueNot("y0%wq${~Y?p", "=J");
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(elements4.isEmpty());
      assertEquals(8, elements4.size());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements4.equals((Object)elements1));
      assertFalse(elements4.equals((Object)elements0));
      assertFalse(elements4.equals((Object)elements3));
      assertFalse(elements4.equals((Object)elements2));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements4, elements1);
      assertNotSame(elements4, elements0);
      assertNotSame(elements4, elements3);
      assertNotSame(elements4, elements2);
      assertNotNull(elements4);
      
      String string2 = document1.nodeName();
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("=J", document0.baseUri());
      assertEquals("=J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("=J", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("=J", document1.location());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertEquals("#document", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "^:50s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("zE30F+b4j4Z7", parseSettings0);
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("zE30F+b4j4Z7", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertEquals("zE30F+b4j4Z7", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertNotNull(tag0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "value");
      assertFalse(boolean0);
      
      String string0 = "o7a#BNxC";
      Document document0 = new Document("jc");
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("jc", document0.location());
      assertEquals("jc", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("jc", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parse("=J", "=J");
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertNotNull(document0);
      
      String string0 = document0.nodeName();
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals("#document", string0);
      assertNotNull(string0);
      
      Elements elements0 = document0.nextElementSiblings();
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string1 = document0.text();
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertFalse(string1.equals((Object)string0));
      assertEquals("=J", string1);
      assertNotNull(string1);
      
      document0.setSiblingIndex((-2224));
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      
      Elements elements1 = document0.getElementsByAttributeValueEnding(":parent%s", "!A;");
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Elements elements2 = document0.previousElementSiblings();
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      
      Elements elements3 = document0.getElementsByClass(":parent%s");
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotNull(elements3);
      
      Document document1 = document0.clone();
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("=J", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("=J", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      MockFile mockFile0 = new MockFile("html");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      assertNotNull(mockFileWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(2147483645);
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(2147483645, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(2147483645, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(2147483645, document_OutputSettings2.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotNull(document_OutputSettings2);
      
      Charset charset0 = document0.charset();
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(charset0);
      
      Charset charset1 = Charset.defaultCharset();
      assertTrue(charset1.isRegistered());
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.name());
      assertEquals("US-ASCII", charset1.displayName());
      assertEquals("US-ASCII", charset1.toString());
      assertNotNull(charset1);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(2147483645, document_OutputSettings3.indentAmount());
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(2147483645, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(2147483645, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(2147483645, document_OutputSettings2.indentAmount());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertFalse(document0.equals((Object)document1));
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotNull(document_OutputSettings3);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(2147483645, document_OutputSettings3.indentAmount());
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals(2147483645, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(2147483645, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(2147483645, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(2147483645, document_OutputSettings2.indentAmount());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document0, document1);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotNull(document_OutputSettings4);
      
      document1.outerHtmlHead(mockFileWriter0, 440, document_OutputSettings4);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(2147483645, document_OutputSettings3.indentAmount());
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals(2147483645, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("=J", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("=J", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("html", mockFile0.toString());
      assertEquals("html", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(2147483645, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(2147483645, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(2147483645, document_OutputSettings2.indentAmount());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document0, document1);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      
      Document document2 = (Document)document0.appendChild(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("=J", document2.location());
      assertEquals("=J", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals((-2224), document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("=J", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("=J", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotNull(document2);
      
      boolean boolean0 = document1.hasAttributes();
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("=J", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("=J", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        document0.is("'o");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ''o': unexpected token at ''o'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parse("=J", "=J");
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      String string0 = document0.nodeName();
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", string0);
      assertNotNull(string0);
      
      Elements elements0 = document0.nextElementSiblings();
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String string1 = document0.text();
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(string1.equals((Object)string0));
      assertEquals("=J", string1);
      assertNotNull(string1);
      
      document0.setSiblingIndex((-2224));
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Elements elements1 = document0.getElementsByAttributeValueEnding(":parent%s", "!A;");
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Elements elements2 = document0.previousElementSiblings();
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      
      Elements elements3 = document0.getElementsByClass(":parent%s");
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotNull(elements3);
      
      Document document1 = document0.clone();
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("=J", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("=J", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      MockFile mockFile0 = new MockFile("html");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      assertNotNull(mockFileWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(2147483645);
      assertEquals(2147483645, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(2147483645, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(2147483645, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      
      Charset charset0 = document0.charset();
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset0);
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2147483645, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(2147483645, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(2147483645, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(2147483645, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotNull(document_OutputSettings3);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      assertEquals(2147483645, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2147483645, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(2147483645, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(2147483645, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(2147483645, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertNotNull(document_OutputSettings4);
      
      document1.outerHtmlHead(mockFileWriter0, 440, document_OutputSettings4);
      assertEquals(2147483645, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals((-2224), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=J", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("=J", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("=J", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("html", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals("html", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(2147483645, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(2147483645, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(2147483645, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(2147483645, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings4));
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("!A;", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parse("A.eHBLi`&JC[@w", "A.eHBLi`&JC[@w");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      Elements elements0 = document0.getElementsByAttributeValueStarting("A.eHBLi`&JC[@w", "A.eHBLi`&JC[@w");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document document1 = (Document)document0.attr("textarea", false);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals("A.eHBLi`&JC[@w", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Elements elements1 = element0.getElementsByIndexEquals((-1110026255));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertSame(document0, document1);
      assertEquals(1, nodeArray0.length);
      assertNotNull(nodeArray0);
      
      Element element1 = element0.val("\n * ");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("A.eHBLi`&JC[@w", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Document document2 = (Document)document0.val("html");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals("A.eHBLi`&JC[@w", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("A.eHBLi`&JC[@w", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      Element element2 = document2.shallowClone();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals("A.eHBLi`&JC[@w", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("A.eHBLi`&JC[@w", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals("A.eHBLi`&JC[@w", element2.baseUri());
      assertEquals("#root", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("#root", element2.tagName());
      assertFalse(element2.isBlock());
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertNotNull(element2);
      
      Elements elements2 = element2.siblingElements();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals("A.eHBLi`&JC[@w", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("A.eHBLi`&JC[@w", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals("A.eHBLi`&JC[@w", element2.baseUri());
      assertEquals("#root", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("#root", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      
      // Undeclared exception!
      try { 
        document2.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "</");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "</");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[3];
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)93;
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertArrayEquals(new byte[] {(byte) (-3), (byte) (-115), (byte)93}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean3);
      
      String string0 = "V*.}BS)";
      Document document0 = Document.createShell("V*.}BS)");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("V*.}BS)", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("V*.}BS)", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("V*.}BS)");
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("V*.}BS)", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("V*.}BS)", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("V*.}BS)", element0.baseUri());
      assertEquals("v*.}bs)", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("v*.}bs)", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.attr("V*.}BS)", true);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("V*.}BS)", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("V*.}BS)", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("V*.}BS)", element0.baseUri());
      assertEquals("v*.}bs)", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("v*.}bs)", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("v*.}bs)", element1.tagName());
      assertEquals("v*.}bs)", element1.nodeName());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals("V*.}BS)", element1.baseUri());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      // Undeclared exception!
      try { 
        element0.traverse((NodeVisitor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = "</";
      Document document0 = Parser.parseBodyFragmentRelaxed("</", "</");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertNotNull(document0);
      
      int int0 = 810;
      Elements elements0 = document0.getElementsByIndexLessThan(810);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("</", document0.location());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      assertNotNull(elements0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parse("=J", "=J");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertNotNull(document0);
      
      String string0 = document0.nodeName();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals("#document", string0);
      assertNotNull(string0);
      
      Elements elements0 = document0.nextElementSiblings();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String string1 = document0.text();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertFalse(string1.equals((Object)string0));
      assertEquals("=J", string1);
      assertNotNull(string1);
      
      document0.setSiblingIndex((-2224));
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      
      Elements elements1 = document0.getElementsByAttributeValueEnding(":parent%s", "!A;");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Elements elements2 = document0.previousElementSiblings();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      
      Elements elements3 = document0.getElementsByClass(":parent%s");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertNotNull(elements3);
      
      Document document1 = document0.clone();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("=J", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("=J", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      MockFile mockFile0 = new MockFile("html");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      assertNotNull(mockFileWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(2147483645);
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(2147483645, document_OutputSettings0.indentAmount());
      assertEquals(2147483645, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(2147483645, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotNull(document_OutputSettings2);
      
      Charset charset0 = document0.charset();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(2147483645, document_OutputSettings0.indentAmount());
      assertEquals(2147483645, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(2147483645, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals(2147483645, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotNull(document_OutputSettings3);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(2147483645, document_OutputSettings4.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(2147483645, document_OutputSettings0.indentAmount());
      assertEquals(2147483645, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(2147483645, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals(2147483645, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotNull(document_OutputSettings4);
      
      document1.outerHtmlHead(mockFileWriter0, 440, document_OutputSettings4);
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(2147483645, document_OutputSettings4.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("=J", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("=J", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("html", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals("html", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(2147483645, document_OutputSettings0.indentAmount());
      assertEquals(2147483645, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(2147483645, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals(2147483645, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings4));
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      
      Document document2 = (Document)document0.appendChild(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("=J", document0.baseUri());
      assertEquals((-2224), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=J", document0.location());
      assertEquals((-2224), document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("=J", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("=J", document2.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("=J", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("=J", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotNull(document2);
      
      // Undeclared exception!
      try { 
        document0.is("'o");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ''o': unexpected token at ''o'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = "";
      Document document0 = Document.createShell("");
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertNotNull(document0);
      
      Document document1 = document0.ownerDocument();
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document2 = document1.parser(parser0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      List<Node> list0 = parser0.parseFragmentInput("EUvV", document2, "EUvV");
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        document2.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document1.children();
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      
      Document document2 = (Document)document1.text("");
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(linkedHashSet0);
      
      Document document3 = (Document)document2.classNames((Set<String>) linkedHashSet0);
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(document3);
      
      Document document4 = (Document)document3.doClone(document2);
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document4);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document4);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(document4);
      
      String string0 = document2.ownText();
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document4);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = document0.hasText();
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.equals((Object)document4));
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertFalse(boolean0);
      
      boolean boolean1 = linkedHashSet0.add("");
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedHashSet0.contains(string0));
      assertTrue(boolean1);
      
      String string1 = document4.val();
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document4);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document4);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertTrue(linkedHashSet0.contains(string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Document document5 = Parser.parseBodyFragment("InSelectInTable", "@2A*}09&o22}nUj}~UI");
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals("@2A*}09&o22}nUj}~UI", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertEquals("@2A*}09&o22}nUj}~UI", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertNotSame(document5, document2);
      assertNotSame(document5, document0);
      assertNotSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertNotNull(document5);
      
      String string2 = document3.className();
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document4));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertSame(document1, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document4);
      assertNotSame(document2, document5);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document5);
      assertSame(document3, document2);
      assertNotSame(document3, document4);
      assertTrue(linkedHashSet0.contains(string0));
      assertFalse(linkedHashSet0.contains("@2A*}09&o22}nUj}~UI"));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Document document6 = (Document)document0.addClass("KC{wbI5D-vXGBV0/#[");
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertEquals(0, document6.siblingIndex());
      assertEquals("", document6.location());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(1, document6.childNodeSize());
      assertEquals("", document6.baseUri());
      assertFalse(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document5));
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document6);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document6, document0);
      assertSame(document6, document1);
      assertSame(document6, document3);
      assertNotSame(document6, document4);
      assertNotSame(document6, document5);
      assertSame(document6, document2);
      assertNotNull(document6);
      
      Document document7 = (Document)document2.addClass("A");
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document7.isBlock());
      assertEquals("#document", document7.nodeName());
      assertEquals(0, document7.siblingIndex());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("", document7.location());
      assertEquals(1, document7.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.hasParent());
      assertEquals("#root", document7.tagName());
      assertEquals("", document7.baseUri());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document4));
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document6);
      assertSame(document0, document1);
      assertSame(document0, document7);
      assertNotSame(document0, document5);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertSame(document1, document2);
      assertSame(document1, document7);
      assertNotSame(document1, document4);
      assertSame(document1, document6);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document4);
      assertSame(document2, document7);
      assertNotSame(document2, document5);
      assertSame(document7, document6);
      assertSame(document7, document1);
      assertSame(document7, document3);
      assertNotSame(document7, document5);
      assertNotSame(document7, document4);
      assertSame(document7, document2);
      assertSame(document7, document0);
      assertNotNull(document7);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Tag tag0 = Tag.valueOf("{L;gkgw&4-TB");
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("{L;gkgw&4-TB", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("{L;gkgw&4-TB", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode(")FXwjl ");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("{L;gkgw&4-TB", false);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      
      Attributes attributes2 = attributes1.put("Children collection to be inserted must not be null.", "Should not be reachable");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      
      String string0 = attributes0.get("#root");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Element element0 = new Element(tag0, "NIdns7s4TV]a98Z=rg;", attributes2);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("{L;gkgw&4-TB", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("{L;gkgw&4-TB", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("{L;gkgw&4-TB", element0.nodeName());
      assertEquals("NIdns7s4TV]a98Z=rg;", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("{L;gkgw&4-TB", element0.tagName());
      assertNotNull(element0);
      
      Elements elements0 = element0.getElementsByIndexGreaterThan(1924);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("{L;gkgw&4-TB", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("{L;gkgw&4-TB", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("{L;gkgw&4-TB", element0.nodeName());
      assertEquals("NIdns7s4TV]a98Z=rg;", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("{L;gkgw&4-TB", element0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(elements0);
      
      Elements elements1 = element0.getElementsByIndexGreaterThan(1924);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("{L;gkgw&4-TB", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("{L;gkgw&4-TB", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("{L;gkgw&4-TB", element0.nodeName());
      assertEquals("NIdns7s4TV]a98Z=rg;", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("{L;gkgw&4-TB", element0.tagName());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      MockFile mockFile0 = new MockFile((String) null, "Should not be reachable");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) attributes2;
      objectArray0[1] = (Object) elements0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) attributes1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) attributes1;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) cDataNode0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("Should not be reachable", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("Should not be reachable", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertEquals(8, objectArray0.length);
      assertNotNull(printWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertEquals(8, objectArray0.length);
      assertNotNull(mockPrintWriter1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      String string1 = element0.html();
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("{L;gkgw&4-TB", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("{L;gkgw&4-TB", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("{L;gkgw&4-TB", element0.nodeName());
      assertEquals("NIdns7s4TV]a98Z=rg;", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("{L;gkgw&4-TB", element0.tagName());
      assertTrue(string1.equals((Object)string0));
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals("", string1);
      assertNotNull(string1);
      
      Elements elements2 = element0.getElementsByAttributeValueEnding("{L;gkgw&4-TB", "H/lfpZS7kM2?HK~");
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("{L;gkgw&4-TB", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("{L;gkgw&4-TB", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("{L;gkgw&4-TB", element0.nodeName());
      assertEquals("NIdns7s4TV]a98Z=rg;", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("{L;gkgw&4-TB", element0.tagName());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      
      Elements elements3 = element0.getElementsByAttributeValueEnding("{L;gkgw&4-TB", ">BoPi4p.Oht");
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("{L;gkgw&4-TB", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("{L;gkgw&4-TB", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("{L;gkgw&4-TB", element0.nodeName());
      assertEquals("NIdns7s4TV]a98Z=rg;", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("{L;gkgw&4-TB", element0.tagName());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertNotNull(elements3);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parse("", "");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("zE30F+b4j4Z7", parseSettings0);
      assertEquals("zE30F+b4j4Z7", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("zE30F+b4j4Z7", tag0.toString());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, " />");
      assertEquals("zE30F+b4j4Z7", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("zE30F+b4j4Z7", tag0.toString());
      assertEquals("zE30F+b4j4Z7", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("zE30F+b4j4Z7", element0.tagName());
      assertEquals(" />", element0.baseUri());
      assertNotNull(element0);
      
      String string0 = element0.html();
      assertEquals("zE30F+b4j4Z7", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("zE30F+b4j4Z7", tag0.toString());
      assertEquals("zE30F+b4j4Z7", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("zE30F+b4j4Z7", element0.tagName());
      assertEquals(" />", element0.baseUri());
      assertEquals("", string0);
      assertNotNull(string0);
      
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("&*)*1X:II:%", true);
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertNotNull(xmlDeclaration0);
      
      Element element1 = element0.prependChild(xmlDeclaration0);
      assertEquals("zE30F+b4j4Z7", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("zE30F+b4j4Z7", tag0.toString());
      assertEquals("zE30F+b4j4Z7", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("zE30F+b4j4Z7", element0.tagName());
      assertEquals(" />", element0.baseUri());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertTrue(xmlDeclaration0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("zE30F+b4j4Z7", element1.tagName());
      assertEquals(" />", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("zE30F+b4j4Z7", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      // Undeclared exception!
      try { 
        element0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document1.children();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      
      Document document2 = (Document)document1.text("");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(linkedHashSet0);
      
      Document document3 = new Document("");
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertNotNull(document3);
      
      Document document4 = (Document)document3.doClone(document2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("", document4.location());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.childNodeSize());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document4);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotNull(document4);
      
      String string0 = document2.ownText();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document3));
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = document0.hasText();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertFalse(boolean0);
      
      boolean boolean1 = linkedHashSet0.add("");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedHashSet0.contains(string0));
      assertTrue(boolean1);
      
      Node[] nodeArray0 = new Node[0];
      document0.addChildren(nodeArray0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertEquals(0, nodeArray0.length);
      
      Document document5 = (Document)document1.val("{-q@H+9sdVI|0");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document5.location());
      assertFalse(document5.isBlock());
      assertEquals("", document5.baseUri());
      assertFalse(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertNotSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document5);
      assertSame(document5, document2);
      assertSame(document5, document1);
      assertNotSame(document5, document3);
      assertSame(document5, document0);
      assertNotSame(document5, document4);
      assertNotNull(document5);
      
      Document document6 = (Document)document1.append("");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertEquals("", document6.baseUri());
      assertFalse(document6.isBlock());
      assertEquals("#document", document6.nodeName());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("", document6.location());
      assertEquals(1, document6.childNodeSize());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document4));
      assertNotSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document6);
      assertSame(document1, document5);
      assertSame(document6, document2);
      assertSame(document6, document0);
      assertNotSame(document6, document3);
      assertSame(document6, document5);
      assertNotSame(document6, document4);
      assertSame(document6, document1);
      assertNotNull(document6);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Document document7 = Parser.parseBodyFragment("{-q@H+9sdVI|0", "");
      assertEquals("", document7.location());
      assertFalse(document7.hasParent());
      assertEquals("#root", document7.tagName());
      assertFalse(document7.isBlock());
      assertEquals("", document7.baseUri());
      assertEquals(0, document7.siblingIndex());
      assertEquals("#document", document7.nodeName());
      assertEquals(1, document7.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.updateMetaCharsetElement());
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document5));
      assertNotSame(document7, document3);
      assertNotSame(document7, document6);
      assertNotSame(document7, document1);
      assertNotSame(document7, document0);
      assertNotSame(document7, document2);
      assertNotSame(document7, document4);
      assertNotSame(document7, document5);
      assertNotNull(document7);
      
      Document document8 = (Document)document5.empty();
      assertEquals("#document", document8.nodeName());
      assertFalse(document8.isBlock());
      assertEquals(0, document8.siblingIndex());
      assertEquals("", document8.baseUri());
      assertFalse(document8.hasParent());
      assertEquals("#root", document8.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertEquals("", document8.location());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals(0, document8.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document5.location());
      assertFalse(document5.isBlock());
      assertEquals("", document5.baseUri());
      assertFalse(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.childNodeSize());
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document7));
      assertFalse(document5.equals((Object)document4));
      assertNotSame(document8, document4);
      assertSame(document8, document5);
      assertSame(document8, document6);
      assertSame(document8, document0);
      assertSame(document8, document2);
      assertNotSame(document8, document3);
      assertNotSame(document8, document7);
      assertSame(document8, document1);
      assertNotSame(document0, document4);
      assertSame(document0, document5);
      assertNotSame(document0, document7);
      assertSame(document0, document8);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document8);
      assertSame(document1, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document6);
      assertNotSame(document1, document7);
      assertSame(document1, document5);
      assertSame(document5, document6);
      assertSame(document5, document2);
      assertSame(document5, document1);
      assertSame(document5, document8);
      assertNotSame(document5, document3);
      assertSame(document5, document0);
      assertNotSame(document5, document7);
      assertNotSame(document5, document4);
      assertNotNull(document8);
      
      Pattern pattern0 = Pattern.compile("");
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements1 = document2.getElementsByAttributeValueMatching("", pattern0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document7));
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document3));
      assertNotSame(document0, document4);
      assertSame(document0, document5);
      assertNotSame(document0, document7);
      assertSame(document0, document8);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document8);
      assertSame(document1, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document6);
      assertNotSame(document1, document7);
      assertSame(document1, document5);
      assertNotSame(elements1, elements0);
      assertSame(document2, document6);
      assertNotSame(document2, document4);
      assertNotSame(document2, document7);
      assertSame(document2, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document8);
      assertSame(document2, document1);
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document1.children();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      
      Document document2 = (Document)document1.text("");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(linkedHashSet0);
      
      Document document3 = document0.normalise();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotNull(document3);
      
      Document document4 = (Document)document3.doClone(document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("", document4.baseUri());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals("", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotNull(document4);
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = document0.hasText();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.equals((Object)document4));
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertFalse(boolean0);
      
      boolean boolean1 = linkedHashSet0.add("LlNal9v7q[54eH!Yz<");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(linkedHashSet0.contains(string0));
      assertTrue(linkedHashSet0.contains("LlNal9v7q[54eH!Yz<"));
      assertTrue(boolean1);
      
      Node[] nodeArray0 = new Node[0];
      document0.addChildren(nodeArray0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.equals((Object)document4));
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertEquals(0, nodeArray0.length);
      
      Document document5 = (Document)document1.val("{-q@H+9sdVI|0");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertEquals("", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(1, document5.childNodeSize());
      assertEquals("", document5.baseUri());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document5.equals((Object)document4));
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document2);
      assertSame(document5, document1);
      assertSame(document5, document2);
      assertSame(document5, document3);
      assertNotSame(document5, document4);
      assertSame(document5, document0);
      assertNotNull(document5);
      
      Document document6 = (Document)document1.append("");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document6.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("", document6.baseUri());
      assertFalse(document6.updateMetaCharsetElement());
      assertFalse(document6.hasParent());
      assertFalse(document6.isBlock());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#document", document6.nodeName());
      assertEquals("", document6.location());
      assertEquals("#root", document6.tagName());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document6.equals((Object)document4));
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document2);
      assertSame(document1, document6);
      assertNotSame(document6, document4);
      assertSame(document6, document0);
      assertSame(document6, document1);
      assertSame(document6, document5);
      assertSame(document6, document3);
      assertSame(document6, document2);
      assertNotNull(document6);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Document document7 = (Document)document4.before((Node) document1);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("", document4.baseUri());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals("", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document7.childNodeSize());
      assertEquals("#root", document7.tagName());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertEquals("", document7.baseUri());
      assertFalse(document7.isBlock());
      assertEquals(0, document7.siblingIndex());
      assertTrue(document7.hasParent());
      assertEquals("", document7.location());
      assertEquals("#document", document7.nodeName());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document6));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document5));
      assertNotSame(document0, document7);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document2);
      assertNotSame(document1, document7);
      assertSame(document1, document6);
      assertNotSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document5);
      assertNotSame(document2, document7);
      assertSame(document2, document6);
      assertNotSame(document3, document4);
      assertSame(document3, document0);
      assertNotSame(document3, document7);
      assertSame(document3, document2);
      assertSame(document3, document6);
      assertSame(document3, document5);
      assertSame(document3, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document5);
      assertNotSame(document4, document0);
      assertSame(document4, document7);
      assertNotSame(document4, document2);
      assertNotSame(document4, document6);
      assertNotSame(document7, document3);
      assertNotSame(document7, document0);
      assertNotSame(document7, document2);
      assertNotSame(document7, document6);
      assertSame(document7, document4);
      assertNotSame(document7, document1);
      assertNotSame(document7, document5);
      assertNotNull(document7);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document document8 = document7.outputSettings(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document8.tagName());
      assertEquals(1, document8.childNodeSize());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertFalse(document8.isBlock());
      assertEquals("#document", document8.nodeName());
      assertTrue(document8.hasParent());
      assertEquals("", document8.baseUri());
      assertEquals("", document8.location());
      assertEquals(0, document8.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("", document4.baseUri());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals("", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document7.childNodeSize());
      assertEquals("#root", document7.tagName());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertEquals("", document7.baseUri());
      assertFalse(document7.isBlock());
      assertEquals(0, document7.siblingIndex());
      assertTrue(document7.hasParent());
      assertEquals("", document7.location());
      assertEquals("#document", document7.nodeName());
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document5));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document8.equals((Object)document0));
      assertFalse(document8.equals((Object)document6));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document7));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document6));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document5));
      assertNotSame(document0, document7);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document0, document8);
      assertSame(document0, document6);
      assertSame(document0, document3);
      assertNotSame(document8, document3);
      assertNotSame(document8, document5);
      assertNotSame(document8, document1);
      assertNotSame(document8, document0);
      assertNotSame(document8, document6);
      assertSame(document8, document4);
      assertNotSame(document8, document2);
      assertSame(document8, document7);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document1, document8);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document2);
      assertNotSame(document1, document7);
      assertSame(document1, document6);
      assertNotSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document5);
      assertNotSame(document2, document7);
      assertSame(document2, document6);
      assertNotSame(document2, document8);
      assertNotSame(document3, document4);
      assertSame(document3, document0);
      assertNotSame(document3, document7);
      assertSame(document3, document2);
      assertSame(document3, document6);
      assertSame(document3, document5);
      assertNotSame(document3, document8);
      assertSame(document3, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document8);
      assertNotSame(document4, document1);
      assertNotSame(document4, document5);
      assertNotSame(document4, document0);
      assertSame(document4, document7);
      assertNotSame(document4, document2);
      assertNotSame(document4, document6);
      assertNotSame(document7, document3);
      assertNotSame(document7, document0);
      assertNotSame(document7, document2);
      assertNotSame(document7, document6);
      assertSame(document7, document4);
      assertSame(document7, document8);
      assertNotSame(document7, document1);
      assertNotSame(document7, document5);
      assertNotNull(document8);
      
      Document document9 = (Document)document8.appendText("_8Mp8-");
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document8.tagName());
      assertEquals(2, document8.childNodeSize());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertFalse(document8.isBlock());
      assertEquals("#document", document8.nodeName());
      assertTrue(document8.hasParent());
      assertEquals("", document8.baseUri());
      assertEquals("", document8.location());
      assertEquals(0, document8.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document9.tagName());
      assertEquals("", document9.location());
      assertFalse(document9.isBlock());
      assertEquals("", document9.baseUri());
      assertEquals("#document", document9.nodeName());
      assertEquals(0, document9.siblingIndex());
      assertTrue(document9.hasParent());
      assertEquals(2, document9.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document9.quirksMode());
      assertFalse(document9.updateMetaCharsetElement());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(2, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("", document4.baseUri());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals("", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(2, document7.childNodeSize());
      assertEquals("#root", document7.tagName());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertEquals("", document7.baseUri());
      assertFalse(document7.isBlock());
      assertEquals(0, document7.siblingIndex());
      assertTrue(document7.hasParent());
      assertEquals("", document7.location());
      assertEquals("#document", document7.nodeName());
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document5));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document8.equals((Object)document0));
      assertFalse(document8.equals((Object)document6));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document9.equals((Object)document1));
      assertFalse(document9.equals((Object)document3));
      assertFalse(document9.equals((Object)document5));
      assertFalse(document9.equals((Object)document0));
      assertFalse(document9.equals((Object)document2));
      assertFalse(document9.equals((Object)document6));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document7));
      assertFalse(document3.equals((Object)document8));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document6));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document5));
      assertNotSame(document0, document7);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document0, document8);
      assertSame(document0, document6);
      assertNotSame(document0, document9);
      assertSame(document0, document3);
      assertNotSame(document8, document3);
      assertNotSame(document8, document5);
      assertNotSame(document8, document1);
      assertNotSame(document8, document0);
      assertNotSame(document8, document6);
      assertSame(document8, document4);
      assertSame(document8, document9);
      assertNotSame(document8, document2);
      assertSame(document8, document7);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document1, document8);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document2);
      assertNotSame(document1, document9);
      assertNotSame(document1, document7);
      assertSame(document1, document6);
      assertNotSame(document9, document1);
      assertNotSame(document9, document3);
      assertNotSame(document9, document5);
      assertNotSame(document9, document0);
      assertSame(document9, document7);
      assertNotSame(document9, document2);
      assertSame(document9, document8);
      assertSame(document9, document4);
      assertNotSame(document9, document6);
      assertNotSame(document2, document4);
      assertNotSame(document2, document9);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document5);
      assertNotSame(document2, document7);
      assertSame(document2, document6);
      assertNotSame(document2, document8);
      assertNotSame(document3, document4);
      assertSame(document3, document0);
      assertNotSame(document3, document9);
      assertNotSame(document3, document7);
      assertSame(document3, document2);
      assertSame(document3, document6);
      assertSame(document3, document5);
      assertNotSame(document3, document8);
      assertSame(document3, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document8);
      assertNotSame(document4, document1);
      assertNotSame(document4, document5);
      assertNotSame(document4, document0);
      assertSame(document4, document7);
      assertNotSame(document4, document2);
      assertSame(document4, document9);
      assertNotSame(document4, document6);
      assertNotSame(document7, document3);
      assertSame(document7, document9);
      assertNotSame(document7, document0);
      assertNotSame(document7, document2);
      assertNotSame(document7, document6);
      assertSame(document7, document4);
      assertSame(document7, document8);
      assertNotSame(document7, document1);
      assertNotSame(document7, document5);
      assertNotNull(document9);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Tag tag0 = Tag.valueOf("{L;gkgw&4-TB");
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("{L;gkgw&4-TB", tag0.toString());
      assertEquals("{L;gkgw&4-TB", tag0.getName());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode(")FXwjl ");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("{L;gkgw&4-TB", false);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      
      Attributes attributes2 = attributes1.put("Children collection to be inserted must not be null.", "Should not be reachable");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      
      String string0 = attributes0.get("#root");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Element element0 = new Element(tag0, "NIdns7s4TV]a98Z=rg;", attributes2);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("{L;gkgw&4-TB", tag0.toString());
      assertEquals("{L;gkgw&4-TB", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertFalse(element0.isBlock());
      assertEquals("NIdns7s4TV]a98Z=rg;", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("{L;gkgw&4-TB", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("{L;gkgw&4-TB", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Elements elements0 = element0.getElementsByIndexGreaterThan(1924);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("{L;gkgw&4-TB", tag0.toString());
      assertEquals("{L;gkgw&4-TB", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertFalse(element0.isBlock());
      assertEquals("NIdns7s4TV]a98Z=rg;", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("{L;gkgw&4-TB", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("{L;gkgw&4-TB", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(elements0);
      
      Elements elements1 = element0.getElementsByIndexGreaterThan(1924);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("{L;gkgw&4-TB", tag0.toString());
      assertEquals("{L;gkgw&4-TB", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertFalse(element0.isBlock());
      assertEquals("NIdns7s4TV]a98Z=rg;", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("{L;gkgw&4-TB", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("{L;gkgw&4-TB", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Document document0 = new Document("Children collection to be inserted must not be null.");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = (Document)document1.val("#root");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      
      Attributes attributes3 = document0.attributes();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, attributes3.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertNotNull(attributes3);
      
      Document document3 = (Document)document1.appendText("org.jsoup.nodes.Node");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Children collection to be inserted must not be null.", document1.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Children collection to be inserted must not be null.", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document3.location());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotNull(document3);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parse("textara", "textara");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textara", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("textara", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = Parser.parse("textara", "textara");
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("textara", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("textara", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Attributes attributes0 = document1.attributes();
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("textara", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("textara", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, attributes0.size());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(attributes0);
      
      Document document2 = (Document)document0.appendText("textara");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textara", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("textara", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("textara", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("textara", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document1.children();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      
      Document document2 = (Document)document0.text(":7*g\"`?o1nPuKoq2");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(string0));
      assertNotNull(linkedHashSet0);
      
      Document document3 = (Document)document0.classNames((Set<String>) linkedHashSet0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertEquals("", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertFalse(linkedHashSet0.contains(string0));
      assertNotNull(document3);
      
      Document document4 = (Document)document0.doClone(document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals("", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertTrue(document4.hasParent());
      assertEquals("", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotNull(document4);
      
      String string1 = document3.ownText();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertEquals("", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document3.equals((Object)document4));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document4);
      assertFalse(linkedHashSet0.contains(string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "";
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      String string3 = "textarea";
      Document document5 = parser0.parseInput(":7*g\"`?o1nPuKoq2", "textarea");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document5.hasParent());
      assertEquals("textarea", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertEquals("textarea", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertNotSame(document5, document3);
      assertNotSame(document5, document2);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotNull(document5);
      
      boolean boolean0 = document5.hasText();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document5.hasParent());
      assertEquals("textarea", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertEquals("textarea", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertNotSame(document5, document3);
      assertNotSame(document5, document2);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertTrue(boolean0);
      
      boolean boolean1 = linkedHashSet0.add("FS#rL8d+q!6t2j");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedHashSet0.contains("FS#rL8d+q!6t2j"));
      assertFalse(linkedHashSet0.contains("textarea"));
      assertTrue(boolean1);
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document2;
      document1.addChildren(nodeArray0);
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("", document1.location());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertNotSame(document0, document5);
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertSame(document1, document0);
      assertEquals(1, nodeArray0.length);
      
      Document document6 = (Document)document5.val("textarea");
      assertEquals("textarea", document6.baseUri());
      assertFalse(document6.isBlock());
      assertEquals("#document", document6.nodeName());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertEquals(1, document6.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("textarea", document6.location());
      assertFalse(document6.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document5.hasParent());
      assertEquals("textarea", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertEquals("textarea", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertNotSame(document6, document0);
      assertNotSame(document6, document1);
      assertNotSame(document6, document4);
      assertNotSame(document6, document2);
      assertNotSame(document6, document3);
      assertSame(document6, document5);
      assertNotSame(document5, document3);
      assertNotSame(document5, document2);
      assertSame(document5, document6);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotNull(document6);
      
      // Undeclared exception!
      document1.append("D~P");
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document1.children();
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      
      Document document2 = (Document)document1.text("<bsG/7DA_^Wy/RdJ^&");
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(linkedHashSet0);
      
      Document document3 = (Document)document0.classNames((Set<String>) linkedHashSet0);
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(document3);
      
      Document document4 = (Document)document3.doClone(document1);
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("", document4.baseUri());
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document4);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(document4);
      
      String string0 = document3.ownText();
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document3.equals((Object)document4));
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document4);
      assertFalse(linkedHashSet0.contains(string0));
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = document1.hasText();
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertTrue(boolean0);
      
      boolean boolean1 = linkedHashSet0.add("wIxO :v");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedHashSet0.contains(string0));
      assertTrue(linkedHashSet0.contains("wIxO :v"));
      assertTrue(boolean1);
      
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document2;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document2;
      nodeArray0[3] = (Node) document2;
      nodeArray0[4] = (Node) document1;
      nodeArray0[5] = (Node) document4;
      nodeArray0[6] = (Node) document0;
      document0.addChildren(nodeArray0);
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.equals((Object)document4));
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertEquals(7, nodeArray0.length);
      
      // Undeclared exception!
      document1.val("");
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = "zE30F+b4j4Z7";
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Document document0 = Document.createShell("zE30F+b4j4Z7");
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document1.siblingElements();
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(elements0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      String string1 = "textarea";
      // Undeclared exception!
      try { 
        parser0.parseInput((Reader) pipedReader0, "textarea");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$5+6bm");
      assertFalse(boolean0);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("$5+6bm", parseSettings0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("$5+6bm", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertEquals("$5+6bm", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      String string0 = parseSettings0.normalizeTag("A]p$NOhU<");
      assertEquals("A]p$NOhU<", string0);
      assertNotNull(string0);
      
      Attributes attributes1 = attributes0.put("!]wQFPU6Iu", false);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      
      Element element0 = new Element(tag0, "textarea", attributes1);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("$5+6bm", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertEquals("$5+6bm", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertEquals("$5+6bm", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("$5+6bm", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.append("org.jsoup.nodes.Element$NodeList");
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("$5+6bm", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertEquals("$5+6bm", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertEquals("$5+6bm", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("$5+6bm", element0.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("textarea", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("$5+6bm", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("$5+6bm", element1.nodeName());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Elements elements0 = element0.getElementsContainingOwnText("BeforeDoctypeName");
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("$5+6bm", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertEquals("$5+6bm", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertEquals("$5+6bm", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("$5+6bm", element0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(element0, element1);
      assertNotNull(elements0);
      
      Element element2 = element0.append("code");
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("$5+6bm", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertEquals("$5+6bm", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals("textarea", element0.baseUri());
      assertEquals(2, element0.childNodeSize());
      assertEquals("$5+6bm", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("$5+6bm", element0.tagName());
      assertEquals("$5+6bm", element2.nodeName());
      assertEquals("textarea", element2.baseUri());
      assertEquals(2, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals("$5+6bm", element2.tagName());
      assertFalse(element2.isBlock());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Tag tag0 = Tag.valueOf("{L;gkgw&4-TB");
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("{L;gkgw&4-TB", tag0.toString());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("{L;gkgw&4-TB", tag0.getName());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode(")FXwjl ");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("{L;gkgw&4-TB", false);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      
      Attributes attributes2 = attributes1.put("Children collection to be inserted must not be null.", "Should not be reachable");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      
      String string0 = attributes0.get("#root");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Element element0 = new Element(tag0, "NIdns7s4TV]a98Z=rg;", attributes2);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("{L;gkgw&4-TB", tag0.toString());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("{L;gkgw&4-TB", tag0.getName());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("NIdns7s4TV]a98Z=rg;", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("{L;gkgw&4-TB", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("{L;gkgw&4-TB", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Elements elements0 = element0.getElementsByIndexGreaterThan(1924);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("{L;gkgw&4-TB", tag0.toString());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("{L;gkgw&4-TB", tag0.getName());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("NIdns7s4TV]a98Z=rg;", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("{L;gkgw&4-TB", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("{L;gkgw&4-TB", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(elements0);
      
      Elements elements1 = element0.getElementsByIndexGreaterThan(1924);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("{L;gkgw&4-TB", tag0.toString());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("{L;gkgw&4-TB", tag0.getName());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("NIdns7s4TV]a98Z=rg;", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("{L;gkgw&4-TB", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("{L;gkgw&4-TB", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      MockFile mockFile0 = new MockFile((String) null, "Should not be reachable");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) attributes2;
      objectArray0[1] = (Object) elements0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) attributes1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) attributes1;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) cDataNode0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals("Should not be reachable", mockFile0.toString());
      assertEquals("Should not be reachable", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertSame(printWriter0, mockPrintWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertEquals(8, objectArray0.length);
      assertNotNull(printWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertEquals(8, objectArray0.length);
      assertNotNull(mockPrintWriter1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(true);
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(false);
      assertFalse(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotNull(document_OutputSettings3);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.charset(charset0);
      assertFalse(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.outline());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertNotNull(document_OutputSettings4);
      
      element0.outerHtmlHead(mockPrintWriter1, 1, document_OutputSettings4);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("{L;gkgw&4-TB", tag0.toString());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("{L;gkgw&4-TB", tag0.getName());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("NIdns7s4TV]a98Z=rg;", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("{L;gkgw&4-TB", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("{L;gkgw&4-TB", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals("Should not be reachable", mockFile0.toString());
      assertEquals("Should not be reachable", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.outline());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(printWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(printWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, printWriter0);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parse("klsI z2=1K^}m", "klsI z2=1K^}m");
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      String string0 = "";
      String string1 = document0.ownText();
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      List<DataNode> list0 = new LinkedList<DataNode>();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Elements elements0 = document0.getElementsByAttribute("klsI z2=1K^}m");
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("klsI z2=1K^}m", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("klsI z2=1K^}m", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("'L2R'So7o[", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.val("textarea");
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertEquals("textarea", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Attributes attributes0 = document1.attributes();
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertEquals("textarea", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, attributes0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(attributes0);
      
      Document document2 = (Document)document0.appendText("textarea");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("textarea", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("textarea", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document1.children();
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(linkedHashSet0);
      
      Document document2 = (Document)document1.classNames((Set<String>) linkedHashSet0);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(document2);
      
      Document document3 = (Document)document2.doClone(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(document3);
      
      String string0 = document1.ownText();
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = document0.hasText();
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.equals((Object)document3));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertFalse(boolean0);
      
      boolean boolean1 = linkedHashSet0.add("");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedHashSet0.contains(string0));
      assertTrue(boolean1);
      
      Node[] nodeArray0 = new Node[0];
      document0.addChildren(nodeArray0);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.equals((Object)document3));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertEquals(0, nodeArray0.length);
      
      Document document4 = (Document)document1.val("{-q@H+9sdVI|0");
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertEquals("", document4.baseUri());
      assertFalse(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertNotNull(document4);
      
      Document document5 = Document.createShell("");
      assertEquals("", document5.location());
      assertFalse(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals("", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotNull(document5);
      
      Document document6 = (Document)document3.val("fallback");
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("", document6.baseUri());
      assertEquals("", document6.location());
      assertEquals("#root", document6.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("#document", document6.nodeName());
      assertEquals(1, document6.childNodeSize());
      assertTrue(document6.hasParent());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document4));
      assertNotSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document6);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document6);
      assertSame(document1, document4);
      assertNotSame(document1, document5);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document5);
      assertNotSame(document2, document6);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertSame(document3, document6);
      assertNotSame(document3, document0);
      assertNotSame(document3, document4);
      assertNotSame(document3, document5);
      assertNotSame(document6, document1);
      assertNotSame(document6, document5);
      assertNotSame(document6, document2);
      assertNotSame(document6, document0);
      assertNotSame(document6, document4);
      assertSame(document6, document3);
      assertTrue(linkedHashSet0.contains(""));
      assertFalse(linkedHashSet0.contains("{-q@H+9sdVI|0"));
      assertNotNull(document6);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      
      Parser parser2 = parser1.setTrackErrors((-1057));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertNotNull(parser2);
      
      Document document0 = parser0.parseInput("", "");
      assertFalse(parser0.isTrackErrors());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertNotNull(document0);
      
      ParseSettings parseSettings1 = ParseSettings.htmlDefault;
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertNotSame(parseSettings1, parseSettings0);
      assertNotNull(parseSettings1);
      
      String string0 = "4{$>stz$5ZJzP";
      String string1 = parseSettings1.normalizeAttribute("4{$>stz$5ZJzP");
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(parseSettings1, parseSettings0);
      assertEquals("4{$>stz$5zjzp", string1);
      assertNotNull(string1);
      
      Parser parser3 = Parser.xmlParser();
      assertFalse(parser3.isTrackErrors());
      assertFalse(parser3.equals((Object)parser1));
      assertFalse(parser3.equals((Object)parser2));
      assertFalse(parser3.equals((Object)parser0));
      assertNotSame(parser3, parser1);
      assertNotSame(parser3, parser2);
      assertNotSame(parser3, parser0);
      assertNotNull(parser3);
      
      Parser parser4 = parser1.settings(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser4.isTrackErrors());
      assertFalse(parser0.equals((Object)parser3));
      assertFalse(parseSettings0.equals((Object)parseSettings1));
      assertFalse(parser1.equals((Object)parser3));
      assertFalse(parser4.equals((Object)parser3));
      assertSame(parser0, parser4);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertNotSame(parser0, parser3);
      assertNotSame(parseSettings0, parseSettings1);
      assertSame(parser1, parser4);
      assertSame(parser1, parser2);
      assertNotSame(parser1, parser3);
      assertSame(parser1, parser0);
      assertSame(parser4, parser2);
      assertNotSame(parser4, parser3);
      assertSame(parser4, parser1);
      assertSame(parser4, parser0);
      assertNotNull(parser4);
      
      String string2 = "ZokqjKi=q@mhE]M5>}";
      Document document1 = Parser.parseBodyFragment("", "5$C\"=2U,");
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("5$C\"=2U,", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("5$C\"=2U,", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Element element0 = document0.body();
      assertFalse(parser0.isTrackErrors());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(parser0.equals((Object)parser3));
      assertFalse(document0.equals((Object)document1));
      assertSame(parser0, parser4);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertNotSame(parser0, parser3);
      assertNotSame(document0, document1);
      assertNotNull(element0);
      
      Attributes attributes0 = element0.attributes();
      assertFalse(parser0.isTrackErrors());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(0, attributes0.size());
      assertFalse(parser0.equals((Object)parser3));
      assertFalse(document0.equals((Object)document1));
      assertSame(parser0, parser4);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertNotSame(parser0, parser3);
      assertNotSame(document0, document1);
      assertNotNull(attributes0);
      
      Element element1 = element0.attr(".6Hf", "");
      assertFalse(parser0.isTrackErrors());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertFalse(parser0.equals((Object)parser3));
      assertFalse(document0.equals((Object)document1));
      assertSame(parser0, parser4);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertNotSame(parser0, parser3);
      assertNotSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Document document2 = new Document("");
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      
      int int0 = document2.childNodeSize();
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        document0.before((Node) element1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("zE30F+b4j4Z7", parseSettings0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("zE30F+b4j4Z7", tag0.getName());
      assertEquals("zE30F+b4j4Z7", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "");
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("zE30F+b4j4Z7", tag0.getName());
      assertEquals("zE30F+b4j4Z7", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("zE30F+b4j4Z7", element0.tagName());
      assertEquals("zE30F+b4j4Z7", element0.nodeName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      String string0 = element0.html();
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("zE30F+b4j4Z7", tag0.getName());
      assertEquals("zE30F+b4j4Z7", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("zE30F+b4j4Z7", element0.tagName());
      assertEquals("zE30F+b4j4Z7", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        element0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("zE30F+b4j4Z7", ":containsOwn");
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(":containsOwn", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(":containsOwn", document0.location());
      assertNotNull(document0);
      
      String string0 = document0.ownText();
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(":containsOwn", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(":containsOwn", document0.location());
      assertEquals("zE30F+b4j4Z7", string0);
      assertNotNull(string0);
      
      List<DataNode> list0 = document0.dataNodes();
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(":containsOwn", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(":containsOwn", document0.location());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("klsIeXs z2=1K^}m", "klsIeXs z2=1K^}m");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("klsIeXs z2=1K^}m", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("klsIeXs z2=1K^}m", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByAttribute("klsIeXs z2=1K^}m");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("klsIeXs z2=1K^}m", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("klsIeXs z2=1K^}m", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Elements elements1 = document0.getElementsByAttributeValueMatching("", (Pattern) null);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("klsIeXs z2=1K^}m", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("klsIeXs z2=1K^}m", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors(0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      
      Document document0 = parser1.parseInput("d@", "d@");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("d@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("d@", document0.baseUri());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(document0);
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      String string0 = parseSettings0.normalizeAttribute(".6Hf");
      assertEquals(".6hf", string0);
      assertNotNull(string0);
      
      Parser parser2 = Parser.xmlParser();
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser2.equals((Object)parser0));
      assertFalse(parser2.equals((Object)parser1));
      assertNotSame(parser2, parser0);
      assertNotSame(parser2, parser1);
      assertNotNull(parser2);
      
      Parser parser3 = parser1.settings(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser3.isTrackErrors());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertFalse(parser3.equals((Object)parser2));
      assertNotSame(parser0, parser2);
      assertSame(parser0, parser3);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser3);
      assertNotSame(parser1, parser2);
      assertSame(parser3, parser0);
      assertSame(parser3, parser1);
      assertNotSame(parser3, parser2);
      assertNotNull(parser3);
      
      Document document1 = Parser.parseBodyFragment(".6Hf", "ZokqjKi=q@mhE]M5>}");
      assertEquals("ZokqjKi=q@mhE]M5>}", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("ZokqjKi=q@mhE]M5>}", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Element element0 = document0.body();
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("d@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("d@", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertEquals("d@", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(parser0, parser2);
      assertSame(parser0, parser3);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser3);
      assertNotSame(parser1, parser2);
      assertNotSame(document0, document1);
      assertNotNull(element0);
      
      Attributes attributes0 = element0.attributes();
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("d@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("d@", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertEquals("d@", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, attributes0.size());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(parser0, parser2);
      assertSame(parser0, parser3);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser3);
      assertNotSame(parser1, parser2);
      assertNotSame(document0, document1);
      assertNotNull(attributes0);
      
      Element element1 = element0.attr(".6Hf", true);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("d@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("d@", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertEquals("d@", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("d@", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertFalse(parser0.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(parser0, parser2);
      assertSame(parser0, parser3);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser3);
      assertNotSame(parser1, parser2);
      assertNotSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueNot("class", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = "A.eHBLi`&JC[@w";
      Document document0 = Parser.parse("A.eHBLi`&JC[@w", "A.eHBLi`&JC[@w");
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      Elements elements0 = document0.getElementsByAttributeValueStarting("A.eHBLi`&JC[@w", "A.eHBLi`&JC[@w");
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = element0.getElementsByTag("A.eHBLi`&JC[@w");
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("A.eHBLi`&JC[@w", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Elements elements2 = document0.getElementsByClass("meta");
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      
      Element element1 = document0.nextElementSibling();
      assertEquals("#document", document0.nodeName());
      assertEquals("A.eHBLi`&JC[@w", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("A.eHBLi`&JC[@w", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNull(element1);
      
      // Undeclared exception!
      try { 
        document0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = "^.:50&3";
      Document document0 = Parser.parseBodyFragment(":,l5#UJxR&2l.", "^.:50&3");
      assertFalse(document0.isBlock());
      assertEquals("^.:50&3", document0.baseUri());
      assertEquals("^.:50&3", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertFalse(document0.isBlock());
      assertEquals("^.:50&3", document0.baseUri());
      assertEquals("^.:50&3", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("^.:50&3", document1.location());
      assertEquals("^.:50&3", document1.baseUri());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ":,l5#UJxR&2l.");
      assertEquals(14, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(14, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(14, charBuffer0.limit());
      assertEquals(":,l5#UJxR&2l.", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(14, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      int int0 = 0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValue("", "_>2]KsB_euLj3MzG9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = new Document("button");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("button", document0.location());
      assertEquals("button", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("button", document0.location());
      assertEquals("button", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("button", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("button", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      
      Document document2 = document1.clone();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("button", document0.location());
      assertEquals("button", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("button", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("button", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("button", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("button", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      
      Element element0 = document0.body();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("button", document0.location());
      assertEquals("button", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.equals((Object)document2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNull(element0);
      
      Document document3 = (Document)document2.doClone(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("button", document0.location());
      assertEquals("button", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("button", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("button", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("button", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("button", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, document3.siblingIndex());
      assertEquals("button", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals("button", document3.location());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotNull(document3);
      
      document3.doSetBaseUri("org.jsoup.select.Evaluator$IsNthLastChild");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("button", document0.location());
      assertEquals("button", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("button", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("button", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("button", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("button", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$IsNthLastChild", document3.baseUri());
      assertEquals(0, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals("button", document3.location());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = "value";
      Document document0 = Parser.parse("OB&n-cMCSczUoZS~)>k", "value");
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.baseUri());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByAttributeStarting("value");
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "value");
      assertEquals("value", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, (-3129.65316));
      assertEquals("-3129.65316value", stringBuilder0.toString());
      assertEquals("-3129.65316value", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder1.append(false);
      assertEquals("-3129.65316valuefalse", stringBuilder0.toString());
      assertEquals("-3129.65316valuefalse", stringBuilder1.toString());
      assertEquals("-3129.65316valuefalse", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotNull(stringBuilder2);
      
      StringBuilder stringBuilder3 = stringBuilder2.append(0);
      assertEquals("-3129.65316valuefalse0", stringBuilder0.toString());
      assertEquals("-3129.65316valuefalse0", stringBuilder1.toString());
      assertEquals("-3129.65316valuefalse0", stringBuilder2.toString());
      assertEquals("-3129.65316valuefalse0", stringBuilder3.toString());
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertNotNull(stringBuilder3);
      
      char[] charArray0 = new char[5];
      String string1 = document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.baseUri());
      assertFalse(string1.equals((Object)string0));
      assertEquals("#root", string1);
      assertNotNull(string1);
      
      charArray0[0] = 'O';
      charArray0[1] = '$';
      charArray0[2] = ']';
      charArray0[3] = '5';
      charArray0[4] = '/';
      StringBuilder stringBuilder4 = stringBuilder3.insert(0, charArray0);
      assertEquals("O$]5/-3129.65316valuefalse0", stringBuilder0.toString());
      assertEquals("O$]5/-3129.65316valuefalse0", stringBuilder1.toString());
      assertEquals("O$]5/-3129.65316valuefalse0", stringBuilder2.toString());
      assertEquals("O$]5/-3129.65316valuefalse0", stringBuilder3.toString());
      assertEquals("O$]5/-3129.65316valuefalse0", stringBuilder4.toString());
      assertArrayEquals(new char[] {'O', '$', ']', '5', '/'}, charArray0);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder2);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder3);
      assertEquals(5, charArray0.length);
      assertNotNull(stringBuilder4);
      
      // Undeclared exception!
      try { 
        document0.indent(stringBuilder4, 125, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = "OB&n-cMCSczUoZS~)>k";
      String string1 = "value";
      Document document0 = Parser.parse("OB&n-cMCSczUoZS~)>k", "value");
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByAttributeStarting("value");
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "value");
      assertEquals("value", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = 0;
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, (-3129.65316));
      assertEquals("-3129.65316value", stringBuilder0.toString());
      assertEquals("-3129.65316value", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      
      StringBuilder stringBuilder2 = stringBuilder1.append(false);
      assertEquals("-3129.65316valuefalse", stringBuilder0.toString());
      assertEquals("-3129.65316valuefalse", stringBuilder1.toString());
      assertEquals("-3129.65316valuefalse", stringBuilder2.toString());
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotNull(stringBuilder2);
      
      StringBuilder stringBuilder3 = stringBuilder2.append(0);
      assertEquals("-3129.65316valuefalse0", stringBuilder0.toString());
      assertEquals("-3129.65316valuefalse0", stringBuilder1.toString());
      assertEquals("-3129.65316valuefalse0", stringBuilder2.toString());
      assertEquals("-3129.65316valuefalse0", stringBuilder3.toString());
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertNotNull(stringBuilder3);
      
      char[] charArray0 = new char[5];
      String string2 = document0.cssSelector();
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("#root", string2);
      assertNotNull(string2);
      
      charArray0[0] = 'O';
      charArray0[1] = '$';
      charArray0[2] = ']';
      char char0 = '5';
      // Undeclared exception!
      try { 
        stringBuilder3.insert(48, 0L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 48
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      String string0 = parseSettings0.normalizeAttribute("7y:\"\"k@L &D-x7(");
      assertEquals("7y:\"\"k@l &d-x7(", string0);
      assertNotNull(string0);
      
      String string1 = parseSettings0.normalizeTag("7y:\"\"k@l &d-x7(");
      assertTrue(string1.equals((Object)string0));
      assertEquals("7y:\"\"k@l &d-x7(", string1);
      assertNotNull(string1);
      
      Tag tag0 = Tag.valueOf("7y:\"\"k@L &D-x7(", parseSettings0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "7y:\"\"k@L &D-x7(");
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertNotNull(element0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      ParseSettings parseSettings1 = ParseSettings.htmlDefault;
      assertSame(parseSettings1, parseSettings0);
      assertNotNull(parseSettings1);
      
      Tag tag1 = Tag.valueOf("7y:\"\"k@L &D-x7(", parseSettings1);
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isFormListed());
      assertEquals("7y:\"\"k@l &d-x7(", tag1.toString());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isData());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.preserveWhitespace());
      assertTrue(tag1.isInline());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", tag1.getName());
      assertTrue(tag1.equals((Object)tag0));
      assertSame(parseSettings1, parseSettings0);
      assertNotSame(tag1, tag0);
      assertNotNull(tag1);
      
      Element element1 = element0.toggleClass("7y:\"\"k@L &D-x7(");
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("7y:\"\"k@l &d-x7(", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("7y:\"\"k@L &D-x7(", element1.baseUri());
      assertEquals("7y:\"\"k@l &d-x7(", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertTrue(tag0.equals((Object)tag1));
      assertSame(parseSettings0, parseSettings1);
      assertNotSame(tag0, tag1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Element element2 = element1.prependChild(element0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals("7y:\"\"k@l &d-x7(", tag0.getName());
      assertEquals("7y:\"\"k@L &D-x7(", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("7y:\"\"k@l &d-x7(", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7y:\"\"k@l &d-x7(", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("7y:\"\"k@l &d-x7(", element1.tagName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("7y:\"\"k@L &D-x7(", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("7y:\"\"k@l &d-x7(", element1.nodeName());
      assertEquals("7y:\"\"k@l &d-x7(", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("7y:\"\"k@l &d-x7(", element2.tagName());
      assertEquals("7y:\"\"k@L &D-x7(", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertTrue(tag0.equals((Object)tag1));
      assertSame(parseSettings0, parseSettings1);
      assertNotSame(tag0, tag1);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertNotNull(element2);
      
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '7y|\"\"k@l': unexpected token at '\"\"k@l'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Document document0 = Document.createShell("zE30F+b4j4Z7");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Elements elements0 = document1.siblingElements();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(elements0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      Document document2 = Parser.parse("zE30F+b4j4Z7", "textarea");
      assertEquals("textarea", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("textarea", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      
      Elements elements1 = document2.parents();
      assertEquals("textarea", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("textarea", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      
      Elements elements2 = document2.previousElementSiblings();
      assertEquals("textarea", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("textarea", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = document1.elementSiblingIndex();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertEquals(0, int0);
      
      List<DataNode> list0 = document1.dataNodes();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("zE30F+b4j4Z7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("zE30F+b4j4Z7", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("zE30F+b4j4Z7", document1.location());
      assertEquals("zE30F+b4j4Z7", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotNull(list0);
      
      Element element0 = document2.getElementById("zE30F+b4j4Z7");
      assertEquals("textarea", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("textarea", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      parseSettings0.normalizeAttribute("7y:\"\"k@L &D-x7(");
      parseSettings0.normalizeTag("7y:\"\"k@l &d-x7(");
      Tag tag0 = Tag.valueOf("7y:\"\"k@L &D-x7(", parseSettings0);
      Element element0 = new Element(tag0, "7y:\"\"k@L &D-x7(");
      ParseSettings parseSettings1 = ParseSettings.htmlDefault;
      Tag.valueOf("7y:\"\"k@L &D-x7(", parseSettings1);
      Element element1 = element0.toggleClass("7y:\"\"k@L &D-x7(");
      element1.prependChild(element0);
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '7y|\"\"k@l': unexpected token at '\"\"k@l'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("zE30F+b4j4Z7");
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      attributes0.toString();
      formElement0.addClass(":nth-child(%d)");
      formElement0.dataset();
      StringWriter stringWriter0 = new StringWriter(2903);
      stringWriter0.close();
      int int0 = (-937);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) " #cdata=\"\"", 7, (-937));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "0Y#2Mext[v");
      document0.className();
      assertEquals("0Y#2Mext[v", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String string0 = "K";
      Document document0 = new Document("K");
      document0.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.indentAmount((-50));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = "byqw&@h7q1";
      Document document0 = Parser.parseBodyFragmentRelaxed("byqw&@h7q1", "byqw&@h7q1");
      Element element0 = document0.attr("[s'<5X^q<O", (String) null);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      document_OutputSettings0.encoder();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Document document1 = document0.outputSettings(document_OutputSettings2);
      // Undeclared exception!
      try { 
        element0.replaceWith(document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      String string0 = "(}fY";
      Document document0 = Parser.parseBodyFragment("(}fY", "");
      document0.prependText("(}fY");
      Pattern.compile("", (-2520));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.println((long) (-2520));
      mockPrintWriter0.print((float) (-2520));
      int int0 = (-775);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "", (-775), 2646);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String string0 = "kl\\sI z2=1K^}\\m";
      Document document0 = Parser.parseBodyFragmentRelaxed("klsI z2=1K^}m", "klsI z2=1K^}m");
      String string1 = "";
      document0.ownText();
      document0.dataNodes();
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parse("xBnS<HjU]", "~xbNj~Ad];N)^");
      document0.parents();
      Element element0 = document0.createElement("~xbNj~Ad];N)^");
      // Undeclared exception!
      try { 
        element0.after("xBnS<HjU]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("</", parseSettings0);
      parseSettings0.normalizeAttribute("</");
      CDataNode cDataNode0 = new CDataNode("</");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "</", attributes0);
      String string0 = " ";
      attributes0.dataset();
      parseSettings0.normalizeTag("o/^@33Y");
      Tag.valueOf("o/^@33Y");
      String string1 = "";
      // Undeclared exception!
      try { 
        cDataNode0.after("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Document document1 = document0.normalise();
      document1.children();
      Element element0 = document1.text("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Document document2 = (Document)element0.classNames((Set<String>) linkedHashSet0);
      Document document3 = (Document)document2.doClone(element0);
      element0.ownText();
      document0.hasText();
      linkedHashSet0.add("");
      Node[] nodeArray0 = new Node[0];
      document0.addChildren(nodeArray0);
      String string0 = "{-q@H+9sdVI|0";
      Document document4 = (Document)document1.val("{-q@H+9sdVI|0");
      Document document5 = (Document)document1.append("");
      document5.attributes();
      document3.before((Node) document1);
      document4.empty();
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueNot("", "{-q@H+9sdVI|0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("h");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      Attributes attributes2 = attributes1.put("", "");
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "", attributes2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors(0);
      Parser.parseBodyFragmentRelaxed("xxbK=MRbpf{;Is/", "");
      String string0 = "DT?%ZULLej t^9>H @";
      Document document0 = parser1.parseInput("DT?%ZULLej t^9>H @", "DT?%ZULLej t^9>H @");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      String string1 = "p";
      parser1.parseFragmentInput("p", document0, "meta");
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      Document document2 = document1.normalise();
      Document document3 = document2.ownerDocument();
      String string2 = "";
      document3.getElementsByAttributeValueContaining(" > ", "#{,a>?");
      Tag tag0 = null;
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      String string3 = null;
      // Undeclared exception!
      try { 
        attributes1.put((String) null, "DT?%ZULLej t^9>H @");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = "value";
      Document document0 = Parser.parse("OB&n-cMCSczUoZS~)>k", "value");
      document0.getElementsByAttributeStarting("value");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "value");
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, (-3129.65316));
      StringBuilder stringBuilder2 = stringBuilder1.append(false);
      StringBuilder stringBuilder3 = stringBuilder2.append(0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'O';
      charArray0[1] = '$';
      charArray0[2] = ']';
      charArray0[3] = '5';
      charArray0[4] = '/';
      StringBuilder stringBuilder4 = stringBuilder3.insert(0, charArray0);
      // Undeclared exception!
      try { 
        document0.indent(stringBuilder4, 125, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors(0);
      Document document0 = parser1.parseInput("", "");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      parseSettings0.normalizeAttribute(".6Hf");
      Parser.xmlParser();
      parser1.settings(parseSettings0);
      Document document1 = Parser.parseBodyFragment(".6Hf", "ZokqjKi=q@mhE]M5>}");
      Element element0 = document0.body();
      element0.attributes();
      element0.attr("", ".6hf");
      document1.childNodeSize();
      // Undeclared exception!
      try { 
        document1.before((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = "Insert position out of bounds.";
      Element element0 = new Element("Insert position out of bounds.");
      // Undeclared exception!
      try { 
        element0.child(46);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 46, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      Element element0 = document0.val("textarea");
      assertEquals("textarea", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }
}
