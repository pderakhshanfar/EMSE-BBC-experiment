/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 21:59:09 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("~vvHNR,/E6", "~vvHNR,/E6");
      document0.getElementsByAttributeValueMatching("_0fjyyri!;h", "AfterAttributeValue_quoted");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("jnyw,k.ye^U_+", "jnyw,k.ye^U_+");
      Element element0 = document0.head();
      element0.reparentChild(document0);
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Tag tag0 = Tag.valueOf("rno");
      CDataNode cDataNode0 = new CDataNode("3|y7_F");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "3|y7_F", attributes0);
      StringBuffer stringBuffer0 = new StringBuffer("org.jsoup.nodes.Entities$EscapeMode");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.outerHtmlTail(stringBuffer0, 1592, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+m/", "+m/");
      MockFile mockFile0 = new MockFile(":nth-child(%d)");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(mockPrintStream0, 1067, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Element element0 = new Element("br");
      element0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("ug=H3g.O.Rn*4o", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Ds9@-2.bp=B%n", attributes0);
      pseudoTextElement0.doSetBaseUri("html");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parse("br", "Insert position out of bounds.");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("gk[dgaQiOR`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: gk[dgaQiOR`
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$2Y2", "/X:F9Gh5.;7.tB");
      Parser parser0 = Parser.xmlParser();
      document0.parser(parser0);
      document0.wrap("#F");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Document.createShell("J{T9O");
      Element element0 = document0.head();
      element0.wrap("s+");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parse("%Sn*WZT{nRbM&Rf", "%Sn*WZT{nRbM&Rf");
      Element element0 = document0.body();
      element0.wrap("%Sn*WZT{nRbM&Rf");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000009");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.siblingIndex = (-3121);
      document0.val("");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<Q9B49de=#b", "selected");
      Element element0 = document0.body();
      element0.val("P7xOz'{gDC-)cK1MrV+");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("LQRv+I&", "org.jsoup.nodes.Element");
      document0.val("uWFBR~tl`XSd");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = new Document("java.langstring@0000000009");
      document0.setSiblingIndex((-449));
      document0.toggleClass("java.langstring@0000000009");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Document.createShell("2l^hyv");
      Element element0 = document0.body();
      element0.toggleClass("o.o}eqyl;{)y");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN<>HGbwtPp<", "CommentEnd");
      Element element0 = document0.attr("M*rF<rN<>HGbwtPp<", "head");
      element0.parentNode = (Node) document0;
      document0.toggleClass("head");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ky%?-DbN{z7N_", "ky%?-DbN{z7N_");
      document0.siblingIndex = (-91404701);
      document0.text("ky%?-DbN{z7N_");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parse("+eq", "+eq");
      Element element0 = document0.body();
      element0.text("invalid named referenece '%s'");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G", "G");
      document0.tagName("noscript");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      Element element0 = document0.body();
      element0.tagName(".");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Pattern syntax error: ");
      CDataNode cDataNode0 = new CDataNode("Pattern syntax error: ");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "Pattern syntax error: ", attributes0);
      formElement0.tagName("k{4SXVJ/}");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Document.createShell("J");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parse("_0fjyyri!;h", "+la[Be0<72");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Element element0 = new Element(tag0, "value");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&U", "&U");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Element element0 = new Element("br");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Tag tag0 = Tag.valueOf("rn");
      Element element0 = new Element(tag0, "rn", (Attributes) null);
      element0.selectFirst("rn");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN>HGbwtPp<", "M*rF<rN>HGbwtPp<");
      Element element0 = document0.appendElement("bQ");
      element0.selectFirst("bQ");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(", ", ", ");
      Element element0 = document0.head();
      element0.prependElement("d$:zbQ+/h+zD");
      element0.selectFirst("head");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$2Y2", "/X:F9Gh5.;7.tB");
      Element element0 = document0.head();
      element0.select("body");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse("4.3ag", "Rcdata");
      document0.select("head");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(", ", ", ");
      Element element0 = document0.appendElement(", ");
      element0.removeClass("org.jsoup.nodes.PseudoTextElement");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Tag tag0 = Tag.valueOf("rno");
      CDataNode cDataNode0 = new CDataNode("3|y7_F");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "3|y7_F", attributes0);
      element0.removeClass("head");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">U}`3)ap>'p|R", ">U}`3)ap>'p|R");
      document0.appendElement("F%n}");
      Element element0 = document0.head();
      element0.appendTo(document0);
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Element element0 = new Element("/B");
      element0.setSiblingIndex((-2769));
      element0.prependText(";fN{P");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<Q9B49de=#b", "selected");
      Element element0 = document0.body();
      element0.prependText("selected");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", "&U");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("s+");
      FormElement formElement0 = new FormElement(tag0, ")D)=x}34>(BC@WA8*", attributes0);
      formElement0.prepend("");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("uV:&)O|qjx^ONw;[I)", "uV:&)O|qjx^ONw;[I)");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.parser.Tokeniser", "org.jsoup.parser.Tokeniser");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("uV:&)O|qjx^ONw;[I)", "uV:&)O|qjx^ONw;[I)");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN>HGbwtPp<", "M*rF<rN>HGbwtPp<");
      Element element0 = document0.appendElement("bQ");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parse(".f: e)W-dG,q5og(c", "%");
      document0.html("selected");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$2Y2", "/X:F9Gh5.;7.tB");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parse("          ", "          ");
      document0.appendChild(document0);
      Element element0 = document0.doClone(document0);
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Tag tag0 = Tag.valueOf("body");
      Element element0 = new Element(tag0, "body");
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      Pattern pattern0 = Pattern.compile("</", (-3758));
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      document0.is((Evaluator) evaluator_Matches0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN>HGbwtP<", "M*rF<rN>HGbwtP<");
      Element element0 = document0.appendElement("bQ");
      element0.is("bQ");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s+", "s+");
      Element element0 = document0.appendElement("bQ");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      element0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s+", "s+");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parse("H|/{n(", "H|/{n(");
      Element element0 = document0.appendElement("</");
      Elements elements0 = document0.getElementsByTag("H|/{n(");
      element0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("nohref");
      Document document0 = parser0.parseInput((Reader) stringReader0, "head");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document1.addChildren(nodeArray0);
      document0.html("org.jsoup.parser.Token$Comment");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parse(":containsData(", "");
      document0.html("<!DOCTYPE");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN>HGbwtPp<", "M*rF<rN>HGbwtPp<");
      Element element0 = document0.appendElement("br");
      element0.html((BufferedWriter) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(", ", ", ");
      Element element0 = document0.createElement(", ");
      element0.html();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      document0.cssSelector();
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parse(":containsData(", "");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      Pattern pattern0 = Pattern.compile("</");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parse("rn", "rn");
      document0.getElementsMatchingText("rn");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parse("br", "Insert position out of bounds.");
      Pattern pattern0 = Pattern.compile("_0fJyyrI!;H");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      document0.getElementsMatchingOwnText("");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      document0.getElementsContainingText(".");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN<>HGbwtPp<", "CommentEnd");
      document0.appendElement("CommentEnd");
      document0.getElementsByTag("CommentEnd");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = new Document("");
      document0.getElementsByIndexGreaterThan(0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      document0.getElementsByIndexEquals(1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("<fdb6e!bA|6q61xuurv", parseSettings0);
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "<fdb6e!bA|6q61xuurv", attributes0);
      pseudoTextElement0.getElementsByAttributeValueStarting("]_'Lzu06i6.mJFd]", "html");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parse("          ", "          ");
      document0.getElementsByAttributeValueNot("</", "          ");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Attribute attribute0 = Attribute.createFromEncoded("SLsrtTag", "SLsrtTag");
      attributes0.put(attribute0);
      Tag tag0 = Tag.valueOf("SLsrtTag", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "SLsrtTag", attributes0);
      Pattern pattern0 = Pattern.compile("SLsrtTag");
      formElement0.getElementsByAttributeValueMatching("SLsrtTag", pattern0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "%{Dc!rUkyw41cZ";
      Document document0 = Parser.parse("%{Dc!rUkyw41cZ", "%{Dc!rUkyw41cZ");
      document0.getElementsByAttributeStarting(string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Tag tag0 = Tag.valueOf("ahvA-L~TFgj&#'");
      CDataNode cDataNode0 = new CDataNode("S+1bHRFz4K-'\"");
      Attributes attributes0 = cDataNode0.attributes();
      attributes0.put("eof", true);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "S+1bHRFz4K-'\"", attributes0);
      pseudoTextElement0.getElementsByAttributeStarting("eof");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parse("          ", "          ");
      document0.attr("          ", "uCem1*Z3f-3P$@gM;");
      document0.getElementsByAttribute("          ");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("uV:&)O|qjx^ONw;[I)", "uV:&)O|qjx^ONw;[I)");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000009");
      document0.setSiblingIndex((byte) (-83));
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parse("J{tTl9[", "J{tTl9[");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("uV:&)O|qjx^ONw;[I)", "uV:&)O|qjx^ONw;[I)");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN>HGbwtPp<", "M*rF<rN>HGbwtPp<");
      Element element0 = document0.appendElement("br");
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Document.createShell("~0f.(nx`\\5lej~9sr");
      document0.siblingIndex = (-1805216497);
      document0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("rn", "rn");
      Element element0 = document0.head();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("GHL0)6t_<2'Z&t),pHM", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "wg=N_<}3a", attributes0);
      pseudoTextElement0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parse("J{tTl9[", "J{tTl9[");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(", ", ", ");
      Element element0 = document0.appendElement(", ");
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("o]#|^EmVqkhO\"_s{Y1z", "o]#|^EmVqkhO\"_s{Y1z");
      Element element0 = document0.body();
      Element element1 = element0.prepend("org.jsoup.nodes.Element$1");
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      element1.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("uV:&)O|qjx^ONw;[I)", "uV:&)O|qjx^ONw;[I)");
      Element element0 = document0.createElement("uV:&)O|qjx^ONw;[I)");
      Set<String> set0 = element0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(", ", ", ");
      document0.toggleClass("head");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("LQRv+I&", "org.jsoup.nodes.Element");
      document0.toggleClass("#root");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">U}`3)ap>'p|R", ">U}`3)ap>'p|R");
      Element element0 = document0.appendElement("F%n}");
      element0.children();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = new Document("");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("M*rF<rN<>HGbwtPp<", "M*rF<rN<>HGbwtPp<");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parse("r7", "n~)On@AU6H%)ah");
      document0.prepend("n~)On@AU6H%)ah");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(", ", ", ");
      Element element0 = document0.child(0);
      element0.removeClass("org.jsoup.nodes.PseudoTextElement");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN<>HGbwtPp<", "CommentEnd");
      Element element0 = document0.attr("M*rF<rN<>HGbwtPp<", ",");
      element0.parentNode = (Node) document0;
      document0.before(element0.parentNode);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN<>HGbwtPp<", "M*rF<rN<>HGbwtPp<");
      Element element0 = document0.head();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ve*q%}.62\"j", "Ve*q%}.62\"j");
      Element element0 = document0.doClone(document0);
      element0.before("Ve*q%}.62\"j");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Document.createShell("2l^hyv");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = new Document("");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("uV:&)O|qjx^ONw;[I)", "uV:&)O|qjx^ONw;[I)");
      document0.val("uV:&)O|qjx^ONw;[I)");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">U}`3)ap>'p|R", ">U}`3)ap>'p|R");
      Element element0 = document0.head();
      element0.attr("class", true);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN>HGbwtPp<", "M*rF<rN>HGbwtPp<");
      Element element0 = document0.appendElement("bQ");
      element0.attr("M*rF<rN>HGbwtPp<", true);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", "");
      Element element0 = document0.body();
      element0.attr("1,9(JP+/ \"=pW", "");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$2Y2", "/X:F9Gh5.;7.tB");
      document0.siblingIndex = (-40611366);
      document0.attr("k", "kNN=rNgz");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", "");
      Element element0 = document0.head();
      element0.attr("1,9(JP+/ \"=pW", "");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Element element0 = new Element("#root");
      element0.setSiblingIndex((-593));
      element0.appendText("");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Document.createShell("2l^hyv");
      Element element0 = document0.body();
      element0.appendText("xm-c:.8i<5");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      document0.appendElement("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(", ", ", ");
      document0.appendElement("html");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", "&U");
      Element element0 = document0.body();
      element0.appendChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("uV:&)O|qjx^ONw;[I)", "uV:&)O|qjx^ONw;[I)");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document1.addChildren(nodeArray0);
      document0.append("org.jsoup.parser.Token$Comment");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      Element element0 = document0.head();
      element0.append("T_/o=^gTh^H");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = new Document(":nth-child(%d)");
      document0.append("<nA`8tn");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN<>HGbwtPp<", "CommentEnd");
      Element element0 = document0.doClone(document0);
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN<>HGbwtPp<", "M*rF<rN<>HGbwtPp<");
      Element element0 = document0.body();
      element0.after("M*rF<rN<>HGbwtPp<");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN>HGbwtPp<", "M*rF<rN>HGbwtPp<");
      Element element0 = document0.appendElement("br");
      element0.after("br");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      Element element0 = document0.body();
      element0.addClass("'V^~O$p");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("uV:&)O|qjx^ONw;[I)", "uV:&)O|qjx^ONw;[I)");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.wrap("K}ZCPxFtvf;");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("JGE", parseSettings0);
      Element element0 = new Element(tag0, "i");
      // Undeclared exception!
      try { 
        element0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = new Document("=cc:<UGFjH}vVn0u>`");
      Comment comment0 = new Comment("=cc:<UGFjH}vVn0u>`");
      Document document1 = (Document)document0.doClone(comment0);
      // Undeclared exception!
      try { 
        document1.wrap("#root");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("nohref", "nohref");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.val("nohref");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Tag tag0 = Tag.valueOf("menuitem");
      Attributes attributes0 = new Attributes();
      attributes0.keys = null;
      FormElement formElement0 = new FormElement(tag0, "menuitem", attributes0);
      // Undeclared exception!
      try { 
        formElement0.val("menuitem");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Tag tag0 = Tag.valueOf("zJ{tdl9[");
      Attributes attributes0 = new Attributes();
      String[] stringArray0 = new String[7];
      attributes0.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "zJ{tdl9[", attributes0);
      // Undeclared exception!
      try { 
        formElement0.val("zJ{tdl9[");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+m/", "+m/");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parse("o]#|^EmVqkhO\"_s{Y1z", "o]#|^EmVqkhO\"_s{Y1z");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rvTPBbd", "rvTPBbd");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("menu#item", "menu#item");
      DocumentType documentType0 = new DocumentType("menu#item", "Oi", "menu#item", "menu#item", "5");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN>HGbwtPp<", "M*rF<rN>HGbwtPp<");
      Element element0 = document0.body();
      element0.setSiblingIndex((-2));
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("M*rF<rN<>HGbwtPp<", "CommentEnd");
      Element element0 = document0.attr("M*rF<rN<>HGbwtPp<", ",");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      element0.tagName("kE}KzS#T+^zY6([9(z");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Qv");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.select.Collector", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.tagName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Element element0 = new Element("yt%U/`w+");
      Attributes attributes0 = element0.attributes();
      Tag tag0 = Tag.valueOf("Children collection to be inserted must not be null.");
      FormElement formElement0 = new FormElement(tag0, "yt%U/`w+", attributes0);
      element0.parentNode = (Node) formElement0;
      // Undeclared exception!
      try { 
        element0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Tag tag0 = Tag.valueOf("}JR\"-aW1.1;J6?RT?");
      CDataNode cDataNode0 = new CDataNode("}JR\"-aW1.1;J6?RT?");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "}JR\"-aW1.1;J6?RT?", attributes0);
      // Undeclared exception!
      try { 
        formElement0.selectFirst("}JR\"-aW1.1;J6?RT?");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '}JR\"-aW1.1;J6?RT?': unexpected token at '}JR\"-aW1.1;J6?RT?'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = new Document("iexjXy~]~{MKSrv=I");
      // Undeclared exception!
      try { 
        document0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      // Undeclared exception!
      try { 
        document0.select("[&1[4<k%.h");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '.'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Tag tag0 = Tag.valueOf("iexjXy~]~{MKSrv=I");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "iexjXy~]~{MKSrv=I", attributes0);
      // Undeclared exception!
      try { 
        formElement0.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("</", "nohref");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.=tzWng@0000000009", "java.lang.=tzWng@0000000009");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("org.jsoup.parser.HtmlTreeBuilderState", "java.lang.=tzWng@0000000009", false);
      Element element0 = document0.doClone(xmlDeclaration0);
      // Undeclared exception!
      try { 
        element0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Entities$1", "nohref");
      DataNode dataNode0 = new DataNode("?N$7VkdC6:Z#7Us s", ") ]|W4xrH+Q8");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        element0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = new Document("X]T3Lj-$+6IdU9bhz$");
      TextNode textNode0 = TextNode.createFromEncoded("X]T3Lj-$+6IdU9bhz$", "0kncLn*y66P");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        Element.preserveWhitespace(element0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X", "X");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      List<Node> list0 = Parser.parseXmlFragment("X", "X");
      document1.childNodes = list0;
      // Undeclared exception!
      try { 
        document1.prependText("only http & https protocols supported");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("POST", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("8hU1jKi$B");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "FQ*0WsO", attributes0);
      // Undeclared exception!
      try { 
        formElement0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("w-5}>}ex-o", "w-5}>}ex-o");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.prependElement("w-5}>}ex-o");
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Document.createShell("~F.(NX`\\5leJ~9Sr");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Element element0 = new Element("v,|V,wU4XuB?Qj");
      CDataNode cDataNode0 = new CDataNode("");
      element0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        element0.prependChild(element0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      Document document1 = document0.normalise();
      document1.parentNode = (Node) document1;
      Element element0 = document1.empty();
      // Undeclared exception!
      try { 
        element0.prependChild(document1.parentNode);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(") ^.w|ci=>h@", ") ^.w|ci=>h@");
      Element element0 = document0.body();
      Element element1 = element0.after((Node) document0);
      // Undeclared exception!
      element1.prepend(",E");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN>HGbwtPp<", "M*rF<rN>HGbwtPp<");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("~0f(nxE\u0005lej9s", "~0f(nxE\u0005lej9s");
      DataNode dataNode0 = DataNode.createFromEncoded("img", "~0f(nxE\u0005lej9s");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        element0.prepend("img");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parse("S]rrtTaw", "S]rrtTaw");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("S]rrtTaw");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(2253);
      // Undeclared exception!
      document0.outerHtmlTail(mockPrintWriter0, 611, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("M*rF<rN>HGbwtPp<", "90tL}8y_u+T0bd#H]");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "M*rF<rN>HGbwtPp<");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 6, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("nw|jc4|VijS\"e?ovX", "nw|jc4|VijS\"e?ovX");
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 732, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&U", "&U");
      MockFile mockFile0 = new MockFile("&U", "&U");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintStream0, 627, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Document.createShell("M*rF<rN>HGbwtPp<");
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.jsoup.nodes.Element$1");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintStream0, (-1908), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parse("9*!hMO$*f3F[$5:", "9*!hMO$*f3F[$5:");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "9*!hMO$*f3F[$5:");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(211);
      // Undeclared exception!
      document0.outerHtmlHead(stringBuilder0, 211, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parse(".", "Unexpectedly reached end of file (EOF) in input state [%s]");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Unexpectedly reached end of file (EOF) in input state [%s]");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, (-1566), document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Document.createShell("Ib/%q4Xlw");
      Charset charset0 = document0.charset();
      byte[] byteArray0 = new byte[2];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 19, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN<>HGbwtPp<", "CommentEnd");
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 4355, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(", ", ", ");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintWriter0, (-1436010313), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Document.createShell("~F.({X`\\5leJ~9Sr");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlHead(pipedWriter0, (-220), document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Tag tag0 = Tag.valueOf("java.lang.string@0000000009");
      Attributes attributes0 = new Attributes();
      CDataNode cDataNode0 = new CDataNode("java.lang.string@0000000009");
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      Element element0 = formElement0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.lastElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("uV:&)O|qjx^ONw;[I)", "uV:&)O|qjx^ONw;[I)");
      Element element0 = document0.prependChild(document0);
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(651);
      // Undeclared exception!
      element0.is((Evaluator) evaluator_IndexLessThan0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("<fdb6e!bA|6q61xuurv", parseSettings0);
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "<fdb6e!bA|6q61xuurv", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("nohref", "nohref");
      // Undeclared exception!
      try { 
        document0.is("C^%VR[xWC5TdJ}:");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'C^%VR[xWC5TdJ}:': unexpected token at '^%VR[xWC5TdJ}:'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.is("br");
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("SLsrtTag", "(k_QN/@dn0sj9):qHY");
      TextNode textNode0 = TextNode.createFromEncoded("SLsrtTag");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.is("SLsrtTag");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.TextNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$2Y2", "/X:F9Gh5.;7.tB");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      DocumentType documentType0 = new DocumentType("/X:F9Gh5.;7.tB", "", "FDk%{+");
      nodeArray0[7] = (Node) documentType0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      Tag tag0 = Tag.valueOf("#root");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#root", attributes0);
      nodeArray0[6] = (Node) pseudoTextElement0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.html("org.jsoup.parser.Token$Comment");
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("w-5}>}ex-o", "w-5}>}ex-o");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN>HGbwtPp<", "M*rF<rN>HGbwtPp<");
      Element element0 = document0.appendElement("br");
      element0.after((Node) document0);
      StringWriter stringWriter0 = new StringWriter(2909);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      document0.html(mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("kyL%-DbN{z7N_", "kyL%-DbN{z7N_");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN>HGbwtPp<", "M*rF<rN>HGbwtPp<");
      // Undeclared exception!
      try { 
        document0.html((MockPrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(", ", ", ");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Document.createShell("~0f.(nx`\\5lej~9sr");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("y!<AK[Qyjbs1w", "rvTPBb ");
      DataNode dataNode0 = new DataNode("y!<AK[Qyjbs1w");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Document.createShell("M*rF<rN<>HGbwtPp<");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.hasText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$2Y2", "/X:F9Gh5.;7.tB");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", "");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN<>HGbwtPp<", "CommentEnd");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+eq", "commen4end");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("+eq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: +eq
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=:ov", "J{tTl9[");
      CDataNode cDataNode0 = new CDataNode("=:ov");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("value");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Tag tag0 = Tag.valueOf("$");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "[%s*=%s]", attributes0);
      // Undeclared exception!
      try { 
        element0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(", ", ", ");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sq", "sq");
      Comment comment0 = new Comment(", URL=");
      document0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("sq");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("kyL%-DbN{z7N_", "kyL%-DbN{z7N_");
      CDataNode cDataNode0 = new CDataNode("kyL%-DbN{z7N_");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("kyL%-DbN{z7N_");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Document.createShell("J");
      Element element0 = document0.appendElement("bQ");
      element0.setSiblingIndex((-2499));
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("bQ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "S+o%G!xeE");
      // Undeclared exception!
      try { 
        document0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rvTPBbd", "rvTPBbd");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexLessThan((-2222));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Tag tag0 = Tag.valueOf("^");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "^", attributes0);
      Element element1 = element0.html("^");
      List<Node> list0 = element1.childNodesCopy();
      element1.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.getElementsByIndexGreaterThan((-4839));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("kyL%-DbN{z7N_", "kyL%-DbN{z7N_");
      Element element0 = document0.doClone(document0);
      Element element1 = document0.appendChild(element0);
      // Undeclared exception!
      try { 
        element1.getElementsByIndexEquals(24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("menuitem");
      Document document0 = Parser.parseBodyFragment("~8z!QJ=y", "v,6.:c I<bn9~M&=6a");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.getElementsByIndexEquals(307);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parse("Insert position out of bounds.", "Insert position out of bounds.");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">U}`3)ap>'p|R", ">U}`3)ap>'p|R");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot(">U}`3)ap>'p|R", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$2Y2", "/X:F9Gh5.;7.tB");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("uV:&)O|qjx^ONw;[I)", "uV:&)O|qjx^ONw;[I)");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("0?D", "<html>\n <head></head>\n <body>\n  uV:&amp;)O|qjx^ONw;[I)\n </body>\n</html>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: <html>
         //  <head></head>
         //  <body>
         //   uV:&amp;)O|qjx^ONw;[I)
         //  </body>
         // </html>
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("'", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "'", attributes0);
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeValueEnding("'", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("TreeBuilder{currentToken=", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">U}`3)ap>'p|R", ">U}`3)ap>'p|R");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("XQRv+5&", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(", ", ", ");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Document.createShell("M*rF<rN<>HGbwtPp<");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementById("]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Document.createShell("2l^hyv");
      // Undeclared exception!
      try { 
        document0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|68B.0@~0O6OS.[$+me", "|68B.0@~0O6OS.[$+me");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.dataNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN>HGbwtPp<", "M*rF<rN>HGbwtPp<");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Document.createShell("~F.({X`\\5leJ~9Sr");
      Element element0 = document0.head();
      element0.addClass("s+");
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'head.java.lang.String@0000000050': unexpected token at '@0000000050'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Document.createShell("StaTag");
      CDataNode cDataNode0 = new CDataNode("StaTag");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<Q9B49de=#b", "selected");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("~vvHNR,/E6", "~vvHNR,/E6");
      // Undeclared exception!
      try { 
        document0.child((-906021636));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("rn", "rn");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.before("Tv xIt8R3CPe&K\"|A");
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parse("sE{+", "sE{+");
      CDataNode cDataNode0 = new CDataNode("sE{+");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.before(";~UZ4m4Xc5");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN>HGbwtPp<", "M*rF<rN>HGbwtPp<");
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("uV:&)O|qjx^ONw;[I)", "uV:&)O|qjx^ONw;[I)");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.attr("a?z0((ESno3UBq", "br");
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(", ", ", ");
      // Undeclared exception!
      try { 
        document0.attr((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Document.createShell("b9[F[DwrJ");
      TextNode textNode0 = new TextNode(":matchesOwn");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN<>HGbwtPp<", "org.jsoup.select.StructuralEvaluator$Root");
      Element element0 = document0.head();
      Element element1 = document0.doClone(element0);
      // Undeclared exception!
      try { 
        element1.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("                ", "                ");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendText("CommentEndBang");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("uV:&)O|qjx^ONw;[I)", "uV:&)O|qjx^ONw;[I)");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.appendElement("\"3Un(Ve!");
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("F,mVz_'i1^x(", "SLsrtTag");
      Document document1 = document0.normalise();
      List<Node> list0 = Parser.parseXmlFragment("body", ".=Z@\"!PU");
      document1.childNodes = list0;
      // Undeclared exception!
      try { 
        document1.appendElement("'UY?3T8w");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r5TPBb ", "r5TPBb ");
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document1 = document0.parser(parser1);
      // Undeclared exception!
      try { 
        document1.appendElement("rdhgbwtpp");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.parser.Tokeniser", "bYdy");
      // Undeclared exception!
      try { 
        document0.appendElement(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=:ov", "J{tTl9[");
      CDataNode cDataNode0 = new CDataNode("=:ov");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.appendChild(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("nohref", "nohref");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parse("H|/{n(", "H|/{n(");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.append("</");
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.CombiningEvaluator$Or", "java.lang.string@0000000046");
      DataNode dataNode0 = DataNode.createFromEncoded("AfterAttributeName", "AfterAttributeName");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("rn", "rn");
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      // Undeclared exception!
      try { 
        element1.after((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("M*rF<rN<>HGbwtPp<", "M*rF<rN<>HGbwtPp<");
      Document document1 = document0.normalise();
      document1.parentNode = (Node) document0;
      // Undeclared exception!
      document1.after("5y! Fo*! Q");
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = new Document("menuitem");
      Element element0 = document0.doClone(document0);
      // Undeclared exception!
      try { 
        element0.after("menuitem");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("AttributeValue_doubleQuoted");
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.helper.HttpConnection$Response", "AttributeValue_doubleQuoted");
      Element element0 = document0.toggleClass("uZ~c`jx+ BxNw\"V<Ud");
      element0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.after("Tag name must not be empty.");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "=>e;,*-ym", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("pUfE!}t].oH(xv2", parseSettings0);
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[I\"g/S>1ay85jDhN*>r", "[I\"g/S>1ay85jDhN*>r");
      document0.toggleClass("[I\"g/S>1ay85jDhN*>r");
      Element element0 = document0.toggleClass("InSelect");
      element0.hasClass("InSelect");
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[I\"g/S>1ay85jDN*>r", "[I\"g/S>1ay85jDN*>r");
      document0.toggleClass("fi{5a uwFtX)2A");
      document0.toggleClass("fi{5a uwFtX)2A");
      document0.hasClass("tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN<>HGbwtPp<", "CommentEnd");
      document0.hasClass("M*rF<rN<>HGbwtPp<");
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("nohref", "nohref");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("C^%VR[xWC5TdJ}:");
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(", ", ", ");
      document0.append("2");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Document.createShell("_f;l1/");
      document0.prependText("_f;l1/");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(") ^.w|ci=>h@", ") ^.w|ci=>h@");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">U}`3)ap>'p|R", ">U}`3)ap>'p|R");
      Element element0 = document0.appendElement("F%n}");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Document.createShell("applet");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#", "#");
      TextNode textNode0 = new TextNode("#");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.nextElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s+", "s+");
      Element element0 = document0.appendElement("bQ");
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("OB", "e0bkv]-b!mkzh@;t");
      Element element0 = document0.head();
      element0.html("5,<<r,V");
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("M*rF<rN<>HGbwtPp<", "CommentEnd");
      document0.removeAttr("html");
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Element element0 = new Element("/B");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(":nth-child(%d)", ":nth-child(%d)");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("POST", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("8hU1jKi$B");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "FQ*0WsO", attributes0);
      formElement0.ownText();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN<>HGbwtPp<", "CommentEnd");
      Element element0 = document0.attr("M*rF<rN<>HGbwtPp<", ",");
      element0.parentNode = (Node) document0;
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Document.createShell(")6PgjP");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parse("%Sn*WZT{nRbM&Rf", "%Sn*WZT{nRbM&Rf");
      Evaluator.AttributeStarting evaluator_AttributeStarting0 = new Evaluator.AttributeStarting("%Sn*WZT{nRbM&Rf");
      document0.is((Evaluator) evaluator_AttributeStarting0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("SLsrtTag", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "SLsrtTag", attributes0);
      Pattern pattern0 = Pattern.compile("SLsrtTag");
      formElement0.getElementsByAttributeValueMatching("SLsrtTag", pattern0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parse("class", "class");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Document.createShell("~0f.(nx`\\5lej~9sr");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("J{tTl9[", "J{tTl9[");
      document0.appendElement("br");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      document0.html(mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN>HGbwtPp<", "M*rF<rN>HGbwtPp<");
      document0.appendElement("br");
      StringWriter stringWriter0 = new StringWriter(2909);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      document0.html(mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Element element0 = new Element("br");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      Element element1 = new Element(tag0, "</");
      element0.appendChild(element1);
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parse("rvTPBb ", "rvTPBb ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("BeforeHtml");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "SLsrtTag", attributes0);
      formElement0.val("split offset must be not be negative");
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      formElement0.val();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000009");
      Element element0 = document0.toggleClass("java.lang.string@0000000009");
      document0.toggleClass("java.lang.string@0000000009");
      element0.toggleClass("java.lang.string@0000000009");
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[I\"g/S>1ay85jDhN*>r", "[I\"g/S>1ay85jDhN*>r");
      Element element0 = document0.toggleClass("[I\"g/S>1ay85jDhN*>r");
      element0.toggleClass("[I\"g/S>1ay85jDhN*>r");
      document0.getElementsByClass("[I\"g/S>1ay85jDhN*>r");
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Slit offset must be not be negatie", "Slit offset must be not be negatie");
      Element element0 = document0.toggleClass("Slit offset must be not be negatie");
      element0.toggleClass("Slit offset must be not be negatie");
      element0.getElementsByClass("-9WC2");
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parse("sq", "sq");
      document0.toggleClass("sq");
      document0.toggleClass("\r\n\r\n");
      document0.hasClass("7k3{N65w7r5");
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Document.createShell("J");
      document0.toggleClass("td");
      document0.hasClass("tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parse("sq", "sq");
      document0.toggleClass("sq");
      document0.hasClass("7k3{N65w7r5");
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Document.createShell("n");
      document0.toggleClass(" ");
      document0.hasClass("org.jsoup.parser.XmlTreeBuilder$1");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = new Document("5APv}q:viK,?%5w");
      CDataNode cDataNode0 = new CDataNode("#root");
      document0.prependChild(cDataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("H}fkT%La<!( bk1eJ>!", "H}fkT%La<!( bk1eJ>!");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ue9n", "ue9n");
      CDataNode cDataNode0 = new CDataNode((String) null);
      Node node0 = cDataNode0.doClone(document0);
      document0.appendChild(node0);
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parse("4.3ag", "Rcdata");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!", "kn}`/");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("M*rF<rN<>HGbwtPp<", "M*rF<rN<>HGbwtPp<");
      Document document1 = document0.normalise();
      document1.parentNode = (Node) document0;
      document0.getElementsContainingOwnText("M*rF<rN<>HGbwtPp<");
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.appendElement("br");
      document0.appendElement("br");
      document0.getElementsContainingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Document.createShell("J");
      CDataNode cDataNode0 = new CDataNode("J");
      document0.prependChild(cDataNode0);
      document0.getElementsContainingOwnText("bQ");
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN>HGbwtPp<", "M*rF<rN>HGbwtPp<");
      document0.title("M*rF<rN>HGbwtPp<");
      document0.getElementsMatchingOwnText("V");
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      document0.appendText("insert position out of bounds.");
      Pattern pattern0 = Pattern.compile("#root");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(", ", ", ");
      document0.append("2");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN>HGbwtPp<", "M*rF<rN>HGbwtPp<");
      document0.appendElement("br");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("uV:&)O|qjx^ONw;[I)", "uV:&)O|qjx^ONw;[I)");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document1.addChildren(nodeArray0);
      Pattern pattern0 = Pattern.compile("org.jsoup.parser.Token$Comment", 1242);
      document1.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parse("<!DOCTYPE", "CommentEnd");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Document.createShell("M*rF<rN>HGbwtPp<");
      Element element0 = document0.appendElement("bQ");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("M*rF<rN<>HGbwtPp<", "M*rF<rN<>HGbwtPp<");
      Document document1 = document0.normalise();
      document1.parentNode = (Node) document0;
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parse("class", "class");
      Element element0 = document0.head();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("</", "nohref");
      Element element0 = document0.head();
      Elements elements0 = document0.getElementsByIndexLessThan(4307);
      element0.insertChildren(0, (Collection<? extends Node>) elements0);
      document0.appendTo(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      Element element0 = document0.body();
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parse("sE{+", "sE{+");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = new Document("");
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Document.createShell("~F.({X`\\5leJ~9Sr");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(1, elements0.size());
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Document.createShell("~F.(NX`\\5leJ~9Sr");
      document0.siblingElements();
      assertEquals("~F.(NX`\\5leJ~9Sr", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      Element element0 = document0.head();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
      assertEquals(".", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN>HGbwtPp<", "M*rF<rN>HGbwtPp<");
      Element element0 = document0.head();
      element0.before("M*rF<rN>HGbwtPp<");
      String string0 = element0.cssSelector();
      assertEquals("M*rF<rN>HGbwtPp<", element0.baseUri());
      assertEquals("html > head:nth-child(3)", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN>HGbwtPp<", "M*rF<rN>HGbwtPp<");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("M*rF<rN>HGbwtPp<", element0.baseUri());
      assertEquals("html > head", string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Document.createShell("~F.({X`\\5leJ~9Sr");
      document0.addClass("s+");
      document0.cssSelector();
      assertEquals("~F.({X`\\5leJ~9Sr", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Tag tag0 = Tag.valueOf("I c");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("id", "I c");
      FormElement formElement0 = new FormElement(tag0, "id", attributes1);
      String string0 = formElement0.cssSelector();
      assertEquals("id", formElement0.baseUri());
      assertEquals("#I c", string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
      try { 
        document0.insertChildren(584, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$2Y2", "/X:F9Gh5.;7.tB");
      Node[] nodeArray0 = new Node[6];
      // Undeclared exception!
      try { 
        document0.insertChildren((-871), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Element element0 = new Element("br");
      Node[] nodeArray0 = new Node[0];
      Element element1 = element0.insertChildren(0, nodeArray0);
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parse("H|/{n(", "H|/{n(");
      Elements elements0 = document0.children();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) elements0);
      assertEquals("H|/{n(", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parse("Insert position out of bounds.", "Insert position out of bounds.");
      Elements elements0 = document0.children();
      // Undeclared exception!
      try { 
        document0.insertChildren((-614), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Tag tag0 = Tag.valueOf("iexjXy~]~{MKSrv=I");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "%pv9,W)YGs5*?", attributes0);
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      // Undeclared exception!
      try { 
        formElement0.insertChildren(3134, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&U", "&U");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("&U", document0.baseUri());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("nohref", "nohref");
      document0.html("nohref");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, list0.size());
      assertEquals("nohref", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("nohref", "nohref");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("nohref", document0.baseUri());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ve*q%}.62\"j", "Ve*q%}.62\"j");
      Element element0 = document0.doClone(document0);
      element0.after("Ve*q%}.62\"j");
      element0.previousElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertEquals("Ve*q%}.62\"j", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = new Document("nw|jc4|VijS\"e?ovX");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1110026255));
      assertFalse(elements0.isEmpty());
      assertEquals("nw|jc4|VijS\"e?ovX", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN>HGbwtPp<", "M*rF<rN>HGbwtPp<");
      document0.selectFirst("bQ");
      assertEquals("M*rF<rN>HGbwtPp<", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("rn", "rn");
      document0.getAllElements();
      assertEquals("rn", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN>HGbwtPp<", "M*rF<rN>HGbwtPp<");
      // Undeclared exception!
      try { 
        document0.before("M*rF<rN>HGbwtPp<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("[/y0m:Ymk;/", ";A!e{ax%z4/v+J84?cf");
      document0.getElementsByAttribute("2/+S!tXbtXu(,F");
      assertEquals(";A!e{ax%z4/v+J84?cf", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">U}`3)ap>'p|R", ">U}`3)ap>'p|R");
      document0.getElementsByAttributeValueNot(">U}`3)ap>'p|R", "i");
      assertEquals(1, document0.childNodeSize());
      assertEquals(">U}`3)ap>'p|R", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Element element0 = new Element("Rz)o;m'L");
      // Undeclared exception!
      try { 
        element0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      Element element0 = document0.shallowClone();
      assertEquals(".", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.CombiningEvaluator$Or", "java.lang.string@0000000046");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+m/", "+m/");
      document0.getElementsByAttributeValueContaining("#root", "html");
      assertEquals("+m/", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r5TPBb ", "r5TPBb ");
      Elements elements0 = document0.getElementsContainingText("<d8B[^Ylw0(RW5L~x!G");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertEquals("r5TPBb ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("jnyw,k.ye^U_+", "jnyw,k.ye^U_+");
      document0.getElementsByAttributeValueEnding("jnyw,k.ye^U_+", "jnyw,k.ye^U_+");
      assertEquals("jnyw,k.ye^U_+", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN>HGbwtP<", "M*rF<rN>HGbwtP<");
      document0.is("bQ");
      assertEquals("M*rF<rN>HGbwtP<", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("kyL%-DbN{z7N_", "kyL%-DbN{z7N_");
      Elements elements0 = document0.getElementsByIndexEquals(24);
      assertEquals(1, document0.childNodeSize());
      assertEquals("kyL%-DbN{z7N_", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN>HGbwtPp<", "M*rF<rN>HGbwtPp<");
      Element element0 = document0.prependElement("html");
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("M*rF<rN>HGbwtPp<", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rvTPBbd", "rvTPBbd");
      Elements elements0 = document0.getElementsByIndexLessThan((-2222));
      assertEquals("rvTPBbd", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN>HGbwtPp<", "M*rF<rN>HGbwtPp<");
      // Undeclared exception!
      try { 
        document0.after("br");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = new Document(":nth-child(%d)");
      // Undeclared exception!
      try { 
        document0.select("'B-ph!@!%s0Y");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ''B-ph!@!%s0Y': unexpected token at ''B-ph!@!%s0Y'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("&RRUwQ]8NMIbtLa%", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Document.createShell("=e{x>iMY)a?8jL");
      document0.getElementsByAttributeValue("<html>\n <head></head>\n <body>\n  , \n </body>\n</html>", "zXy|&1Y)$z$\"3+ak");
      assertEquals(1, document0.childNodeSize());
      assertEquals("=e{x>iMY)a?8jL", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN>HGbwtPp<", "M*rF<rN>HGbwtPp<");
      Element element0 = document0.attr("M*rF<rN>HGbwtPp<", true);
      assertEquals("M*rF<rN>HGbwtPp<", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN<>HGbwtPp<", "CommentEnd");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("z:Wm3ls(V", "");
      String string0 = document0.wholeText();
      assertEquals("z:Wm3ls(V", string0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN<>HGbwtPp<", "M*rF<rN<>HGbwtPp<");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Element element0 = new Element("br");
      // Undeclared exception!
      try { 
        element0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN>HGbwtPp<", "M*rF<rN>HGbwtPp<");
      document0.dataset();
      assertEquals("M*rF<rN>HGbwtPp<", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Parser.parse("+eq", "+eq");
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.text("invalid named referenece '%s'");
      assertEquals("+eq", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN<>HGbwtPp<", "M*rF<rN<>HGbwtPp<");
      // Undeclared exception!
      try { 
        document0.child(31);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 31, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.=tzWng@0000000009", "java.lang.=tzWng@0000000009");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = Parser.parse("M*rF<rN<>HGbwtPp<", "M*rF<rN<>HGbwtPp<");
      Elements elements0 = document0.getElementsMatchingText("M*rF<rN<>HGbwtPp<");
      assertEquals(1, document0.childNodeSize());
      assertEquals("M*rF<rN<>HGbwtPp<", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&U", "&U");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Parser.parse("%Sn*WZT{nRbM&Rf", "%Sn*WZT{nRbM&Rf");
      // Undeclared exception!
      try { 
        document0.wrap("%Sn*WZT{nRbM&Rf");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G", "G");
      document0.getElementById("G");
  }
}
