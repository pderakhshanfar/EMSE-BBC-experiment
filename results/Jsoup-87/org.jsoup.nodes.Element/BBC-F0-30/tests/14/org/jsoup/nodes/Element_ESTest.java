/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 21:46:20 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Document.createShell("qA&M<OF>Q9Fu");
      document0.prependElement("br");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000055 qa&m<f>q9f");
      document0.prependChild(document0);
      Element element0 = document0.empty();
      element0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("math", "REMOVE");
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      document0.insertChildren((-1), (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ph1Nw>YlJFF", "ph1Nw>YlJFF");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Document.createShell("zIriDJ|xI@x$K/HA5");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("rp", "rp");
      document0.getElementsMatchingText("!");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Document.createShell("sortable");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      document1.wrap("sortable");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parse("}nZ_SVonzti_nBP'", "}nZ_SVonzti_nBP'");
      Element element0 = document0.prependElement("br");
      element0.wrap("<br>");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Document.createShell("_]H0nMhSI");
      Element element0 = document0.body();
      document0.text("_]H0nMhSI");
      element0.wrap("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Element element0 = new Element("sowtable");
      element0.siblingIndex = (-1978);
      element0.val("sowtable");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Element element0 = new Element("sowtable");
      element0.val("sowtable");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parse("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      document0.val("script");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parse("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      Element element0 = document0.body();
      element0.toggleClass("964\"2");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      Element element0 = document0.body();
      element0.text("zI=iDJI@xgK/HA5");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5k*q}", "5k*q}");
      document0.text("rTy");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Document.createShell("-q{UYR>x90F<c");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      Element element0 = document0.body();
      element0.tagName("'W,?F|\"B$}O");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("dHAjPcm'U1((1Zm c", parseSettings0);
      Element element0 = new Element(tag0, "ZFK#WV^5KO");
      element0.tagName("head");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      Element element0 = document0.body();
      Element element1 = element0.val("zI=iDJI@xgK/HA5");
      Element element2 = element1.previousElementSibling();
      element2.tagName("'W,?F|\"B$}O");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "#", attributes0);
      element0.tagName();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ph1Nw>YlJFF", "ph1Nw>YlJFF");
      Element element0 = document0.prependElement("br");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ph1Nw>YlJFF", "ph1Nw>YlJFF");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Tag tag0 = Tag.valueOf("math");
      CDataNode cDataNode0 = new CDataNode("math");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "REMOVE", attributes0);
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("43E", "pDfJ:!e]-Dg");
      document0.selectFirst("head");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("RW'bA01_2g[u(`_vD>", "RX//6[WtJI/dmK");
      document0.selectFirst("html");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Element element0 = new Element("Insert position out of bounds.");
      element0.select("s");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("REMOVE", parseSettings0);
      Element element0 = new Element(tag0, "math");
      element0.select("REMOVE");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("88(T_&l3W*Vl", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "88(T_&l3W*Vl", (Attributes) null);
      Document document0 = Parser.parse(".", ".");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) formElement0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document0;
      document0.addChildren(nodeArray0);
      formElement0.removeClass("Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Document.createShell("qA&M<OF>}9Fu");
      document0.removeClass("qA&M<OF>}9Fu");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      Element element0 = document0.head();
      Element element1 = element0.before("");
      element1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("math", "$7sbU2L# (ot5XmzBa");
      Element element0 = document0.body();
      element0.prependText("i-o>ti]F");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Document.createShell("-q{UYR>x90F<c");
      document0.prependElement("head");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("CqF/])d", "CqF/])d");
      document0.setSiblingIndex((-312));
      CDataNode cDataNode0 = new CDataNode("X(jV],4m5WQ}:QX4");
      document0.prependChild(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of +ounds.");
      document0.siblingIndex = (-40);
      document0.prepend("java.lang.string@0000000050");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      Element element0 = document0.body();
      element0.prepend("JOT/mX#h(z0.qfbx!");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("dHAjPcm'U1((1Zm c", parseSettings0);
      Element element0 = new Element(tag0, "ZFK#WV^5KO");
      Document document0 = Parser.parseBodyFragmentRelaxed("ZFK#WV^5KO", "_1E)Ffct3.");
      Element element1 = document0.appendTo(element0);
      element1.prepend("|$DTInVn|");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Element element0 = new Element("sowtable");
      element0.prepend("");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parse(" > ", " > ");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parse("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      Element element0 = document0.body();
      Element element1 = element0.val("script");
      element1.parents();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Element element0 = new Element("java.lang.string@0000000076");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("math", "EMOVE");
      CDataNode cDataNode0 = new CDataNode("math");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) cDataNode0;
      document0.addChildren(nodeArray0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parse("_]H0nMhSI", "_]H0nMhSI");
      Element element0 = document0.prependElement("s+");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parse("qA&Mp<OQ>u{", "qA&Mp<OQ>u{");
      Element element0 = document0.head();
      document0.setParentNode(element0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.element$1", "org.jsoup.nodes.element$1");
      Element element0 = document0.body();
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Element element0 = new Element(" />");
      element0.nodeName();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C>omntEndBang", "C>omntEndBang");
      Element element0 = document0.prependElement("C>omntEndBang");
      Element element1 = element0.appendTo(document0);
      Element element2 = element1.previousElementSibling();
      element2.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("math", "EMOVE");
      Tag tag0 = Tag.valueOf("math");
      CDataNode cDataNode0 = new CDataNode("math");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "EMOVE", attributes0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) cDataNode0;
      document0.addChildren(nodeArray0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parse("_]H0nMhSI", "_]H0nMhSI");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "InSelect");
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("A|K9E le9IBye", "InSelect");
      document0.is((Evaluator) evaluator_AttributeWithValueNot0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#root", "}`");
      Evaluator.TagEndsWith evaluator_TagEndsWith0 = new Evaluator.TagEndsWith("math");
      document0.is((Evaluator) evaluator_TagEndsWith0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      Element element0 = document0.body();
      element0.is(":last-child");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":?Rj;wq9XTO}NgTEjU@", ":?Rj;wq9XTO}NgTEjU@");
      Element element0 = document0.append(":?Rj;wq9XTO}NgTEjU@");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a`zRb", "a`zRb");
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren((-1), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'|/IGVuOtp=A}", "'|/IGVuOtp=A}");
      Element element0 = document0.prependText("<html>\n <head></head>\n <body>\n  '|/IGVuOtp=A}\n </body>\n</html>");
      Elements elements0 = document0.getElementsMatchingOwnText("'|/IGVuOtp=A}");
      element0.insertChildren((-2), (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      Element element0 = document0.body();
      element0.html("zI=iDJI@xgK/HA5");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#root", "}`");
      Element element0 = document0.clone();
      Element element1 = document0.appendTo(element0);
      element1.html("Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parse("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("#root", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      formElement0.html((Appendable) null);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "gjqI#");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".");
      Element element0 = new Element(tag0, "");
      element0.clearAttributes();
      element0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Document.createShell("dHAjPcm'U1((1Zm c");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = new Document(".");
      Pattern pattern0 = Pattern.compile(".");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Hp'c#H&#j", "Hp'c#H&#j");
      document0.getElementsMatchingText("Hp'c#H&#j");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Tag tag0 = Tag.valueOf(",<Y)Y2IkG7");
      CDataNode cDataNode0 = new CDataNode(",<Y)Y2IkG7");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "Pattern syntax error: ", attributes0);
      Pattern pattern0 = Pattern.compile("Pattern syntax error: ", 65535);
      element0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parse("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Document.createShell("-q{UYR>x90F<c");
      document0.getElementsByTag("-I+[_tH<nlX");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Element element0 = new Element("Insert position out of bounds.");
      element0.getElementsByTag("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":?Rj;wq9XTO}NgTEjU@", ":?Rj;wq9XTO}NgTEjU@");
      document0.getElementsByIndexLessThan((-710));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("math", "$7sbU2L# (ot5XmzBa");
      document0.getElementsByIndexGreaterThan(14);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$Tag");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      document0.toggleClass("zI=iDJI@xgK/HA5");
      document0.toggleClass("l^Uhp,}U((qC|\"a");
      document0.getElementsByClass("l^Uhp,}U((qC|\"a");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#root", "}`");
      document0.getElementsByAttributeValueNot("Children collection to be inserted must not be null.", "#root");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("|", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("java.lang.string@0000000103");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("I)o-fh\"7]Q!0", "");
      Element element0 = new Element(tag0, "K*G1VfK!$", attributes1);
      Pattern pattern0 = Pattern.compile("");
      element0.getElementsByAttributeValueMatching("I)o-fh\"7]Q!0", pattern0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000076", "java.lang.string@0000000076");
      Element element0 = document0.attr("java.lang.string@0000000076", "java.lang.string@0000000076");
      element0.getElementsByAttributeValueEnding("java.lang.string@0000000076", "java.lang.string@0000000076");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      document0.getElementsByAttributeValue("<p'+Pk*:HJ6W-\"4", "UVh\"T~5 (nL$>x.");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("~(dp7 z8vs", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("children collection to be inserted must not be null.", "header");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "children collection to be inserted must not be null.", attributes1);
      pseudoTextElement0.getElementsByAttributeValue("children collection to be inserted must not be null.", "header");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Insert positio) [ut of +ounds.");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("Insert positio) [ut of +ounds.", "5J?-LGMNzY+&s~J");
      FormElement formElement0 = new FormElement(tag0, "Insert positio) [ut of +ounds.", attributes1);
      formElement0.getElementsByAttributeStarting("Insert positio) [ut of +ounds.");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ?|>BEZ^X~", " ?|>BEZ^X~");
      Element element0 = document0.head();
      element0.append("html");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse("j6va.lang.5tring@0000000076", "j6va.lang.5tring@0000000076");
      Element element0 = document0.addClass("j6va.lang.5tring@0000000076");
      element0.siblingIndex = (-1);
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Document.createShell("qA&M<OF>Q9Fu");
      Element element0 = document0.prependElement("br");
      Element element1 = element0.empty();
      element1.toggleClass("<br>");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("9U", "SjiZ87yN[itS");
      Element element0 = document0.appendTo(document0);
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("or.jsoup.nodes.EleCent$NodeList", "or.jsoup.nodes.EleCent$NodeList");
      document0.appendChild(document0);
      document0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of +ounds.");
      Element element0 = document0.head();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = new Document("remove");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lan.strikg@0000400076", "java.lan.strikg@0000400076");
      Element element0 = document0.body();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "#", attributes0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Document.createShell("zIriDJ|xI@x$K/HA5");
      Element element0 = document0.toggleClass("org.jsoup.select.Evaluator$IndexEquals");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Document.createShell("-q{UYR>x90F<c");
      document0.toggleClass("=cVa2D+^pt");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of +ounds.");
      Element element0 = document0.head();
      element0.children();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = new Document("T=Fex`0>02!~");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("mark", "mark");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parse("_]H0nMhSI", "_]H0nMhSI");
      document0.prependChild(document0);
      document0.child(1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of +ounds.", "Insert position out of +ounds.");
      Element element0 = document0.head();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parse("6@S", "6@S");
      document0.setParentNode(document0);
      CDataNode cDataNode0 = new CDataNode("6@S");
      document0.before((Node) cDataNode0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert positio) [ut of +ounds.", "Insert positio) [ut of +ounds.");
      Document document1 = Parser.parse("Insert positio) [ut of +ounds.", "dHAjPcm'U1((1Zm c");
      document1.setParentNode(document0);
      document1.before("java.lang.string@0000000055 }");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#root", "}`");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Element element0 = new Element("InSelect");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("CqF/])d", "CqF/])d");
      document0.setSiblingIndex((-312));
      document0.attr("", true);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parse("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      Element element0 = document0.body();
      Element element1 = element0.val("script");
      element1.before("");
      Element element2 = document0.body();
      element2.attr("AfterAttributeValue_quoted", false);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("math", "$7sbU2L# (ot5XmzBa");
      Element element0 = document0.body();
      element0.attr("", ".");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("d", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("5B7GVjml%65?50ORh");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, ":%s(%dn)", attributes0);
      element0.attr("g", "5B7GVjml%65?50ORh");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5k*q}", "5k*q}");
      Element element0 = document0.body();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Element element0 = new Element("sowtable");
      element0.siblingIndex = (-1978);
      element0.appendText("sowtable");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000093");
      Element element0 = document0.body();
      element0.appendText("#");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = new Document("CH|");
      document0.appendElement("id");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000093");
      document0.appendElement("menu");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parse("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      Element element0 = document0.body();
      Element element1 = element0.val("script");
      element1.appendChild(element0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of +ounds.");
      document0.siblingIndex = (-40);
      document0.append("Insert position out of +ounds.");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Element element0 = new Element(" />");
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ph1Nw>YlJFF", "ph1Nw>YlJFF");
      Element element0 = document0.prependElement("br");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parse("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      Element element0 = document0.body();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("math", "math");
      Element element0 = document0.prependElement("br");
      element0.after("math");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Jifnb_\"G", "Jifnb_\"G");
      Element element0 = document0.head();
      element0.after("Jifnb_\"G");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.element$1", "org.jsoup.nodes.element$1");
      Element element0 = document0.body();
      element0.after("C6{|34c=ms(L(ve1");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert positio) [ut of +ounds.", "Insert positio) [ut of +ounds.");
      Element element0 = document0.toggleClass("Insert positio) [ut of +ounds.");
      element0.siblingIndex = (-578);
      document0.addClass("Insert positio) [ut of +ounds.");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      Element element0 = document0.body();
      element0.addClass("");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000055 qa&m<f>q9f");
      document0.empty();
      document0.addClass("ForeignContent");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.wrap("Rg4dq&N*xMtB.zBS+");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":?Rj;wq9XTO}NgTEjU@", ":?Rj;wq9XTO}NgTEjU@");
      // Undeclared exception!
      try { 
        document0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("L]@y40+.zghF<RQ", "org.jsoup.select.Evaluator$AttributeWithValue");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("textarea", false);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.wrap("org.jsoup.select.Evaluator$AttributeWithValue");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parse("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.val("nw*n&uZN6Lv)y(E[?3 ");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Pattern syntax error: ", "$y,^\\|2`");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = new Document("Ar~[>A&;.Qg4Ph");
      // Undeclared exception!
      try { 
        document0.text("Ar~[>A&;.Qg4Ph");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000076", "java.lang.string@0000000076");
      CDataNode cDataNode0 = new CDataNode("java.lang.string@0000000076");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.tagName("zI=iDJI@xgK/HA5");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Hp'c#H&#j", "Hp'c#H&#j");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      // Undeclared exception!
      try { 
        document0.selectFirst(",<Y)Y2IkG7");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '<Y)Y2IkG7': unexpected token at '<Y)Y2IkG7'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$Tag");
      // Undeclared exception!
      try { 
        document0.select("org.jsoup.select.Evaluator$Tag");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.select.Evaluator$Tag': unexpected token at '$Tag'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parse("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Document.createShell("[7$uKO*)%6LXldLSG^");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Element element0 = new Element("sortable");
      DocumentType documentType0 = new DocumentType("\"PHA{coEC", "sortable", "sortable", "j^NJ;7R*>8CnqWxn", "sortable");
      element0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        element0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Document.createShell("-q{7YR>x90F<c");
      CDataNode cDataNode0 = new CDataNode("-q{7YR>x90F<c");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert positio) [ut of +ounds.", "Insert positio) [ut of +ounds.");
      Element element0 = document0.prependElement("br");
      List<Node> list0 = element0.childNodes();
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.prependText("br");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pubSysKey", "pubSysKey");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.prependElement("-Rl:Bk~lIZf&g");
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parse("}nZ_SVonzti_nBP'", "}nZ_SVonzti_nBP'");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.prependElement("bX");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qA&M<F>Q9F", "qA&M<F>Q9F");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.prependElement("b");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("dHAjPcm'U1((1Zm c", parseSettings0);
      Element element0 = new Element(tag0, "ZFK#WV^5KO");
      // Undeclared exception!
      try { 
        element0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".yLGiJVWZ*ec=cOl]", "java.lang.string@0000000048");
      CDataNode cDataNode0 = new CDataNode("~Xo8q@7Dd1D");
      Comment comment0 = new Comment("~Xo8q@7Dd1D");
      Node node0 = cDataNode0.doClone(comment0);
      // Undeclared exception!
      try { 
        document0.prependChild(node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parse("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      Element element0 = document0.body();
      element0.setParentNode(element0);
      // Undeclared exception!
      try { 
        document0.prependChild(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.parser.Token$EOF", "dHAjPcm'U1((1Zm c");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.prepend("zI=iDJI@xgK/HA5");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("~rN< =uS", "~rN< =uS");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.prepend("~rN< =uS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Jifnb_\"G", "zI=iDJI@xgK/HA5");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(21);
      // Undeclared exception!
      document0.outerHtmlTail(charArrayWriter0, 1621, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("zI=iDJI@xgK/HA5", "GF[=Ct;.!H7<yDB*4(");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "zI=iDJI@xgK/HA5");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 52, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, (-3840), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parse("zI=ieDIxgK/HA5", "zI=ieDIxgK/HA5");
      File file0 = MockFile.createTempFile("zI=ieDIxgK/HA5", "zI=ieDIxgK/HA5");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockFileWriter0, (-1128), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = new Document("#");
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      bufferedWriter0.close();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlTail(bufferedWriter0, 2144, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("CmmentEndang", "CmmentEndang");
      MockPrintStream mockPrintStream0 = new MockPrintStream("java.lang.string@0000000086");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(1115);
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintWriter0, 24, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = new Document("cX");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 52, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Element element0 = new Element("+]mTyUO");
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        element0.outerHtmlHead(charBuffer0, 832, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parse("qA&M<OF>}9Fu", "qA&M<OF>}9Fu");
      StringBuilder stringBuilder0 = new StringBuilder("!Y");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(25);
      // Undeclared exception!
      document0.outerHtmlHead(stringBuilder0, (-1644953643), document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$IsNthOfType");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 0, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      File file0 = MockFile.createTempFile("srAd=oD", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintStream0, (-2254), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Document.createShell("Iasert !ositio) [ut of +ounds.");
      DocumentType documentType0 = new DocumentType("Iasert !ositio) [ut of +ounds.", "Iasert !ositio) [ut of +ounds.", "Iasert !ositio) [ut of +ounds.", "j~@=&SWV~{fLt#Y");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("/", "6BS");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      document0.prependChild(document0);
      Evaluator.IsNthLastChild evaluator_IsNthLastChild0 = new Evaluator.IsNthLastChild(32, 32);
      // Undeclared exception!
      document0.is((Evaluator) evaluator_IsNthLastChild0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#root", "}`");
      // Undeclared exception!
      try { 
        document0.is("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.is("class");
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "{+");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parse("j6va.lang.5tring@0000000076", "j6va.lang.5tring@0000000076");
      Element element0 = document0.addClass("j6va.lang.5tring@0000000076");
      element0.siblingIndex = (-1);
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) element0;
      nodeArray0[7] = (Node) element0;
      nodeArray0[8] = (Node) element0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.html("zI=iDJI@xgK/HA5");
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parse("-q{UYR>x90F<c", "param");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-F^C>9r3&-$e%H", "-F^C>9r3&-$e%H");
      CDataNode cDataNode0 = new CDataNode("|4T/dyD)LyPHFA");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.html("-F^C>9r3&-$e%H");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      document0.prependChild(document0);
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      document0.html(pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("rp", "rp");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "rp");
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":", ":");
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode(":");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("mark", "mark");
      // Undeclared exception!
      try { 
        document0.html((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Document.createShell("zI=iDJI@xgK/HA5");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".");
      Element element0 = new Element(tag0, "");
      // Undeclared exception!
      try { 
        element0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = new Document("remove");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Hp'c#H&#j", "Hp'c#H&#j");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("dHAjPcm'U1((1Zm c", parseSettings0);
      Element element0 = new Element(tag0, "ZFK#WV^5KO");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("wV!HSX|4", "R+>UvQ'VfGT");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("dHAjPcm'U1((1Zm c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: dHAjPcm'U1((1Zm c
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parse("zI=ieDIxgK/HA5", "zI=ieDIxgK/HA5");
      Comment comment0 = new Comment("zI=ieDIxgK/HA5");
      document0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("zI=ieDIxgK/HA5");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a`zRb", "a`zRb");
      document0.setParentNode(document0);
      document0.setSiblingIndex((-1815));
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("org.jsoup.parser.Token$Character");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parse("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      CDataNode cDataNode0 = new CDataNode("zI=iDJI@xgK/HA5");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("zI=iDJI@xgK/HA5");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parse("zI=ieDIxgK/HA5", "zI=ieDIxgK/HA5");
      Comment comment0 = new Comment("zI=ieDIxgK/HA5");
      document0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("Tag name must not be empty.");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert positio) [ut of +ounds.", "Insert positio) [ut of +ounds.");
      Element element0 = document0.prependElement("br");
      element0.siblingIndex = (-3831);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("br");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parse("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      // Undeclared exception!
      try { 
        document0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pubSysKey", "pubSysKey");
      CDataNode cDataNode0 = new CDataNode("hx#>IzI|8g617");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals((-305));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parse("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      // Undeclared exception!
      try { 
        document0.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert positio) [ut of +ounds.", "Insert positio) [ut of +ounds.");
      Element element0 = document0.prependElement("br");
      element0.siblingIndex = (-1452);
      // Undeclared exception!
      try { 
        element0.getElementsByClass("</");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Element element0 = new Element("textarea");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueStarting("] NW+Yc3u_m8Wor", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Hp'c#H&#j", "Hp'c#H&#j");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "N0odIF@+V[7|4J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("qA&M<OF>9u{u", "qA&M<OF>9u{u");
      document0.attr("A-,!ReE/`Y", "KbR&^^o2:|yRL");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("A-,!ReE/`Y", (Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$AttributeWithValueMatching", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("#root", "#root");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parse("body", "id");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("--!", "t`\"L{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: t`\"L{
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Element element0 = new Element(" />");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueEnding("", "/>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Tr|x");
      CDataNode cDataNode0 = new CDataNode("Tr|x");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "", attributes0);
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueContaining("Tr|x", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Pattern syntax error: ");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("Pattern syntax error: ", "{1%Xo6X5?lxP{Djn");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "Pattern syntax error: ", attributes1);
      String[] stringArray0 = new String[0];
      attributes1.vals = stringArray0;
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeValueContaining("Pattern syntax error: ", "Pattern syntax error: ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Element element0 = new Element("Insert position out of bounds.");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("zI=iDJI@xgK/HA5", "&gt;");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert positio) [ut of +ounds.", "Insert positio) [ut of +ounds.");
      Element element0 = document0.prependElement("br");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = parser0.parseFragmentInput("Insert positio) [ut of +ounds.", document0, "Insert positio) [ut of +ounds.");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementById("bDN Vu?*Y@1;!|;yx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ZFK#WV^5KO", "ZFK#WV^5KO");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("mark", "mark");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode(",<Y)Y2IkG7");
      Document document0 = Document.createShell(">MoikRdXWWf");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Document.createShell("qA&M<OF>Q9Fu");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.empty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.strin@%00000g6", "java.lang.strin@%00000g6");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".");
      Element element0 = new Element(tag0, "");
      Element element1 = element0.prependElement(".");
      // Undeclared exception!
      try { 
        element1.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<M\"ZfR}[QQQTJ=", "<M\"ZfR}[QQQTJ=");
      CDataNode cDataNode0 = new CDataNode("<M\"ZfR}[QQQTJ=");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parse("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Q^:", "br");
      // Undeclared exception!
      try { 
        document0.child(58);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 58, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Document.createShell(":contains(%s)");
      // Undeclared exception!
      try { 
        document0.child((-628));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("RceEPmW+Y~!Y", "qA&M<OF>}9Fu");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.before("RceEPmW+Y~!Y");
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parse("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert positio) [ut of +ounds.", "Insert positio) [ut of +ounds.");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.attr("java.lang.string@0000000055", "`G?PGD+");
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pubSysKey", "pubSysKey");
      // Undeclared exception!
      try { 
        document0.attr((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("qA&M<OF>9u{u", "qA&M<OF>9u{u");
      DataNode dataNode0 = new DataNode("qA&M<OF>9u{u");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parse("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      Element element0 = document0.body();
      element0.setParentNode(document0);
      // Undeclared exception!
      try { 
        element0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parse("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'%(h67G\"F?-?{", "org.jsoup.nodes.Element");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = parser0.parseFragmentInput("org.jsoup.nodes.Element$1", document0, "org.jsoup.nodes.Element$1");
      document1.childNodes = list0;
      // Undeclared exception!
      try { 
        document1.appendText("org.jsoup.nodes.Element$1");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zI=iDJI@xgKzHA5", "zI=iDJI@xgKzHA5");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Document.createShell("dHAjPcm'U1((1Zm c");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.appendElement("dHAjPcm'U1((1Zm c");
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000050", "VwYbWDm]tD,VE;(");
      // Undeclared exception!
      try { 
        document0.appendElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Element element0 = new Element("#root");
      CDataNode cDataNode0 = new CDataNode(">S40k4UeV");
      Node node0 = cDataNode0.doClone(element0);
      // Undeclared exception!
      try { 
        element0.appendChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Element element0 = new Element("IneleMct");
      // Undeclared exception!
      try { 
        element0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.append("s+");
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("zI=iDJI@xgK/HA5", "ZFK#WV^5KO");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Document.createShell("dHAjPcm'U1((1Zm c");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      try { 
        document0.after(nodeArray0[4]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Document.createShell("dHAjPcm'U1((1Zm c");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.after("dHAjPcm'U1((1Zm c");
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("math", "REMOVE");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Tag tag0 = Tag.valueOf("y<k}KD IjzD{o");
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "head");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5k*q}", "5k*q}");
      StringBuilder stringBuilder0 = new StringBuilder();
      document0.html((Appendable) stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of +ounds.");
      document0.toggleClass("u77N )&|C?");
      document0.hasClass("Insert position out of +ounds.");
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">MoikRdXWWf", ">MoikRdXWWf");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parse("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      document0.prepend("Inse2t positio) [ut of +ounds.");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      Element element0 = document0.body();
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parse("q\"q_a", "REMOVE");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = new Document("#root");
      Tag tag0 = Tag.valueOf("#root");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "zI=iDJI@xgK/HA5", attributes0);
      document0.prependChild(formElement0);
      formElement0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C>omntEndBang", "C>omntEndBang");
      Element element0 = document0.prependElement("C>omntEndBang");
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      Element element0 = document0.body();
      element0.append("H");
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("or.jsoup.nodes.EleCent$NodeList", "or.jsoup.nodes.EleCent$NodeList");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("math", "math");
      Element element0 = document0.val("math");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$Tag");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Document.createShell("-q{UYR>x90F<c");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of +ounds.");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.element$1", "org.jsoup.nodes.element$1");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Hp'c#H&#j", "Hp'c#H&#j");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ph1Nw>YlJFF", "ph1Nw>YlJFF");
      Element element0 = document0.createElement("sortable");
      element0.selectFirst("sortable");
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$IsNthLastOfType", parseSettings0);
      Element element0 = new Element(tag0, "org.jsoup.select.Evaluator$AttributeStarting", (Attributes) null);
      // Undeclared exception!
      try { 
        element0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("qA&M<OF>9u{u", "qA&M<OF>9u{u");
      document0.getElementsByAttributeValueMatching("A-,!ReE/`Y", (Pattern) null);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000076", "java.lang.string@0000000076");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parse("q\"q_a", "REMOVE");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Document.createShell("qA&M<OF>Q9Fu");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      document0.hasClass(" > ");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert positio) [ut of +ounds.", "Insert positio) [ut of +ounds.");
      Element element0 = document0.prependElement("br");
      element0.prependText("br");
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lan.strikg@0000400076", "qm-G");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringBuffer0, 0, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Document.createShell("qA&M<OF>Q9Fu");
      Element element0 = document0.prependElement("br");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "qA&M<OF>Q9Fu");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      element0.outerHtmlHead(stringBuilder0, 1001, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("mark", "mark");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ^> ", " ^> ");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert positio) [ut of +ounds.", "Insert positio) [ut of +ounds.");
      Element element0 = document0.prependElement("br");
      document0.tagName("br");
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Document.createShell("qA&M<OF>Q9Fu");
      Element element0 = document0.prependElement("b");
      Element element1 = element0.shallowClone();
      element1.outerHtml();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert positio) [ut of +ounds.", "Insert positio) [ut of +ounds.");
      MockFile mockFile0 = new MockFile((File) null, "java.lang.string@0000000043");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(mockPrintWriter0, 1, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000076", "java.lang.string@0000000076");
      document0.toggleClass("java.lang.string@0000000076");
      Element element0 = document0.addClass("java.lang.string@0000000076");
      element0.toggleClass("java.lang.string@0000000076");
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert positio) [ut of +ounds.", "Insert positio) [ut of +ounds.");
      Element element0 = document0.toggleClass("Insert positio) [ut of +ounds.");
      element0.addClass("qkU\"$A");
      document0.hasClass("qkU\"$A");
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("/", "6BS");
      document0.childNodesAsArray();
      document0.toggleClass("/");
      document0.addClass("/");
      document0.hasClass("java.lang.string@0000000086");
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parse(" > ", " > ");
      document0.toggleClass("m_P97KLle");
      document0.addClass(" > ");
      document0.hasClass(":nth-child(%d)");
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert positio) [ut of +ounds.", "Insert positio) [ut of +ounds.");
      Element element0 = document0.toggleClass("Insert positio) [ut of +ounds.");
      document0.addClass("Insert positio) [ut of +ounds.");
      element0.hasClass("textarea");
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000076", "java.lang.string@0000000076");
      document0.addClass("java.lang.string@0000000076");
      document0.hasClass("java.lang.string@0000000076");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = new Document("REMOVE");
      document0.toggleClass("REMOVE");
      document0.getElementsByClass("org.jsoup.parser.Token$Doctype");
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert positio) [ut of +ounds.", "Insert positio) [ut of +ounds.");
      Element element0 = document0.toggleClass("Insert positio) [ut of +ounds.");
      element0.hasClass("textarea");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      CDataNode cDataNode0 = new CDataNode("Insert position out of bounds.");
      Element element0 = document0.prependChild(cDataNode0);
      element0.data();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000076", "java.lang.string@0000000076");
      DataNode dataNode0 = DataNode.createFromEncoded("?fT", "java.lang.string@0000000076");
      Element element0 = document0.appendChild(dataNode0);
      element0.data();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("43E", "pDfJ:!e]-Dg");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("       ", "Insert positio) [ut of +ounds.");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a`zRb", "a`zRb");
      document0.setParentNode(document0);
      document0.getElementsMatchingOwnText("org.jsoup.parser.Token$Character");
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("5B7GVjml%65?50ORh");
      Element.preserveWhitespace(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert positio) [ut of +ounds.", "Insert positio) [ut of +ounds.");
      document0.prependElement("br");
      document0.getElementsContainingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000055 qa&m<f>q9f");
      document0.title("java.lang.string@0000000055 qa&m<f>q9f");
      document0.getElementsContainingOwnText("java.lang.string@0000000055 qa&m<f>q9f");
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C>omntEndBang", "C>omntEndBang");
      DataNode dataNode0 = DataNode.createFromEncoded("C>omntEndBang", ".1f^RT20Qc@T+r/+");
      document0.appendChild(dataNode0);
      document0.getElementsMatchingOwnText("C>omntEndBang");
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("body", "#root");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of +ounds.");
      document0.prepend("java.lang.string@0000000050");
      document0.append("Insert position out of +ounds.");
      document0.getElementsContainingText("Insert position out of +ounds.");
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Document.createShell("-q{UYR>x90F<c");
      CDataNode cDataNode0 = new CDataNode("-q{UYR>x90F<c");
      Element element0 = document0.prependChild(cDataNode0);
      element0.getElementsContainingText("-q{UYR>x90F<c");
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C>omntEndBang", "C>omntEndBang");
      DataNode dataNode0 = DataNode.createFromEncoded("C>omntEndBang", ".1f^RT20Qc@T+r/+");
      document0.appendChild(dataNode0);
      document0.getElementsMatchingText("java.lang.string@0000000055");
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000076", "java.lang.string@0000000076");
      document0.getElementById("ppx&");
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zI=iDJI@xgKzHA5", "zI=iDJI@xgKzHA5");
      document0.setParentNode(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Document.createShell("dHAjPcm'U1((1Zm c");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      document0.setParentNode(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert positio) [ut of +ounds.", "Insert positio) [ut of +ounds.");
      Tag tag0 = Tag.valueOf("Insert positio) [ut of +ounds.");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Insert positio) [ut of +ounds.", attributes0);
      document0.prependChild(formElement0);
      formElement0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#root", "}`");
      document0.setParentNode(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lan.strikg@0000400076", "java.lan.strikg@0000400076");
      Element element0 = document0.body();
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Document.createShell("-q{UYR>x90F<c");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = new Document("REMOVE");
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Jifnb_\"G", "Jifnb_\"G");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals("Jifnb_\"G", element0.baseUri());
      assertFalse(elements0.isEmpty());
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parse("_]H0nMhSI", "_]H0nMhSI");
      document0.appendTo(document0);
      Elements elements0 = document0.siblingElements();
      assertEquals(1, elements0.size());
      assertEquals("_]H0nMhSI", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Document.createShell("-q{UYR>x90F<c");
      document0.siblingElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("-q{UYR>x90F<c", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Element element0 = new Element("sortable");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.element$no^elist");
      element0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        element0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parse("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      Element element0 = document0.body();
      Element element1 = element0.val("script");
      element1.before("");
      String string0 = element1.cssSelector();
      assertEquals("zI=iDJI@xgK/HA5", element1.baseUri());
      assertEquals("html > body:nth-child(4)", string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("dHAjPcm'U1((1Zm c", parseSettings0);
      Element element0 = new Element(tag0, "ZFK#WV^5KO");
      Document document0 = Parser.parseBodyFragmentRelaxed("ZFK#WV^5KO", "_1E)Ffct3.");
      Element element1 = document0.appendTo(element0);
      String string0 = element1.cssSelector();
      assertEquals(1, element0.childNodeSize());
      assertEquals("dHAjPcm'U1((1Zm c > #root", string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("CmmentEndang", "CmmentEndang");
      document0.setParentNode(document0);
      String string0 = document0.cssSelector();
      assertEquals("CmmentEndang", document0.baseUri());
      assertEquals("#root", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parse("Insert positio) [ut of +ounds.", "Insert positio) [ut of +ounds.");
      document0.toggleClass("Insert positio) [ut of +ounds.");
      document0.cssSelector();
      assertEquals("Insert positio) [ut of +ounds.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ZFK#WV^5KO", "ZFK#WV^5KO");
      Node[] nodeArray0 = new Node[7];
      // Undeclared exception!
      try { 
        document0.insertChildren(8192, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("UMm4pm{<Glf`$DsY)", "UMm4pm{<Glf`$DsY)");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren((-2035), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Element element0 = new Element("java.lang.string@0000000076");
      Node[] nodeArray0 = new Node[0];
      Element element1 = element0.insertChildren((-1), nodeArray0);
      assertSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#root", "}`");
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren(3212, (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#root", "}`");
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1110026255), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'|/IGVuOtp=A}", "'|/IGVuOtp=A}");
      Elements elements0 = document0.getElementsMatchingOwnText("'|/IGVuOtp=A}");
      document0.insertChildren((-2), (Collection<? extends Node>) elements0);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#root", "}`");
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      assertEquals("}`", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parse("Ecrit", "Ecrit");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("Ecrit", document0.baseUri());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      Element element0 = document0.body();
      List<TextNode> list0 = element0.textNodes();
      assertEquals("zI=iDJI@xgK/HA5", element0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("math", "math");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("math", document0.baseUri());
      assertEquals(0, list0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parse("Ecrit", "Ecrit");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1548));
      assertEquals("Ecrit", document0.baseUri());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Document.createShell("-q{UYR>x90F<c");
      document0.selectFirst("width must be > 0");
      assertEquals(1, document0.childNodeSize());
      assertEquals("-q{UYR>x90F<c", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      document0.getAllElements();
      assertEquals("zI=iDJI@xgK/HA5", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Element element0 = new Element("body");
      Element element1 = element0.removeClass("yh;glt@)1Uc!9*O4A,");
      assertEquals("", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C>omntEndBang", "C>omntEndBang");
      // Undeclared exception!
      try { 
        document0.before("C>omntEndBang");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5k*q}", "5k*q}");
      document0.getElementsByAttribute("5k*q}");
      assertEquals("5k*q}", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Element element0 = new Element("InSelect");
      Elements elements0 = element0.getElementsByAttributeValueNot(" />", "               ");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of +ounds.", "Insert position out of +ounds.");
      document0.doSetBaseUri("K7bD#NYU");
      assertEquals("K7bD#NYU", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ph1Nw>YlJFF", "ph1Nw>YlJFF");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val("sowtable");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      document0.getElementsByAttributeValueContaining(" > ", " > ");
      assertEquals(" > ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("qA&M<OF>9u{u", "qA&M<OF>9u{u");
      Elements elements0 = document0.getElementsContainingText("qA&M<OF>9u{u");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertEquals("qA&M<OF>9u{u", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parse("Ecrit", "Ecrit");
      document0.getElementsByAttributeValueEnding("Ecrit", "Ecrit");
      assertEquals("Ecrit", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      document0.is(":last-child");
      assertEquals("zI=iDJI@xgK/HA5", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pubSysKey", "pubSysKey");
      document0.getElementsByAttributeValueMatching("pubSysKey", "hx#>IzI|8g617");
      assertEquals("pubSysKey", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Document.createShell("Cm7en^Endanz");
      document0.attr("Cm7en^Endanz", ".)VKt.THuZ/");
      Elements elements0 = document0.getElementsByAttributeValueStarting("Cm7en^Endanz", ".)VKt.THuZ/");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Cm7en^Endanz", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert positio) [ut of +ounds.", "Insert positio) [ut of +ounds.");
      Elements elements0 = document0.getElementsByIndexEquals(915);
      assertEquals(1, document0.childNodeSize());
      assertEquals("Insert positio) [ut of +ounds.", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Element element0 = new Element("Insert position out of bounds.");
      Elements elements0 = element0.getElementsByAttributeStarting("s");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("mark", "mark");
      Elements elements0 = document0.getElementsByIndexLessThan(1597);
      assertEquals(3, elements0.size());
      assertEquals("mark", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Jifnb_\"G", "Jifnb_\"G");
      // Undeclared exception!
      try { 
        document0.after("Jifnb_\"G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("43E", "pDfJ:!e]-Dg");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parse("?h", "footer");
      // Undeclared exception!
      try { 
        document0.select("WD[dM%LE8XY<=E;");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'L'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Document.createShell("Cm7en^Endanz");
      document0.getElementsByAttributeValueStarting("Cm7en^Endanz", ".)VKt.THuZ/");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Cm7en^Endanz", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zI=iDJI@xgK/HA5", "zI=iDJI@xgK/HA5");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("%>", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Document.createShell("-q{UYR>x90F<c");
      Element element0 = document0.attr("-q{UYR>x90F<c", false);
      assertEquals(1, element0.childNodeSize());
      assertEquals("-q{UYR>x90F<c", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Document.createShell("qA&M<OF>Q9Fu");
      document0.wholeText();
      assertEquals("qA&M<OF>Q9Fu", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ph1Nw>YlJFF", "ph1Nw>YlJFF");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = Document.createShell("sortable");
      document0.dataset();
      assertEquals("sortable", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("CmmentEndang", "CmmentEndang");
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.child(0);
      assertEquals("CmmentEndang", element0.baseUri());
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Element element0 = new Element("sortable");
      Elements elements0 = element0.previousElementSiblings();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Document document0 = Parser.parse("", "                    ");
      Element element0 = document0.prependText("                    ");
      boolean boolean0 = element0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Document document0 = Parser.parse("Ecrit", "Ecrit");
      Pattern pattern0 = Pattern.compile("Ecrit", (-1742));
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertEquals("Ecrit", document0.baseUri());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Document document0 = Parser.parse("body", "Ecrit");
      document0.appendText("Ecrit");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Document document0 = Parser.parse("}nZ_SVonzti_nBP'", "}nZ_SVonzti_nBP'");
      // Undeclared exception!
      try { 
        document0.wrap("<br>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }
}
