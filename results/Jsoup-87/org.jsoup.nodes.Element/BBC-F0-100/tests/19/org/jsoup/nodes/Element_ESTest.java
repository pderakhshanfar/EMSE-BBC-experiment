/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 22:28:50 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("Tag cnnot b self closin; not a void tag", "Tag cnnot b self closin; not a void tag");
      Element element0 = document0.toggleClass("Tag cnnot b self closin; not a void tag");
      element0.toggleClass("Tag cnnot b self closin; not a void tag");
      document0.getElementsByClass("5dL/.tpP<$vaT]sXe");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsByAttributeValueMatching("org.jsoup.nodes.Element", "html");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("K'b~ b[y=w", "K'b~ b[y=w");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      Document document1 = document0.clone();
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parse("Tag cannot be self closing; not a void tag", "org.jsoup.nodes.Element$NodeList");
      LinkedList<PseudoTextElement> linkedList0 = new LinkedList<PseudoTextElement>();
      LinkedHashSet<PseudoTextElement> linkedHashSet0 = new LinkedHashSet<PseudoTextElement>(linkedList0);
      document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(outputStreamWriter0, 36);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(bufferedWriter0, 1, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#root", "#root");
      MockPrintStream mockPrintStream0 = new MockPrintStream("#root");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(mockPrintStream0, 62, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Document.createShell("%ePyW6dG&26@}Ex2");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Document.createShell("%ePyW6dG&26@}Ex2");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Document.createShell("%ePyW6dG&26@}Ex2");
      Document document1 = Parser.parse("O':T4,z*S@`xW", "%ePyW6dG&26@}Ex2");
      document1.setParentNode(document0);
      document1.wrap("#root");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = new Document("embed");
      document0.normalise();
      Element element0 = document0.body();
      element0.wrap("embed");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{]qx<La:-H*n><u", "{]qx<La:-H*n><u");
      Element element0 = document0.body();
      element0.wrap("$zdv;i~se(\"gj9u");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{]qx<La:-H*n><u", "{]qx<La:-H*n><u");
      Element element0 = document0.body();
      element0.val(":containsOwn");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Tag tag0 = Tag.valueOf("]I\"R7&5ix");
      Element element0 = new Element(tag0, "org.jsoup.select.Evaluator$IndexGreatrThan");
      element0.val("]I\"R7&5ix");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = new Document("embed");
      document0.normalise();
      Element element0 = document0.body();
      element0.toggleClass("org.jsoup.select.Evaluator$AttributeWithValueEnding");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parse("Tag cnnot b self closin; not a void tag", "Tag cnnot b self closin; not a void tag");
      document0.siblingIndex = (-747);
      document0.toggleClass("Tag cnnot b self closin; not a void tag");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Element element0 = new Element("OF0M/\"+}|");
      element0.setSiblingIndex((-2411));
      element0.text("/>");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+`a", "+`a");
      Element element0 = document0.body();
      element0.text(":prev%s");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+`a", "+`a");
      document0.text(":prev%s");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{]qx<La:-H*n><u", "{]qx<La:-H*n><u");
      Element element0 = document0.appendElement("t@");
      element0.tagName("t@");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("h2");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("$n");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "$n", attributes0);
      pseudoTextElement0.tagName("body");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parse("radio", "radio");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Er2T, HF# Pv=t", "Er2T, HF# Pv=t");
      Element element0 = document0.appendElement("br");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parse("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Er2T, HF# Pv=t", "Er2T, HF# Pv=t");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cnnot b self closin; not a void tag", "Tag cnnot b self closin; not a void tag");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b", ".]/Z6:*{");
      document0.selectFirst("br");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parse("H 9aFUttE>IA%", "H 9aFUttE>IA%");
      document0.selectFirst(",ZGB");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.selectFirst("body");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.select("textarea");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.select("body");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Element element0 = new Element("OF0M/\"+}|");
      element0.setSiblingIndex((-2411));
      element0.removeClass(".^`9+");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("queue not long enough to consume sequence", "queue not long enough to consume sequence");
      Element element0 = document0.body();
      element0.removeClass(" />");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parse("sarcasm", "sarcasm");
      Element element0 = document0.head();
      Element element1 = element0.before((Node) document0);
      element1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("l", "RYEP\"&q4o1JH#zf37");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{]qx<La:-H*n><u", "{]qx<La:-H*n><u");
      Element element0 = document0.appendElement("title");
      Element.preserveWhitespace(element0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b", ".]/Z6:*{");
      Element element0 = document0.body();
      element0.prependText("=dH:3J*;");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "w@p`D=*2S1h.");
      document0.prependElement("html");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cnnot b self closin; not a void tag", "Tag cnnot b self closin; not a void tag");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cnnot b self closin; not a void tag", "Tag cnnot b self closin; not a void tag");
      Element element0 = document0.body();
      element0.prepend("Lr'y\"7s,d'C'*bq");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = new Document("Unknown combinator: ");
      document0.prepend("");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b", ".]/LZ6:*{");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Document.createShell("+`a");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tg cnnot b self clos]n; notIa void tag", "Tg cnnot b self clos]n; notIa void tag");
      Element element0 = new Element("Tg cnnot b self clos]n; notIa void tag");
      element0.appendTo(document0);
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = new Document("E>O\"z!");
      document0.setParentNode(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("B:)nC", "B:)nC");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("h2");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("$n");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "$n", attributes0);
      pseudoTextElement0.nodeName();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      Element element0 = document0.body();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Document.createShell("B x0{JF%y{,cm*s\"l");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("enb\"5k0Q%(pM:kcN", "");
      Evaluator.ContainsText evaluator_ContainsText0 = new Evaluator.ContainsText("");
      document0.is((Evaluator) evaluator_ContainsText0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cnnot b self closin; not a void tag", "Tag cnnot b self closin; not a void tag");
      Element element0 = document0.appendElement("br");
      element0.is("br");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("2}T", "2}T");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren((-1), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to b nsertedmust not be null.");
      Element element0 = document0.appendElement("Children collection to b nsertedmust not be null.");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      element0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.appendElement("br");
      element0.html("br");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cQ", "cQ");
      document0.siblingIndex = (-1499);
      document0.html("cQ");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&amp;", "&amp;");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("h2");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("$n");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "$n", attributes0);
      PipedWriter pipedWriter0 = new PipedWriter();
      pseudoTextElement0.html(pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b", ".]/Z6:*{");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.createElement(" m=N)WND\"f0");
      element0.html();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Tag tag0 = Tag.valueOf("id");
      CDataNode cDataNode0 = new CDataNode("/3rN15;s");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "VSV~H1", attributes0);
      pseudoTextElement0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k0E9", "58Nu@u|J>v2-6Q2lo5");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("huyj3'rqk%1K6 ,#", "huyj3'rqk%1K6 ,#");
      Element element0 = document0.head();
      Pattern pattern0 = Pattern.compile("huyj3'rqk%1K6 ,#", (-1324));
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("l");
      Document document0 = Parser.parseBodyFragmentRelaxed("l", "RYEP\"&q4o1JH#zf37");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = new Document("embed");
      document0.getElementsMatchingText("=x<E3fETCW]");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      document0.getElementsMatchingText("Tag cannot be self closing; not a void tag");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parse("sarcasm", "sarcasm");
      Pattern pattern0 = Pattern.compile("sarcasm");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/zk`{-Ez|R#Q", "+`a");
      document0.getElementsContainingText((String) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Document.createShell("%ePyW6dG&26@}Ex2");
      document0.getElementsByTag(":Fq]");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Document.createShell("+`a");
      document0.getElementsByTag("#root");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "w@p`D=*2S1h.");
      document0.getElementsByIndexLessThan((-37));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Er2T, F# Pv=t", "Er2T, F# Pv=t");
      document0.getElementsByIndexGreaterThan(60);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("g{:TYs4{V60IWp", "g{:TYs4{V60IWp");
      document0.getElementsByIndexEquals(1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("I", "I");
      document0.getElementsByAttributeValueNot("oe^rh_;d(w&<p(", "I");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Tag tag0 = Tag.valueOf(" />");
      CDataNode cDataNode0 = new CDataNode(" />");
      Attributes attributes0 = cDataNode0.attributes();
      Attribute attribute0 = new Attribute(" />", "meter", attributes0);
      attributes0.put(attribute0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, " />", attributes0);
      pseudoTextElement0.getElementsByAttributeValue(" />", "meter");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parse("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      document0.attr("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      document0.getElementsByAttributeStarting("Tag cannot be self closing; not a void tag");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parse("H+~tr6\"R>%", "H+~tr6\"R>%");
      document0.getElementsByAttribute("WH`~P ");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Tag tag0 = Tag.valueOf("RYEP\"&q4o1JH#zf37");
      CDataNode cDataNode0 = new CDataNode("B x0{JF%y{,cm*s\"l");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("RYEP\"&q4o1JH#zf37", "B x0{JF%y{,cm*s\"l");
      FormElement formElement0 = new FormElement(tag0, "B x0{JF%y{,cm*s\"l", attributes1);
      formElement0.getElementsByAttribute("RYEP\"&q4o1JH#zf37");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("slwYjted", "slwYjted");
      Element element0 = document0.appendElement("slwYjted");
      Element element1 = element0.val("slwYjted");
      document0.prependText(" > ");
      element1.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      Element element0 = document0.body();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parse("Tag cnnot b self closin; not a void tag", "Tag cnnot b self closin; not a void tag");
      document0.siblingIndex = (-747);
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cnnot b self closin; not a void tag", "Tag cnnot b self closin; not a void tag");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse("'tt", "'tt");
      document0.setSiblingIndex((-1716));
      document0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parse("'tt", "'tt");
      Element element0 = document0.body();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b", ".]/LZ6:*{");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Element element0 = new Element("it@igrlPH");
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parse("selected", "bq3");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document0.addChildren(nodeArray0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("id", "id");
      Element element0 = document0.head();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parse("Tag cnnot b self closin; not a void tag", "Tag cnnot b self closin; not a void tag");
      document0.toggleClass("Tag cnnot b self closin; not a void tag");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parse("Tag cnnot b self closin; not a void tag", "Tag cnnot b self closin; not a void tag");
      document0.toggleClass("Tag cnnot b self closin; not a void tag");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("I", "I");
      Element element0 = document0.head();
      element0.children();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = new Document("Y+T%U/}T[M}{f");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parse("slwYjted", "slwYjted");
      document0.appendElement("slwYjted");
      document0.child(1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("id", "id");
      document0.setParentNode(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{]qx<La:-H*n><u", "{]qx<La:-H*n><u");
      Element element0 = document0.appendElement("title");
      element0.before(">>5V/\"$.");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Document.createShell("+`a");
      Document document1 = Parser.parseBodyFragmentRelaxed("+`a", "+`a");
      document0.reparentChild(document1);
      document1.before("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("2}T", "2}T");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$IsNthLastChild");
      document0.setSiblingIndex((-86));
      document0.attr("9T_uNSr#|OE]Fk", true);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      Element element0 = document0.body();
      element0.attr("Tag cannot be self closing; not a void tag", true);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = new Document("5Cvt");
      document0.attr("org.jsoup.nodes.Element$NodeList", true);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parse("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      Element element0 = document0.body();
      element0.attr("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      Element element0 = document0.appendElement("GRqAtyW;k");
      element0.attr("GRqAtyW;k", "GRqAtyW;k");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parse("", "K8");
      Element element0 = document0.body();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Document.createShell("+`a");
      Element element0 = document0.body();
      element0.appendText("#root");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      Element element0 = document0.body();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Tag tag0 = Tag.valueOf("a]");
      Element element0 = new Element(tag0, ":matches(%s)");
      DataNode dataNode0 = new DataNode(":matches(%s)", ".a({?;+GI:1X");
      dataNode0.reparentChild(element0);
      element0.appendChild(dataNode0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Document.createShell(")1>vN");
      Element element0 = document0.appendElement(")1>vN");
      element0.append("--!");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("yr$iiXT5", "yr$iiXT5");
      document0.siblingIndex = (-3015);
      document0.append(";&FC*:O!q3#{");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("I", "I");
      Element element0 = document0.head();
      element0.append("Nb");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = new Document("5Cvt");
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tgcnnotb self clos]n; notIa void tag", "Tgcnnotb self clos]n; notIa void tag");
      Document document1 = Parser.parseBodyFragment("Tgcnnotb self clos]n; notIa void tag", "Tgcnnotb self clos]n; notIa void tag");
      document0.setParentNode(document1);
      document0.after((Node) document1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("I", "I");
      Element element0 = document0.appendElement("oe^rh_;d(w&<p(");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      Element element0 = document0.body();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parse("radio", "radio");
      Element element0 = new Element("radio");
      Document document1 = (Document)document0.appendTo(element0);
      document1.after("radio");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      Element element0 = document0.appendElement("@^");
      element0.after("FRL>");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parse("5CK8", "5CK8");
      Element element0 = document0.head();
      element0.addClass("O[{9I&%");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      Element element0 = document0.appendElement("--!");
      element0.addClass("--!");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Tag tag0 = Tag.valueOf("]I\"R7&5ix");
      Element element0 = new Element(tag0, "i&k7fhdp=j'\u00038r");
      element0.reparentChild(element0);
      // Undeclared exception!
      element0.wrap("{]qx<La:-H*n><u");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Tag tag0 = Tag.valueOf("a]");
      Element element0 = new Element(tag0, ":matches(%s)");
      DataNode dataNode0 = new DataNode(":matches(%s)", ".a({?;+GI:1X");
      dataNode0.reparentChild(element0);
      // Undeclared exception!
      try { 
        element0.wrap("a]");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("id", "id");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.val("textarea");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("selected");
      Attributes attributes0 = cDataNode0.attributes();
      attributes0.vals = null;
      Tag tag0 = Tag.valueOf("selected");
      FormElement formElement0 = new FormElement(tag0, "selected", attributes0);
      // Undeclared exception!
      try { 
        formElement0.val("selected");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Tag cnnot b self closin; not a void tag");
      Attributes attributes0 = cDataNode0.attributes();
      String[] stringArray0 = new String[0];
      attributes0.vals = stringArray0;
      Tag tag0 = Tag.valueOf("maS1b&;JN|6A 5");
      Element element0 = new Element(tag0, "selected", attributes0);
      // Undeclared exception!
      try { 
        element0.val("VAR$YT^)cB");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", ">1i|XbY-}2pc#{G8");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("head", "head");
      // Undeclared exception!
      try { 
        document0.text("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cnnot b self closin; not a void tag", "Tag cnnot b self closin; not a void tag");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cQ", "cQ");
      Element element0 = document0.appendElement("cQ");
      List<Node> list0 = document0.childNodesCopy();
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parse("radio", "radio");
      CDataNode cDataNode0 = new CDataNode("P{");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rb2", "rb2");
      document0.setSiblingIndex((-3342));
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parse("5CK8", "5CK8");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.tagName("tag cnnot b self closin; not a void tag");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parse("selected", "bq3");
      // Undeclared exception!
      try { 
        document0.tagName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parse("tF=*s|pVF", "tF=*s|pVF");
      Document document1 = new Document("tF=*s|pVF");
      document0.setParentNode(document1);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("y362-pj6mfsd67rml3m");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("selected");
      Element element0 = new Element(tag0, "java.lang.string@0000000047 tag cnnot # self closin; not a void tag", attributes0);
      Element element1 = element0.val("X");
      element1.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        element0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "EndTag", attributes0);
      // Undeclared exception!
      try { 
        element0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Tag tag0 = Tag.valueOf(": ");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "?M4'{Gv", attributes0);
      // Undeclared exception!
      try { 
        element0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      TextNode textNode0 = TextNode.createFromEncoded("Tag cannot be self closing; not a void tag");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = new Document("5Cvt");
      TextNode textNode0 = TextNode.createFromEncoded("VSV~H1");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b", ".]/Z6:*{");
      TextNode textNode0 = new TextNode((String) null);
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        Element.preserveWhitespace(element0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Document.createShell("br");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = new Document("5Cvt");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.prependElement("html");
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = new Document("embed");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = new Document("Tag cnnot b self closin; not a void tag");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Element$NodeList");
      Comment comment0 = new Comment("F%(?P8@}QFXx&d", "Tag cnnot b self closin; not a void tag");
      Node node0 = cDataNode0.doClone(comment0);
      // Undeclared exception!
      try { 
        document0.prependChild(node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5CK8", "5CK8");
      Element element0 = document0.appendElement("org.jsoup.nodes.Document");
      element0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.prependChild(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("POST", parseSettings0);
      Element element0 = new Element(tag0, "xUo\t(WJ`UX(GD");
      // Undeclared exception!
      try { 
        element0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("~1w~}${Z#<", "~1w~}${Z#<");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
      // Undeclared exception!
      document0.prepend("+`a");
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Document.createShell("yXPLW,e]gX=n>1Y!");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("slwected", "slwected");
      TextNode textNode0 = TextNode.createFromEncoded("slwected", "slwected");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.parent();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^Q", "^Q");
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(126);
      // Undeclared exception!
      document0.outerHtmlTail(stringWriter0, 126, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Document.createShell("CGldren colec+ion to be insertPdmust not b  nll.");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "CGldren colec+ion to be insertPdmust not b  nll.");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 58, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = new Document("selected");
      Element element0 = document0.appendElement("xYH<M!9yq");
      Charset charset0 = document0.charset();
      ByteBuffer byteBuffer0 = charset0.encode("xYH<M!9yq");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        element0.outerHtmlTail(charBuffer0, 1339, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Er2T, F# Pv=t", "Er2T, F# Pv=t");
      StringBuffer stringBuffer0 = new StringBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      document0.outerHtmlTail(stringBuffer0, 2147483645, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Document.createShell("raio");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, (-1667), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("BetweenDoctypePublicAndSystemIdentifiers", "BetweenDoctypePublicAndSystemIdentifiers");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charArrayWriter0, (-1010136971), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(outputStreamWriter0, 36);
      Document document0 = Parser.parse("org.jsoup.nodes.Entities$1", "cQ");
      outputStreamWriter0.close();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(965);
      try { 
        document0.outerHtmlTail(bufferedWriter0, 1, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parse("Unknown combinator: ", "Unknown combinator: ");
      StringBuffer stringBuffer0 = new StringBuffer(";$l` >;uRB");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(129);
      // Undeclared exception!
      document0.outerHtmlHead(stringBuffer0, 126, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parse("^Q", "^Q");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "^Q");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 1814, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Element element0 = new Element("G!=8R_hI");
      // Undeclared exception!
      try { 
        element0.outerHtmlHead((Appendable) null, 6, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = new Document("cQ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("x#2^)Fz}");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintStream0, (-780), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parse("slwYjted", "slwYjted");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlHead(pipedWriter0, (-1614078131), document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`Oy", "`Oy");
      TextNode textNode0 = TextNode.createFromEncoded("`Oy", "wlA(<4c:NQ");
      document0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        document0.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b", ".]/Z6:*{");
      TextNode textNode0 = new TextNode((String) null, ".]/Z6:*{");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.nextElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Document.createShell("+`a");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^Q", "^Q");
      Comment comment0 = new Comment("^Q");
      document0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parse("5CK8", "5CK8");
      document0.setParentNode(document0);
      Evaluator.Tag evaluator_Tag0 = new Evaluator.Tag((String) null);
      // Undeclared exception!
      document0.is((Evaluator) evaluator_Tag0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parse("5CK8", "5CK8");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tgcnnotb self clos]n; notIa void tag", "Tgcnnotb self clos]n; notIa void tag");
      String string0 = "(\\u9FNg";
      // Undeclared exception!
      try { 
        document0.is(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '(\\u9FNg': unexpected token at '(\\u9FNg'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("id", "id");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.is("id");
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parse("Tag cannot be self closing; not a void tag", "org.jsoup.nodes.Element$NodeList");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = new Document("5Cvt");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html("KO<un();TqF.");
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("huyj3'rqk%1K6 ,#", "huyj3'rqk%1K6 ,#");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b", ".]/Z6:*{");
      TextNode textNode0 = new TextNode((String) null);
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.html("z#ZdDf4");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("cQ", "cQ");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Document.createShell("5Cvt");
      document0.setParentNode(document0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "5Cvt");
      // Undeclared exception!
      document0.html(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#declaration", "#declaration");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "#declaration", 1, 1);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.UncheckedIOException", "org.jsoup.UncheckedIOException");
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Element element0 = new Element(" > ");
      Comment comment0 = new Comment(" > ");
      comment0.value = (Object) fileSystemHandling0;
      Element element1 = element0.appendChild(comment0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        element1.html(charArrayWriter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.testdata.FileSystemHandling cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("id", "id");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("CGldre colec+ion to be insertPdmust not b  nll.", "CGldre colec+ion to be insertPdmust not b  nll.");
      Element element0 = document0.appendElement("CGldre colec+ion to be insertPdmust not b  nll.");
      element0.siblingIndex = (-1886469520);
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Document.createShell("+`a");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("+`a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: +`a
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      Element element0 = document0.appendElement("@^");
      element0.siblingIndex = (-574);
      Pattern pattern0 = Pattern.compile("Tag cannot be self closing; not a void tag");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText(pattern0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = new Document("Wv`zI->a");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$IsNthLastChild");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("rPqjU)1VyC?j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: rPqjU)1VyC?j
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parse("Tag cannot be self closing; not a void tag", "org.jsoup.nodes.Element$NodeList");
      DataNode dataNode0 = new DataNode("Tag cannot be self closing; not a void tag");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("&e6,||SebtH4");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("c]ma_3o!*ny", "c]ma_3o!*ny");
      Element element0 = document0.appendElement("c]ma_3o!*ny");
      element0.setSiblingIndex((-3077));
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("c]ma_3o!*ny");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("b+U!", "b+U!");
      DocumentType documentType0 = new DocumentType("*A23?iB+h8`w%-`", "Pattern syntax error: ", "b+U!");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("Pattern syntax error: ");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5CK8", "5CK8");
      DocumentType documentType0 = new DocumentType("xml", "5CK8", "xml", ",4'");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("&=");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parse("cQ", "cQ");
      Element element0 = document0.appendElement("cQ");
      element0.siblingIndex = (-811);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("cQ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "w@p`D=*2S1h.");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexLessThan((-37));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000050 tag cnnot r self closin; not a void tag", "g");
      TextNode textNode0 = TextNode.createFromEncoded("java.lang.string@0000000050 tag cnnot r self closin; not a void tag");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan((-2006));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Element element0 = new Element(",P*zK^&\nnzK`W");
      TextNode textNode0 = TextNode.createFromEncoded(",P*zK^&\nnzK`W");
      Element element1 = element0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element1.getElementsByIndexEquals(1784);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parse("b?`}vze#vjs3~!j", "b?`}vze#vjs3~!j");
      Element element0 = document0.toggleClass("");
      List<Node> list0 = element0.childNodesCopy();
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsByClass("Tag cnnot b self closin; not a void tag");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parse("Tag cnnot b self closin; not a void tag", "Tag cnnot b self closin; not a void tag");
      // Undeclared exception!
      try { 
        document0.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parse("slwYjted", "slwYjted");
      Element element0 = document0.appendElement("slwYjted");
      element0.siblingIndex = (-143);
      // Undeclared exception!
      try { 
        element0.getElementsByClass("slwYjted");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".", "k6A?wl7X");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting(".", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("id", "id");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b", ".]/Z6:*{");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("#", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = new Document("5Cvt");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching(" />", " m=N)WND\"f0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error:  m=N)WND\"f0
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("#root", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "Insert position out of bounds.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#root", "#root");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("v`]u*| Fx*", "v`]u*| Fx*");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementById("v`]u*| Fx*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Tag tag0 = Tag.valueOf("id");
      CDataNode cDataNode0 = new CDataNode("/3rN15;s");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "VSV~H1", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Document.createShell("5Cvt");
      DataNode dataNode0 = new DataNode("#root");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        element0.elementSiblingIndex();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^Q", "^Q");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.dataNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("WK`,\"}\"I]c", "WK`,\"}\"I]c");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Document.createShell("+`a");
      Element element0 = document0.body();
      Element element1 = element0.appendElement("--!");
      // Undeclared exception!
      try { 
        element1.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '--!': unexpected token at '--!'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("id", "id");
      TextNode textNode0 = new TextNode("id");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parse("5CK8", "5CK8");
      Element element0 = document0.head();
      element0.setSiblingIndex((-1432352094));
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Document.createShell("YuzTM");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Document.createShell("+`a");
      // Undeclared exception!
      try { 
        document0.child(6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      // Undeclared exception!
      try { 
        document0.child((-22));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = new Document("wC");
      Element element0 = document0.val("ljwe#+7>z!u%=ae<)");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.before((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Document.createShell("5Cvt");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.before("5Cvt");
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":matchesOwn(%s)");
      CDataNode cDataNode0 = new CDataNode(":matchesOwn(%s)");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, ":matchesOwn(%s)", attributes0);
      cDataNode0.reparentChild(element0);
      // Undeclared exception!
      try { 
        element0.before("!:^D4^");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cnnot b self closin; not a void tag", "Tag cnnot b self closin; not a void tag");
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("id", "id");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.attr("id", "id");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parse("^Q", "^Q");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "O@{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = new Document("5Cvt");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5CK8", "5CK8");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Document.createShell("+`a");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = new Document("5Cvt");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.appendElement("la:-h*n");
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("slwected", "bt");
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document1 = document0.parser(parser1);
      // Undeclared exception!
      try { 
        document1.appendElement("r!A?dL.~IQ<,H3<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{]qx<La:-H*n><u", "{]qx<La:-H*n><u");
      // Undeclared exception!
      try { 
        document0.appendElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parse("*A23?iB+h8`w%-`", "*A23?iB+h8`w%-`");
      Element element0 = document0.body();
      element0.siblingIndex = 18;
      // Undeclared exception!
      try { 
        document0.appendChild(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parse("radio", "radio");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parse("5CK8", "5CK8");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.append("WK`,\"}\"I]c");
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cnnot b self closin; not a void tag", "Tag cnnot b self closin; not a void tag");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = new Document("5Cvt");
      document0.setParentNode(document0);
      DataNode dataNode0 = DataNode.createFromEncoded("", "s+");
      // Undeclared exception!
      try { 
        document0.after((Node) dataNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Document.createShell("5Cvt");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.after("");
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parse("bt", "bt");
      Element element0 = document0.appendElement("bt");
      element0.siblingIndex = 2243;
      // Undeclared exception!
      try { 
        element0.after("bt");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2244, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("selected");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("selected");
      FormElement formElement0 = new FormElement(tag0, "selected", attributes0);
      formElement0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        formElement0.after("sJ]KM/O'PnY;n9");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = new Document("embed");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, (String) null, (Attributes) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "3PHqe<sF{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("vK", "vK");
      Element element0 = document0.appendElement("b");
      element0.html((CharArrayWriter) null);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cnnot b self closin; not a void tag", "Tag cnnot b self closin; not a void tag");
      Element element0 = document0.toggleClass("ruby");
      element0.addClass("Tag cnnot b self closin; not a void tag");
      element0.hasClass("%cc");
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parse(" > ", " > ");
      document0.toggleClass(" > ");
      document0.addClass(" > ");
      document0.hasClass("org.jsoup.seleXt.QueryParser");
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parse(" > ", "%cc");
      Element element0 = document0.toggleClass(" > ");
      element0.addClass("0$GC?.s9%i?+c");
      element0.hasClass("0$GC?.s9%i?+c");
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parse(" > ", "%cc");
      Element element0 = document0.toggleClass(" > ");
      element0.hasClass("0$GC?.s9%i?+c");
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = new Document("5Cvt");
      document0.hasClass("5Cvt");
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      document0.toggleClass("Yz,35!/^/l");
      document0.hasClass("Tag cannot be self closing; not a void tag");
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Document.createShell("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Document.createShell("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("d1~q*rujqm'}_w@ifuy");
      Document document0 = parser0.parseInput((Reader) stringReader0, "juuz0H U_Z#");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parse("\"z", "    ");
      document0.html("    ");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parse("5CK8", "5CK8");
      document0.setParentNode(document0);
      document0.getElementsContainingOwnText("5CK8");
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parse("selected", "bq3");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = new Document("5Cvt");
      document0.setParentNode(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = new Document("5Cvt");
      document0.setParentNode(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("g{:TYs4{V60IWp", "g{:TYs4{V60IWp");
      document0.prependChild(document0);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Nfk5J'ZUR7qB5b", "tag cannot be self closing; not a void tag");
      Element element0 = document0.head();
      element0.html("LY4p<l");
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      Element element0 = document0.toggleClass("t0SLa26g_\"M%+MMlD");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("I", "I");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parse("Tag cnnot b self closin; not a void tag", "Tag cnnot b self closin; not a void tag");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Document.createShell("Tag cannot be self closing; not a void tag");
      Pattern pattern0 = Pattern.compile("html > body");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parse("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b", " |%<jCf2S~K6~");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cnnot b self closin; not a void tag", "Tag cnnot b self closin; not a void tag");
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parse("5CK8", "5CK8");
      Evaluator.Tag evaluator_Tag0 = new Evaluator.Tag((String) null);
      document0.is((Evaluator) evaluator_Tag0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Document.createShell("");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsByAttributeValueMatching("textarea", pattern0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{]qx<La:-H*n><u", "{]qx<La:-H*n><u");
      // Undeclared exception!
      try { 
        document0.select(":containsOwn");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ':containsOwn': unexpected token at ':containsOwn'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parse("5CK8", "5CK8");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5CK8", "5CK8");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Element element0 = new Element("embed");
      element0.appendElement("title");
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Element element0 = new Element("embed");
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parse("-JgYA", "QPeO>N_Sv,orO'0D]");
      // Undeclared exception!
      try { 
        document0.html((CharArrayWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("]I\"R7&5ix", " > ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings1);
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "EndTag", attributes0);
      element0.val("x");
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parse(" > ", " > ");
      document0.toggleClass(" > ");
      Element element0 = document0.addClass("org.jsoup.seleXt.QueryParser");
      element0.toggleClass("org.jsoup.seleXt.QueryParser");
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Children collection to b nsertedmust nt be null.", "Children collection to b nsertedmust nt be null.");
      document0.toggleClass("~0C*");
      document0.toggleClass("Children collection to b nsertedmust nt be null.");
      document0.getElementsByClass("b");
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parse(" > ", "");
      document0.toggleClass(" > ");
      document0.addClass("");
      document0.hasClass("org.jsoup.seleXt.QueryParser");
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parse("H+~tr6\"R>%", "H+~tr6\"R>%");
      CDataNode cDataNode0 = new CDataNode((String) null);
      document0.prependChild(cDataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!", "<!");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!", "<!");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("{$AE.I", "1k", "head", "8/");
      Element.preserveWhitespace(documentType0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.appendElement("br");
      document0.appendElement("br");
      document0.getElementsMatchingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("]I\"R7&5ix", " > ");
      document0.title(" > ");
      document0.getElementsContainingOwnText(" > ");
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parse("CGldren colec+ion to be insertPdmust not b  nll.", "CGldren colec+ion to be insertPdmust not b  nll.");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("CGldren colec+ion to be insertPdmust not b  nll.", "CGldren colec+ion to be insertPdmust not b  nll.", true);
      document0.appendChild(xmlDeclaration0);
      document0.getElementsMatchingOwnText("CGldren colec+ion to be insertPdmust not b  nll.");
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b", " |%<jCf2S~K6~");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cnnot b self closin; not a void tag", "Tag cnnot b self closin; not a void tag");
      document0.appendText("NEhC");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      document0.appendElement("br");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parse("5CK8", "5CK8");
      CDataNode cDataNode0 = new CDataNode("5CK8");
      document0.prependChild(cDataNode0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Element element0 = new Element(" > ");
      Comment comment0 = new Comment(" > ");
      element0.appendChild(comment0);
      element0.text();
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("v`]u*| Fx*", "v`]u*| Fx*");
      document0.getElementById("v`]u*| Fx*");
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(", currentElement=", ", currentElement=");
      Element element0 = document0.appendElement("&9}");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      Element element0 = document0.body();
      Element element1 = element0.appendElement("--!");
      element1.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      Element element0 = document0.body();
      Element element1 = element0.appendElement("--!");
      element1.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(0, element0.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals("br", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("99U[>oFh", "enb\"5k0Q%(pM:kcN");
      document0.nextElementSibling();
      assertEquals("enb\"5k0Q%(pM:kcN", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Nfk5J'ZUR7qB5b", "tag cannot be self closing; not a void tag");
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
      assertEquals("tag cannot be self closing; not a void tag", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = new Document("embed");
      document0.normalise();
      Element element0 = document0.body();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      document0.siblingElements();
      assertEquals("Tag cannot be self closing; not a void tag", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parse("CGldre colec+ion to be insertPdmust not b  nll.", "CGldre colec+ion to be insertPdmust not b  nll.");
      Element element0 = document0.body();
      element0.after("CGldre colec+ion to be insertPdmust not b  nll.");
      String string0 = element0.cssSelector();
      assertEquals("CGldre colec+ion to be insertPdmust not b  nll.", element0.baseUri());
      assertEquals("html > body:nth-child(2)", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.toggleClass("");
      element0.cssSelector();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cnnot b self closin; not a void tag", "Tag cnnot b self closin; not a void tag");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
      try { 
        document0.insertChildren(46, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("d1~q*rujqm'}_w@ifuy");
      Document document0 = parser0.parseInput((Reader) stringReader0, "juuz0H U_Z#");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
      try { 
        document0.insertChildren((-455), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Document.createShell("+`a");
      List<TextNode> list0 = document0.textNodes();
      // Undeclared exception!
      try { 
        document0.insertChildren(60, (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      LinkedList<PseudoTextElement> linkedList0 = new LinkedList<PseudoTextElement>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-749), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&amp;", "&amp;");
      Elements elements0 = document0.parents();
      Element element0 = document0.insertChildren(1, (Collection<? extends Node>) elements0);
      assertEquals("&amp;", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Er2T, HF# Pv=t", "Er2T, HF# Pv=t");
      Node[] nodeArray0 = new Node[3];
      DataNode dataNode0 = new DataNode("Er2T, HF# Pv=t");
      nodeArray0[0] = (Node) dataNode0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.dataNodes();
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{]qx<La:-H*n><u", "{]qx<La:-H*n><u");
      Element element0 = document0.body();
      List<TextNode> list0 = element0.textNodes();
      assertEquals(1, list0.size());
      assertEquals("{]qx<La:-H*n><u", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000050 tag cnnot r self closin; not a void tag", "g");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-2006));
      assertEquals("g", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = new Document("embed");
      // Undeclared exception!
      try { 
        document0.selectFirst("Vxc*.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Document.createShell("5.j");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Document.createShell("body");
      document0.getAllElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("body", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("queue not long enough to consume sequence", "queue not long enough to consume sequence");
      Element element0 = document0.removeClass(" />");
      assertEquals(1, element0.childNodeSize());
      assertEquals("queue not long enough to consume sequence", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Document.createShell("5Cvt");
      // Undeclared exception!
      try { 
        document0.before("5Cvt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{]qx<La:-H*n><u", "vgn3`&c(6u");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parse("5CK8", "5CK8");
      Elements elements0 = document0.getElementsByAttributeValueNot("textarea", " ");
      assertEquals("5CK8", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("1Cna j ", "1Cna j ");
      Element element0 = document0.shallowClone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("1Cna j ", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = new Document("embed");
      document0.doSetBaseUri("");
      assertEquals(0, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parse("selected", "bq3");
      document0.getElementsByAttributeValueContaining("+*{yl&MnpaA+9hX", "CommentEndBang");
      assertEquals("bq3", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parse("5CK8", "5CK8");
      Elements elements0 = document0.getElementsContainingText("tag cnnot b self closin; not a void tag");
      assertEquals("5CK8", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cnnot b self closin; not a void tag", "Tag cnnot b self closin; not a void tag");
      document0.getElementsByAttributeValueEnding("Tag cnnot b self closin; not a void tag", " > ");
      assertEquals("Tag cnnot b self closin; not a void tag", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cnnot b self closin; not a void tag", "Tag cnnot b self closin; not a void tag");
      document0.is("br");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag cnnot b self closin; not a void tag", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      Elements elements0 = document0.getElementsByIndexEquals((-231));
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals("Tag cannot be self closing; not a void tag", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Parser.parse("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      document0.getElementsByAttributeStarting("Tag cannot be self closing; not a void tag");
      assertEquals("Tag cannot be self closing; not a void tag", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parse("Tag cnnot b self closin; not a void tag", "Tag cnnot b self closin; not a void tag");
      Element element0 = document0.prependElement("a");
      assertEquals("Tag cnnot b self closin; not a void tag", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parse("sarcasm", "sarcasm");
      Elements elements0 = document0.getElementsByIndexLessThan(77);
      assertFalse(elements0.isEmpty());
      assertEquals("sarcasm", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parse("CGldre colec+ion to be insertPdmust not b  nll.", "CGldre colec+ion to be insertPdmust not b  nll.");
      // Undeclared exception!
      try { 
        document0.after("CGldre colec+ion to be insertPdmust not b  nll.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Document.createShell("slwected");
      document0.prepend("slwected");
      Element element0 = document0.appendElement("slwected");
      Element element1 = element0.previousElementSibling();
      assertEquals(3, document0.childNodeSize());
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cannot be self closing; not a void tag", "Tag cannot be self closing; not a void tag");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
      assertEquals("Tag cannot be self closing; not a void tag", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b", " |%<jCf2S~K6~");
      document0.getElementsByAttributeValueStarting(".y(?f];YmU-W(qm1}mn", ".y(?f];YmU-W(qm1}mn");
      assertEquals(" |%<jCf2S~K6~", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("2}T", "2}T");
      document0.getElementsByAttributeValue("2}T", ":>i1[c&@D");
      assertEquals("2}T", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cQ", "cQ");
      document0.html("cQ");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("cQ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Collector$Accumulator");
      document0.wholeText();
      assertEquals("org.jsoup.select.Collector$Accumulator", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = new Document("wC");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Element element0 = new Element("G!=8R_hI");
      String string0 = element0.baseUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{]qx<La:-H*n><u", "{]qx<La:-H*n><u");
      document0.dataset();
      assertEquals("{]qx<La:-H*n><u", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("             ", "cQ");
      document0.title("             ");
      String string0 = document0.toString();
      assertEquals("cQ", document0.baseUri());
      assertEquals("<html>\n <head>\n  <title>             </title>\n </head>\n <body> \n </body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Document document0 = Parser.parse("5CK8", "5CK8");
      Element element0 = document0.tagName("tag cnnot b self closin; not a void tag");
      assertEquals("5CK8", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*A23?iB+h8`w%-`", "*A23?iB+h8`w%-`");
      Element element0 = document0.child(0);
      assertEquals("*A23?iB+h8`w%-`", element0.baseUri());
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*A23?iB+h8`w%-`", "*A23?iB+h8`w%-`");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("*A23?iB+h8`w%-`", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      DataNode dataNode0 = new DataNode("br");
      document0.prependChild(dataNode0);
      boolean boolean0 = document0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("radio", "radio");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("1Cna j ", "1Cna j ");
      document0.appendText("Vc!*b=HNc)f");
      document0.text();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cnnot b self closin; not a void tag", "Tag cnnot b self closin; not a void tag");
      // Undeclared exception!
      try { 
        document0.wrap("Tag cnnot b self closin; not a void tag");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Document document0 = Parser.parse("CGldre colec+ion to be insertPdmust not b  nll.", "CGldre colec+ion to be insertPdmust not b  nll.");
      document0.nextElementSiblings();
  }
}
