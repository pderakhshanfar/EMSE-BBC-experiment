/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:52:57 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("ead", "ead");
      document0.toggleClass(":eq(");
      document0.toggleClass("tag name must not be empty.");
      document0.getElementsByClass("html");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.toggleClass("");
      document0.toggleClass("Insert position out of bounds.");
      element0.getElementsByClass("org.jsoup.nodes.PseudoTextElement");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      Element element0 = document0.body();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.parentNode = (Node) element0;
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("j4[M@*", "j4[M@*");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|E`", "fZ#-<V0");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'e[!:>d8?bb5gB");
      document0.outerHtmlHead(mockPrintWriter0, 20, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":<Od's", "rI");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("vV");
      Document document0 = parser0.parseInput((Reader) stringReader0, "vV");
      document0.wrap("a");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      Element element0 = document0.body();
      Element element1 = element0.lastElementSibling();
      element1.wrap("iH{>#|K#f#B");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("MHLl\tX#zr", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("=");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "MHLl\tX#zr", attributes0);
      formElement0.setSiblingIndex((-1913));
      formElement0.val("MHLl\tX#zr");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Document.createShell("evdi7/m'7?");
      Element element0 = document0.body();
      element0.val("evdi7/m'7?");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendChild(document0);
      document0.toggleClass("");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must gAt be empty.", "Tag name must gAt be empty.");
      document0.siblingIndex = (-208);
      document0.toggleClass("Tag name must gAt be empty.");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("PS", "~ zgL34]AJ");
      Element element0 = document0.head();
      element0.toggleClass("cFD`&705V5}]59p");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      Element element0 = document0.body();
      element0.text("");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      element1.text("PuaN)J)*ST(.*d`P^fI");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      document0.text("PuaN)J)*ST(.*d`P^fI");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":<Od's", "rI");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Document.createShell("ead");
      Element element0 = document0.body();
      element0.tagName("bo5");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = new Document("</");
      document0.tagName("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":<Od's", "rI");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":<Od's", "rI");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      formElement0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      document0.selectFirst("Queue not long enough to consume sequence");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Tag tag0 = Tag.valueOf("defer");
      CDataNode cDataNode0 = new CDataNode("defer");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "defer", attributes0);
      element0.selectFirst("defer");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Document.createShell("NmU'x");
      document0.select("HjJ");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Element element0 = new Element("q");
      element0.select("q");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parse("bdo", "mf>");
      Element element0 = document0.body();
      element0.removeClass("hR!");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+&H.va(O", "+&H.va(O");
      document0.removeClass(" Bt|bF(f7R^l>Z");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = new Document("source");
      document0.prependElement("xKfdVstF~bs");
      Element element0 = document0.appendElement("source");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parse("<a>Z", "<a>Z");
      document0.tagName("textarea");
      Element.preserveWhitespace(document0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parse("=", "=");
      Element element0 = document0.appendChild(document0);
      element0.prependText("=");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Q>^b6ksIT");
      FormElement formElement0 = new FormElement(tag0, "Q>^b6ksIT", (Attributes) null);
      Element element0 = formElement0.prependElement("html");
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("MHLl\tX#zr", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("=");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "MHLl\tX#zr", attributes0);
      formElement0.setSiblingIndex((-1913));
      formElement0.prependChild(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("@F^k>xDZpu", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "#h\"Yy7ueU^(r)LO;?m", attributes0);
      DocumentType documentType0 = new DocumentType("Unexpected token type: ", "Unexpected token type: ", "</=\"@F^k>xDZpu\"");
      formElement0.prependChild(documentType0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("<a>Z");
      Document document0 = parser0.parseInput((Reader) stringReader0, "<a>Z");
      document0.setSiblingIndex((-3945));
      document0.prepend("org.jsoup.parser.Token$StartTag");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.body();
      Element element1 = element0.prepend("");
      element1.tag();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Element element0 = new Element("sup");
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Document.createShell("NmU'x");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("NmU'x", "rI");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Document document1 = Parser.parse("", "");
      document0.appendChild(document1);
      document1.parent();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      Element element0 = document0.body();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.parentNode = (Node) element0;
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":<Od's", "rI");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      formElement0.nodeName();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":<Od's", "rI");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.appendTo(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parse("=", "=");
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("GH~nFq8x~(2Iy2vw", "br");
      document0.is((Evaluator) evaluator_AttributeWithValueNot0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Element element0 = new Element("h");
      element0.is("h");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      document0.is("caption");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Document.createShell("NmU'x");
      Element element0 = document0.tagName("colgroup");
      LinkedList<DataNode> linkedList0 = new LinkedList<DataNode>();
      element0.insertChildren(1, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ead", "ead");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      linkedHashSet0.add(document0);
      document0.insertChildren(1, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = new Document("tag name must gat be empty.");
      Elements elements0 = document0.getElementsByAttributeValueMatching("tag name must gat be empty.", (Pattern) null);
      document0.insertChildren((-1), (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = new Document("tag name must gat be empty.");
      document0.normalise();
      Element element0 = document0.body();
      element0.html("tag name must gat be empty.");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Element element0 = new Element("h");
      element0.siblingIndex = (-1394);
      element0.html("(q/:*Zn");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("NmU'x", "NmU'x");
      Element element0 = document0.head();
      element0.html("GZ xjZ,$sl");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = new Document("body");
      MockFileWriter mockFileWriter0 = new MockFileWriter("body", false);
      document0.html((OutputStreamWriter) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("&", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("even");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "&", attributes0);
      formElement0.html();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = new Document("aok.q/8fW7Na");
      document0.getElementsByAttributeValueMatching("0", "S&gF1?~r?yDw13t");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Document.createShell("1@_%");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Document.createShell("");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "\n * ");
      document0.getElementsMatchingText("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Document.createShell("Queue not long enough to consume sequence");
      document0.getElementsMatchingText("");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.getElementsMatchingOwnText("");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Document.createShell("Queue not long enough to consume sequence");
      document0.getElementsContainingOwnText("");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("rt", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "S-~aS5VR4dQy7EV[", attributes0);
      pseudoTextElement0.getElementsByTag("rt");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parse("wBP7Z];j", "wBP7Z];j");
      document0.getElementsByIndexLessThan(21);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.getElementsByIndexGreaterThan((-1644953643));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "\n * ");
      document0.getElementsByAttributeValueNot("Pattern syntax error: ", "                ");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("NmU'x", "NmU'x");
      Element element0 = document0.head();
      element0.prependText("GXT^MNvc*8Zb<w3oL");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Document.createShell("FiU!4v{Rym-dP/7`X");
      document0.childNodes = null;
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Document document0 = Document.createShell("(-8<*5tkM qtaVa AU");
      document0.childNodes = (List<Node>) linkedList0;
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Element element0 = new Element("h");
      element0.siblingIndex = (-1394);
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      Element element0 = document0.body();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Tag tag0 = Tag.valueOf("defer");
      CDataNode cDataNode0 = new CDataNode("defer");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "defer", attributes0);
      element0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "\n * ");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("MHLl\tX#zr", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("=");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "MHLl\tX#zr", attributes0);
      formElement0.setSiblingIndex((-1913));
      Locale locale0 = Locale.GERMAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      formElement0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.body();
      Set<String> set0 = document0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("org.jsup.noes.seudoTextElement", parseSettings0);
      Element element0 = new Element(tag0, "]P|oS5;9", (Attributes) null);
      element0.toggleClass("]P|oS5;9");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Tag tag0 = Tag.valueOf("defer");
      CDataNode cDataNode0 = new CDataNode("defer");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "defer", attributes0);
      element0.children();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("NmU'x", "NmU'x");
      Element element0 = document0.head();
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      Element element0 = document0.body();
      Element element1 = element0.lastElementSibling();
      element1.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = new Document("j4[M@*");
      Element element0 = document0.appendChild(document0);
      document0.before((Node) element0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("N'U's", "rI");
      Element element0 = document0.head();
      element0.before("!0x");
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parse("bdo", "mf>");
      Element element0 = document0.doClone(document0);
      element0.before("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Document.createShell("1@_%");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Element element0 = new Element("q");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parse("wBP7Z];j", "wBP7Z];j");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      Element element0 = document0.body();
      element0.attr("PuaN)J)*ST(.*d`P^fI", false);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Gt(-w_Fn-pGif", "#root");
      Element element0 = document0.body();
      element0.attr("Y\"XObSVjcL}h", "rI");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":<Od's", "rI");
      Element element0 = document0.head();
      Element element1 = element0.attr("Y\"XObSVjcL}h", ":<Od's");
      element1.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = new Document("q");
      document0.attr("q", "4");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      Element element0 = document0.body();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      Element element0 = document0.body();
      element0.appendText("br");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Element element0 = new Element("q");
      element0.appendElement("html");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      Element element0 = document0.body();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      Element element0 = document0.body();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("NmU'x", "rI");
      Element element0 = document0.head();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Document.createShell("@7{'r");
      document0.reparentChild(document0);
      DataNode dataNode0 = DataNode.createFromEncoded("_1C/i=N", "+\ftMl\"j%");
      document0.after((Node) dataNode0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Document.createShell("ismap");
      Element element0 = document0.prependElement("ismap");
      element0.after("ismap");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      Element element0 = document0.body();
      element0.after("cquR,W@se/13~v*gmy");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("NmU'x", "NmU'x");
      Element element0 = document0.head();
      Element element1 = element0.prependText("GXT^MNvc*8Zb<w3oL");
      element1.after("NmU'x");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = new Document("</");
      document0.setSiblingIndex((-1481126158));
      document0.addClass("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Document.createShell("NmU'x");
      document0.tagName("colgroup");
      document0.addClass("");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      Element element0 = document0.appendElement(".q211c}");
      element0.addClass("#root");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parse("=", "=");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.wrap("=");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/-Yr5ds+D7F:Sl$P1C", "/-Yr5ds+D7F:Sl$P1C");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "EvDI7/m'7?");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.val("head");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("<a>Z");
      Document document0 = parser0.parseInput((Reader) stringReader0, "<a>Z");
      document0.tagName("textarea");
      // Undeclared exception!
      try { 
        document0.val("textarea");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = new Document("br");
      // Undeclared exception!
      try { 
        document0.text("VruV%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Document.createShell("D");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.tagName("C)Y>S:$@4&f");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("NmUEx", "NmUEx");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document1 = document0.parser(parser1);
      // Undeclared exception!
      try { 
        document1.tagName("isindex");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rI", "#root");
      // Undeclared exception!
      try { 
        document0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'EmXed", "a");
      Comment comment0 = new Comment("a", "a");
      comment0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j4[M@*");
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput((Reader) stringReader0, "j4[M@*");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.parentNode = (Node) document0;
      // Undeclared exception!
      document0.prependElement("{`C;cG$55+x!{");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("org.jsoup.select.CombiningEvaluator$And", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.CombiningEvaluator$And", (Attributes) null);
      // Undeclared exception!
      try { 
        formElement0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Element element0 = new Element("j4[M@*");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) element0;
      element0.insertChildren(0, nodeArray0);
      // Undeclared exception!
      element0.prepend("async");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C_IMbX", "-[%T^)ZE===S");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("NmUEx", "NmUEx");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("NmUEx");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(3582);
      // Undeclared exception!
      document0.outerHtmlTail(outputStreamWriter0, 3582, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Document.createShell("Queue not long enough to consume sequence");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, (-1564), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must gAt be empty.");
      MockFileWriter mockFileWriter0 = new MockFileWriter("Tag name must gAt be empty.");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockFileWriter0, (-1000), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parse("+]$rzaU=R6?T6", "+]$rzaU=R6?T6");
      CharBuffer charBuffer0 = CharBuffer.allocate(159);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 2095, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s+", "3]w]V#AIn6!z3.D27BZ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-T~&v&f'RlvdO`\"00Z0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintStream0, (-3144), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("org.jsoup.select.Evaluator$Attribute", "org.jsoup.select.Evaluator$Attribute");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      document0.appendChild(document0);
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan(2343);
      // Undeclared exception!
      document0.is((Evaluator) evaluator_IndexGreaterThan0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parse("E9A", "E9A");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Document.createShell("D");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.parentNode = (Node) document0;
      // Undeclared exception!
      document0.html("TZIdk8A|\"!N|%?sh;");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "=");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "EvDI7/m'7?");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("head");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0, 1096);
      bufferedWriter0.close();
      // Undeclared exception!
      try { 
        document0.html(bufferedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parse("=", "=");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.html((CharArrayWriter) null);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.html((CharArrayWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("CU]oCV9", "invalid named referenece '%s'");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("invalid named referenece '%s'", true);
      document0.setParentNode(xmlDeclaration0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("5(m^l\"fuwO[[_v1i|");
      // Undeclared exception!
      try { 
        document0.html((OutputStreamWriter) mockFileWriter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":<Od's", "rI");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":<Od's", "rI");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("c]%+)ffMCRs)$", "c]%+)ffMCRs)$");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("@+ZHq*nsxTIU{:sB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: @+ZHq*nsxTIU{:sB
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":<Od's", "rI");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":<Od's", "rI");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("/H:ww%2WT(M,SnR4L:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: /H:ww%2WT(M,SnR4L:
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("html > body", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("cL@:z~@bj^UG&", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Element element0 = new Element("q");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueMatching("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("", "R[F!L*+^w!`1=Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: R[F!L*+^w!`1=Q
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("\"r(7", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "B<PC}YoM^`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      Element element0 = document0.body();
      element0.setSiblingIndex((-1436010313));
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("#root", "//l3`H>gy#<");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "atgS?N*Iq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+&H.va(O", "+&H.va(O");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("sg", "#root");
      // Undeclared exception!
      try { 
        document0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("vV");
      Document document0 = parser0.parseInput((Reader) stringReader0, "vV");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/-Yr5ds+D7F:Sl$P1C", "/-Yr5ds+D7F:Sl$P1C");
      Tag tag0 = Tag.valueOf("marquee");
      CDataNode cDataNode0 = new CDataNode("Fl5_ur$g[4h ");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "3h+? F)o", attributes0);
      document0.parentNode = (Node) element0;
      document0.toggleClass("3h+? F)o");
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '#root.java.lang.String@0000000063': unexpected token at '@0000000063'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("f+ ]hkntl\"=(ugokru", "f+ ]hkntl\"=(ugokru");
      List<Node> list0 = Parser.parseXmlFragment("user-agent", "user-agent");
      document0.childNodes = list0;
      Element element0 = new Element("f+ ]hkntl\"=(ugokru");
      document0.appendTo(element0);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Tag tag0 = Tag.valueOf("body");
      Element element0 = new Element(tag0, "a2m]DOzR^bk/428_G");
      CDataNode cDataNode0 = new CDataNode("#root.java.lang.String@0000000076");
      element0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ead", "EvDI7/m'7?");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".q211c}");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, ":nth-child(%d)", attributes0);
      // Undeclared exception!
      try { 
        element0.child(4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = new Document("tag name must gat be empty.");
      // Undeclared exception!
      try { 
        document0.child((-1450));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.before("");
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must gAt be empty.", "Tag name must gAt be empty.");
      CDataNode cDataNode0 = new CDataNode("=xtemped");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.before("extemded");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":<Od's", "rI");
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.parentNode = (Node) document0;
      // Undeclared exception!
      document0.attr("", "org.jsoup.nodes.Attributes");
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Document.createShell("2nj1K'?");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Document.createShell("D");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.appendText("D");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":<Od's", "rI");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = new Document("b6]nVNu.");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.appendElement("br");
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = new Document("b6]nVNu.");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parse(" />", " />");
      CDataNode cDataNode0 = new CDataNode(" />");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.appendChild(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      Element element0 = document0.body();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.parentNode = (Node) element0;
      // Undeclared exception!
      try { 
        document0.appendChild(document1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parse("=W2", "=W2");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.append(" ");
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = new Document("j4[M@*");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      Element element0 = document0.body();
      // Undeclared exception!
      try { 
        element0.after((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parse("=", "=");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.after("U^");
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("NmU'x", "NmU'x");
      Element element0 = document0.head();
      Element element1 = element0.firstElementSibling();
      element1.siblingIndex = (-1074265344);
      // Undeclared exception!
      try { 
        element1.after("NmU'x");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1074265343, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Tag tag0 = Tag.valueOf("9WNl5n23t9-Agw");
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Tag tag0 = Tag.valueOf("extended");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "extended", attributes0);
      formElement0.html((StringWriter) null);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.toggleClass("");
      document0.toggleClass("html");
      document0.hasClass("html");
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Document.createShell("D");
      document0.hasClass("V/xFh>1Fe`2!");
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.toggleClass("5)*y6t7{8oA");
      Set<String> set0 = element0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("vV");
      Document document0 = parser0.parseInput((Reader) stringReader0, "vV");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("$%m", "bdo");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "EvDI7/m'7?");
      document0.appendText("EvDI7/m'7?");
      document0.getElementsContainingText("source");
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.appendChild(document0);
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.appendChild(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("NmU'x", "rI");
      Element element0 = document0.head();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("c]%+)ffMCRs)$", "c]%+)ffMCRs)$");
      Element element0 = document0.body();
      element0.append("@+ZHq*nsxTIU{:sB");
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.toggleClass("");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("org.jsup.noes.seudoTextElement", parseSettings0);
      Element element0 = new Element(tag0, "]P|oS5;9", (Attributes) null);
      element0.className();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parse("form", "form");
      // Undeclared exception!
      try { 
        document0.attr((String) null, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = new Document("q");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Element element0 = new Element("h");
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = new Document("body");
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = new Document("br");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = new Document("l");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.toString();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=");
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput((Reader) stringReader0, "</");
      MockPrintStream mockPrintStream0 = new MockPrintStream("n:'(2TrU(Fkv");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(mockPrintStream0, 46, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("<a>Z");
      Document document0 = parser0.parseInput((Reader) stringReader0, "j4[M@*");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "lEA_1VT8O9mIeyP&$E", attributes0);
      formElement0.toString();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(a=", "(a=");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "(a=");
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("<a>Z");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("oz+F;NVGqEHVyT^*nJ", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "Qox", attributes0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        formElement0.outerHtmlHead((Appendable) null, 35, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("<a>Z");
      Document document0 = parser0.parseInput((Reader) stringReader0, "<a>Z");
      Element element0 = document0.tagName("textarea");
      element0.val("org.jsoup.parser.Token$StartTag");
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = new Document("</");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.toggleClass("");
      document0.toggleClass("html");
      element0.getElementsByClass("html");
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.toggleClass("");
      document0.toggleClass("");
      document0.hasClass("Huxt5o'd<$");
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parse("ead", "ead");
      document0.toggleClass(":eq(");
      document0.toggleClass("t\u0002X*+(8RP`a");
      document0.hasClass("tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parse("Yw=z[Y,=m]6%N9S'-", "Yw=z[Y,=m]6%N9S'-");
      document0.toggleClass("(sLu>$");
      document0.toggleClass(" h?");
      document0.hasClass("#");
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parse("Yw=z[Y,=m]6%N9S'-", "Yw=z[Y,=m]6%N9S'-");
      document0.toggleClass("(sLu>$");
      document0.hasClass("#");
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("NmU'x", "NmU'x");
      document0.toggleClass("NmU'x");
      document0.hasClass("org.jsoup.select.Evaluator$Id");
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must gAt be empty.", "Tag name must gAt be empty.");
      document0.toggleClass("Tag name must gAt be empty.");
      document0.hasClass("Tag name must gAt be empty.");
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = new Document("b6]nVNu.");
      document0.removeClass("b6]nVNu.");
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("extemded", "extemded");
      CDataNode cDataNode0 = new CDataNode("extemded");
      document0.appendChild(cDataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Element element0 = new Element("Ub6G&I|/m");
      DataNode dataNode0 = new DataNode("value", "org.jsoup.nodes.Element$2");
      Element element1 = element0.appendChild(dataNode0);
      element1.data();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("NmU'x", "NmU'x");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("         ", "org.jsoup.select.Evaluator$AttributeWithValueContaining");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.appendChild(document0);
      Element.preserveWhitespace(element0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("@7{'r", "@7{'r", "_1C/i=N");
      Element.preserveWhitespace(documentType0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parse("RCDATAEndTagOpen", "");
      CDataNode cDataNode0 = new CDataNode("=");
      Element element0 = document0.appendChild(cDataNode0);
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#doctype", "textarea");
      document0.tagName("textarea");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000115 tae name pust ea be emptb.", "h'sR6<L~.!OGB3UHAm");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("1^WVO2Dz<:$R'C1izM1", "h'sR6<L~.!OGB3UHAm", true);
      Element element0 = document0.appendChild(xmlDeclaration0);
      Pattern pattern0 = Pattern.compile("1F#?;S!>B", 4);
      element0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("NmU'x", "NmU'x");
      document0.prependElement("NmU'x");
      document0.prepend("NmU'x");
      document0.getElementsContainingText("_~%HwY");
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000115 tae name pust ea be emptb.", "h'sR6<L~.!OGB3UHAm");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("1^WVO2Dz<:$R'C1izM1", "h'sR6<L~.!OGB3UHAm", true);
      document0.appendChild(xmlDeclaration0);
      Pattern pattern0 = Pattern.compile("1F#?;S!>B", 4);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = new Document("EvDI7/m'7?");
      document0.getElementById("m?14UaJ?");
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.parentNode = (Node) document0;
      document1.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.appendChild(document0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Tag tag0 = Tag.valueOf("id");
      FormElement formElement0 = new FormElement(tag0, "id", (Attributes) null);
      Element element0 = formElement0.appendChild(formElement0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      Element element0 = document0.body();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals("PuaN)J)*ST(.*d`P^fI", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = new Document("jG@k=|2sr");
      document0.previousElementSibling();
      assertEquals("jG@k=|2sr", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      
      Element element2 = element1.nextElementSibling();
      assertNotNull(element2);
      assertEquals("PuaN)J)*ST(.*d`P^fI", element2.baseUri());
      assertEquals("body", element2.tagName());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Document.createShell("NmU'x");
      document0.nextElementSibling();
      assertEquals("NmU'x", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      Element element0 = document0.body();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
      assertEquals("PuaN)J)*ST(.*d`P^fI", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C_IMbX", "-[%T^)ZE===S");
      document0.siblingElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("-[%T^)ZE===S", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = new Document("html");
      DataNode dataNode0 = new DataNode("$bUE3T&HdW=");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      Element element0 = document0.body();
      Element element1 = element0.prepend("PuaN)J)*ST(.*d`P^fI");
      element0.wrap("source");
      String string0 = element1.cssSelector();
      assertEquals(1, element0.childNodeSize());
      assertEquals("html > head:nth-child(2) > body:nth-child(1)", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("f+ ]hkntl\"=(ugokru", "f+ ]hkntl\"=(ugokru");
      Element element0 = new Element("f+ ]hkntl\"=(ugokru");
      document0.appendTo(element0);
      assertEquals(1, element0.childNodeSize());
      
      String string0 = document0.cssSelector();
      assertEquals("f+ ]hkntl\"=(ugokru > #root", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parse("Yw=z[Y,=m]6%N9S'-", "Yw=z[Y,=m]6%N9S'-");
      document0.toggleClass("(sLu>$");
      document0.cssSelector();
      assertEquals("Yw=z[Y,=m]6%N9S'-", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = new Document("b6]nVNu.");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        document0.insertChildren(39, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("extemded", "extemded");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1328), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = new Document("jG@k=|2sr");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(0, nodeArray0);
      assertEquals("jG@k=|2sr", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Document.createShell("q");
      Elements elements0 = document0.getElementsByTag("a");
      // Undeclared exception!
      try { 
        document0.insertChildren(2, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("NmU'x", "NmU'x");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      assertEquals("NmU'x", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(a=", "(a=");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("(a=", document0.baseUri());
      assertEquals(0, list0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("vV");
      Document document0 = parser0.parseInput((Reader) stringReader0, "vV");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("vV", document0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":<Od's", "rI");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, list0.size());
      assertEquals("rI", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      document0.appendText("CommentEnd");
      document0.children();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parse("body", "body");
      Elements elements0 = document0.getElementsByIndexGreaterThan(8216);
      assertEquals("body", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Document.createShell("@7{'r");
      // Undeclared exception!
      try { 
        document0.selectFirst("a~");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must gAt be empty.", "Tag name must gAt be empty.");
      document0.getAllElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must gAt be empty.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".");
      Element element0 = new Element(tag0, "Insert position out of bounds.");
      // Undeclared exception!
      try { 
        element0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must gAt be empty.", "Tag name must gAt be empty.");
      // Undeclared exception!
      try { 
        document0.before("extemded");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Document.createShell("NmU'x");
      document0.getElementsByAttribute("NmU'x");
      assertEquals(1, document0.childNodeSize());
      assertEquals("NmU'x", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("org.jsup.noes.seudoTextElement", parseSettings0);
      Element element0 = new Element(tag0, "]P|oS5;9", (Attributes) null);
      element0.getElementsByAttributeValueNot("head", "java.lang.String@0000000007");
      assertEquals("]P|oS5;9", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("f+ ]hkntl\"=(ugokru", "f+ ]hkntl\"=(ugokru");
      document0.appendTo(document0);
      document0.cssSelector();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "\n * ");
      Element element0 = document0.shallowClone();
      assertEquals("\n * ", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Document.createShell("h4");
      document0.setBaseUri("h4");
      assertEquals("h4", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Document.createShell("@7{'r");
      DataNode dataNode0 = DataNode.createFromEncoded("_1C/i=N", "+\ftMl\"j%");
      // Undeclared exception!
      try { 
        document0.after((Node) dataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parse("form", "form");
      document0.getElementsByAttributeValueContaining("form", " ");
      assertEquals("form", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = new Document("q");
      // Undeclared exception!
      try { 
        document0.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = new Document("html");
      document0.getElementsByAttributeValueEnding("br", "g]VK5L?d|:LB");
      assertEquals("html", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parse("form", "form");
      Evaluator.IsNthChild evaluator_IsNthChild0 = new Evaluator.IsNthChild(377, 66);
      document0.is((Evaluator) evaluator_IsNthChild0);
      assertEquals("form", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = new Document("q");
      Elements elements0 = document0.getElementsMatchingOwnText("q");
      assertEquals("q", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":<Od's", "rI");
      Elements elements0 = document0.getElementsByIndexEquals(19);
      assertEquals("rI", document0.baseUri());
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      document0.getElementsByAttributeStarting("DoctypeSystemIdentifier_doubleQuoted");
      assertEquals(1, document0.childNodeSize());
      assertEquals("PuaN)J)*ST(.*d`P^fI", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = new Document("body");
      document0.normalise();
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parse("form", "form");
      Elements elements0 = document0.getElementsByIndexLessThan((-4744));
      assertEquals("form", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parse("=", "=");
      // Undeclared exception!
      try { 
        document0.after("U^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Element element0 = new Element("C&");
      // Undeclared exception!
      try { 
        element0.select("('e.83Ruq]r4S_");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '('e.83Ruq]r4S_': unexpected token at '('e.83Ruq]r4S_'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      document0.getElementsByAttributeValueStarting("textarea", "textarea");
      assertEquals("textarea", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Document.createShell("PuaN)J)*ST(.*d`P^fI");
      document0.getElementsByAttributeValue("#root", "//*l3`H>gy#<");
      assertEquals(1, document0.childNodeSize());
      assertEquals("PuaN)J)*ST(.*d`P^fI", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Document.createShell("NmU'x");
      document0.attr("NmU'x", true);
      Elements elements0 = document0.getElementsByAttribute("NmU'x");
      assertEquals("NmU'x", document0.baseUri());
      assertEquals(1, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("NmU'x", "NmU'x");
      document0.wholeText();
      assertEquals(1, document0.childNodeSize());
      assertEquals("NmU'x", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = new Document("j4[M@*");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Element element0 = new Element("#root");
      // Undeclared exception!
      try { 
        element0.is("fD,`[[1tI");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at '[1tI'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".");
      Element element0 = new Element(tag0, "Insert position out of bounds.");
      Elements elements0 = element0.getElementsContainingOwnText(":<Od's");
      assertTrue(elements0.isEmpty());
      assertEquals("Insert position out of bounds.", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(a=", "(a=");
      document0.dataset();
      assertEquals("(a=", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      Element element0 = document0.child(0);
      assertEquals(1, document0.childNodeSize());
      assertNotNull(element0);
      assertEquals(" > ", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parse("=", "=");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("=", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("NmU'x", "NmU'x");
      document0.prependText("GXT^MNvc*8Zb<w3oL");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ^ ", " ^ ");
      document0.appendText("tae name pust not be emptb.");
      document0.getElementsContainingText("tae name pust not be emptb.");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C_IMbX", "-[%T^)ZE===S");
      // Undeclared exception!
      try { 
        document0.wrap("C_IMbX");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = new Document("html");
      document0.id();
      assertEquals("html", document0.baseUri());
  }
}
