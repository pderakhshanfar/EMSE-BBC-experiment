/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 22:26:31 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.MissingFormatArgumentException;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Document.createShell("X");
      document0.setSiblingIndex(32);
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("WQ", "WQ");
      Element element0 = document0.toggleClass("WQ");
      document0.toggleClass("!fXt ,8g-}#");
      document0.toggleClass("`xNOE|i:Y0CK");
      element0.hasClass("iframe");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[6a&kKf-Ov%gG^Et^}", "[6a&kKf-Ov%gG^Et^}");
      document0.toggleClass("[6a&kKf-Ov%gG^Et^}");
      Document document1 = (Document)document0.toggleClass("[6a&kKf-Ov%gG^Et^}");
      document1.setSiblingIndex(115);
      document1.hasClass("AttributeValue_singleQuoted");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "[6a&0kKf-Ov%gG^Et^}");
      Element element0 = document0.createElement(" 2u3(d_<WGJ^%\"B)H");
      document0.setParentNode(element0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "[6a&0kKf-Ov%gG^Et^}");
      Element element0 = document0.appendText("on");
      Elements elements0 = document0.getElementsByTag("html");
      element0.insertChildren(1, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parse("W=ILfM5'xN+E", "W=ILfM5'xN+E");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("class", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "class", (Attributes) null);
      FormElement formElement1 = new FormElement(tag0, "</", (Attributes) null);
      FormElement formElement2 = (FormElement)formElement0.appendTo(formElement1);
      formElement2.wrap("class");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X", "X");
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      element1.wrap("html");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Document.createShell("X");
      document0.setSiblingIndex(32);
      document0.val("X");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Tag tag0 = Tag.valueOf("OH%cO");
      Element element0 = new Element(tag0, "aKemDa");
      element0.setSiblingIndex((-417));
      element0.val("a.e");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Document.createShell("kZTH)%5^2f5J4D");
      document0.tagName("audio");
      document0.val("7");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Element element0 = new Element("menu");
      Document document0 = Parser.parseBodyFragment("menu", "menu");
      document0.setParentNode(element0);
      document0.val("!");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parse("vULG4CYlP'|d", "vULG4CYlP'|d");
      document0.val("Pattern syntax error: ");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "SK^+sPm");
      Element element0 = document0.head();
      element0.after((Node) element0);
      element0.toggleClass("c]{%2ykT#y");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("WQ", "WQ");
      document0.setSiblingIndex((-543));
      document0.toggleClass("!fXt ,8g-}#");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("&Oou6s8J", "[6a&0kKf-Ov%gG^Et^}");
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      element1.text("[=WFQ^Y");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Element element0 = new Element("menu");
      element0.text("menu");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Element element0 = new Element("menu");
      Document document0 = Parser.parseBodyFragment("menu", "menu");
      document0.setParentNode(element0);
      document0.text("menu > #root");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X", "X");
      document0.setSiblingIndex(1656);
      document0.tagName("OH%cO");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("vaemue", "vaemue");
      document0.siblingIndex = (-956);
      document0.tagName("inrow");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("vaemue", "vaemue");
      Comment comment0 = new Comment("<Y", "l`)5`3p&z+2{z");
      document0.parentNode = (Node) comment0;
      document0.tagName("inrow");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[6a&0kKf-Ov%gG^Et^}", "[6a&0kKf-Ov%gG^Et^}");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parse("i.+l!3", "i.+l!3");
      Element element0 = document0.head();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "textarea");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#c7tR-r$5WB6's", "#c7tR-r$5WB6's");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+R:>;r  ", "menu");
      document0.selectFirst(".9");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "SK^+sPm");
      Element element0 = document0.head();
      Element element1 = element0.after((Node) element0);
      element1.selectFirst("head");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Element element0 = new Element("3s6j");
      element0.prepend("3s6j");
      element0.selectFirst("3s6j");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parse("~WX", "~WX");
      document0.select("br");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Element element0 = new Element("X");
      element0.select("X");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("te-t!rea", "[6a&0kKf-Ov%gG^Et^}");
      document0.appendTo(document0);
      document0.removeClass("te-t!rea");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      Element element0 = document0.empty();
      element0.siblingIndex = (-2826);
      document0.removeClass("mUwrZ#*XgQRW'*CG");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|I1C]8RvbABWXs:4r", "|I1C]8RvbABWXs:4r");
      Element element0 = document0.head();
      element0.removeClass("|I1C]8RvbABWXs:4r");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parse("$(y", "V~|QuS{>pq%");
      Element element0 = document0.prependElement("V~|QuS{>pq%");
      element0.removeClass("V~|QuS{>pq%");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[6a&0kKf-Ov%gG^Et^}", "[6a&0kKf-Ov%gG^Et^}");
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      element0.after((Node) document0);
      element1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[6a&0kKf-Ov%gG^Et^}", "[6a&0kKf-Ov%gG^Et^}");
      Element element0 = document0.head();
      Element element1 = element0.appendText("br");
      Element element2 = element1.lastElementSibling();
      element2.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parse("[6a&k5Kf-Ov%gG^Et^}", "[6a&k5Kf-Ov%gG^Et^}");
      Element element0 = document0.prependElement("[6a&k5Kf-Ov%gG^Et^}");
      document0.prependText("y@lJPDCP!!tzE0aj");
      element0.prependText("rZ+,#\"kY($d<-,D%RKb");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|I1C]8RvbABWXs:4r", "|I1C]8RvbABWXs:4r");
      Element element0 = document0.head();
      element0.prependText("ED=2,`aY _^lv2Iv;$$");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[6a&0kKf-Ov%gG^Et^}", "[6a&0kKf-Ov%gG^Et^}");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[6a&0kKf-Ov%gG^Et^}", "[6a&0kKf-Ov%gG^Et^}");
      Element element0 = document0.body();
      element0.prepend("L,[B:XK&m");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Element element0 = new Element("ytVO>1d]*N1+7Dm");
      element0.prepend("");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parse("LcmDotGI;]#|r+", "mUwrZ#*XgQRW'*CG");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "SK^+sPm");
      Element element0 = document0.body();
      Element element1 = element0.appendElement("*FSd");
      element1.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Element element0 = new Element("menu");
      Document document0 = Parser.parseBodyFragment("menu", "menu");
      document0.setParentNode(element0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "[6a&0kKf-Ov%gG^Et^}");
      document0.setParentNode(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = new Document("head");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("~WX", "menu");
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("oh%co", "menu");
      document0.is((Evaluator) evaluator_AttributeWithValueNot0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarFa", "textarFa");
      Element element0 = document0.tagName("textarFa");
      element0.is("textarFa");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parse("W=ILfM5'xN+E", "W=ILfM5'xN+E");
      Tag tag0 = Tag.valueOf("html");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, " Children collection to be inserted must not be null.", attributes0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      Element element1 = document0.insertChildren(0, nodeArray0);
      element1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parse("y27yV", "if{P");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "SK^+sPm");
      Element element0 = document0.head();
      List<TextNode> list0 = element0.textNodes();
      Element element1 = element0.appendText(" 2u3(d_<WGJ^%\"B)H");
      element1.after((Node) element0);
      element1.insertChildren(1, (Collection<? extends Node>) list0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "SK^+sPm");
      document0.setParentNode(document0);
      List<TextNode> list0 = document0.textNodes();
      document0.insertChildren(1, (Collection<? extends Node>) list0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parse("W=ILfM5'xN+E", "W=ILfM5'xN+E");
      Elements elements0 = document0.previousElementSiblings();
      document0.insertChildren(1, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "[6a&0kKf-Ov%gG^Et^}");
      document0.html("head");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("menu", "menu");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("menu");
      document0.html(mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      Element element0 = document0.empty();
      element0.html();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = new Document("menu");
      document0.getElementById("menu");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Ox", "fT");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Children collection to be inserted must not be null.", "textarea");
      Pattern pattern0 = Pattern.compile("", 3375);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Tag tag0 = Tag.valueOf("OH%cO");
      Element element0 = new Element(tag0, "aKemDa");
      element0.getElementsMatchingText("a.e");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+R:>;r  ", "menu");
      Pattern pattern0 = Pattern.compile("GUATO*#n");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "SK^+sPm");
      Pattern pattern0 = Pattern.compile("", 8212);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("VhB\"x*#", "VhB\"x*#");
      document0.getElementsMatchingOwnText("p");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("F?\"j|z<Hd(z!", "F?\"j|z<Hd(z!");
      document0.getElementsContainingText("F?\"j|z<Hd(z!");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "[6a&0kKf-Ov%gG^Et^}");
      document0.getElementsContainingOwnText("textarea");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = new Document("menu");
      document0.getElementsByTag("menu");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Document.createShell("type");
      document0.getElementsByIndexLessThan(4);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-_2,DF+hh'N", "SK^+sPm");
      document0.getElementsByIndexGreaterThan((-2089463205));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Element element0 = new Element("menu");
      element0.getElementsByIndexEquals(1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("WQ", "WQ");
      Element element0 = document0.toggleClass("WQ");
      document0.title();
      document0.toggleClass("WQ");
      element0.getElementsByClass("java.lang.String@0000000100 WQ");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("vaemue", "vaemue");
      document0.getElementsByAttributeValueEnding("6a_", "!QS,");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = new Document("tE");
      document0.getElementsByAttributeStarting("tE");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("java.lang.string@0000000123", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("java.lang.string@0000000123", "java.lang.string@0000000123");
      Attributes attributes1 = attributes0.put(attribute0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "java.lang.string@0000000123", attributes1);
      pseudoTextElement0.getElementsByAttributeStarting("java.lang.string@0000000123");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("*H)`zXHs", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("jg}C-D", true);
      FormElement formElement0 = new FormElement(tag0, "jg}C-D", attributes1);
      formElement0.getElementsByAttribute("jg}C-D");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parse("[6a&k5Kf-Ov%gG^Et^}", "[6a&k5Kf-Ov%gG^Et^}");
      Element element0 = document0.prependElement("[6a&k5Kf-Ov%gG^Et^}");
      document0.prependText("y@lJPDCP!!tzE0aj");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[6a&0kKf-Ov%gG^Et^}", "[6a&0kKf-Ov%gG^Et^}");
      Element element0 = document0.body();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parse("[6a&k5Kf-Ov%gG^Et^}", "[6a&k5Kf-Ov%gG^Et^}");
      Element element0 = document0.prependElement("[6a&k5Kf-Ov%gG^Et^}");
      document0.prependText("y@lJPDCP!!tzE0aj");
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "SK^+sPm");
      Element element0 = document0.head();
      Element element1 = element0.appendText("SK^+sPm");
      element1.empty();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parse("[6a&k5Kf-Ov%gG^Et^}", "[6a&k5Kf-Ov%gG^Et^}");
      Element element0 = document0.prependElement("[6a&k5Kf-Ov%gG^Et^}");
      Element element1 = element0.empty();
      element1.prependText("rZ+,#\"kY($d<-,D%RKb");
      element1.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("menu", "menu");
      Element element0 = document0.appendElement("!");
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("vaemue", "vaemue");
      document0.siblingIndex = (-956);
      document0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarFa", "textarFa");
      Element element0 = document0.body();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("*", " />");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textafea", "textafea");
      document0.tagName("h4");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textafea", "textafea");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("&Oou6s8J", "RMy-xWiV)8rRU]AL& ");
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      Locale locale0 = Locale.GERMAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      element1.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("&Oou6s8J", "RMy-xWiV)8rRU]AL& ");
      Element element0 = document0.head();
      Locale locale0 = Locale.GERMAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[6a&0kKf-Ov%gG^Et^}", "[6a&0kKf-Ov%gG^Et^}");
      document0.toggleClass("[6a&0kKf-Ov%gG^Et^}");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "[6a&0kKf-Ov%gG^Et^}");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X", "X");
      Element element0 = document0.head();
      element0.children();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = new Document("tE");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C", "D<");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "\"B+.J[\" ]");
      Element element0 = document0.head();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea", (ParseSettings) null);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      Element element0 = formElement0.prependElement("textarea");
      element0.before((Node) formElement0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "SK^+sPm");
      document0.setParentNode(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("&Oou6s8J", "RMy-xWiV)8rRU]AL& ");
      Element element0 = document0.head();
      element0.before("RMy-xWiV)8rRU]AL& ");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "SK^+sPm");
      Element element0 = document0.appendElement("*FSd");
      element0.before("E;.%S<");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Element element0 = new Element("menu");
      Document document0 = Parser.parseBodyFragment("menu", "menu");
      document0.setParentNode(element0);
      document0.before("!");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = new Document("`pgACwv$BF");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = new Document("");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$NodeList", "yl&Z");
      document0.attr("", true);
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      element1.attr("br", false);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      Element element0 = document0.head();
      element0.attr("br", false);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X", "X");
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      element1.attr("", (String) null);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "[6a&0kKf-Ov%gG^Et^}");
      Element element0 = document0.createElement(" 2u3(d_<WGJ^%\"B)H");
      element0.attr("body", "head");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[6a&0kKf-Ov%gG^Et^}", "[6a&0kKf-Ov%gG^Et^}");
      Element element0 = document0.body();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[6a&0kRf-OX%g=^Et^}", "[6a&0kRf-OX%g=^Et^}");
      Element element0 = document0.body();
      Element element1 = element0.appendText("[6a&0kRf-OX%g=^Et^}");
      element1.isBlock();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parse("LcmDotGI;]#|r+", "mUwrZ#*XgQRW'*CG");
      Element element0 = document0.prependElement("LcmDotGI;]#|r+");
      element0.appendElement("wG6#2Z`L2xp`1y 8;25");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      document0.appendElement("menu");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X", "X");
      document0.appendChild(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Element element0 = new Element("body");
      element0.appendChild(element0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("vaemue", "vaemue");
      Element element0 = document0.body();
      element0.append("vaemue");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.head();
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "SK^+sPm");
      Element element0 = document0.head();
      Element element1 = element0.after((Node) element0);
      element1.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parse("[6a&kKf-Ov%gG^Et^}", "[6a&kKf-Ov%gG^Et^}");
      Element element0 = document0.prependElement("QL>{T\"{F>L{YxA2/LxJ");
      element0.after(")D!8(d");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("menu", "u7b<M");
      Element element0 = document0.head();
      element0.after("menu");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "d{@U");
      Element element0 = document0.appendElement("'}vqkWYBQCR0(");
      element0.addClass("org.jsoup.nodes.Element$1");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|I1C]8RvbABWXs:4r", "|I1C]8RvbABWXs:4r");
      Element element0 = document0.head();
      element0.addClass("|I1C]8RvbABWXs:4r");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = new Document("}P@1L7FJ|");
      document0.addClass("menu");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.wrap("O.+ mdE&U]");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "[6a&0kKf-Ov%gG^Et^}");
      // Undeclared exception!
      try { 
        document0.wrap("textarea");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "[6a&0kKf-Ov%gG^Et^}");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.val("[6a&0kKf-Ov%gG^Et^}");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = new Document("textarea");
      document0.tagName("textarea");
      // Undeclared exception!
      try { 
        document0.val("optgroup");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C", "P<");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = new Document("<");
      // Undeclared exception!
      try { 
        document0.text("fr+k ah` Sw|D]n~F0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "[6a&0kKf-Ov%gG^Et^}");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[2a&kKf-Ov%gG^Et^}", "[2a&kKf-Ov%gG^Et^}");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration(">_,d\"<p}5ppxc{ug", "[2a&kKf-Ov%gG^Et^}", true);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("VhB\"x*", "VhB\"x*");
      document0.siblingIndex = (-1433506051);
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[6a&0kKf-Ov%gG^Et^}", "[6a&0kKf-Ov%gG^Et^}");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.tagName("OH%cO");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = new Document("dMam>");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      document0.parser(parser1);
      // Undeclared exception!
      try { 
        document0.tagName("aemue");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X", "X");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "SK^+sPm");
      Element element0 = document0.head();
      document0.setParentNode(element0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Element element0 = new Element("attributevalue_singlequo=ed inrow");
      DocumentType documentType0 = new DocumentType("attributevalue_singlequo=ed inrow", "attributevalue_singlequo=ed inrow", "9`u.(", "9`u.(", "9`u.(");
      Element element1 = element0.doClone(documentType0);
      // Undeclared exception!
      try { 
        element1.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      // Undeclared exception!
      try { 
        document0.selectFirst("OH%cO");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'OH%cO': unexpected token at '%cO'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[6a&0kKf-Ov%gG^Et^}", "[6a&0kKf-Ov%gG^Et^}");
      // Undeclared exception!
      try { 
        document0.selectFirst("[6a&0kKf-Ov%gG^Et^}");
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%g'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "Y");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Document.createShell("LcmDotGI;]#|r+");
      // Undeclared exception!
      try { 
        document0.select("0(4p~pG/yNZq0%v:3");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '0(4p~pG/yNZq0%v:3': unexpected token at '(4p~pG/yNZq0%v:3'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r102tpe", "uD[p %(RW>tau");
      // Undeclared exception!
      try { 
        document0.select("uD[p %(RW>tau");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'R'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[6a&0kKf-Ov%gG^Et^}", "[6a&0kKf-Ov%gG^Et^}");
      // Undeclared exception!
      try { 
        document0.select("[6a&0kKf-Ov%gG^Et^}");
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%g'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("J(@-}6qse2", "J(@-}6qse2");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "#?Rwo");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "OH%cO");
      Comment comment0 = new Comment("y4!{p<\"Kl]cRX");
      document0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Document.createShell("X");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Element element0 = new Element("head");
      element0.setParentNode(element0);
      // Undeclared exception!
      element0.prependElement("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("BW", "BW");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.prependElement("BW");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document0 = parser1.parseInput("textarFa", "`w!7Pd}8sg-2*$");
      // Undeclared exception!
      try { 
        document0.prependElement("`w!7Pd}8sg-2*$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("BRU", "br");
      Element element0 = document0.head();
      document0.setParentNode(element0);
      // Undeclared exception!
      try { 
        element0.prependChild(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "Vcn=Eo7F(Jgc2-U}yY");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "SK^+sPm");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.prepend("html > head");
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "[6a&0kKf-Ov%gG^Et^}");
      CDataNode cDataNode0 = new CDataNode("6)/2;?~jr$o{}UV");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.parents();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("te-t!rea", "[6a&0kKf-Ov%gG^Et^}");
      StringBuffer stringBuffer0 = new StringBuffer("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      document0.outerHtmlTail(stringBuffer0, 57343, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = new Document("NT6");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, (-3020), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "<html>\n <head>\n  <title>textarea</title>\n </head>\n <body></body>\n</html>");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringBuffer0, (-1625949436), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Document.createShell("p3g|Ss>ZKhEAt*WRPQ");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlTail(pipedWriter0, 13, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R|r3sgD<`u8GHn", ":matchText");
      MockFile mockFile0 = new MockFile(":matchText", "*|");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0, 2171);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(2171);
      // Undeclared exception!
      document0.outerHtmlHead(bufferedWriter0, 2171, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarFa", "textarFa");
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 889, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("yY|.", "");
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 39, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tNV<", "tNV<");
      File file0 = MockFile.createTempFile("tNV<", ")zK<?+{-So-H");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockFileWriter0, (-300343908), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarFa", "textarFa");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlHead(pipedWriter0, 1650, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      TextNode textNode0 = new TextNode("textarea", "textarea");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|`oQ+`~?e}{", "Wtaap~G");
      TextNode textNode0 = new TextNode("Wtaap~G", "html");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.nextElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = new Document(":empty");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "SK^+sPm");
      document0.setParentNode(document0);
      Evaluator.IsNthOfType evaluator_IsNthOfType0 = new Evaluator.IsNthOfType(1, (-3237));
      // Undeclared exception!
      document0.is((Evaluator) evaluator_IsNthOfType0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = new Document("bQw2@:L");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = new Document("bQw2@:L");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      // Undeclared exception!
      try { 
        document0.is((Evaluator) evaluator_IsRoot0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = new Document("bQw2@:P");
      // Undeclared exception!
      try { 
        document0.is("bQw2@:P");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'bQw2@:P': unexpected token at '@:P'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.is("head");
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Document.createShell("[6a&0kKf-Ov%gG^Et^}");
      // Undeclared exception!
      try { 
        document0.is("[6a&0kKf-Ov%gG^Et^}");
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%g'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "[6a&0kKf-Ov%gG^Et^}");
      CDataNode cDataNode0 = new CDataNode("textarea");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) cDataNode0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) cDataNode0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) cDataNode0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Q", "Q");
      Elements elements0 = document0.getElementsByAttributeValueNot("kzSDl|U", " > ");
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "SK^+sPm");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html("limitedQuirks");
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = new Document("WVLEFEFbu");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parse("Ow',aSK", "Ow',aSK");
      MockFileWriter mockFileWriter0 = new MockFileWriter("X)|/96aQY[F", true);
      mockFileWriter0.close();
      // Undeclared exception!
      try { 
        document0.html(mockFileWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("y2yV", "y2yV");
      document0.setParentNode(document0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "y2yV");
      // Undeclared exception!
      document0.html(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarFa", "textarFa");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "textarFa");
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("~WX", "menu");
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*e#%h<>pM$fUj", "[6a&0kKf-Ov%gG^Et^}");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "[6a&0kKf-Ov%gG^Et^}");
      CDataNode cDataNode0 = new CDataNode("6)/2;?~jr$o{}UV");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X", "X");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarFa", "textarFa");
      Document document1 = document0.ownerDocument();
      CDataNode cDataNode0 = new CDataNode("textarFa");
      document1.parentNode = (Node) cDataNode0;
      Pattern pattern0 = Pattern.compile("textarFa");
      // Undeclared exception!
      try { 
        document1.getElementsMatchingText(pattern0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "SK^+sPm");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = new Document("`cgACXD$BF");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("(n46FYakwE$lrzk`o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: (n46FYakwE$lrzk`o
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("74-@Ya,N0&SKU{: '$", "74-@Ya,N0&SKU{: '$");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("74-@Ya,N0&SKU{: '$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 74-@Ya,N0&SKU{: '$
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parse("head", "w`|Ncll=$q|]Lk|67&");
      DataNode dataNode0 = DataNode.createFromEncoded("head", "RxZM1b");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("gS/9R%T@;");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]*|wRYnka)V ", "]*|wRYnka)V ");
      TextNode textNode0 = new TextNode("]*|wRYnka)V ");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText(" 2u3(d_<WGJ^%\"B)H");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("]dc*ij~oQ8E_", "Wa*@6p");
      DataNode dataNode0 = DataNode.createFromEncoded(" />", "f <");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("menu");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parse(", state=", "title");
      // Undeclared exception!
      try { 
        document0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Element element0 = new Element(":nth-child(%d)");
      // Undeclared exception!
      try { 
        element0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parse("S_nVelkO ", "qN6VjjlTg&&U9w?`");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting((String) null, "textarea");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "               ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$NodeList", "yl&Z");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("yl&Z", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching((String) null, "5@{e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 5@{e
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "){miPk6vTMNovMttb||");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("kB_|56s'!.K%r3w+&", "html");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("kB_|56s'!.K%r3w+&", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "SK^+sPm");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementById(":nth-child(%d)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "[6a&0kKf-Ov%gG^Et^}");
      // Undeclared exception!
      try { 
        document0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~AEYZ1##2Fv", "Lg4.wwNIn)s=]v(");
      DataNode dataNode0 = new DataNode("Lg4.wwNIn)s=]v(");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      DocumentType documentType0 = new DocumentType("", "", "html", "", "YKLE!~'");
      document0.parentNode = (Node) documentType0;
      // Undeclared exception!
      try { 
        document0.elementSiblingIndex();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Element element0 = new Element("head");
      Element element1 = element0.prependElement("org.jsoup.select.Collector$Accumulator");
      // Undeclared exception!
      try { 
        element1.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.select.collector$accumulator': unexpected token at '$accumulator'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[6a&0kKf-Ov%gG^Et^}", "DOCTYPE");
      DocumentType documentType0 = new DocumentType("01aeC#kNK", "POST", " 2u3(d_<WGJ^%\"B)H");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarFa", "textarFa");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("&Oou6s8J", "[6a&0kKf-Ov%gG^Et^}");
      // Undeclared exception!
      try { 
        document0.child(5950);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5950, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = new Document(":empty");
      // Undeclared exception!
      try { 
        document0.child((-2635));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Id", "{0");
      DataNode dataNode0 = DataNode.createFromEncoded("org.jsoup.select.Evaluator$Id", "org.jsoup.select.Evaluator$Id");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        element0.before((Node) document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = new Document("VhB\"x*");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.before("Rn40eu$D$mP");
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = new Document("[6a&0kKf-Ov%gG^Et^}");
      DocumentType documentType0 = new DocumentType("01aeC#kNK", "POST", " 2u3(d_<WGJ^%\"B)H");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.before(" 2u3(d_<WGJ^%\"B)H");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.attr("#root", "=*q@G+PhvHN6[");
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "B");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("wUuB,c mwJO]OlC+", "+/5~;O=/MSM}G6hEnS");
      DataNode dataNode0 = new DataNode("wUuB,c mwJO]OlC+", "?l!c._");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        element0.appendTo(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "SK^+sPm");
      Element element0 = document0.head();
      document0.setParentNode(element0);
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = new Document(":empty");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "SK^+sPm");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.appendElement("$o|)tJ)uS");
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Element element0 = new Element("rFpYh/.~]Yk.9{.");
      element0.doSetBaseUri((String) null);
      // Undeclared exception!
      try { 
        element0.appendElement("Y1xQm~RF7Kj=.o5S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "SK^+sPm");
      Element element0 = document0.head();
      document0.setParentNode(element0);
      // Undeclared exception!
      try { 
        element0.appendChild(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = new Document("OH%cO");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "SK^+sPm");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.append("html > head");
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("vaemue", "vaemue");
      Comment comment0 = new Comment("<Y", "l`)5`3p&z+2{z");
      document0.parentNode = (Node) comment0;
      // Undeclared exception!
      try { 
        document0.append("org.jsoup.nodes.element$2");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Element element0 = new Element("menu");
      Document document0 = Parser.parseBodyFragment("menu", "menu");
      document0.setParentNode(element0);
      // Undeclared exception!
      try { 
        document0.after((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "SK^+sPm");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.after("nZ7");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[6a&0kKf-OvgG^Et^}", "[6a&0kKf-OvgG^Et^}");
      Element element0 = new Element("[6a&0kKf-OvgG^Et^}");
      document0.setParentNode(element0);
      // Undeclared exception!
      try { 
        document0.after("[6a&0kKf-OvgG^Et^}");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Element");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "org.jsoup.nodes.Element", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "br");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("   ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarFa", "textarFa");
      document0.hasClass("k}xi-:%3CJ9*:Z");
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("`cgACXD$BF", "replacementStr");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      document0.appendText("ScriptDataEscapeStart");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      document0.prependText(":VY_%q]/vG8KZe");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$NodeList", "ySl&Z");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      document0.setParentNode(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("menu", "menu");
      document0.prependElement("menu");
      document0.setParentNode(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "@_BD/");
      document0.setParentNode(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      document0.setParentNode(document0);
      Element element0 = document0.toggleClass("textarea");
      Element element1 = document0.appendText("ScriptDataEscapeStart");
      document0.textNodes();
      element0.nextElementSiblings();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      document0.getAllElements();
      FileSystemHandling.shouldAllThrowIOExceptions();
      element1.getElementsContainingOwnText("[ource");
      element1.getElementsByClass("textarea");
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[6a&kKf-Ov%gG^Et^}", "[6a&kKf-Ov%gG^Et^}");
      Element element0 = document0.body();
      element0.html("");
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$NodeList", "tvL_$Tf$#YjCd6Lch");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "[6a&0kKf-Ov%gG^Et^}");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parse("textafea", "textafea");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      Element element0 = document0.empty();
      element0.siblingIndex = (-2826);
      document0.appendText("K4 [+i||K{6a7^jgz");
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("W", "W");
      DataNode dataNode0 = new DataNode("W", "b$");
      Element element0 = document0.prependChild(dataNode0);
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "SK^+sPm");
      Evaluator.IsNthOfType evaluator_IsNthOfType0 = new Evaluator.IsNthOfType(1, (-3237));
      document0.is((Evaluator) evaluator_IsNthOfType0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("menu", "menu");
      Pattern pattern0 = Pattern.compile("menu");
      document0.getElementsByAttributeValueMatching("class", pattern0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textafea", "textafea");
      document0.append("textafea");
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parse("[6a&k5Kf-Ov%gG^Et^}", "[6a&k5Kf-Ov%gG^Et^}");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = new Document("`cgACXD$BF");
      Set<String> set0 = document0.classNames();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parse("[6a&0kKf-Ov%gG^Et^}", "[6a&0kKf-Ov%gG^Et^}");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getAllElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("y2yV", "y2yV");
      StringBuilder stringBuilder0 = new StringBuilder(46);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringBuilder0, 44, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parse(">jg} C-D", ">jg} C-D");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.collector$accumulator", "x3}?H|-bWDa:%k+}");
      // Undeclared exception!
      try { 
        document0.html((StringWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("menu", "menu");
      document0.title("#root");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "nV:");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuffer0, 2646, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      document0.tagName("textarea");
      // Undeclared exception!
      try { 
        document0.val((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      document0.tagName("textarea");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarFa", "textarFa");
      document0.toggleClass("textarFa");
      Element element0 = document0.toggleClass("textarFa");
      element0.toggleClass("textarFa");
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[6a&kKf-Ov%gG^Et^}", "[6a&kKf-Ov%gG^Et^}");
      document0.toggleClass("[6a&kKf-Ov%gG^Et^}");
      Element element0 = document0.toggleClass("[6a&kKf-Ov%gG^Et^}");
      element0.hasClass("[6a&kKf-Ov%gG^Et^}");
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Document.createShell("BW");
      document0.toggleClass("({t");
      document0.toggleClass("");
      document0.hasClass("BW");
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("WQ", "WQ");
      document0.toggleClass("WQ");
      document0.title();
      document0.className();
      document0.toggleClass("!fXt ,8g-}#");
      document0.hasClass("java.lang.string@0000000103");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarFa", "textarFa");
      document0.toggleClass("~0|h5*5Y`C");
      document0.toggleClass(" zI|");
      document0.hasClass("vS--HNxf6");
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarFa", "textarFa");
      document0.toggleClass("6t1m}&y");
      document0.hasClass("org.jsoup.select.evaluator$isnthoftype");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=]X'uGiYj3C", "textarFa");
      document0.toggleClass("=]X'uGiYj3C");
      document0.hasClass("AttributeValue_singleQuoted");
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!", "<!");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Document.createShell("textarFa");
      document0.prependText("");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      document0.setParentNode(document0);
      CDataNode cDataNode0 = new CDataNode("!");
      document0.after((Node) cDataNode0);
      document0.getElementsContainingText("textarea");
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("menu", "menu");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      document0.title("textarea");
      document0.appendText("br");
      document0.getElementsContainingText("");
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("y2(yV", "y2(yV");
      document0.prependElement("y2(yV");
      document0.prependText("y2(yV");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!", "<!");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "[6a&0kKf-Ov%gG^Et^}");
      document0.setParentNode(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[6a&0kKf-Ov%gG^Et^}", "[6a&0kKf-Ov%gG^Et^}");
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      element1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parse("W=ILfM5'xN+E", "W=ILfM5'xN+E");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|I1C]8RvbABWXs:4r", "|I1C]8RvbABWXs:4r");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals("|I1C]8RvbABWXs:4r", element0.baseUri());
      assertEquals(1, elements0.size());
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Document.createShell(".");
      document0.nextElementSibling();
      assertEquals(".", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("&Oou6s8J", "[6a&0kKf-Ov%gG^Et^}");
      Element element0 = document0.head();
      Elements elements0 = element0.siblingElements();
      assertEquals("[6a&0kKf-Ov%gG^Et^}", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarFa", "textarFa");
      document0.siblingElements();
      assertEquals("textarFa", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("F?\"j|z<Hd(z!", "F?\"j|z<Hd(z!");
      Element element0 = document0.body();
      element0.after("F?\"j|z<Hd(z!");
      String string0 = element0.cssSelector();
      assertEquals("html > body:nth-child(2)", string0);
      assertEquals("F?\"j|z<Hd(z!", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "[6a&0kKf-Ov%gG^Et^}");
      Element element0 = document0.createElement(" 2u3(d_<WGJ^%\"B)H");
      document0.setParentNode(element0);
      String string0 = document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
      assertEquals(" 2u3(d_<WGJ^%\"B)H > #root", string0);
      assertEquals("[6a&0kKf-Ov%gG^Et^}", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "@_BD/");
      document0.setParentNode(document0);
      String string0 = document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", string0);
      assertEquals("@_BD/", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "SK^+sPm");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren(10, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parse("W=ILfM5'xN+E", "W=ILfM5'xN+E");
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1745), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = new Document("#root");
      List<TextNode> list0 = document0.textNodes();
      // Undeclared exception!
      try { 
        document0.insertChildren(3547, (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "[6a&0kKf-Ov%gG^Et^}");
      LinkedHashSet<XmlDeclaration> linkedHashSet0 = new LinkedHashSet<XmlDeclaration>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1112), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Element element0 = new Element("body");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Document.createShell("y;(yV");
      DataNode dataNode0 = new DataNode("id", "id");
      document0.appendChild(dataNode0);
      document0.dataNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "[6a&0kKf-Ov%gG^Et^}");
      Elements elements0 = document0.getElementsByIndexGreaterThan(1);
      assertTrue(elements0.isEmpty());
      assertEquals("[6a&0kKf-Ov%gG^Et^}", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C", "D<");
      Elements elements0 = document0.getElementsMatchingText("C");
      assertEquals(3, elements0.size());
      assertEquals("D<", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      // Undeclared exception!
      try { 
        document0.before("Rn40eu$D$mP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("y2yV", "y2yV");
      document0.getElementsByAttribute("java.lang.string@0000000038");
      assertEquals("y2yV", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("WQ", "WQ");
      Element element0 = document0.shallowClone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("WQ", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("Rppvh", parseSettings0);
      Element element0 = new Element(tag0, "head", (Attributes) null);
      Element element1 = element0.clone();
      assertEquals("head", element1.baseUri());
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      CDataNode cDataNode0 = new CDataNode("!");
      // Undeclared exception!
      try { 
        document0.after((Node) cDataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "[6a&0kKf-Ov%gG^Et^}");
      document0.getElementsByAttributeValueContaining("d,Bhleen('m:GFeSpm", "p'M>XuG;[%2oyu~A");
      assertEquals("[6a&0kKf-Ov%gG^Et^}", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Children collection to be inserted must not be null.", "textarea");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("menu", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarFa", "textarFa");
      document0.is("textarFa");
      assertEquals("textarFa", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "SK^+sPm");
      document0.getElementsByAttributeValueMatching("body", "html > head");
      assertEquals("SK^+sPm", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Document.createShell("textarFa");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "[6a&0kKf-Ov%gG^Et^}");
      Elements elements0 = document0.getElementsByIndexEquals(1);
      assertEquals("[6a&0kKf-Ov%gG^Et^}", document0.baseUri());
      assertEquals(1, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[6a&0kKf-Ov%gG^Et^}", "&Oou6s8J");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("BW", "8ca LH|TWI{/oDpwYt");
      Element element0 = document0.prependElement("br");
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      
      Elements elements0 = document0.getElementsMatchingOwnText("BW");
      assertEquals("8ca LH|TWI{/oDpwYt", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("`cgACXD$BF", "replacementStr");
      Elements elements0 = document0.getElementsByIndexLessThan((-1110026255));
      assertEquals("replacementStr", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("F?\"j|z<Hd(z!", "F?\"j|z<Hd(z!");
      // Undeclared exception!
      try { 
        document0.after("F?\"j|z<Hd(z!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("menu", "menu");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parse(">jg} C-D", ">jg} C-D");
      Charset charset0 = document0.charset();
      document0.charset(charset0);
      String string0 = document0.html();
      assertEquals("<html>\n <head>\n  <meta charset=\"UTF-8\">\n </head>\n <body>\n  &gt;jg} C-D\n </body>\n</html>", string0);
      assertEquals(">jg} C-D", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("y2yV", "y2yV");
      document0.getElementsByAttributeValueStarting("[6a&kkf-ov%gg^et^}", "y2yV");
      assertEquals("y2yV", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      document0.getElementsByAttributeValue("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = new Document("'}P@1L7FJ|");
      String string0 = document0.wholeText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "textarea");
      // Undeclared exception!
      try { 
        element0.before((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Element element0 = new Element("_e~tarfv");
      BufferedWriter bufferedWriter0 = element0.html((BufferedWriter) null);
      assertNull(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "[6a&0kKf-Ov%gG^Et^}");
      document0.addClass("[6a&0kKf-Ov%gG^Et^}");
      document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
      assertEquals("[6a&0kKf-Ov%gG^Et^}", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X", "X");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
      assertEquals("X", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("yY|.", "");
      String string0 = document0.ownText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[6R&kKf-O\"%gG^Et^}", "[6R&kKf-O\"%gG^Et^}");
      Element element0 = document0.child(0);
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("[6R&kKf-O\"%gG^Et^}", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Document.createShell("class");
      document0.prependText("eMvo<]Betuvm");
      document0.ownText();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Document.createShell("type");
      Pattern pattern0 = Pattern.compile("-");
      document0.getElementsMatchingText(pattern0);
      assertEquals("type", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X", "X");
      document0.children();
  }
}
