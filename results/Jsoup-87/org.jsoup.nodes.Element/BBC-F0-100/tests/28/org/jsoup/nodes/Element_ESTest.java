/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 23:04:21 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G}EOMDoP]", "?LL.i73T\",h");
      Element element0 = document0.body();
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        element0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Document.createShell("<`eWhhgK");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("<`eWhhgK");
      Element element0 = document0.classNames((Set<String>) linkedHashSet0);
      element0.toggleClass("-l");
      document0.hasClass("title");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("v5ok*|xD]'bM`ri", "Tag9cannot be self closng; not a void tag");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("EFY", "|&4L+)t1{zy");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: |&4L+)t1{zy
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("WPcw&/iU-v", "WPcw&/iU-v");
      document0.getElementsByAttributeValueStarting("org.jsoup.nodes.element", "WPcw&/iU-v");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parse("(|J/47h.o8j? rb5f<", "(|J/47h.o8j? rb5f<");
      Element element0 = document0.body();
      element0.before((Node) document0);
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("qT%N}1f", "qT%N}1f");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(mockPrintWriter0, 967, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("pb?)_O)|]dR<Bzd", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ",F", attributes0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      pseudoTextElement0.outerHtmlHead((Appendable) null, 26, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&v#$Pi\"2%8M,5Gv", "&v#$Pi\"2%8M,5Gv");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("v^CB3hr", "v^CB3hr");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&v#$Pi\"2%8M,5Gv", "&v#$Pi\"2%8M,5Gv");
      document0.doSetBaseUri("&v#$Pi\"2%8M,5Gv");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[;jr");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "[;jr", attributes0);
      Element element0 = pseudoTextElement0.appendElement("ZV");
      element0.wrap("Q%#aR@Tw%zj97");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Document.createShell("noQuirks");
      Element element0 = document0.head();
      element0.wrap("i");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "title");
      Element element0 = document0.body();
      element0.wrap("|p0&!oh`JUX`!kp");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("woyZirgd", "woyZirgd");
      document0.siblingIndex = (-1619869695);
      document0.val("woyZirgd");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "title");
      Element element0 = document0.body();
      element0.val("String input must not be null");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = new Document("huUQo7");
      document0.val("G }CMT/(b4e");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Document.createShell("noQuirks");
      Element element0 = document0.val("noQuirks");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parse("hWV3(7;N{sxaG0+`=~_", "hWV3(7;N{sxaG0+`=~_");
      Element element0 = document0.body();
      element0.toggleClass("1#h");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Document.createShell("woyZired");
      Element element0 = document0.head();
      element0.toggleClass("woyZired");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("v5ok*|xD]'bM`ri", "</");
      Element element0 = document0.body();
      element0.text("v5ok*|xD]'bM`ri");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&v#$Pi\"2%8M,5Gv", "");
      document0.text("");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Document.createShell("small");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("woyZirgd", "woyZirgd");
      document0.siblingIndex = (-1619869695);
      document0.tagName("woyZirgd");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = new Document("~|Rvk eE!L");
      document0.tagName("Z 'hd");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("Qp=SBiH[(ob8Kw\"\"OKq");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "^", attributes0);
      pseudoTextElement0.tagName();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Element element0 = new Element("br");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("?*)", "?*)");
      Element element0 = document0.head();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&v#$Pi\"2%8M,5Gv", "&v#$Pi\"2%8M,5Gv");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("html", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("body");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "hWV3(7;N{sxaG0+`=~_", attributes0);
      pseudoTextElement0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = new Document("huUQo7");
      document0.selectFirst("huUQo7");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Document.createShell("y6");
      Element element0 = document0.body();
      element0.selectFirst(",O");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Document.createShell("noQuirks");
      document0.tagName("noQuirks");
      document0.selectFirst("noQuirks");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#root");
      CDataNode cDataNode0 = new CDataNode("#root");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "body", attributes0);
      pseudoTextElement0.select("body");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Document.createShell("small");
      Element element0 = document0.body();
      element0.removeClass("small");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = new Document("U`[f");
      document0.removeClass("IxoFs.*kj~cj");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Element element0 = new Element("textarea");
      Element.preserveWhitespace(element0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parse("</", "hWV3(7;N{sxaG0+`=~_");
      Element element0 = document0.body();
      element0.prependText("9k'ug>x;99Q");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Document.createShell("hV|r9C;28d");
      document0.prependElement("address");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("CQL:IBv7g,YW");
      Document document0 = parser0.parseInput((Reader) stringReader0, "CQL:IBv7g,YW");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("CQL:IBv7g,YW");
      Document document0 = parser0.parseInput((Reader) stringReader0, "CQL:IBv7g,YW");
      document0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hV|r9C;28d", "hV|r9C;28d");
      Element element0 = document0.body();
      element0.prepend("java.lang.string@0000000015 <`ewhhgk");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Element element0 = new Element("q%N}1f");
      element0.prepend("");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Children collection to be inserted must not be null.");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "Children collection to be inserted must not be null.", attributes0);
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hV|r9C;28d", "hV|r9C;28d");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hWV3(7;N{sxaG0+`=~_", "hWV3(7;N{sxaG0+`=~_");
      Element element0 = document0.body();
      document0.parentNode = (Node) element0;
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Document.createShell("hWV3(7;N{sxaG0+`=~_");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parse("7;oGVSN#/Gh)($,NGv8", ".");
      Element element0 = document0.prependElement("R2~!CL{&qtn");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = new Document("y6");
      document0.parentNode = (Node) document0;
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("KDY( ", "KDY( ");
      Element element0 = document0.body();
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parse("/6\"?vm>~_C ^*L#\"+5", "/6\"?vm>~_C ^*L#\"+5");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parse("hWV3(7;N{sxaG0+`=~_", "hWV3(7;N{sxaG0+`=~_");
      Element element0 = document0.body();
      element0.tagName("button");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parse("</", "hWV3(7;N{sxaG0+`=~_");
      Element element0 = document0.body();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parse("hWV3(7;N{sxaG0+`=~_", "hWV3(7;N{sxaG0+`=~_");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("H^5fP\"$2=y&wJ", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("Split offset must not be greater than current text length");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "P[&639a=e~N\"d&)X'", attributes0);
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("P[&639a=e~N\"d&)X'", "P[&639a=e~N\"d&)X'");
      pseudoTextElement0.is((Evaluator) evaluator_AttributeWithValueNot0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G[NY1~BX40?i7RT+ap", "G[NY1~BX40?i7RT+ap");
      Evaluator.ContainsData evaluator_ContainsData0 = new Evaluator.ContainsData("G[NY1~BX40?i7RT+ap");
      document0.is((Evaluator) evaluator_ContainsData0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "#root", attributes0);
      element0.is("textarea");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Document.createShell("<`eWhhgK");
      Document document1 = document0.clone();
      Element element0 = document1.tagName("<`eWhhgK");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) document0;
      document1.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = new Document("G[NY1~BX40?i7RT+ap");
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("CQL:IBv7g,YW");
      Document document0 = parser0.parseInput((Reader) stringReader0, "v/.g:RVcN");
      document0.appendChild(document0);
      LinkedHashSet<TextNode> linkedHashSet0 = new LinkedHashSet<TextNode>();
      document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Document.createShell("woyZired");
      Element element0 = document0.head();
      Elements elements0 = element0.previousElementSiblings();
      element0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^", "^");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Tag tag0 = Tag.valueOf("woyZirgd");
      CDataNode cDataNode0 = new CDataNode("bw");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "bw", attributes0);
      pseudoTextElement0.html((MockFileWriter) null);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.html();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      document0.val("org.jsoup.select.Evaluator$IsFirstChild");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#", "org.jsoup.nodes.Element");
      Pattern pattern0 = Pattern.compile("#");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      document0.getElementsMatchingText(":has(el) subselect must not be empty");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parse("/6\"?vm>~_C ^*L#\"+5", "/6\"?vm>~_C ^*L#\"+5");
      Pattern pattern0 = Pattern.compile("tytxd");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parse("huLQo{", "huLQo{");
      document0.getElementsMatchingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("q%N}1", "U`[f");
      document0.getElementsByTag(" > ");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataEscapedEndTagName");
      document0.getElementsByTag("#root");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("WPcw&/iU-v", "WPcw&/iU-v");
      document0.getElementsByIndexLessThan(24);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("zYMW0Q~3hz(g", "'EOkX|CNhxlab`");
      document0.getElementsByIndexGreaterThan((-1618280579));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("pk", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "z6tDBH.:b:A7@]Rx-", attributes0);
      formElement0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("java.lang.string@0000000018 ^", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("java.lang.string@0000000018 ^");
      Attributes attributes0 = cDataNode0.attributes();
      Attribute attribute0 = new Attribute("java.lang.string@0000000018 ^", "java.lang.string@0000000018 ^");
      Attributes attributes1 = attributes0.put(attribute0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "java.lang.string@0000000018 ^", attributes1);
      pseudoTextElement0.getElementsByAttributeValueStarting("java.lang.string@0000000018 ^", "java.lang.string@0000000018 ^");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hWV3(7;N{sxaG0+`=~_", "hWV3(7;N{sxaG0+`=~_");
      document0.getElementsByAttributeValueNot("Insert position out of bounds.", "?12:'|");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Tag tag0 = Tag.valueOf("video");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("pi&gyci(=``qr#%{f{z)", true);
      FormElement formElement0 = new FormElement(tag0, "video", attributes1);
      formElement0.getElementsByAttributeStarting("pi&gyci(=``qr#%{f{z)");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("hulqo{", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("hulqo{", "EpSF-8");
      attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "hulqo{", attributes0);
      formElement0.getElementsByAttribute("hulqo{");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G[NY1~BX40?i7RT+ap", "G[NY1~BX40?i7RT+ap");
      document0.appendTo(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("v5ok*|xD]'bM`ri", "</");
      Element element0 = document0.body();
      Element element1 = element0.after("B");
      element1.empty();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse("</", "hWV3(7;N{sxaG0+`=~_");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "ppaR\">tN,DN:%ef");
      Element element0 = document0.body();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = new Document("track");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Document.createShell("noQuirks");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = new Document("IxoFs.*kj~cj");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Document document1 = Document.createShell("IxoFs.*kj~cj");
      Element element0 = document0.appendTo(document1);
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = new Document("IxoFs.*kj~cj");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Element element0 = document0.appendTo(document0);
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      document0.addClass("5)mKZA0.k");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Document.createShell("<`eWhhgK");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("<`eWhhgK");
      document0.classNames((Set<String>) linkedHashSet0);
      document0.className();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Burg7a#l/LdD<$8zY<", "`5Ea]'64:gf");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf(":has(el) subselect must not be empty", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, ".", (Attributes) null);
      formElement0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("zYMW0Q~3hz(g", "'EOkX|CNhxlab`");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Document.createShell("noQuirks");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hWV3(7;{sxaG0+`=~_", "hWV3(7;{sxaG0+`=~_");
      document0.parentNode = (Node) document0;
      DocumentType documentType0 = new DocumentType("#document", "textarea", "ASj", "$VALUES", ":last-child");
      document0.before((Node) documentType0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Document.createShell("<`eWhhgK");
      Element element0 = document0.head();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = new Document("huUQo7");
      Document document1 = Parser.parseBodyFragment("huUQo7", "huUQo7");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document1.outputSettings(document_OutputSettings0);
      Document document3 = document2.ownerDocument();
      Document document4 = document0.ownerDocument();
      document4.parentNode = (Node) document3;
      document4.before("");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("v5ok*|xD]'bM`ri", "Tag name must not be empty.");
      Element element0 = document0.body();
      element0.before("5S@tE");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Document.createShell("<`eWhhgK");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = new Document(" > ");
      document0.toggleClass(" > ");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = new Document("var");
      document0.siblingIndex = (-3938);
      document0.attr("var", true);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parse("hWV3(7;N{sxaG0+`=~_", "hWV3(7;N{sxaG0+`=~_");
      Element element0 = document0.body();
      element0.attr("hWV3(7;N{sxaG0+`=~_", true);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = new Document("var");
      document0.attr("var", true);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Document.createShell("noQuirks");
      Element element0 = document0.body();
      element0.attr("2Kz0g", "%pz");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parse("hWV3(7;N{sxaG0+`=~_", "hWV3(7;N{sxaG0+`=~_");
      Element element0 = document0.body();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Document.createShell("hWV3(7;N{sxaG0+`=~_");
      Element element0 = document0.body();
      element0.appendText("hWV3(7;N{sxaG0+`=~_");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Document.createShell("<`eWhhgK");
      document0.appendElement("link");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert position out of bounds.", "Insert position out of bounds.");
      document0.tagName("html");
      document0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" > ", " )s`dp");
      document0.setSiblingIndex((-1855));
      document0.append(" )s`dp");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hWV3(7;N{sxaG0+`=~_", "hWV3(7;N{sxaG0+`=~_");
      Element element0 = document0.body();
      element0.append("c<XX_2N&");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hWV3(7;N{sxaG0+`=~_", "hWV3(7;N{sxaG0+`=~_");
      Element element0 = document0.doClone(document0);
      element0.append("c<XX_2N&");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = new Document("java.land.wtring@00k00001u1");
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hWV3(7;{sxaG0+`=~_", "hWV3(7;{sxaG0+`=~_");
      document0.parentNode = (Node) document0;
      Document document1 = document0.clone();
      document0.after((Node) document1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("CQL:IBv7g,YW");
      Document document0 = parser0.parseInput((Reader) stringReader0, "CQL:IBv7g,YW");
      Document document1 = parser0.parseInput("$\"lIu", "CQL:IBv7g,YW");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document1.insertChildren(0, nodeArray0);
      document0.after("IxoFs.*kj~cj");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "ppaR\">tN,DN:%ef");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      element1.after("java.lang.string@0000000054 <`ewhhgk");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hV|r9C;28d", "hV|r9C;28d");
      Element element0 = document0.body();
      element0.addClass("hV|r9C;28d");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Tag tag0 = Tag.valueOf("IxoFs.*kj~cj");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "IxoFs.*kj~cj", attributes0);
      formElement0.addClass("IxoFs.*kj~cj");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hWV3(7;N{sxaG0+`=~_", "hWV3(7;N{sxaG0+`=~_");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.wrap("hWV3(7;N{sxaG0+`=~_");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#", "org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        document0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Document.createShell("<`eWhhgK");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.val(".e5h}");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = new Document("textarea");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Tag tag0 = Tag.valueOf("RcdataLessthanSign");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "RcdataLessthanSign", attributes0);
      String[] stringArray0 = new String[5];
      attributes0.keys = stringArray0;
      // Undeclared exception!
      try { 
        pseudoTextElement0.toggleClass("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G[NY1~BX40?i7RT+ap", "G[NY1~BX40?i7RT+ap");
      document0.html("j");
      // Undeclared exception!
      try { 
        document0.text("charset");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("#root", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("ScriptDataDoubleEscapeStart");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#root", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parse("mVBx8o;]~Xja\";joulK", "mVBx8o;]~Xja\";joulK");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hWV3(7;Q{sxaG0+`=~_", "hWV3(7;Q{sxaG0+`=~_");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.tagName("(.xCJWs-");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Document.createShell("noQuirks");
      // Undeclared exception!
      try { 
        document0.tagName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Jrm(J'mJfL3n", "RcdataLessthanSign");
      Comment comment0 = new Comment("RcdataLessthanSign", "RcdataLessthanSign");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("p", "");
      // Undeclared exception!
      try { 
        document0.selectFirst("org.jsoup.nodes.Element$2");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.nodes.Element$2': unexpected token at '$2'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("QyFH`WMUW", "QyFH`WMUW");
      // Undeclared exception!
      try { 
        document0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      // Undeclared exception!
      try { 
        document0.select("@awoS^e1pQf`oQ^m7|");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '@awoS^e1pQf`oQ^m7|': unexpected token at '@awoS^e1pQf`oQ^m7|'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G[NY1~BX40?i7RT+ap", "G[NY1~BX40?i7RT+ap");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("/y!~.A}S1", "/y!~.A}S1");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = new Document("java.land.wtring@00k00001u1");
      CDataNode cDataNode0 = new CDataNode("AfterAfterBody");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = new Document("noQuirks");
      CDataNode cDataNode0 = new CDataNode("Q5#jPV.c4;");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        Element.preserveWhitespace(document0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G[NY1~BX40?i7RT+ap", "G[NY1~BX40?i7RT+ap");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Document.createShell("[s6l^");
      Element element0 = document0.body();
      Element element1 = element0.after((Node) document0);
      // Undeclared exception!
      element1.prependElement("[s6l^");
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("noQuirks", "noQuirks");
      Element element0 = document0.attr("br", false);
      List<Node> list0 = Parser.parseXmlFragment("option[selected]", "lndwcnvlxmo!hn&r<");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.prependElement("br");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("oQuijrks", "oQuijrks");
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document1 = document0.parser(parser1);
      // Undeclared exception!
      try { 
        document1.prependElement("java.lang.string@0000000018");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "-(YYqMKg6{b");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "java.lang.string@0000000044", attributes0);
      CDataNode cDataNode0 = new CDataNode("zjo");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.prependChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Document.createShell("Q=;3nVB");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = new Document("hWV3(7;N{sxaG0+`=~_");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.prepend("dVus*K&}*!IrU@=81Z");
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Document.createShell("<`eWhhgK");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parse("<7,J", "zM:k`+");
      DocumentType documentType0 = new DocumentType("zM:k`+", "zM:k`+", "+c3B0-O/qiv");
      document0.parentNode = (Node) documentType0;
      // Undeclared exception!
      try { 
        document0.prepend("zM:k`+");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Tag tag0 = Tag.valueOf("au%+");
      Element element0 = new Element(tag0, "au%+");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("au%+", "org.jsoup.select.Evaluator$Matches", false);
      element0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        element0.parents();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = new Document("41mA3AIOR^'j");
      DataNode dataNode0 = new DataNode("UY++9F&8?O<", "abs:");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.parent();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Children collection to be inserted must not be null.");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "Children collection to be inserted must not be null.", attributes0);
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[8];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        element0.outerHtmlTail(charBuffer0, (byte)20, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("zYMW0Q~3hz(g", "'EOkX|CNhxlab`");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 46, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000050 <`ewhhgk", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(pipedWriter0, (-1080), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = new Document("java.lang.string@00000001u1");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlTail(pipedWriter0, (-1), document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Element element0 = new Element("||lx ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2501);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charsetEncoder0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(2501);
      // Undeclared exception!
      element0.outerHtmlHead(outputStreamWriter0, 2501, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Document.createShell("noQuirks");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "noQuirks");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 21, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Document.createShell("@OCz93%t");
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 2012, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000121", "java.lang.string@0000000121");
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 992, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Tag tag0 = Tag.valueOf("RCDATAEndTagOpen");
      CDataNode cDataNode0 = new CDataNode("RCDATAEndTagOpen");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "RCDATAEndTagOpen", attributes0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("java.lang.string@0000000038");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        element0.outerHtmlHead(mockPrintWriter0, (-2064964553), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Tag tag0 = Tag.valueOf("IxoFs.*kj~cj");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "IxoFs.*kj~cj", attributes0);
      // Undeclared exception!
      try { 
        formElement0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = new Document("huUQo7");
      document0.appendTo(document0);
      Pattern pattern0 = Pattern.compile("^=", (-1436010313));
      Evaluator.AttributeWithValueMatching evaluator_AttributeWithValueMatching0 = new Evaluator.AttributeWithValueMatching("huUQo7", pattern0);
      // Undeclared exception!
      document0.is((Evaluator) evaluator_AttributeWithValueMatching0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Element element0 = new Element("textarea");
      // Undeclared exception!
      try { 
        element0.is(".`A0+[Zg");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hWV3(7;N{sxaG0+`=~_", "hWV3(7;N{sxaG0+`=~_");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.is("#root");
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@OCz93%t", "@OCz93%t");
      CDataNode cDataNode0 = new CDataNode("@OCz93%t");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.is("uz");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.CDataNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "Y_Zzq?uQZ^");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!f.v7sS", "html");
      Elements elements0 = document0.children();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Document.createShell("hV|r9C;28d");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      document1.parentNode = (Node) document1;
      // Undeclared exception!
      document0.html("hV|r9C;28d");
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Document.createShell("<`eWhhgK");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G}EOMDoP]", "?LL.i73T\",h");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Document.createShell("hV|r9C;28d");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      document1.parentNode = (Node) document1;
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      document0.html(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]h}P", "]h}P");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("CQL:IBv7g,YW");
      Document document0 = parser0.parseInput((Reader) stringReader0, "CQL:IBv7g,YW");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ig9?6@Fg", "Om,-\u0007:");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset((Charset) null);
      document0.outputSettings(document_OutputSettings1);
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document$OutputSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = new Document("O");
      Element element0 = document0.prependElement("O");
      element0.setSiblingIndex((-2036));
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Document.createShell("/>");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Vn(|c5!X", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Vn(|c5!X", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hWV3(7;N{sxaG0+`=~_", "hWV3(7;N{sxaG0+`=~_");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("5w;]%Ki=[W~$k.}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 5w;]%Ki=[W~$k.}
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("({`{x=QHZk", "({`{x=QHZk");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = new Document("hWV3(7;N{sxa00+`=~_");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("q%N}1f", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "(I$$(:Bh#Pa3[{PK", attributes0);
      // Undeclared exception!
      try { 
        formElement0.getElementsMatchingOwnText("(I$$(:Bh#Pa3[{PK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: (I$$(:Bh#Pa3[{PK
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fLaAo\rIiZGZy>/pq", "fLaAo\rIiZGZy>/pq");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("\"r`JKt8`s;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("noQuirks", "noQuirks");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("noQuirks", "noQuirks", false);
      document0.parentNode = (Node) xmlDeclaration0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("noQuirks");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parse(" ", " ");
      Element element0 = document0.prependElement("Children collection to be inserted must not be null.");
      element0.siblingIndex = (-1079);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("Insert position out of bounds.");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "ppaR\">tN,DN:%ef");
      // Undeclared exception!
      try { 
        document0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("mVBx8o;]~Xja\";joulK", "mVBx8o;]~Xja\";joulK");
      document0.siblingIndex = (-3439);
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan(58);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("mVBox8o;]~Xja\";julK", "mVBox8o;]~Xja\";julK");
      DocumentType documentType0 = new DocumentType("mVBox8o;]~Xja\";julK", "mVBox8o;]~Xja\";julK", "mVBox8o;]~Xja\";julK", "mVBox8o;]~Xja\";julK", "ar");
      Element element0 = document0.doClone(documentType0);
      // Undeclared exception!
      try { 
        element0.getElementsByIndexEquals(2618);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parse(" ", " ");
      Element element0 = document0.prependElement("Children collection to be inserted must not be null.");
      element0.siblingIndex = (-1079);
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals((-7707));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parse("java.land.wtring@00k00001u1", "java.land.wtring@00k00001u1");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsByClass("java.land.wtring@00k00001u1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hWV3(7;{sxaG0+`=~_", "hWV3(7;{sxaG0+`=~_");
      // Undeclared exception!
      try { 
        document0.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = new Document("huUQo7");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("tfoot", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = new Document("var");
      document0.siblingIndex = (-3938);
      Element element0 = document0.doClone(document0);
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueNot("var", "S<C;%lp%/U8gW1");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Document.createShell("html");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("html", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = new Document("huUQo7");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("Insert position out of bounds.", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Document.createShell("huUQo7");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parse("\"", "class");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("\"", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Tag tag0 = Tag.valueOf("value");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeValue("", "#root");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hWV3(7;{sxaG0+`=~_", "hWV3(7;{sxaG0+`=~_");
      document0.parentNode = (Node) document0;
      document0.siblingIndex = (-100);
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("Qy)stcjS.j)~", "Qy)stcjS.j)~");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("woyZirgd", "woyZirgd");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("woyZirgd");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementById("br");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("IxoFs.*kj~cj", parseSettings0);
      Element element0 = new Element(tag0, "");
      // Undeclared exception!
      try { 
        element0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("noQuirks", "noQuirks");
      Element element0 = document0.body();
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getAllElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("s+", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      // Undeclared exception!
      try { 
        formElement0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("aN", "slN[.c");
      DataNode dataNode0 = new DataNode("hgoC");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.elementSiblingIndex();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("title", "j`9[\f");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[;jr");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "[;jr", attributes0);
      Element element0 = pseudoTextElement0.appendElement("[;jr");
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at ';jr'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000121", ":matches(%s)");
      Comment comment0 = new Comment("!:w8");
      document0.parentNode = (Node) comment0;
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#root");
      CDataNode cDataNode0 = new CDataNode("#root");
      Attributes attributes0 = cDataNode0.attributes();
      attributes0.vals = null;
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "body", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = new Document("<`eWhhgK");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("H^5fP\"$2=y&wJ", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("Split offset must not be greater than current text length");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "P[&639a=e~N\"d&)X'", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Tag tag0 = Tag.valueOf("&lt;");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("(pRdR%LD_Wc~M-`|{e", "IlfbNsBmN@");
      FormElement formElement0 = new FormElement(tag0, "&lt;", attributes1);
      attributes1.keys = null;
      // Undeclared exception!
      try { 
        formElement0.classNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Burg7a#l/LdD<$8zY<", "`5Ea]'64:gf");
      // Undeclared exception!
      try { 
        document0.child(1254);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1254, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      // Undeclared exception!
      try { 
        document0.child((-2365));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = new Document("y6");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Document.createShell("hV|r9C;28d");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      document1.parentNode = (Node) document1;
      // Undeclared exception!
      document0.before("hV|r9C;28d");
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G[NY1~BX40?i7RT+ap", "G[NY1~BX40?i7RT+ap");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parse("hWV3(7;N{sxaG0+`=~_", "hWV3(7;N{sxaG0+`=~_");
      Element element0 = document0.body();
      element0.after((Node) document0);
      // Undeclared exception!
      document0.attr("html > body", "html > body");
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hWV3(7;N{sxaG0+`=~_", "hWV3(7;N{sxaG0+`=~_");
      // Undeclared exception!
      try { 
        document0.attr((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Tag tag0 = Tag.valueOf("java.lang.string@0000000121");
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "hWV3(7;N{sxaG0+`=~_", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert position out of bounds.", "Insert position out of bounds.");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.appendElement("html");
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Document.createShell("body");
      DataNode dataNode0 = new DataNode("body", "body");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.appendChild(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = new Document("huUQo7");
      Document document1 = document0.ownerDocument();
      document1.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.appendChild(document1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("character is not a valid unicode code point", "8w");
      Element element0 = document0.html("CQL:IBv7g,YW");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.append("character is not a valid unicode code point");
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("font", "font");
      DocumentType documentType0 = new DocumentType("font", "font", "*le1N.");
      document0.parentNode = (Node) documentType0;
      // Undeclared exception!
      try { 
        document0.append("*le1N.");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Document.createShell("hV|r9C;28d");
      Parser parser0 = Parser.htmlParser();
      Document document1 = document0.parser(parser0);
      document1.parentNode = (Node) document1;
      // Undeclared exception!
      try { 
        document0.after(document1.parentNode);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[;jr", "[;jr");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.after("niI");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.doClone(document0);
      // Undeclared exception!
      try { 
        element0.after("br");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Tag tag0 = Tag.valueOf("99nheQ*");
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "PsnAgOl0uD3'F2h[<g[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document0.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      Element element0 = document0.addClass("w");
      document0.toggleClass("TY`Tu)8n@");
      element0.hasClass("TY`Tu)8n@");
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Document.createShell("hV|r9C;528d");
      document0.hasClass("l!<pxfH;tk=");
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      Element element0 = document0.addClass(":has(el) subselect must not be empty");
      element0.hasClass(":has(el) subselect must not be empty");
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("body", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "body", attributes0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      formElement0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Burg7a#l/LdD<$8zY<", "`5Ea]'64:gf");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parse("hWV3(7;N{sxaG0+`=~_", "hWV3(7;N{sxaG0+`=~_");
      Element element0 = document0.body();
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ZSpD1fpQ.", "ZSpD1fpQ.");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Document.createShell("hV|r9C;528d");
      Parser parser0 = Parser.htmlParser();
      Document document1 = document0.parser(parser0);
      document1.parentNode = (Node) document1;
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ZSpD1fpQ.", "ZSpD1fpQ.");
      document0.appendTo(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("CQL:IBv7g,YW");
      Document document0 = parser0.parseInput((Reader) stringReader0, "CQL:IBv7g,YW");
      Document document1 = document0.normalise();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
      document1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("\"GO+Z", "\"GO+Z");
      document0.reparentChild(document0);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("CQL:IBv7g,YW");
      Document document0 = parser0.parseInput((Reader) stringReader0, "v/.g:RVcN");
      document0.textNodes();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parse("v5ok7o* xD]'bM`ri", "</");
      Element element0 = document0.body();
      element0.html("</");
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&v#$Pi\"2%8M,5Gv", "&v#$Pi\"2%8M,5Gv");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("KDY( ", "KDY( ");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("p", "");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("v5ok*|xD]'bM`ri", "</");
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("noQuirks", "noQuirks");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(.xcjuws-", "GH#`q^a");
      Pattern pattern0 = Pattern.compile("u)qO:X", 60);
      document0.getElementsByAttributeValueMatching("GH#`q^a", pattern0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Document.createShell("y6");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G[NY1~BX40?i7RT+ap", "G[NY1~BX40?i7RT+ap");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parse("/6\"?vm>~_C ^*L#\"+5", "/6\"?vm>~_C ^*L#\"+5");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      document0.title(".");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hWV3(7;N{sxaG0+`=~_", "hWV3(7;N{sxaG0+`=~_");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parse("/6\"?vm>~_C ^*L#\"+5", "/6\"?vm>~_C ^*L#\"+5");
      // Undeclared exception!
      try { 
        document0.html((CharArrayWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("font", "font");
      Element element0 = document0.createElement("font");
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("noQuirks", "noQuirks");
      Element element0 = document0.prependElement("br");
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Document.createShell("noyZirkd");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "textarea");
      Element element0 = document0.tagName("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = new Document("java.lang.string@00000001u1");
      document0.toggleClass("java.lang.string@00000001u1");
      document0.toggleClass("t|4@/OS[0{nle^[");
      document0.toggleClass("t|4@/OS[0{nle^[");
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Document.createShell("noQuirks");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("noQuirks");
      Element element0 = document0.classNames((Set<String>) linkedHashSet0);
      document0.addClass("noQuirks");
      element0.getElementsByClass("noQuirks");
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^", "^");
      Element element0 = document0.addClass("^");
      document0.toggleClass(":has(el) subselect must not be empty");
      element0.hasClass(":has(el)");
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      document0.addClass(":has(el) subselect must not be empty");
      document0.toggleClass(":has(el) subselect must not be empty");
      document0.hasClass("pk");
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = new Document("8H;v|q+");
      Element element0 = document0.toggleClass("8H;v|q+");
      element0.toggleClass(" > ");
      element0.hasClass("org.jsoup.nodes.Element$1");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = new Document("8H;v|q+");
      Element element0 = document0.toggleClass("8H;v|q+");
      element0.hasClass("org.jsoup.nodes.Element$1");
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Document.createShell("<`eWhhgK");
      document0.addClass("<`eWhhgK");
      document0.getElementsByClass(":has(el) subselect must not be empty");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000121");
      document0.toggleClass("java.lang.string@0000000121");
      document0.hasClass("java.lang.string@0000000121");
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parse("l\"d!B:`mVFmbG$o2^ ", "l\"d!B:`mVFmbG$o2^ ");
      CDataNode cDataNode0 = new CDataNode("cf");
      document0.prependChild(cDataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Comment comment0 = new Comment("#root");
      Element element0 = document0.appendChild(comment0);
      element0.data();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".", ".");
      DataNode dataNode0 = new DataNode(".");
      document0.prependChild(dataNode0);
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Document.createShell("small");
      document0.text(" ");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hWV3(7;{sxaG0+`=~_", "hWV3(7;{sxaG0+`=~_");
      document0.parentNode = (Node) document0;
      Element.preserveWhitespace(document0.parentNode);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("noQuirks", "noQuirks");
      document0.prependElement("br");
      document0.getElementsContainingOwnText("noQuirks");
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("video", "vMU-Ua\"g");
      Comment comment0 = new Comment("vMU-Ua\"g", "org.jsoup.examples.HtmlToPlainText$FormattingVisitor");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      document0.prependChild(xmlDeclaration0);
      document0.getElementsContainingOwnText("vMU-Ua\"g");
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parse("/6\"?vm>~_C ^*L#\"+5", "/6\"?vm>~_C ^*L#\"+5");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^", "^");
      document0.append("^");
      document0.getElementsContainingText((String) null);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000018  ", "ScriptDataEscaped");
      document0.append("ScriptDataEscaped");
      document0.getElementsContainingText((String) null);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("CQL:IBv7g,YW");
      Document document0 = parser0.parseInput((Reader) stringReader0, "CQL:IBv7g,YW");
      Document document1 = Parser.parse("Y,{[RGSm", "Y,{[RGSm");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      Element element0 = document1.insertChildren(0, nodeArray0);
      element0.text();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("^");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("BLP!q^LV*q}N\"", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "BeL", attributes0);
      pseudoTextElement0.appendText(":parent%s");
      pseudoTextElement0.appendElement("br");
      pseudoTextElement0.text();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[;jr");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "[;jr", attributes0);
      pseudoTextElement0.appendText("[;jr");
      pseudoTextElement0.appendElement("[;jr");
      pseudoTextElement0.text();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".", ".");
      document0.title(".");
      document0.getElementsContainingText(".");
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("title");
      Document document0 = parser0.parseInput((Reader) stringReader0, "K`Axr#I");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("K`Axr#I", "K`Axr#I", true);
      document0.prependChild(xmlDeclaration0);
      Pattern pattern0 = Pattern.compile("K`Axr#I");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = new Document("41mA3AIOR^'j");
      document0.getElementById("41mA3AIOR^'j");
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Document.createShell("8H;v|q+");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = Parser.parseBodyFragment("hV|r9C;28d", "hV|r9C;28d");
      Document document1 = document0.parser(parser0);
      document1.parentNode = (Node) document1;
      document1.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = new Document("IxoFs.*kj~cj");
      Element element0 = document0.appendTo(document0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parse("</", "hWV3(7;N{sxaG0+`=~_");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("v5ok*|xD]'bM`ri", "Tag cannot be self closing; not a void tag");
      Element element0 = document0.body();
      Element element1 = element0.after("");
      Elements elements0 = element1.nextElementSiblings();
      assertEquals("Tag cannot be self closing; not a void tag", element1.baseUri());
      assertEquals(2, elements0.size());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("v5ok*|xD]'bM`ri", "Tag cannot be self closing; not a void tag");
      Element element0 = document0.body();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
      assertEquals("Tag cannot be self closing; not a void tag", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataEscapedEndTagName");
      document0.siblingElements();
      assertEquals("ScriptDataEscapedEndTagName", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = new Document("hWV3(7;N{sxaG0+`=~_");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Document.createShell("noQuirks");
      Element element0 = document0.body();
      assertEquals(1, element0.siblingIndex());
      
      element0.before("noQuirks");
      String string0 = element0.cssSelector();
      assertEquals("html > body:nth-child(4)", string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      document0.addClass(":has(el) subselect must not be empty");
      document0.cssSelector();
      assertEquals(".", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("\".!'WP9", "\".!'WP9");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren(244, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Document.createShell("<`eWhhgK");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1035), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hWV3(7;N{sxaG0+`=~_", "hWV3(7;N{sxaG0+`=~_");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren((-1), nodeArray0);
      assertEquals("hWV3(7;N{sxaG0+`=~_", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("v5ok*|xD]'bM`ri", "Tag cannot be self closing; not a void tag");
      LinkedHashSet<TextNode> linkedHashSet0 = new LinkedHashSet<TextNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren(62, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parse("G[NY1~BX40?i7RT+ap", "G[NY1~BX40?i7RT+ap");
      LinkedHashSet<TextNode> linkedHashSet0 = new LinkedHashSet<TextNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-522), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Document.createShell("woyZired");
      Elements elements0 = document0.previousElementSiblings();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) elements0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("woyZired", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("oQuijrks", "oQuijrks");
      DataNode dataNode0 = new DataNode("oQuijrks");
      document0.prependChild(dataNode0);
      document0.dataNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hV|r9C;28d", "hV|r9C;28d");
      Elements elements0 = document0.select(":matchText");
      assertEquals(1, document0.childNodeSize());
      assertEquals("hV|r9C;28d", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Document.createShell("small");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("small", document0.baseUri());
      assertEquals(0, list0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parse("hWV3(7;N{sxaG0+`=~_", "hWV3(7;N{sxaG0+`=~_");
      Element element0 = document0.body();
      document0.parentNode = (Node) element0;
      document0.nextElementSibling();
      assertEquals("hWV3(7;N{sxaG0+`=~_", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("mVBx8o;]~Xja\";joulK", "mVBx8o;]~Xja\";joulK");
      Elements elements0 = document0.getElementsByIndexGreaterThan(58);
      assertEquals("mVBx8o;]~Xja\";joulK", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Document.createShell("0bz'W");
      // Undeclared exception!
      try { 
        document0.selectFirst("RC[r%_!4uRT8`H%xp");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '_'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getElementsMatchingText("");
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = new Document("q%N}1f");
      document0.getAllElements();
      assertEquals("q%N}1f", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Document.createShell("small");
      Element element0 = document0.removeClass("small");
      assertEquals(1, element0.childNodeSize());
      assertEquals("small", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Document.createShell("noQuirks");
      // Undeclared exception!
      try { 
        document0.before("noQuirks");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(.xcjuws-", "GH#`q^a");
      document0.getElementsByAttribute("(.xcjuws-");
      assertEquals("GH#`q^a", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hWV3(7;{sxaG0+`=~_", "hWV3(7;{sxaG0+`=~_");
      Elements elements0 = document0.getElementsByAttributeValueNot("hWV3(7;{sxaG0+`=~_", "  ");
      assertEquals("hWV3(7;{sxaG0+`=~_", document0.baseUri());
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Document.createShell("<`eWhhgK");
      Element element0 = document0.shallowClone();
      assertEquals("<`eWhhgK", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hWV3(7;{sxaG0+`=~_", "hWV3(7;{sxaG0+`=~_");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      document0.getElementsByAttributeValueContaining(" ", "KDY( ");
      assertEquals(".", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Document.createShell("hV|r9C;28d");
      Elements elements0 = document0.getElementsContainingText("hV|r9C;28d");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertEquals("hV|r9C;28d", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("oQuijrks", "oQuijrks");
      document0.getElementsByAttributeValueEnding("oQuijrks", "oQuijrks");
      assertEquals("oQuijrks", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hWV3(7;N{sxaG0+`=~_", "hWV3(7;N{sxaG0+`=~_");
      document0.is("#root");
      assertEquals("hWV3(7;N{sxaG0+`=~_", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("zYMW0Q~3hz(g", "'EOkX|CNhxlab`");
      document0.getElementsByAttributeValueMatching(" ", "#");
      assertEquals("'EOkX|CNhxlab`", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "textarea");
      Element element0 = document0.attr("", "");
      assertEquals("textarea", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parse(" ", " ");
      Elements elements0 = document0.getElementsByIndexEquals((-7707));
      assertEquals(" ", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("woyZirgd", "woyZirgd");
      document0.getElementsByAttributeStarting("woyZirgd");
      assertEquals(1, document0.childNodeSize());
      assertEquals("woyZirgd", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = new Document("q%N}1f");
      document0.getElementsByIndexLessThan((-3953));
      assertEquals("q%N}1f", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[;jr", "[;jr");
      // Undeclared exception!
      try { 
        document0.after("niI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Document.createShell("hWV3(7;N{sxaG0+`=~_");
      document0.getElementsMatchingOwnText("KR|");
      assertEquals("hWV3(7;N{sxaG0+`=~_", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Document.createShell("noQuirks");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("noQuirks", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("html > body", string0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hWV3(7;{sxaG0+`=~_", "hWV3(7;{sxaG0+`=~_");
      document0.getElementsByAttributeValue("Qy)stcjS.j)~", "Qy)stcjS.j)~");
      assertEquals("hWV3(7;{sxaG0+`=~_", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parse(" ", " ");
      document0.wholeText();
      assertEquals(" ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("v5ok*|xD]'bM`ri", "Tag cannot be self closing; not a void tag");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Element element0 = new Element("/${G)Q;");
      String string0 = element0.baseUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Document.createShell("qiN}");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Tag tag0 = Tag.valueOf("V'a M78Chem`.");
      Element element0 = new Element(tag0, "<-xsI#tw>$L5|I~_");
      element0.dataset();
      assertEquals("<-xsI#tw>$L5|I~_", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = Document.createShell("org.jsou.parer.]reBuilder");
      Element element0 = document0.tagName("textarea");
      Element element1 = element0.val("$[+J8\"wfM|UgW,");
      assertEquals("org.jsou.parer.]reBuilder", element1.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Parser.parse("</", "hWV3(7;N{sxaG0+`=~_");
      document0.prependText("9k'ug>x;99Q");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("noQuirks", "noQuirks");
      Element element0 = document0.prependElement("br");
      element0.firstElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertEquals("noQuirks", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Document document0 = Document.createShell("noQuirks");
      // Undeclared exception!
      try { 
        document0.wrap("i");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("v5ok*|xD]'bM`ri", "Tag cannot be self closing; not a void tag");
      document0.nextElementSiblings();
  }
}
