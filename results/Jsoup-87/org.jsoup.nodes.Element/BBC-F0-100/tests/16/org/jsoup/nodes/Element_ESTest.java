/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:54:47 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("5;`", "5;`");
      Element element0 = document0.body();
      element0.html();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parse("!JQA,&_e2?C)m7", "!JQA,&_e2?C)m7");
      Element element0 = document0.toggleClass("!JQA,&_e2?C)m7");
      document0.appendChild(element0);
      element0.hasClass("s+");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Document.createShell("5;`");
      document0.prependChild(document0);
      document0.empty();
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xhtml", "#root");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(stringBuilder0, 21, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Document.createShell("5;`");
      StringWriter stringWriter0 = new StringWriter(3659);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(stringWriter0, 3659, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = new Document("h5");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = new Document("=^`");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sP{=}A-9?>;I]'", "sP{=}A-9?>;I]'");
      Document document1 = Parser.parseBodyFragmentRelaxed("sP{=}A-9?>;I]'", "sP{=}A-9?>;I]'");
      document1.parentNode = (Node) document0;
      document1.wrap("sP{=}A-9?>;I]'");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("DX0@821=2[^r6k2-1L", "DX0@821=2[^r6k2-1L");
      Element element0 = document0.body();
      element0.wrap(":root");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Element element0 = new Element("addrqess");
      element0.siblingIndex = (-4457);
      element0.val("addrqess");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Element element0 = new Element("addrqess");
      Document document0 = Document.createShell("#6!=|GMc");
      element0.appendTo(document0);
      element0.val("addrqess");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Document.createShell("5;`");
      document0.val("5;`");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Element element0 = new Element("address");
      element0.val("address");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = new Document("5;`");
      document0.toggleClass("5;`");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      Element element0 = document0.body();
      element0.text("org.jsoup.parser.Token$Doctype");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Document.createShell("m");
      document0.text("fa$dN!");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parse("=^`", "=^`");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parse("{SmpxL~Q'ZSeLKz", "");
      document0.tagName("head");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("}\"4D[#(c3pku:XDe", "}RW#Cd345!M:k");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Element element0 = new Element("address");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("}\"4D[#(c3pku:XDe", "}RW#Cd345!M:k");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = new Document("menuitem");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parse("!JQA,&_e2?C)m7", "!JQA,&_e2?C)m7");
      document0.selectFirst("InSelectInTable");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Element element0 = new Element("addrqess");
      element0.selectFirst("addrqess");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = new Document("!JQA,&_e2?C)m7");
      document0.select("w>n");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Document.createShell("m");
      document0.select("html");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Document.createShell("m");
      Element element0 = document0.body();
      Element element1 = element0.lastElementSibling();
      element1.removeClass("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      Element element0 = document0.body();
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = new Document("hgroup");
      document0.prependElement("hgroup");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5;`", "5;`");
      document0.setSiblingIndex((-411));
      Document document1 = Parser.parse("5;`", "5;`");
      document0.prependChild(document1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Element element0 = new Element("address");
      element0.prependChild(element0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5;`", "5;`");
      Element element0 = document0.body();
      element0.prepend("head");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Should not be reachable", parseSettings0);
      Element element0 = new Element(tag0, "Should not be reachable", (Attributes) null);
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse("!JQA,&_e2?C)m7", "!JQA,&_e2?C)m7");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = new Document("!JQA,&_e2?C)m7");
      Document document1 = Document.createShell("Insert position out of bounds.");
      document0.prependChild(document1);
      document1.parent();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("DX0@821=2[^r6k2-1L", "DX0@821=2[^r6k2-1L");
      Element element0 = document0.body();
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Element element0 = new Element("address");
      element0.nodeName();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("sP{=}A-9?>;I]'", "sP{=}A-9?>;I]'");
      document0.prependChild(document0);
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Document.createShell("5;`");
      Element element0 = document0.body();
      element0.tagName("5;`");
      document0.prependChild(element0);
      document0.prependChild(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Document.createShell("5;`");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      element1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("w1", "w1");
      Element element0 = document0.appendElement("id");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b", "b");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Document.createShell("5;`");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parse("-^8<", "-^8<");
      Evaluator.ContainsData evaluator_ContainsData0 = new Evaluator.ContainsData((String) null);
      document0.is((Evaluator) evaluator_ContainsData0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.is("S");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "eo@3t,p*{");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      CDataNode cDataNode0 = new CDataNode("");
      nodeArray0[2] = (Node) cDataNode0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "eo@3t,p*{");
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren(1, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Document.createShell("m");
      document0.setSiblingIndex(1);
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      document0.insertChildren(1, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Element element0 = new Element("address");
      element0.siblingIndex = (-208);
      element0.html("address");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5;`", "5;`");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parse("5;`", "5;`");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Tag tag0 = Tag.valueOf("head");
      Element element0 = new Element(tag0, "br");
      element0.html();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Tag tag0 = Tag.valueOf("=");
      CDataNode cDataNode0 = new CDataNode("/ !P&p}#Q");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "=", attributes0);
      formElement0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("center", ".");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parse("=^`", "=^`");
      Pattern pattern0 = Pattern.compile("SA2z2+^]v@`", 2048);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5;`", "5;`");
      Pattern pattern0 = Pattern.compile("5;`");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@", "@");
      document0.getElementsMatchingText("@");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Document.createShell("option");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parse("5;`", "5;`");
      document0.getElementsMatchingOwnText("5;`");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Tag tag0 = Tag.valueOf("head");
      Element element0 = new Element(tag0, "br");
      element0.getElementsContainingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parse("5;`", "5;`");
      document0.getElementsByTag("5;`");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Element element0 = new Element("address");
      element0.getElementsByTag("address");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Element element0 = new Element("address");
      element0.getElementsByIndexLessThan((-1));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!JQA,&_e2?C)m7", "Insert position out of bounds.");
      document0.getElementsByIndexGreaterThan((-1279));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = new Document("!JQA,&_e2?C)m7");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      document0.getElementsByAttributeValueNot("VXF$}SSe~b7", "Gj!h>RbK:O");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = new Document("menuitem");
      document0.getElementsByAttributeValueMatching("menuitem", ".");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^`", "=^`");
      document0.getElementsByAttribute("=mkH");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("}\"4D[#(c3pku:XDe", "noframes");
      Document document1 = (Document)document0.prependChild(document0);
      document1.setSiblingIndex((-2070));
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("@", "@");
      Element element0 = document0.body();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parse("5;`", "5;`");
      Element element0 = document0.prependChild(document0);
      Element element1 = element0.nextElementSibling();
      element1.empty();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!JQA,&_e2?C)m7", "!JQA,&_e2?C)m7");
      document0.prependChild(document0);
      Element element0 = document0.nextElementSibling();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Should not be reachable", parseSettings0);
      Element element0 = new Element(tag0, "Should not be reachable", (Attributes) null);
      Document document0 = Parser.parseBodyFragment("", "eo@3t,p*{");
      Element element1 = element0.prependChild(document0);
      document0.before("QR)cjCeE&n><_E]");
      document0.doClone(element1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("cvvZ32Zr", "cvvZ32Zr");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Document.createShell("5;`");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      element1.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("m", "m");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "CH@T*U*No");
      Element element0 = document0.createElement("CH@T*U*No");
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      Element element0 = document0.body();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!JQA,&_e2?C)m7", "!JQA,&_e2?C)m7");
      Element element0 = document0.toggleClass("!JQA,&_e2?C)m7");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse("!JQA,&_e2?C)m7", "!JQA,&_e2?C)m7");
      document0.toggleClass("!JQA,&_e2?C)m7");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("; 4H?:Jkr_b", parseSettings0);
      CDataNode cDataNode0 = new CDataNode(";X?V&FM^pxK^_7(@S8");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "; 4H?:Jkr_b", attributes0);
      formElement0.children();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = new Document("5;`");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Tag tag0 = Tag.valueOf("head");
      Element element0 = new Element(tag0, "br");
      element0.appendText("head");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = new Document("=^`");
      document0.prependElement("=^`");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parse("!JQA,&_e2?C)m7", "!JQA,&_e2?C)m7");
      document0.prependChild(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Element element0 = new Element("address");
      Document document0 = Parser.parseBodyFragment("address", "address");
      Element element1 = element0.appendTo(document0);
      element1.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("eY|`GyrVnU", "Insert position out of bounds.");
      Element element0 = document0.body();
      element0.before((Node) document0);
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Should not be reachable", parseSettings0);
      Element element0 = new Element(tag0, "Should not be reachable", (Attributes) null);
      Document document0 = Parser.parseBodyFragment("", "eo@3t,p*{");
      element0.prependChild(document0);
      document0.before("");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Document.createShell("5;`");
      Element element0 = document0.body();
      element0.before("textarea");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Element element0 = new Element(":has(%s)");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Should not be reachable", parseSettings0);
      Element element0 = new Element(tag0, "Should not be reachable", (Attributes) null);
      Element element1 = element0.attr("Should not be reachable", "Should not be reachable");
      element1.attributes();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Document.createShell("m");
      Element element0 = document0.body();
      element0.attr("Insert position out of bounds.", false);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = new Document("#root");
      document0.attr("Insert position out of bounds.", false);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parse("!JQA,&_e2?C)m7", "!JQA,&_e2?C)m7");
      document0.attr("!JQA,&_e2?C)m7", false);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parse("5;`", "5;`");
      Element element0 = document0.body();
      element0.attr("Pattern syntax error: ", "5;`");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      document0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.body();
      element0.appendText("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Document.createShell("Rlp");
      document0.appendText("Rlp");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Element element0 = new Element("address");
      element0.appendElement("address");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Document.createShell("5;`");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      element1.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Document.createShell("5;`");
      Element element0 = document0.body();
      element0.append("html");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("sP{=}A-9?>;I]'", "sP{=}A-9?>;I]'");
      Element element0 = document0.prependChild(document0);
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Document.createShell("~;p^YsU|=~SiZ9Og");
      Element element0 = document0.head();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Document.createShell("5;`");
      Element element0 = document0.body();
      element0.after("5;`");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Should not be reachable", parseSettings0);
      Element element0 = new Element(tag0, "Should not be reachable", (Attributes) null);
      Document document0 = Parser.parseBodyFragment("", "eo@3t,p*{");
      element0.prependChild(document0);
      document0.after("QR)cjCeE&n><_E]");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Document.createShell("m");
      Element element0 = document0.body();
      Element element1 = element0.prependText("");
      element1.addClass("");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parse("J&x}5uRu38&fJR|,wk<", "J&x}5uRu38&fJR|,wk<");
      Element element0 = document0.prependChild(document0);
      element0.addClass("J&x}5uRu38&fJR|,wk<");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Should not be reachable", parseSettings0);
      Element element0 = new Element(tag0, "Should not be reachable", (Attributes) null);
      element0.addClass("eo@3t,p*{");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = new Document("cvvZ32Zr");
      Document document1 = (Document)document0.prependChild(document0);
      // Undeclared exception!
      document1.wrap("cvvZ32Zr");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(":has(%s)", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("!JQA,&_e2?C)m7");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Element$2", attributes0);
      // Undeclared exception!
      try { 
        formElement0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!JQA,&_e2?C)m7", "Insert position out of bounds.");
      Element element0 = document0.head();
      List<Node> list0 = Parser.parseXmlFragment(":has(%s)", "Insert position out of bounds.");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.wholeText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Document.createShell("5;`");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.val("0Mi");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("cvvZ32Zr", "cvvZ32Zr");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.text("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Attribute", "org.jsoup.nodes.Attribute");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.tagName("org.jsoup.nodes.Attribute");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("}\"4D[#(c3pku:XDe", "}RW#Cd345!M:k");
      // Undeclared exception!
      try { 
        document0.tagName(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = new Document("5;`");
      Element element0 = document0.prependChild(document0);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      document0.childNodes = (List<Node>) linkedList0;
      // Undeclared exception!
      try { 
        element0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      // Undeclared exception!
      try { 
        document0.selectFirst("6D|!0%~ vH-N");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '6D|!0%~ vH-N': unexpected token at '!0%~ vH-N'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("9]<D:k", parseSettings0);
      Element element0 = new Element(tag0, "9]<D:k");
      // Undeclared exception!
      try { 
        element0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      // Undeclared exception!
      try { 
        document0.select("VXF$}SSe~b7");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'VXF$}SSe~b7': unexpected token at '$}SSe~b7'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Document.createShell("5;`");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Attribute", "org.jsoup.nodes.Attribute");
      CDataNode cDataNode0 = new CDataNode("Children collection to be inserted must not be null.");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = new Document("html");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parse("5;`", "5;`");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.prependElement("<5;`></5;`>");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = new Document(":nth-child(%d)");
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document1 = document0.parser(parser1);
      // Undeclared exception!
      try { 
        document1.prependElement("Q9+`A9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("m", "m");
      // Undeclared exception!
      try { 
        document0.prependElement(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parse("5;`", "5;`");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!JQA,&_e2?C)m7", "!JQA,&_e2?C)m7");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.prepend("!JQA,&_e2?C)m7");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Document.createShell("Should not be reachable");
      List<Node> list0 = Parser.parseXmlFragment("Should not be reachable", ":-3WL{");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.prepend(">");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!JQA,&_e2?C)m7", "!JQA,&_e2?C)m7");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parse("5;`", "5;`");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, (-1374), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5/`", "5/`");
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, (-1005), document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("DX0@821=2[^r6k2-1L", "DX0@821=2[^r6k2-1L");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 421, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Document.createShell("5;`");
      StringWriter stringWriter0 = new StringWriter(1449);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(stringWriter0, (-843), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("cvvZ32Zr", "cvvZ32Zr");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Document.createShell("5;`");
      document0.prependChild(document0);
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan((-945));
      // Undeclared exception!
      document0.is((Evaluator) evaluator_IndexLessThan0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Document.createShell("5;`");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "gO.R:j");
      // Undeclared exception!
      try { 
        document0.is("gO.R:j");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'gO.R:j': unexpected token at ':j'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parse("5;`", "5;`");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.is("autofocus");
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = new Document("@");
      CDataNode cDataNode0 = new CDataNode("@");
      Document document1 = document0.normalise();
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) cDataNode0;
      nodeArray0[1] = (Node) cDataNode0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) cDataNode0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document1;
      nodeArray0[7] = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parse("lg]:", "lg]:");
      Elements elements0 = document0.children();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parse("5;`", "5;`");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.html("5;`");
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parse("5;`", "5;`");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = new Document("5;`");
      document0.prependChild(document0);
      StringWriter stringWriter0 = new StringWriter(1899);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 1899);
      // Undeclared exception!
      document0.html(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bq?vo<$YbB=#oc\"", "&%%{_6^");
      // Undeclared exception!
      try { 
        document0.html((CharArrayWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5;`", "5;`");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Should not be reachable", parseSettings0);
      Element element0 = new Element(tag0, "Should not be reachable", (Attributes) null);
      // Undeclared exception!
      try { 
        element0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Element element0 = new Element("_N1y");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("*<1!G+/?E&m3+J<NIza", parseSettings0);
      Element element0 = new Element(tag0, "*<1!G+/?E&m3+J<NIza");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText("*<1!G+/?E&m3+J<NIza");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: *<1!G+/?E&m3+J<NIza
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gBY?i", "{SmpxL~Q'ZSeLKz");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("!JQA,&_e2?C)m7", "!JQA,&_e2?C)m7");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = new Document("!JQA,&_e2?C)m7");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("{pJDint*/ mm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: {pJDint*_/ mm
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Document.createShell("m");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!JQA,&_e2?C)m7", "Insert position out of bounds.");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsByClass("S+YR[>pX");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ubi~nbd7$3X", "Ubi~nbd7$3X");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "Ubi~nbd7$3X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = new Document("=^`");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(";X?V&FM^pxK^_7(@S8", ";X?V&FM^pxK^_7(@S8");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("/", ";X?V&FM^pxK^_7(@S8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: ;X?V&FM^pxK^_7(@S8
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5;`", "5;`");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parse("5;`", "5;`");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("#V'{w1\"@X5@*T6", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Element element0 = new Element("#3^C8aH");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValue("#3^C8aH", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = new Document("=^`");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parse("{SmpxL~Q'ZSeLKz", "");
      // Undeclared exception!
      try { 
        document0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "textarea");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("DX0@821=2[^r6k2-1L", "DX0@821=2[^r6k2-1L");
      Element element0 = document0.body();
      element0.toggleClass("DX0@821=2[^r6k2-1L");
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'body.java.lang.String@0000000090': unexpected token at '@0000000090'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3sq0H7I78<KH.)g", "3sq0H7I78<KH.)g");
      CDataNode cDataNode0 = new CDataNode("3sq0H7I78<KH.)g");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = new Document("menuitem");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C4Q}vHq^", "C4Q}vHq^");
      // Undeclared exception!
      try { 
        document0.child((-2500));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parse("!JQA,&_e2?C)m7", "!JQA,&_e2?C)m7");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.before("html");
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parse("{SmpxL~Q'ZSeLKz", "");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.attr("Could not parse attribute query '%s': unexpected token at '%s'", "");
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parse("EO75(J3s", "EO75(J3s");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "body");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parse("EO75(J3s", "EO75(J3s");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.appendElement("^:l+");
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Document.createShell("5");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document1 = document0.parser(parser1);
      // Undeclared exception!
      try { 
        document1.appendElement("5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = new Document("=^`");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Document.createShell("w1");
      Element element0 = document0.createElement("w1");
      List<Node> list0 = Parser.parseXmlFragment("w1", "w1");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.appendChild(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("9]<D:k", parseSettings0);
      Element element0 = new Element(tag0, "9]<D:k");
      // Undeclared exception!
      try { 
        element0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = new Document("5;`");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.append("m");
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Document.createShell("m");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Document.createShell("Z%?nN&xX6'");
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parse("!JQA,&_e2?C)m7", "!JQA,&_e2?C)m7");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.after("!JQA,&_e2?C)m7");
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parse("{SmpxL~Q'ZSeLKz", "gBY?i");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Tag tag0 = Tag.valueOf("5;`");
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null, (Attributes) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("z=@Mjd(>zPP q7~", "z=@Mjd(>zPP q7~");
      StringBuffer stringBuffer0 = new StringBuffer(7);
      document0.html((Appendable) stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Element element0 = new Element("address");
      element0.hasClass("address");
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("textarea");
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("br", "address");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5;`", "5;`");
      Element element0 = document0.body();
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = new Document("=^`");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Attribute", "org.jsoup.nodes.Attribute");
      document0.prependChild(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "textarea");
      document0.html("Should not be reachable");
      document0.textNodes();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Document.createShell("m");
      Element element0 = document0.body();
      element0.html(".lkagqs");
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "gO.R:j");
      document0.clearAttributes();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("W}", "W}");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!JQA,&_e2?C)m7", "Insert position out of bounds.");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parse("5;`", "5;`");
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = new Document("!ZwJQA,&_e2?C)m7");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":has(%s)");
      Element element0 = new Element(tag0, "*_^)Xg|v- =r=*");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Document.createShell("5;`");
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan((-945));
      document0.is((Evaluator) evaluator_IndexLessThan0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parse("=^`", "=^`");
      document0.append("=^`");
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = new Document("=^`");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Document.createShell("5;`");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Document.createShell("_ua1n0-J");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ins", "U[}~a");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("ins", "tA: U)_9@Uxd5rQ2ug");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Element element0 = new Element("address");
      Element element1 = element0.prependText("address");
      element1.toString();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parse("summary", "summary");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Element element0 = new Element("address");
      Document document0 = Parser.parseBodyFragment("address", "address");
      Element element1 = document0.body();
      element0.appendTo(element1);
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Element element0 = new Element("address");
      Tag tag0 = Tag.valueOf("address");
      Element element1 = new Element(tag0, "");
      element0.appendTo(element1);
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Element element0 = new Element("addrqess");
      Document document0 = Parser.parse("^/#KcV&", "addrqess");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      element0.appendTo(document1);
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Element element0 = new Element("address");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("w1", "w1");
      document0.toggleClass("w1");
      document0.getElementsByClass("DoctpeSystemIdentifNer_singleQuoted");
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.parser.Token$TokenType");
      CDataNode cDataNode0 = new CDataNode("title");
      document0.prependChild(cDataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ins", "U[}~a");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Document.createShell("5;`");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = new Document("5;`");
      document0.prependChild(document0);
      Element.preserveWhitespace(document0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      DataNode dataNode0 = new DataNode("replacementStr", "");
      Element.preserveWhitespace(dataNode0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("}RW#Cd345!M:k", "}RW#Cd345!M:k");
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      DocumentType documentType0 = new DocumentType("}RW#Cd345!M:k", "}RW#Cd345!M:k", "}RW#Cd345!M:k", "VaZ8Vs!VlIr/jW8BS");
      linkedList0.add(documentType0);
      Element element0 = document0.insertChildren(1, (Collection<? extends Node>) linkedList0);
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!JQA,&_e2?C)m7", "Insert position out of bounds.");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("jbiWnbn7$3X", "jbiWnbn7$3X");
      document0.appendElement("jbiWnbn7$3X");
      document0.getElementsContainingText("jbiWnbn7$3X");
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5;`", "5;`");
      Document document1 = document0.clone();
      document1.prependChild(document0);
      document1.getElementsContainingText("gqJsi");
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = new Document("5;`");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("BogusDoctype", false);
      document0.prependChild(xmlDeclaration0);
      document0.getElementsContainingText((String) null);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Document.createShell(":only-child");
      Element element0 = document0.doClone(document0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parse("5;`", "5;`");
      Element element0 = document0.appendElement("5;`");
      element0.prependChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Document.createShell("h");
      Element element0 = document0.body();
      Elements elements0 = element0.nextElementSiblings();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sP{=}A-9?>;I]'", "sP{=}A-9?>;I]'");
      Document document1 = Parser.parseBodyFragmentRelaxed("sP{=}A-9?>;I]'", "sP{=}A-9?>;I]'");
      document1.parentNode = (Node) document0;
      assertEquals(1, document0.childNodeSize());
      
      Elements elements0 = document1.previousElementSiblings();
      assertEquals("sP{=}A-9?>;I]'", document1.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parse("5;`", "5;`");
      document0.previousElementSibling();
      assertEquals("5;`", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Document.createShell("m");
      Element element0 = document0.body();
      element0.wrap("invalid named referenece '%s'");
      element0.nextElementSibling();
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5;`", "5;`");
      document0.nextElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("5;`", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      Element element0 = document0.prependElement("org.jsoup.nodes.Element$2");
      Elements elements0 = element0.siblingElements();
      assertEquals(2, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^`", "=^`");
      document0.siblingElements();
      assertEquals("=^`", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("DX0@821=2[^r6k2-1L", "DX0@821=2[^r6k2-1L");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parse("J&x}5uRu38&fJR|,wk<", "J&x}5uRu38&fJR|,wk<");
      Element element0 = document0.prependChild(document0);
      String string0 = element0.cssSelector();
      assertEquals("J&x}5uRu38&fJR|,wk<", element0.baseUri());
      assertEquals("#root", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      Node[] nodeArray0 = new Node[8];
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Document.createShell("");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
      try { 
        document0.insertChildren((-422), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      Node[] nodeArray0 = new Node[8];
      // Undeclared exception!
      try { 
        document0.insertChildren(58, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByIndexGreaterThan(1664);
      // Undeclared exception!
      try { 
        document0.insertChildren(1664, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = new Document("=^`");
      Pattern pattern0 = Pattern.compile(">");
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      // Undeclared exception!
      try { 
        document0.insertChildren((-2414), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("m", "m");
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      Element element0 = document0.insertChildren((-2), (Collection<? extends Node>) linkedList0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("m", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("DX0@821=2[^r6k2-1L", "DX0@821=2[^r6k2-1L");
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("DX0@821=2[^r6k2-1L", "DX0@821=2[^r6k2-1L");
      DataNode dataNode0 = new DataNode("),p-eM_69s&Y7zZ");
      document0.appendChild(dataNode0);
      document0.dataNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", ":matchtext");
      Element element0 = document0.selectFirst(":matchtext");
      assertEquals(":matchtext", element0.baseUri());
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Document.createShell("");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, document0.childNodeSize());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Document.createShell("br");
      CDataNode cDataNode0 = new CDataNode("br");
      document0.prependChild(cDataNode0);
      document0.child(0);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Element element0 = new Element("address");
      Elements elements0 = element0.getAllElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Document.createShell("m");
      Element element0 = document0.removeClass("org.jsoup.nodes.Element$NodeList");
      assertEquals("m", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Document.createShell("5;`");
      // Undeclared exception!
      try { 
        document0.before("textarea");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = new Document("5;`");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parse("x)@w|M8", "x)@w|M8");
      Elements elements0 = document0.getElementsByAttributeValueNot("o-NNn_u", " ");
      assertEquals("x)@w|M8", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("UGh IjF-G{-R@Wr9raj", "Should not be reachable");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parse("x)@w|M8", "x)@w|M8");
      Element element0 = document0.shallowClone();
      assertEquals("x)@w|M8", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = new Document("");
      document0.doSetBaseUri(";L>N\"");
      assertEquals(";L>N\"", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Document.createShell("~;p^YsU|=~SiZ9Og");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Document.createShell("5;`");
      document0.getElementsByAttributeValueContaining("Children collection to be inserted must not be null.", " }gQr8V[0uNCy0@i4{(");
      assertEquals(1, document0.childNodeSize());
      assertEquals("5;`", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Pattern pattern0 = Pattern.compile("F_aBItD'/t/Xz!");
      document0.getElementsByAttributeValueMatching("VA~X", pattern0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsByAttributeValueEnding("br", "m");
      document0.attributes();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Element element0 = new Element("addrqess");
      boolean boolean0 = element0.is("addrqess");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("jbiWnbn7$3X", "jbiWnbn7$3X");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("jbiWnbn7$3X", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Document.createShell("m");
      // Undeclared exception!
      try { 
        document0.wrap("invalid named referenece '%s'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("}\"4D[#(c3pku:XDe", "}RW#Cd345!M:k");
      Elements elements0 = document0.getElementsByIndexEquals(32);
      assertTrue(elements0.isEmpty());
      assertEquals("}RW#Cd345!M:k", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Document.createShell("5;`");
      document0.getElementsByAttributeStarting("5;`");
      assertEquals("5;`", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Elements elements0 = document0.getElementsByIndexLessThan(27);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.baseUri());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parse("F", "F");
      // Undeclared exception!
      try { 
        document0.after("BeforeDoctypeSystemIdentifier");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<", "addrqess");
      Elements elements0 = document0.getElementsMatchingOwnText("addrqess");
      assertEquals(1, document0.childNodeSize());
      assertEquals("addrqess", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Document.createShell("Should not be reachable");
      document0.prepend(">");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Document.createShell("#&2q");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Element element0 = new Element("addrqess");
      Elements elements0 = element0.getElementsByAttributeValueStarting("addrqess", "addrqess");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ins", "U[}~a");
      document0.getElementsByAttributeValue("ins", "tA: U)_9@Uxd5rQ2ug");
      assertEquals("U[}~a", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Document.createShell("5;`");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = new Document("=^`");
      document0.wholeText();
      assertEquals("=^`", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("eY|`GyrVnU", "Insert position out of bounds.");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Element element0 = new Element("textarea");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parse("J&x}5uRu38&fJR|,wk<", "J&x}5uRu38&fJR|,wk<");
      document0.addClass("J&x}5uRu38&fJR|,wk<");
      document0.cssSelector();
      assertEquals("J&x}5uRu38&fJR|,wk<", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      Elements elements0 = document0.getElementsContainingOwnText("org.jsoup.nodes.Element$2");
      assertEquals(1, elements0.size());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Map<String, String> map0 = document0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<", "addrqess");
      document0.title("TY})");
      Elements elements0 = document0.getElementsMatchingOwnText("addrqess");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertEquals("addrqess", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = new Document("5;`");
      document0.prependText("5;`");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = new Document("menuitem");
      // Undeclared exception!
      try { 
        document0.child(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sP{=}A-9?>;I]'", "sP{=}A-9?>;I]'");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("sP{=}A-9?>;I]'", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("9]<D:k", parseSettings0);
      Element element0 = new Element(tag0, "9]<D:k");
      Elements elements0 = element0.getElementsMatchingText("9]<D:k");
      assertEquals("9]<D:k", element0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("DX0@821=2[^r6k2-1L", "DX0@821=2[^r6k2-1L");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.getElementById("textarea");
      assertNull(element0);
      assertEquals(1, document0.childNodeSize());
  }
}
