/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:54:21 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("UX'q", "UX'q");
      Element element0 = document0.addClass("F0}");
      element0.addClass("Tag name must not be empty.");
      document0.hasClass("!N");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parse("(,M!<!<l*,a{1='", "(,M!<!<l*,a{1='");
      document0.appendElement("Bt");
      Element element0 = document0.appendElement("Bt");
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.prependElement("br");
      document0.setParentNode(element0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.prependElement("br");
      MockFileWriter mockFileWriter0 = new MockFileWriter("&hV", false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.outerHtmlTail(mockFileWriter0, (-3002), document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      MockPrintStream mockPrintStream0 = new MockPrintStream("d;leG|R4&[TU!8");
      document0.outerHtmlHead(mockPrintStream0, 3705, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      Element element0 = document0.clone();
      Document document1 = (Document)element0.appendTo(document0);
      document1.wrap("#root");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("l?fqYk9", "Z.8dwRE;A>,wVP");
      Element element0 = document0.head();
      element0.wrap("Z.8dwRE;A>,wVP");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      Document document1 = Parser.parse("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      Element element0 = document1.appendTo(document0);
      element0.val((String) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Element element0 = new Element("{krpoiui");
      element0.siblingIndex = (-712);
      element0.val("{krpoiui");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      Element element0 = document0.head();
      element0.val("textarea");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      Element element0 = document0.val("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/}", "/}");
      document0.setSiblingIndex((-1633825413));
      document0.toggleClass("/UlNp:Y");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tfoot", "Insert position out of bounds.");
      Element element0 = document0.head();
      element0.toggleClass("pxgcr+1xgbq[k7");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.appendElement("br");
      element0.toggleClass("L[\"M3/MUqkgWp");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      Element element0 = document0.appendTo(document0);
      element0.text("~e2e]k[1");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[UjE{&a#xGvbRqj|cm^", ":nth-of-tyfpe(");
      document0.setSiblingIndex((-1433506051));
      document0.tagName("lp+7p1'bvuoh");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Document.createShell(".- _[b!8n /j0,,");
      document0.tagName("body");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      Element element0 = document0.clone();
      Element element1 = element0.appendTo(document0);
      element1.tagName("PXgcR+1XgBq[k7");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = new Document("[o{-,<djG@#T{QN");
      document0.tagName("K^I7Ut");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Z?{U1/", ">))}h>#e3<(g|Ue");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "Q");
      Element element0 = document0.appendElement("br");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgc#l'R>1XgBq[k7", "PXgc#l'R>1XgBq[k7");
      document0.appendTo(document0);
      Element element0 = document0.previousElementSibling();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("d;leGQ|R4&[TU!8", "d;leGQ|R4&[TU!8");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parse("PXgcR+1XgBq[k7", "QuU1[Y;e;V!y~");
      document0.appendTo(document0);
      Element element0 = document0.previousElementSibling();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Document.createShell("<");
      document0.selectFirst("br");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Tag tag0 = Tag.valueOf("C");
      Element element0 = new Element(tag0, "C", (Attributes) null);
      element0.selectFirst("C");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      document0.selectFirst("body");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'root", "'root");
      document0.select("head");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      document0.setSiblingIndex((-514));
      document0.removeClass("2}F<]9xC[:");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element");
      Element element0 = document0.body();
      element0.removeClass("m8`");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      document0.reparentChild(document0);
      document0.removeClass("title");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Element element0 = new Element(">A");
      Element element1 = element0.appendChild(element0);
      element1.prependText("^J @}YHG&:!f6)6>Z");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Tag tag0 = Tag.valueOf("nowrap");
      Element element0 = new Element(tag0, "n`a)xdA$");
      element0.siblingIndex = (-50);
      element0.prependText("tmjq&");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Document.createShell("readonly");
      Element element0 = document0.head();
      element0.prependText("readonly");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = new Document("head");
      document0.prependElement("head");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      Element element0 = document0.clone();
      element0.appendTo(document0);
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Document.createShell("t#:l-x@dYp9*0J0U.");
      Element element0 = document0.head();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.body();
      element0.prepend("0EoSC@#)F54BlTT9ub");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fA", "fA");
      Element element0 = document0.appendElement("fA");
      element0.prepend("");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Document.createShell(".- _[b!8n /j0,,");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.body();
      Element element1 = element0.before("br");
      element1.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      Parser parser0 = Parser.htmlParser();
      Document document1 = parser0.parseInput("", "");
      Element element0 = document0.appendTo(document1);
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parse("ho lV^z", "ho lV^z");
      Element element0 = document0.appendElement("ho lV^z");
      element0.setParentNode(element0);
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Document.createShell("<");
      document0.append("BeforeHtml");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("             ", "             ");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.prependChild(document0);
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(".W_+8Q62?q='8Y", "Insert position out of bounds.");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      Element element0 = document0.appendTo(document0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Document.createShell("readonly");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      Pattern pattern0 = Pattern.compile("");
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      document0.is((Evaluator) evaluator_Matches0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("l?fqYk9", "Z.8dwRE;A>,wVP");
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute("l?fqYk9");
      document0.is((Evaluator) evaluator_Attribute0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Element element0 = new Element(tag0, "textarea");
      element0.is("textarea");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Document.createShell("{kri|u");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      DataNode dataNode0 = new DataNode("{kri|u", "{kri|u");
      nodeArray0[1] = (Node) dataNode0;
      nodeArray0[2] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      document0.reparentChild(document0);
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      Elements elements0 = document0.parents();
      Element element0 = document0.appendTo(document0);
      element0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.BooleanAttribute");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "org.jsoup.nodes.BooleanAttribute", attributes0);
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      element0.insertChildren((-1), (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">A", "PXgcR+1XgBq[k7");
      Element element0 = document0.appendElement(">A");
      element0.html(">A");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Element element0 = new Element("menuitem");
      element0.siblingIndex = (-1056);
      element0.html("9S");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parse("", "bm9");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = new Document("aPtv|tmJ[*7[BrFV5");
      document0.html((CharArrayWriter) null);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      Element element0 = document0.prependElement("textarea");
      element0.html();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Element element0 = new Element(">A");
      element0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("V~C5g>Ksj!P", "N$GJ>|VtS}hIH'");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("V~C5g>Ksj!P", "N$GJ>|VtS}hIH'");
      document0.getElementsMatchingText(".");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parse("ins", "org.jsoup.nodes.Element$1");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fA", "fA");
      document0.getElementsContainingText("fA");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Tag tag0 = Tag.valueOf("O");
      CDataNode cDataNode0 = new CDataNode("O");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, " />", attributes0);
      pseudoTextElement0.getElementsContainingOwnText("pubSysKey");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Document.createShell("d;leG|R4&[TU!8");
      document0.getElementsByTag("d;leG|R4&[TU!8");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000154");
      document0.getElementsByIndexGreaterThan(77);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">A", "PXgcR+1XgBq[k7");
      document0.getElementsByIndexEquals((-171));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fA", "fA");
      document0.addClass("fA");
      Element element0 = document0.addClass("org.jsoup.nodes.Element$2");
      element0.getElementsByClass("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      document0.getElementsByAttributeValueNot("body", " ");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Document.createShell(".- _[b!8n /j0,,");
      document0.getElementsByAttributeValueNot("#%d.{\"i@CUFHGC=Gw", "+v&{-IHmrp&_|_`Y");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("{ /oc5F3HP", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("{ /oc5F3HP", "{ /oc5F3HP");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "{ /oc5F3HP", attributes1);
      pseudoTextElement0.getElementsByAttributeValueContaining("{ /oc5F3HP", "{ /oc5F3HP");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parse("&Ugz3m", "&Ugz3m");
      document0.getElementsByAttributeStarting("&Ugz3m");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Tag tag0 = Tag.valueOf("head");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "XKW#$;A3~!pA_Naf&", attributes0);
      formElement0.empty();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">A", "PXgcR+1XgBq[k7");
      Element element0 = document0.appendElement(">A");
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.head();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pQ&|8|$6*IG", "nth-child");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000076", "java.lang.string@0000000076");
      Element element0 = document0.body();
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = new Document("aPtv|tmJ[*7[BrFV5");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Element element0 = new Element(">A");
      Element element1 = element0.addClass(">A");
      element1.classNames();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = new Document("%@*fvo\" j<Ht T4s`_");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      Element element0 = document0.head();
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("d;leGQ|R4&[TU!8", "d;leGQ|R4&[TU!8");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Tag tag0 = Tag.valueOf("N=1");
      Element element0 = new Element(tag0, "9_mZT(");
      Document document0 = Document.createShell("9_mZT(");
      Element element1 = element0.appendChild(document0);
      element1.child(0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parse("=t^U9h*0c:^", "org.jsoup.nodes.Element");
      Document document1 = (Document)document0.appendTo(document0);
      document1.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fA", "fA");
      Element element0 = document0.appendElement("fA");
      element0.before("#root");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = new Document("aPtv|tmJ[*7[BrFV5");
      document0.attr("aPtv|tmJ[*7[BrFV5", "");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      document0.appendTo(document0);
      Element element0 = document0.firstElementSibling();
      element0.attr("PXgcR+1XgBq[k7", true);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.appendTo(document0);
      document0.attr("pxgcr+1xgbq[k7", true);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("T[X");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "textarea", attributes0);
      element0.attr("jStkCJj_;cwlh<G", true);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parse("}", "}");
      Element element0 = document0.body();
      element0.attr("}", "#root");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parse("PXgcR+1XgBq[k7", "QuU1[Y;e;V!y~");
      document0.appendTo(document0);
      Element element0 = document0.previousElementSibling();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "@t6V<dl'*)[H", attributes0);
      formElement0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      document0.appendTo(document0);
      document0.appendText("RumX.HX");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{krai|ui", "{krai|ui");
      document0.setSiblingIndex((-2745));
      document0.appendText("{krai|ui");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">A", "PXgcR+1XgBq[k7");
      Element element0 = document0.appendElement(">A");
      element0.appendElement("id");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.appendElement("html");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parse("&Ugz3m", "&Ugz3m");
      Element element0 = document0.body();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parse("=t^U9h*0c:^", "org.jsoup.nodes.Element");
      Document document1 = Parser.parse("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document1.appendTo(document0);
      document1.append("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Document.createShell("readonly");
      Element element0 = document0.head();
      element0.append("java.lang.string@0000000041 ux'q f0}");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = new Document("PXgcR+1XgBq[k7");
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      Element element0 = document0.doClone(document0);
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parse("&Ugz3m", "&Ugz3m");
      Element element0 = document0.body();
      Element element1 = element0.after((Node) document0);
      element1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fA", "fA");
      Element element0 = document0.appendElement("fA");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      Document document1 = (Document)document0.prepend("html");
      document1.reparentChild(document0);
      document1.after((Node) document1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=\"", "=\"");
      Element element0 = document0.head();
      element0.after("marquee");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      Element element0 = document0.clone();
      element0.appendTo(document0);
      element0.after("<html>\n <head></head>\n <body>\n  PXgcR+1XgBq[k7\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+F2u1XgBq[k7", "PXgcR+F2u1XgBq[k7");
      document0.appendTo(document0);
      document0.addClass("java.lang.String@0000000088");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parse("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      document0.siblingIndex = (-630);
      document0.addClass("PXgcR+1XgBq[k7");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = new Document("rdnmD_ci9Sy");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.wrap("rdnmD_ci9Sy");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      // Undeclared exception!
      try { 
        document0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.val("PXgcR+1XgBq[k7");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("V~C5g>Ksj!P", "N$GJ>|VtS}hIH'");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      document0.empty();
      // Undeclared exception!
      try { 
        document0.text("s+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", "org.jsoup.nodes.Attributes$Dataset$DatasetIterator");
      CDataNode cDataNode0 = new CDataNode(": ");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.tagName("#root");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parse(")\"`8$uF4,91", "org.jsoup.select.Evaluator$AttributeWithValueNot");
      // Undeclared exception!
      try { 
        document0.selectFirst(")\"`8$uF4,91");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ')\"`8$uF4,91': unexpected token at ')\"`8$uF4,91'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("strike", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("strike");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "6", attributes0);
      // Undeclared exception!
      try { 
        element0.selectFirst("MB[,0E)R%#J2k_!gR");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'J'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d;leG|R4&[TU!8", "d;leG|R4&[TU!8");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("T[X");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "textarea", attributes0);
      // Undeclared exception!
      try { 
        element0.select("M^Hq|P0");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'M^Hq|P0': unexpected token at '^Hq|P0'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Document.createShell("<");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      TextNode textNode0 = TextNode.createFromEncoded("textarea", "=N");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Element element0 = new Element(":8SOUU{3mlre,'.K");
      // Undeclared exception!
      try { 
        element0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.prependElement("org.jsoup.nodes.LeafNode");
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":root", ":root");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fA", "fA");
      Element element0 = document0.appendElement("fA");
      document0.html("fA");
      // Undeclared exception!
      try { 
        element0.prependChild(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.prepend("body");
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Document.createShell("A?s>[Zk$i*NY");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      Comment comment0 = new Comment("org.jsoup.nodes.Element");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      Element element0 = document0.doClone(xmlDeclaration0);
      // Undeclared exception!
      try { 
        element0.parents();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = new Document("body");
      Comment comment0 = new Comment("org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling", "body");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.parent();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      StringBuffer stringBuffer0 = new StringBuffer();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(275);
      // Undeclared exception!
      document0.outerHtmlTail(stringBuffer0, 1680, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parse("@C*D fdpIlTCVpL", "@C*D fdpIlTCVpL");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "EI");
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Element element0 = new Element(">A");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        element0.outerHtmlTail((Appendable) null, 14, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parse("body", "body");
      StringBuffer stringBuffer0 = new StringBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringBuffer0, (-509), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Document.createShell(":lt(%d)");
      MockFile mockFile0 = new MockFile(":lt(%d)");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(631);
      // Undeclared exception!
      document0.outerHtmlHead(mockFileWriter0, 631, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000154");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 77, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Document.createShell("e'GJpP~>8vR~0mu");
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 62, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G:===", "G:===");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(stringWriter0, (-282), (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.encoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charsetEncoder0);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(outputStreamWriter0, (-811), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fA", "fA");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlHead(pipedWriter0, (-804), document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = new Document("aPtv|tmJ[*7[BrFV5");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Element element0 = new Element(">A");
      element0.appendChild(element0);
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(1262);
      // Undeclared exception!
      element0.is((Evaluator) evaluator_IndexLessThan0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("K;pnp1'vSoh", "K;pnp1'vSoh");
      DocumentType documentType0 = new DocumentType("K;pnp1'vSoh", "jm]Q)fVvMwa9", "N!)", "#root", "jm]Q)fVvMwa9");
      document0.parentNode = (Node) documentType0;
      Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
      // Undeclared exception!
      try { 
        document0.is((Evaluator) evaluator_IsLastOfType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.DocumentType cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.is(":nth-child(%d)");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse nth-index '%d': unexpected format
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.is("textarea");
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parse(":\"`8$uk4,91", "head");
      CDataNode cDataNode0 = new CDataNode("<wCx`bIY).Wa|");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) cDataNode0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html("{o");
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-c8hild(%d)", ":nth-c8hild(%d)");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^k", "^k");
      DataNode dataNode0 = new DataNode("{krai|ui");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.html("@?m-{}NXq2Er");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parse("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      document0.reparentChild(document0);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      document0.html(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fA", "rapeq+.}ou");
      // Undeclared exception!
      try { 
        document0.html((StringWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.prependElement("br");
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      DocumentType documentType0 = new DocumentType("]WaU'=yK", "br", "]WaU'=yK");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.prependElement("br");
      element0.siblingIndex = (-2028716147);
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("d;leG|R4&[TU!8", "d;leG|R4&[TU!8");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">A", "PXgcR+1XgBq[k7");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Document.createShell("d;leG|R4&[TU!8");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("d;leG|R4&[TU!8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: d;leG|R4&[TU!8
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = new Document("~Ki#zgrTq~0oE");
      Document document1 = Parser.parse("~Ki#zgrTq~0oE", "~Ki#zgrTq~0oE");
      document1.appendTo(document0);
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("~Ki#zgrTq~0oE", false);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("~Ki#zgrTq~0oE");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.BooleanAttribute");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "org.jsoup.nodes.BooleanAttribute", attributes0);
      // Undeclared exception!
      try { 
        element0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#i{root", "#i{root");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("#i{root");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: #i{root
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("f", "rapeq+.}ou");
      Element element0 = document0.appendElement("f");
      element0.siblingIndex = (-464);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("f");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pQ&|8|$6*IG", "nth-child");
      // Undeclared exception!
      try { 
        document0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("             ", "             ");
      DataNode dataNode0 = new DataNode("java.lang.string@0000000120");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan((-280));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Unexpected token type: ", "menuitem");
      Element element0 = document0.createElement(":3:&sE0cXcgd,dr=A@B");
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueStarting("Unexpected token type: ", "menuitem");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Document.createShell("<");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting((String) null, "<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",M!!<l*a{1'", ",M!!<l*a{1'");
      Element element0 = document0.appendElement("Bt");
      element0.setSiblingIndex((-5649));
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueNot("Bt", ",M!!<l*a{1'");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Document.createShell(".- _[b!8n /j0,,");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching(".- _[b!8n /j0,,", "[o{-,<djG@#T{QN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: [o{-,<djG@#T{QN
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("a!3.", "5*4|e");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("a!3.", "BeforeDoctypeSystemIdentifier");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = new Document("aPtv|tmJ[*7[BrFV5");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("aPtv|tmJ[*7[BrFV5", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parse("PXgcR+1XgBq[k7", " />");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("p~cTOj$gKdI]?", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Collector$FirstFinder", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "EI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.prependElement("br");
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("br");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parse("body", "body");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("center", "center");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementById("center");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fA", "fA");
      Element element0 = document0.appendElement("fA");
      element0.setSiblingIndex((-68));
      // Undeclared exception!
      try { 
        element0.getElementById("org.jsoup.nodes.NodeUtils");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset((Charset) null);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document0.parentNode = (Node) document1;
      Document document2 = (Document)document1.prependText("textarea");
      document2.replaceChild(document0, document0);
      // Undeclared exception!
      document1.getAllElements();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Element element0 = new Element(":8SOUU{3mlre,'.K");
      // Undeclared exception!
      try { 
        element0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{k?rai|ui", "{k?rai|ui");
      Element element0 = document0.head();
      element0.addClass("ABgs*0+z  <%UO/xSUg");
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'head.java.lang.String@0000000088': unexpected token at '@0000000088'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!C", "org.jsoup.nodes.Node$OuterHtmlVisitor");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(48);
      linkedHashSet0.add((String) null);
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Element element0 = new Element(":8SOUU{3mlre,'.K");
      // Undeclared exception!
      try { 
        element0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      // Undeclared exception!
      try { 
        document0.child(5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      // Undeclared exception!
      try { 
        document0.child((-14));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Z", "Z");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.before("Z");
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Tag tag0 = Tag.valueOf("I}WNk(");
      Element element0 = new Element(tag0, "FHe*TovEE1oF");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("java.lang.string@0000000076", true);
      Element element1 = element0.doClone(xmlDeclaration0);
      // Undeclared exception!
      try { 
        element1.before("head");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parse("", "bm9");
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Document.createShell("'SfK/iT:C[Z7_'sI1");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.attr("'SfK/iT:C[Z7_'sI1", "'SfK/iT:C[Z7_'sI1");
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      // Undeclared exception!
      try { 
        document0.attr((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      Document document1 = Parser.parse("#root", "head");
      List<Node> list0 = document1.childNodes();
      document1.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendTo(document1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      Element element0 = document0.appendTo(document0);
      document0.reparentChild(element0);
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      Document document1 = (Document)document0.appendTo(document0);
      document1.setSiblingIndex((-2098));
      // Undeclared exception!
      try { 
        document0.appendTo(document1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Element element0 = new Element(">A");
      // Undeclared exception!
      try { 
        element0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.appendElement("PXgcR+1XgBq[k7");
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("f^nA", "f^nA");
      List<Node> list0 = Parser.parseXmlFragment("f^nA", "f^nA");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendElement("attern syntax error:");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-c8hild(%d)", ":nth-c8hild(%d)");
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document1 = document0.parser(parser1);
      // Undeclared exception!
      try { 
        document1.appendElement(":nth-c8hild(%d)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Document.createShell("head");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parse("lp+7np1'bvSoh", "lp+7np1'bvSoh");
      TextNode textNode0 = TextNode.createFromEncoded("lp+7np1'bvSoh", "value");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        document0.appendChild(element0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-c8hild(%d)", ":nth-c8hild(%d)");
      document0.siblingIndex = 2538;
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.appendChild(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2538, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Element element0 = new Element("97");
      // Undeclared exception!
      try { 
        element0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Element element0 = new Element("data");
      Element element1 = element0.appendTo(element0);
      // Undeclared exception!
      element1.append(":contains(");
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parse("}", "}");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.appendElement("br");
      // Undeclared exception!
      try { 
        element0.after((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.after("PXgcR+1XgBq[k7");
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Document.createShell("<");
      document0.setSiblingIndex(254);
      Element element0 = document0.doClone(document0);
      // Undeclared exception!
      try { 
        element0.after("(U!Qk@KQp}li*@7y./");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 255, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "Children collection to be inserted must not be null.", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "nth-child");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      Charset charset0 = document0.charset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(472);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      document0.html(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Document.createShell(".- _[b!8n /j0,,");
      document0.hasClass("[o{-,<djG@#T{QN");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Document.createShell("d;leG|R4&[TU!8");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      document0.className();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Document.createShell(".- _[b!8n /j0,,");
      Set<String> set0 = document0.classNames();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("s+", "");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tfoot", "Insert position out of bounds.");
      Element element0 = document0.head();
      Element element1 = element0.appendText("Insert position out of bounds.");
      element1.hasText();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Document.createShell("E_bSep");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fA", "fA");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      Element element0 = document0.head();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      document0.appendTo(document0);
      Element element0 = document0.previousElementSibling();
      element0.text("org.jsoup.select.Evaluator$IsNthLastOfType");
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.parser.CharacterReader", "org.jsoup.parser.CharacterReader");
      Element element0 = document0.body();
      element0.before("ox%");
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      document0.reparentChild(document0);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fA", "fA");
      Element element0 = document0.head();
      element0.html("WFxhoE");
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parse("F8}", "F8}");
      document0.hasAttr(",tbH|bVE");
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Element element0 = new Element(":8SOUU{3mlre,'.K");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parse("&#xa0;", "&#xa0;");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Document.createShell("<");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Document.createShell("readonly");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = new Document("PXgcR+1XgBq[k7");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("V~C5g>Ksj!P", "N$GJ>|VtS}hIH'");
      Pattern pattern0 = Pattern.compile("MSaD=Q<01vAm|h");
      document0.getElementsByAttributeValueMatching("V~C5g>Ksj!P", pattern0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">A", "PXgcR+1XgBq[k7");
      document0.select("id");
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parse("=t^U9h*0c:^", "org.jsoup.nodes.Element");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.title("sln!");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      Element element0 = document0.prependElement("textarea");
      element0.val("Insert position out of bounds.");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("Could not parse nth-index '%s': unexpected format");
      Document document0 = parser0.parseInput((Reader) stringReader0, "br");
      document0.appendElement("br");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Element element0 = new Element("menuitem");
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fA", "rapeq+.}ou");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("UX'q", "UX'q");
      Element element0 = document0.addClass("0}");
      document0.addClass("0}");
      element0.toggleClass("0}");
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("UX'q", "org.jsoup.nodes.Element$2");
      document0.addClass("}aJ");
      document0.addClass("\u0004V|IqHtV");
      document0.hasClass("BK5IPdXg");
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("UX'q", "org.jsoup.nodes.Element$2");
      document0.addClass("}aJ");
      Element element0 = document0.html("fA");
      document0.html(" KTS!F;qPN6[!MM");
      Element element1 = document0.toggleClass("org.jsoup.nodes.Element$2");
      element0.addClass("\u0004V|IqHtV");
      element1.hasClass("java.lang.string@0000000154");
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fA", "fA");
      Element element0 = document0.addClass("fA");
      document0.addClass("Fff0OY_ZZBO@d50 gCV");
      element0.hasClass("tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parse("8?q*CRC8`d[", "vB/[}rg*");
      document0.addClass("vB/[}rg*");
      document0.addClass(" ");
      document0.hasClass(" ");
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Document.createShell("Y");
      document0.addClass("Y");
      document0.hasClass("tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^k", "^k");
      document0.addClass("_t");
      document0.hasClass("BeforeDoctypeSystemIdentifier");
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parse("(,M!<!<l*,a{1='", "(,M!<!<l*,a{1='");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("kq(n#ab .h", true);
      document0.prependChild(xmlDeclaration0);
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parse("(,M!<!<l*,a{1='", "(,M!<!<l*,a{1='");
      document0.setParentNode(document0);
      document0.getElementsMatchingText("org.jsoup.nodes.DocumentType");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("[{b1vC!%d?X{", "Initial");
      Element.preserveWhitespace(dataNode0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.prependElement("br");
      document0.appendElement("br");
      document0.getElementsMatchingOwnText("</");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      Element element0 = document0.prependElement("textarea");
      element0.val("Insert position out of bounds.");
      element0.getElementsMatchingOwnText("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "j");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      DocumentType documentType0 = new DocumentType(">A", "image", "L[\"M3/MUqkgWp", "L[\"M3/MUqkgWp", (String) null);
      nodeArray0[1] = (Node) documentType0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      Tag tag0 = Tag.valueOf("L[\"M3/MUqkgWp");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "PUBLIC", (Attributes) null);
      nodeArray0[8] = (Node) pseudoTextElement0;
      document0.addChildren(nodeArray0);
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("<8NCr+");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parse("=t^U9h*0c:^", "org.jsoup.nodes.Element");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Document.createShell("<");
      document0.prepend("<");
      Pattern pattern0 = Pattern.compile("textarea", 254);
      Element element0 = document0.append("<");
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^k", "^k");
      CDataNode cDataNode0 = new CDataNode("nohref");
      document0.appendChild(cDataNode0);
      Pattern pattern0 = Pattern.compile("Bt", 3);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      Element element0 = document0.clone();
      element0.appendTo(document0);
      Pattern pattern0 = Pattern.compile("ScriptDataDoubleEscapedDashDash", 0);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.appendElement("br");
      document0.getElementsContainingText("html");
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.body();
      element0.before("br");
      Pattern pattern0 = Pattern.compile("br", (-892));
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-c8hild(%d)", ":nth-c8hild(%d)");
      document0.setParentNode(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fA", "fA");
      Element element0 = document0.appendElement("fA");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Element element0 = new Element(":8SOUU{3mlre,'.K");
      Document document0 = Parser.parse("Insert position out of bounds.", "sJWw|p\"");
      document0.appendTo(element0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      document0.reparentChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Document.createShell("u6xsQ!");
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Document.createShell("<");
      document0.siblingElements();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parse("(,M!<!<l*,a{1='", "(,M!<!<l*,a{1='");
      Element element0 = document0.appendElement("Bt");
      Element element1 = element0.attr("Bt", "P");
      element1.siblingElements();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.body();
      element0.wrap("br");
      element0.reparentChild(document0);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{k?rai|ui", "{k?rai|ui");
      document0.addClass("ABgs*0+z  <%UO/xSUg");
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Element element0 = new Element(tag0, "textarea");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
      try { 
        element0.insertChildren(2780, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Tag tag0 = Tag.valueOf("rA_0");
      Element element0 = new Element(tag0, "tAc5.e[)0cV8");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        element0.insertChildren((-1557), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fA", "fA");
      Elements elements0 = document0.previousElementSiblings();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1001), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Element element0 = new Element("Insert position out of bounds.");
      Elements elements0 = element0.getElementsByTag("Insert position out of bounds.");
      // Undeclared exception!
      try { 
        element0.insertChildren(7152, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("]>_hV,7O,h/}", "b29FZ#6k&!U$eiBM,");
      document0.dataNodes();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">A", ">A");
      document0.prepend(">A");
      document0.textNodes();
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">A", ">A");
      document0.prepend(">A");
      document0.getElementsByIndexLessThan(275);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("             ", "             ");
      document0.getElementsByIndexGreaterThan((-280));
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parse(":\"`8$uk4,91", "head");
      Element element0 = document0.selectFirst("head");
      element0.before((Node) element0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Element element0 = new Element("+A");
      element0.is("+A");
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".- _[b!8n /j0,,", ".- _[b!8n /j0,,");
      document0.getAllElements();
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.parser.CharacterReader", "org.jsoup.parser.CharacterReader");
      // Undeclared exception!
      try { 
        document0.before("ox%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parse("F8}", "F8}");
      document0.getElementsByAttribute("java.lang.string@0000000098");
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Element element0 = new Element(":8SOUU{3mlre,'.K");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueNot((String) null, "XK&k6A}d{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      document0.appendTo(document0);
      Elements elements0 = document0.nextElementSiblings();
      assertEquals("PXgcR+1XgBq[k7", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Element element0 = new Element(":8SOUU{3mlre,'.K");
      Element element1 = element0.shallowClone();
      assertEquals("", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "br");
      document0.doSetBaseUri("#root");
      assertEquals("#root", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.getElementsByAttributeValueContaining("-", "org.jsoup.nodes.Element");
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parse(":\"`8$uk4,91", "head");
      Elements elements0 = document0.getElementsByClass("#root");
      assertEquals("head", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parse("8?q*CRC8`d[", "vB/[}rg*");
      document0.getElementsByAttributeValueEnding("8?q*CRC8`d[", "org.jsoup.select.Evaluator$IsOnlyChild");
      assertEquals("vB/[}rg*", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-c8hild(%d)", ":nth-c8hild(%d)");
      document0.getElementsByAttributeValueMatching((String) null, ":nth-c8hild(%d)");
      assertEquals(":nth-c8hild(%d)", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/}", "/}");
      document0.val("/}");
      Elements elements0 = document0.getElementsByAttributeValue("value", "/}");
      assertEquals("/}", document0.baseUri());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      // Undeclared exception!
      try { 
        document0.wrap("br");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("]>_hV,7O,h/}", "b29FZ#6k&!U$eiBM,");
      Elements elements0 = document0.getElementsByIndexEquals(1);
      assertEquals("b29FZ#6k&!U$eiBM,", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.prependElement("br");
      element0.firstElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Document.createShell("u6xsQ!");
      Elements elements0 = document0.getElementsByIndexLessThan((-590));
      assertEquals("u6xsQ!", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=\"", "=\"");
      // Undeclared exception!
      try { 
        document0.after("marquee");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Document.createShell("u6xsQ!");
      Pattern pattern0 = Pattern.compile(":containsData");
      document0.getElementsMatchingOwnText(pattern0);
      assertEquals("u6xsQ!", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.getElementsByAttributeValueStarting("br", " 4&g)G]%.");
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/}", "/}");
      document0.getElementsByAttributeValue("value", "/}");
      assertEquals("/}", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parse("F8}", "F8}");
      Element element0 = document0.attr("java.lang.string@0000000098", true);
      Elements elements0 = element0.getElementsByAttribute("java.lang.string@0000000098");
      assertEquals("F8}", element0.baseUri());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Document.createShell("d;leG|R4&[TU!8");
      document0.wholeText();
      assertEquals("d;leG|R4&[TU!8", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parse(":\"`8$uk4,91", "head");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fA", "fA");
      document0.addClass("fA");
      document0.hasClass("fA");
      assertEquals("fA", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      Elements elements0 = document0.getElementsContainingOwnText("org.jsoup.nodes.Element");
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      document0.dataset();
      assertEquals("PXgcR+1XgBq[k7", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Element element0 = new Element("+A");
      Element element1 = element0.text("n(Og/;2%W8|");
      assertEquals("", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k", "k");
      document0.prependText("       ");
      boolean boolean0 = document0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.child(0);
      assertEquals("PXgcR+1XgBq[k7", element0.baseUri());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Z?{U1/", ">))}h>#e3<(g|Ue");
      Elements elements0 = document0.children();
      assertEquals(">))}h>#e3<(g|Ue", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parse("PXgcR+1XgBq[k7", "PXgcR+1XgBq[k7");
      document0.getElementById("<html>\n <head></head>\n <body>\n  PXgcR+1XgBq[k7\n </body>\n</html>");
  }
}
