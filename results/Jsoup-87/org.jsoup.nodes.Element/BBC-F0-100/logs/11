* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-100
* Going to generate test cases for class: org.jsoup.nodes.Element
* Starting Client-0
* Connecting to master process on port 3033
* Analyzing classpath: 
  - subjects/buggy-versions/Jsoup-87/target/classes
* Finished analyzing classpath
* Generating tests for class org.jsoup.nodes.Element
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2768
* Using seed 1591862269
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 1405 / 2768
[MASTER] 22:16:09.050 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 22:17:03.597 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.appendTo(Lorg/jsoup/nodes/Element;)Lorg/jsoup/nodes/Element;: Line 426: 117,0,0| Number of FF evals: 84
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.appendTo(Lorg/jsoup/nodes/Element;)Lorg/jsoup/nodes/Element;: Line 427: 117,0,0| Number of FF evals: 84
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.appendTo(Lorg/jsoup/nodes/Element;)Lorg/jsoup/nodes/Element;: Line 425: 117,0,0| Number of FF evals: 84
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.getElementsContainingOwnText(Ljava/lang/String;)Lorg/jsoup/select/Elements;: root-Branch: 117,0,0| Number of FF evals: 4080
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.getElementsMatchingOwnText(Ljava/lang/String;)Lorg/jsoup/select/Elements;: root-Branch: 35,0,0| Number of FF evals: 359
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.siblingElements()Lorg/jsoup/select/Elements;: I4 Branch 25 IFNONNULL L666 - true: 117,0,0| Number of FF evals: 258
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.siblingElements()Lorg/jsoup/select/Elements;: I4 Branch 25 IFNONNULL L666 - false: 209,0,0| Number of FF evals: 499
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.tagName(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: Line 151: 682,0,0| Number of FF evals: 398
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.previousElementSibling()Lorg/jsoup/nodes/Element;: I28 Branch 31 IFLE L716 - true: 120,0,0| Number of FF evals: 1513
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.tagName(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: Line 150: 682,0,0| Number of FF evals: 398
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.getElementsByIndexGreaterThan(I)Lorg/jsoup/select/Elements;: Line 950: 35,0,0| Number of FF evals: 46
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.tagName(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: Line 149: 682,0,0| Number of FF evals: 398
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.previousElementSibling()Lorg/jsoup/nodes/Element;: I28 Branch 31 IFLE L716 - false: 120,0,0| Number of FF evals: 746
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.getElementById(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: I17 Branch 39 IFLE L804 - false: 8498,7978,0| Number of FF evals: 36771
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.hasClass(Ljava/lang/String;)Z: I110 Branch 72 IFEQ L1313 - true: 6064,5252,213| Number of FF evals: 20117
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.nextElementSiblings(Z)Lorg/jsoup/select/Elements;: I24 Branch 33 IFEQ L736 - true: 334,0,0| Number of FF evals: 1764
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.hasClass(Ljava/lang/String;)Z: I73 Branch 69 IF_ICMPNE L1298 - false: 130,0,0| Number of FF evals: 815
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.cssSelector()Ljava/lang/String;: I83 Branch 24 IF_ICMPLE L653 - false: 2999,2782,0| Number of FF evals: 15966
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.getElementById(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: I17 Branch 39 IFLE L804 - true: 211,0,0| Number of FF evals: 1613
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.hasClass(Ljava/lang/String;)Z: I23 Branch 64 IF_ICMPGE L1282 - true: 357,30,0| Number of FF evals: 3438
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element$1.tail(Lorg/jsoup/nodes/Node;I)V: I4 Branch 111 IFEQ L1073 - true: 60,0,0| Number of FF evals: 3109
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.hasClass(Ljava/lang/String;)Z: I23 Branch 64 IF_ICMPGE L1282 - false: 408,81,0| Number of FF evals: 2489
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.indexInList(Lorg/jsoup/nodes/Element;Ljava/util/List;)I: I12 Branch 37 IF_ICMPGE L770 - true: 27,0,0| Number of FF evals: 936
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.textNodes()Ljava/util/List;: Line 322: 402,0,0| Number of FF evals: 265
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.outerHtmlTail(Ljava/lang/Appendable;ILorg/jsoup/nodes/Document$OutputSettings;)V: I15 Branch 93 IFNE L1416 - true: 274,0,0| Number of FF evals: 1432
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.textNodes()Ljava/util/List;: Line 323: 402,0,0| Number of FF evals: 265
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.cssSelector()Ljava/lang/String;: I83 Branch 24 IF_ICMPLE L653 - true: 37,0,0| Number of FF evals: 553
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.textNodes()Ljava/util/List;: Line 327: 402,0,0| Number of FF evals: 265
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.html()Ljava/lang/String;: I20 Branch 102 IFEQ L1436 - true: 4115,3513,0| Number of FF evals: 14011
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.addClass(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: root-Branch: 117,0,0| Number of FF evals: 2985
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.addClass(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: Line 1332: 117,0,0| Number of FF evals: 128
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.addClass(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: Line 1329: 117,0,0| Number of FF evals: 128
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.classNames(Ljava/util/Set;)Lorg/jsoup/nodes/Element;: I14 Branch 62 IFEQ L1263 - true: 18,0,0| Number of FF evals: 4323
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.addClass(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: Line 1328: 117,0,0| Number of FF evals: 128
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.preserveWhitespace(Lorg/jsoup/nodes/Node;)Z: I19 Branch 48 IFEQ L1157 - false: 1335,392,0| Number of FF evals: 2304
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.addClass(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: Line 1330: 117,0,0| Number of FF evals: 128
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.addClass(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: Line 1326: 117,0,0| Number of FF evals: 128
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.<init>(Ljava/lang/String;)V: Line 53: 11428,10662,0| Number of FF evals: 36771
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.previousElementSiblings()Lorg/jsoup/select/Elements;: Line 728: 591,0,0| Number of FF evals: 344
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.getElementsByAttribute(Ljava/lang/String;)Lorg/jsoup/select/Elements;: root-Branch: 779,0,0| Number of FF evals: 670
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.textNodes()Ljava/util/List;: I24 Branch 11 IFEQ L324 - false: 286,0,0| Number of FF evals: 422
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.toggleClass(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: I14 Branch 74 IFLE L1359 - true: 1903,0,0| Number of FF evals: 3202
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.getElementsByAttributeValueEnding(Ljava/lang/String;Ljava/lang/String;)Lorg/jsoup/select/Elements;: Line 894: 1049,0,0| Number of FF evals: 536
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.toggleClass(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: I14 Branch 74 IFLE L1359 - false: 13303,11000,0| Number of FF evals: 27560
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.cssSelector()Ljava/lang/String;: I61 Branch 23 IFEQ L649 - false: 102,0,0| Number of FF evals: 597
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.data()Ljava/lang/String;: I13 Branch 56 IFEQ L1212 - false: 82,0,0| Number of FF evals: 1933
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.cssSelector()Ljava/lang/String;: I61 Branch 23 IFEQ L649 - true: 139,0,0| Number of FF evals: 620
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.appendNormalisedText(Ljava/lang/StringBuilder;Lorg/jsoup/nodes/TextNode;)V: I13 Branch 44 IFEQ L1140 - false: 366,0,0| Number of FF evals: 760
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.getElementsByAttributeValueStarting(Ljava/lang/String;Ljava/lang/String;)Lorg/jsoup/select/Elements;: root-Branch: 402,0,0| Number of FF evals: 526
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.getElementsByAttributeValueStarting(Ljava/lang/String;Ljava/lang/String;)Lorg/jsoup/select/Elements;: Line 883: 402,0,0| Number of FF evals: 266
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.firstElementSibling()Lorg/jsoup/nodes/Element;: I11 Branch 34 IF_ICMPLE L746 - true: 511,0,0| Number of FF evals: 631
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.firstElementSibling()Lorg/jsoup/nodes/Element;: I11 Branch 34 IF_ICMPLE L746 - false: 452,0,0| Number of FF evals: 470
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.hasClass(Ljava/lang/String;)Z: I20 Branch 63 IFEQ L1282 - false: 335,45,0| Number of FF evals: 3485
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.shallowClone()Lorg/jsoup/nodes/Element;: Line 1468: 402,0,0| Number of FF evals: 224
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.lastElementSibling()Lorg/jsoup/nodes/Element;: I11 Branch 36 IF_ICMPLE L765 - false: 96,0,0| Number of FF evals: 238
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.textNodes()Ljava/util/List;: I15 Branch 10 IFEQ L323 - false: 402,0,0| Number of FF evals: 452
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.lastElementSibling()Lorg/jsoup/nodes/Element;: I11 Branch 36 IF_ICMPLE L765 - true: 86,0,0| Number of FF evals: 155
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.preserveWhitespace(Lorg/jsoup/nodes/Node;)Z: I36 Branch 49 IF_ICMPGE L1161 - true: 394,139,0| Number of FF evals: 3236
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.toggleClass(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: I20 Branch 75 IFEQ L1359 - true: 1903,0,0| Number of FF evals: 3203
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.toggleClass(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: I20 Branch 75 IFEQ L1359 - false: 14347,12044,0| Number of FF evals: 27560
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.getElementsContainingOwnText(Ljava/lang/String;)Lorg/jsoup/select/Elements;: Line 981: 117,0,0| Number of FF evals: 127
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.getElementsByAttributeValueEnding(Ljava/lang/String;Ljava/lang/String;)Lorg/jsoup/select/Elements;: root-Branch: 1049,0,0| Number of FF evals: 854
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.hasClass(Ljava/lang/String;)Z: I81 Branch 70 IFLE L1298 - true: 130,0,0| Number of FF evals: 810
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.insertChildren(I[Lorg/jsoup/nodes/Node;)Lorg/jsoup/nodes/Element;: I23 Branch 18 IFLT L478 - true: 1256,0,0| Number of FF evals: 827
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.insertChildren(ILjava/util/Collection;)Lorg/jsoup/nodes/Element;: I23 Branch 15 IFLT L457 - true: 3,0,0| Number of FF evals: 133
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.cssSelector()Ljava/lang/String;: I5 Branch 20 IFLE L639 - false: 14170,13551,955| Number of FF evals: 36771
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.nextElementSiblings()Lorg/jsoup/select/Elements;: root-Branch: 35,0,0| Number of FF evals: 750
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.appendNormalisedText(Ljava/lang/StringBuilder;Lorg/jsoup/nodes/TextNode;)V: I10 Branch 43 IFNE L1140 - true: 1213,408,0| Number of FF evals: 2199
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.hasClass(Ljava/lang/String;)Z: I81 Branch 70 IFLE L1298 - false: 670,0,0| Number of FF evals: 2548
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.tagName(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: root-Branch: 682,0,0| Number of FF evals: 627
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.dataNodes()Ljava/util/List;: I24 Branch 13 IFEQ L342 - false: 21389,20634,0| Number of FF evals: 36776
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element$1.tail(Lorg/jsoup/nodes/Node;I)V: I22 Branch 114 IFNE L1075 - false: 379,0,0| Number of FF evals: 1045
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.data()Ljava/lang/String;: I41 Branch 58 IFEQ L1216 - false: 13001,12594,0| Number of FF evals: 36467
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.outerHtmlHead(Ljava/lang/Appendable;ILorg/jsoup/nodes/Document$OutputSettings;)V: I16 Branch 81 IFNE L1393 - false: 1506,1346,182| Number of FF evals: 12000
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element$1.tail(Lorg/jsoup/nodes/Node;I)V: I22 Branch 114 IFNE L1075 - true: 547,48,0| Number of FF evals: 1854
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.cssSelector()Ljava/lang/String;: I44 Branch 21 IFLE L646 - false: 500,0,0| Number of FF evals: 1103
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.outerHtmlHead(Ljava/lang/Appendable;ILorg/jsoup/nodes/Document$OutputSettings;)V: I91 Branch 90 IFEQ L1406 - true: 5778,5631,2031| Number of FF evals: 36296
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.getElementsByAttributeValueMatching(Ljava/lang/String;Ljava/lang/String;)Lorg/jsoup/select/Elements;: Line 929: 257,0,0| Number of FF evals: 1019
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.is(Ljava/lang/String;)Z: root-Branch: 117,0,0| Number of FF evals: 335
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.getElementsByAttributeValueMatching(Ljava/lang/String;Ljava/lang/String;)Lorg/jsoup/select/Elements;: Line 930: 257,0,0| Number of FF evals: 1019
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.insertChildren(ILjava/util/Collection;)Lorg/jsoup/nodes/Element;: Line 460: 8,0,0| Number of FF evals: 114
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.insertChildren(ILjava/util/Collection;)Lorg/jsoup/nodes/Element;: Line 459: 8,0,0| Number of FF evals: 114
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.insertChildren(ILjava/util/Collection;)Lorg/jsoup/nodes/Element;: Line 462: 8,0,0| Number of FF evals: 114
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.insertChildren(ILjava/util/Collection;)Lorg/jsoup/nodes/Element;: Line 461: 8,0,0| Number of FF evals: 114
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.hasClass(Ljava/lang/String;)Z: I62 Branch 67 IFEQ L1295 - false: 5015,4203,119| Number of FF evals: 17861
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.ownText(Ljava/lang/StringBuilder;)V: I35 Branch 42 IFEQ L1131 - true: 69,0,0| Number of FF evals: 216
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.outerHtmlHead(Ljava/lang/Appendable;ILorg/jsoup/nodes/Document$OutputSettings;)V: I8 Branch 79 IFNE L1393 - false: 274,0,0| Number of FF evals: 1650
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.before(Lorg/jsoup/nodes/Node;)Lorg/jsoup/nodes/Element;: root-Branch: 35,0,0| Number of FF evals: 268
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.val(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: I6 Branch 77 IFLE L1385 - false: 489,32,0| Number of FF evals: 1656
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.shallowClone()Lorg/jsoup/nodes/Element;: root-Branch: 402,0,0| Number of FF evals: 473
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.nextElementSiblings(Z)Lorg/jsoup/select/Elements;: Line 733: 35,0,0| Number of FF evals: 66
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.nextElementSiblings(Z)Lorg/jsoup/select/Elements;: Line 732: 35,0,0| Number of FF evals: 66
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.previousElementSibling()Lorg/jsoup/nodes/Element;: Line 712: 591,0,0| Number of FF evals: 351
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.prepend(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: Line 559: 35,0,0| Number of FF evals: 46
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.toggleClass(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: Line 1365: 1903,0,0| Number of FF evals: 960
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.toggleClass(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: Line 1363: 1903,0,0| Number of FF evals: 960
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.hasText()Z: I9 Branch 51 IFEQ L1186 - false: 211,0,0| Number of FF evals: 1398
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.toggleClass(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: Line 1358: 1903,0,0| Number of FF evals: 960
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.prepend(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: Line 556: 35,0,0| Number of FF evals: 46
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.toggleClass(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: Line 1359: 1903,0,0| Number of FF evals: 960
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.prepend(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: Line 557: 35,0,0| Number of FF evals: 46
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.prependText(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: root-Branch: 211,0,0| Number of FF evals: 457
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.prepend(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: Line 558: 35,0,0| Number of FF evals: 46
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.hasText()Z: I9 Branch 51 IFEQ L1186 - true: 211,0,0| Number of FF evals: 1519
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.hasClass(Ljava/lang/String;)Z: I32 Branch 65 IF_ICMPNE L1287 - false: 3831,3226,0| Number of FF evals: 16585
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element$1.head(Lorg/jsoup/nodes/Node;I)V: I22 Branch 106 IFEQ L1062 - true: 8999,8008,0| Number of FF evals: 14946
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.outerHtmlHead(Ljava/lang/Appendable;ILorg/jsoup/nodes/Document$OutputSettings;)V: I81 Branch 88 IFEQ L1405 - false: 274,0,0| Number of FF evals: 1431
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.previousElementSiblings()Lorg/jsoup/select/Elements;: root-Branch: 591,0,0| Number of FF evals: 2789
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.insertChildren(I[Lorg/jsoup/nodes/Node;)Lorg/jsoup/nodes/Element;: I23 Branch 18 IFLT L478 - false: 1276,0,0| Number of FF evals: 1004
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.nextElementSiblings(Z)Lorg/jsoup/select/Elements;: I10 Branch 32 IFNONNULL L733 - true: 35,0,0| Number of FF evals: 1106
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.outerHtmlTail(Ljava/lang/Appendable;ILorg/jsoup/nodes/Document$OutputSettings;)V: I20 Branch 94 IFEQ L1417 - true: 1882,1184,12| Number of FF evals: 4465
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.attr(Ljava/lang/String;Z)Lorg/jsoup/nodes/Element;: root-Branch: 117,0,0| Number of FF evals: 370
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.nextElementSiblings(Z)Lorg/jsoup/select/Elements;: I10 Branch 32 IFNONNULL L733 - false: 35,0,0| Number of FF evals: 2072
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.prependText(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: Line 533: 211,0,0| Number of FF evals: 166
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.prependText(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: Line 532: 211,0,0| Number of FF evals: 166
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.outerHtmlTail(Ljava/lang/Appendable;ILorg/jsoup/nodes/Document$OutputSettings;)V: I34 Branch 97 IFNE L1417 - false: 2446,1748,1| Number of FF evals: 7606
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.getElementById(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: Line 804: 211,0,0| Number of FF evals: 146
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.getElementById(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: Line 803: 211,0,0| Number of FF evals: 146
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.prependText(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: Line 531: 211,0,0| Number of FF evals: 166
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.toggleClass(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: Line 1356: 1903,0,0| Number of FF evals: 960
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.getElementById(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: Line 801: 211,0,0| Number of FF evals: 146
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.prependText(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: Line 530: 211,0,0| Number of FF evals: 166
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.siblingElements()Lorg/jsoup/select/Elements;: Line 666: 117,0,0| Number of FF evals: 127
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.textNodes()Ljava/util/List;: I15 Branch 10 IFEQ L323 - true: 402,0,0| Number of FF evals: 534
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.appendWhitespaceIfBr(Lorg/jsoup/nodes/Element;Ljava/lang/StringBuilder;)V: I7 Branch 45 IFLE L1147 - false: 331,0,0| Number of FF evals: 905
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.hasText()Z: Line 1186: 211,0,0| Number of FF evals: 153
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element$1.head(Lorg/jsoup/nodes/Node;I)V: I4 Branch 105 IFEQ L1059 - false: 60,0,0| Number of FF evals: 3108
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.cssSelector()Ljava/lang/String;: I57 Branch 22 IFNULL L649 - false: 102,0,0| Number of FF evals: 601
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.firstElementSibling()Lorg/jsoup/nodes/Element;: Line 745: 307,0,0| Number of FF evals: 199
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.firstElementSibling()Lorg/jsoup/nodes/Element;: Line 746: 452,0,0| Number of FF evals: 446
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.getElementsByIndexGreaterThan(I)Lorg/jsoup/select/Elements;: root-Branch: 35,0,0| Number of FF evals: 294
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element$1.head(Lorg/jsoup/nodes/Node;I)V: I33 Branch 107 IFLE L1064 - false: 236,0,0| Number of FF evals: 1673
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.child(I)Lorg/jsoup/nodes/Element;: root-Branch: 211,0,0| Number of FF evals: 496
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.getElementsMatchingText(Ljava/lang/String;)Lorg/jsoup/select/Elements;: Line 1005: 132,0,0| Number of FF evals: 284
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.getElementsMatchingText(Ljava/lang/String;)Lorg/jsoup/select/Elements;: Line 1004: 132,0,0| Number of FF evals: 284
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.nextElementSibling()Lorg/jsoup/nodes/Element;: I4 Branch 28 IFNONNULL L687 - true: 34,0,0| Number of FF evals: 335
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.hasText()Z: I39 Branch 54 IFEQ L1191 - true: 6457,5715,11| Number of FF evals: 15760
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.childElementsList()Ljava/util/List;: I12 Branch 7 IFNONNULL L282 - false: 3580,2575,30| Number of FF evals: 9100
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.data()Ljava/lang/String;: I22 Branch 57 IFEQ L1213 - false: 8301,7878,0| Number of FF evals: 24034
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.attr(Ljava/lang/String;Z)Lorg/jsoup/nodes/Element;: Line 204: 117,0,0| Number of FF evals: 125
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.nextElementSiblings()Lorg/jsoup/select/Elements;: Line 703: 35,0,0| Number of FF evals: 66
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.data()Ljava/lang/String;: I22 Branch 57 IFEQ L1213 - true: 104,0,0| Number of FF evals: 1944
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.attr(Ljava/lang/String;Z)Lorg/jsoup/nodes/Element;: Line 205: 117,0,0| Number of FF evals: 125
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.outerHtmlHead(Ljava/lang/Appendable;ILorg/jsoup/nodes/Document$OutputSettings;)V: I11 Branch 80 IFNULL L1393 - true: 2655,2289,662| Number of FF evals: 16377
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.insertChildren(ILjava/util/Collection;)Lorg/jsoup/nodes/Element;: I13 Branch 14 IFGE L456 - false: 3,0,0| Number of FF evals: 139
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.insertChildren(I[Lorg/jsoup/nodes/Node;)Lorg/jsoup/nodes/Element;: Line 480: 1281,0,0| Number of FF evals: 854
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.before(Lorg/jsoup/nodes/Node;)Lorg/jsoup/nodes/Element;: Line 582: 35,0,0| Number of FF evals: 76
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.insertChildren(I[Lorg/jsoup/nodes/Node;)Lorg/jsoup/nodes/Element;: Line 481: 1375,0,0| Number of FF evals: 1192
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.outerHtmlTail(Ljava/lang/Appendable;ILorg/jsoup/nodes/Document$OutputSettings;)V: I42 Branch 99 IF_ICMPGT L1417 - true: 4662,4184,7| Number of FF evals: 29633
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.getElementsMatchingOwnText(Ljava/lang/String;)Lorg/jsoup/select/Elements;: Line 1029: 35,0,0| Number of FF evals: 47
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.insertChildren(I[Lorg/jsoup/nodes/Node;)Lorg/jsoup/nodes/Element;: Line 475: 1145,0,0| Number of FF evals: 619
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.outerHtmlTail(Ljava/lang/Appendable;ILorg/jsoup/nodes/Document$OutputSettings;)V: I42 Branch 99 IF_ICMPGT L1417 - false: 4662,4184,7| Number of FF evals: 29633
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.insertChildren(I[Lorg/jsoup/nodes/Node;)Lorg/jsoup/nodes/Element;: Line 476: 1256,0,0| Number of FF evals: 758
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.prepend(Ljava/lang/String;)Lorg/jsoup/nodes/Element;: root-Branch: 35,0,0| Number of FF evals: 273
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.outerHtmlHead(Ljava/lang/Appendable;ILorg/jsoup/nodes/Document$OutputSettings;)V: I11 Branch 80 IFNULL L1393 - false: 274,0,0| Number of FF evals: 1648
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.insertChildren(I[Lorg/jsoup/nodes/Node;)Lorg/jsoup/nodes/Element;: Line 477: 1256,0,0| Number of FF evals: 758
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.val()Ljava/lang/String;: I6 Branch 76 IFLE L1373 - false: 1073,129,0| Number of FF evals: 2192
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.insertChildren(I[Lorg/jsoup/nodes/Node;)Lorg/jsoup/nodes/Element;: Line 478: 1256,0,0| Number of FF evals: 758
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.val()Ljava/lang/String;: Line 1373: 591,0,0| Number of FF evals: 354
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.nextElementSibling()Lorg/jsoup/nodes/Element;: I32 Branch 29 IF_ICMPLE L691 - false: 216,0,0| Number of FF evals: 463
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.getElementsMatchingOwnText(Ljava/lang/String;)Lorg/jsoup/select/Elements;: Line 1030: 230,0,0| Number of FF evals: 372
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.getElementsMatchingOwnText(Ljava/lang/String;)Lorg/jsoup/select/Elements;: Line 1031: 230,0,0| Number of FF evals: 372
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.getElementsMatchingOwnText(Ljava/lang/String;)Lorg/jsoup/select/Elements;: Line 1032: 35,0,0| Number of FF evals: 47
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.getElementsMatchingOwnText(Ljava/lang/String;)Lorg/jsoup/select/Elements;: Line 1033: 35,0,0| Number of FF evals: 47
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.nextElementSibling()Lorg/jsoup/nodes/Element;: I32 Branch 29 IF_ICMPLE L691 - true: 48,0,0| Number of FF evals: 341
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.appendWhitespaceIfBr(Lorg/jsoup/nodes/Element;Ljava/lang/StringBuilder;)V: I10 Branch 46 IFNE L1147 - false: 345,0,0| Number of FF evals: 912
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.appendWhitespaceIfBr(Lorg/jsoup/nodes/Element;Ljava/lang/StringBuilder;)V: I10 Branch 46 IFNE L1147 - true: 1076,509,0| Number of FF evals: 4372
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.insertChildren(ILjava/util/Collection;)Lorg/jsoup/nodes/Element;: I26 Branch 16 IF_ICMPGT L457 - false: 8,0,0| Number of FF evals: 149
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.outerHtmlTail(Ljava/lang/Appendable;ILorg/jsoup/nodes/Document$OutputSettings;)V: I37 Branch 98 IFEQ L1417 - true: 2446,1748,1| Number of FF evals: 7606
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.outerHtmlTail(Ljava/lang/Appendable;ILorg/jsoup/nodes/Document$OutputSettings;)V: I37 Branch 98 IFEQ L1417 - false: 6411,5713,8| Number of FF evals: 36783
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.appendTo(Lorg/jsoup/nodes/Element;)Lorg/jsoup/nodes/Element;: root-Branch: 117,0,0| Number of FF evals: 439
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.preserveWhitespace(Lorg/jsoup/nodes/Node;)Z: I4 Branch 47 IFEQ L1153 - true: 112,0,0| Number of FF evals: 326
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.val()Ljava/lang/String;: I6 Branch 76 IFLE L1373 - true: 591,0,0| Number of FF evals: 2873
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.previousElementSibling()Lorg/jsoup/nodes/Element;: I4 Branch 30 IFNONNULL L712 - true: 706,0,0| Number of FF evals: 1787
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.data()Ljava/lang/String;: I83 Branch 60 IFEQ L1223 - false: 2932,2584,0| Number of FF evals: 10903
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.outerHtmlHead(Ljava/lang/Appendable;ILorg/jsoup/nodes/Document$OutputSettings;)V: I20 Branch 82 IFEQ L1393 - false: 4792,4632,192| Number of FF evals: 36296
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.previousElementSibling()Lorg/jsoup/nodes/Element;: I4 Branch 30 IFNONNULL L712 - false: 591,0,0| Number of FF evals: 576
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element$1.head(Lorg/jsoup/nodes/Node;I)V: I36 Branch 108 IFNE L1064 - false: 257,0,0| Number of FF evals: 1691
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.insertChildren(I[Lorg/jsoup/nodes/Node;)Lorg/jsoup/nodes/Element;: I26 Branch 19 IF_ICMPGT L478 - true: 20,0,0| Number of FF evals: 334
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.hasClass(Ljava/lang/String;)Z: I115 Branch 73 IF_ICMPNE L1313 - false: 4222,3617,0| Number of FF evals: 17970
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.lastElementSibling()Lorg/jsoup/nodes/Element;: Line 765: 86,0,0| Number of FF evals: 112
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element$1.head(Lorg/jsoup/nodes/Node;I)V: I36 Branch 108 IFNE L1064 - true: 236,0,0| Number of FF evals: 437
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.outerHtmlHead(Ljava/lang/Appendable;ILorg/jsoup/nodes/Document$OutputSettings;)V: I20 Branch 82 IFEQ L1393 - true: 1506,1346,182| Number of FF evals: 12000
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.lastElementSibling()Lorg/jsoup/nodes/Element;: Line 764: 35,0,0| Number of FF evals: 53
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.getElementsByAttribute(Ljava/lang/String;)Lorg/jsoup/select/Elements;: Line 834: 779,0,0| Number of FF evals: 410
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.getElementsByAttribute(Ljava/lang/String;)Lorg/jsoup/select/Elements;: Line 835: 779,0,0| Number of FF evals: 410
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.classNames(Ljava/util/Set;)Lorg/jsoup/nodes/Element;: I8 Branch 61 IFLE L1263 - true: 18,0,0| Number of FF evals: 4323
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.hasClass(Ljava/lang/String;)Z: I66 Branch 68 IFEQ L1296 - false: 5015,4203,119| Number of FF evals: 17861
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.insertChildren(I[Lorg/jsoup/nodes/Node;)Lorg/jsoup/nodes/Element;: I13 Branch 17 IFGE L477 - false: 1256,0,0| Number of FF evals: 829
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.outerHtmlHead(Ljava/lang/Appendable;ILorg/jsoup/nodes/Document$OutputSettings;)V: I4 Branch 78 IFEQ L1393 - true: 2583,1953,343| Number of FF evals: 7192
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.child(I)Lorg/jsoup/nodes/Element;: Line 260: 211,0,0| Number of FF evals: 175
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.insertChildren(I[Lorg/jsoup/nodes/Node;)Lorg/jsoup/nodes/Element;: I26 Branch 19 IF_ICMPGT L478 - false: 20,0,0| Number of FF evals: 220
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.childElementsList()Ljava/util/List;: I46 Branch 9 IFEQ L288 - true: 40,0,0| Number of FF evals: 155
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.getElementsByAttribute(Ljava/lang/String;)Lorg/jsoup/select/Elements;: Line 837: 779,0,0| Number of FF evals: 410
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.hasClass(Ljava/lang/String;)Z: I66 Branch 68 IFEQ L1296 - true: 5126,4314,120| Number of FF evals: 17724
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element$1.head(Lorg/jsoup/nodes/Node;I)V: I42 Branch 109 IFLE L1064 - true: 21,0,0| Number of FF evals: 1408
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.insertChildren(I[Lorg/jsoup/nodes/Node;)Lorg/jsoup/nodes/Element;: I13 Branch 17 IFGE L477 - true: 1276,0,0| Number of FF evals: 1001
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.outerHtmlHead(Ljava/lang/Appendable;ILorg/jsoup/nodes/Document$OutputSettings;)V: I87 Branch 89 IF_ACMPNE L1406 - true: 1802,1443,246| Number of FF evals: 13061
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element$1.tail(Lorg/jsoup/nodes/Node;I)V: I18 Branch 113 IFEQ L1075 - false: 379,0,0| Number of FF evals: 1044
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element$1.head(Lorg/jsoup/nodes/Node;I)V: I42 Branch 109 IFLE L1064 - false: 1663,1239,0| Number of FF evals: 5508
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.outerHtmlHead(Ljava/lang/Appendable;ILorg/jsoup/nodes/Document$OutputSettings;)V: I87 Branch 89 IF_ACMPNE L1406 - false: 274,0,0| Number of FF evals: 1429
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.is(Ljava/lang/String;)Z: Line 389: 117,0,0| Number of FF evals: 100
Number of times BBC is called, activated, and useful for org.jsoup.nodes.Element.hasText()Z: I28 Branch 53 IFNE L1189 - true: 9649,8932,1| Number of FF evals: 23491
* Search finished after 603s and 778 generations, 288345 statements, best individual has fitness: 443.0
* Minimizing test suite
[MASTER] 22:26:59.889 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 98%
* Total number of goals: 410
* Number of covered goals: 403
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 96%
* Total number of goals: 308
* Number of covered goals: 295
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 132
* Number of covered goals: 132
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 96%
* Total number of goals: 843
* Number of covered goals: 806
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 62%
* Total number of goals: 695
* Number of covered goals: 430
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 99%
* Total number of goals: 102
* Number of covered goals: 101
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 99%
* Total number of goals: 102
* Number of covered goals: 101
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 93%
* Total number of goals: 308
* Number of covered goals: 285
* Generated 383 tests with total length 5977
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 22:27:45.670 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6984166666666667% of time used, but only 38/383 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 18%
* Compiling and checking tests
[MASTER] 22:28:13.879 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_205_1628288893836/org/jsoup/nodes/Element_205_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_205_1628288893836/org/jsoup/nodes/Element_205_tmp__ESTest_scaffolding.java]]
[MASTER] 22:28:13.880 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Jsoup-87/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Jsoup-87/target/classes
[MASTER] 22:28:13.880 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Jsoup-87/target/classes
[MASTER] 22:28:13.882 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Integer>>: 92
[MASTER] 22:28:13.882 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_205_1628288893836/org/jsoup/nodes/Element_205_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 22:28:13.882 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 22:28:13.883 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_205_1628288893836/org/jsoup/nodes/Element_205_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 22:28:13 GMT 2021
4:  */
5: 
6: package org.jsoup.nodes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.Comparator;
12: import java.util.List;
13: import java.util.Map;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.evosuite.runtime.ViolatedAssumptionAnswer;
17: import org.jsoup.nodes.Attribute;
18: import org.jsoup.nodes.Attributes;
19: import org.jsoup.nodes.DataNode;
20: import org.jsoup.nodes.Document;
21: import org.jsoup.nodes.Element;
22: import org.jsoup.select.Evaluator;
23: import org.junit.runner.RunWith;
24: 
25: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
26: public class Element_205_tmp__ESTest extends Element_205_tmp__ESTest_scaffolding {
27: 
28:   @Test(timeout = 4000)
29:   public void test0()  throws Throwable  {
30:       Document document0 = Document.createShell("Unexpected token type: ");
31:       assertNotNull(document0);
32:       assertFalse(document0.isBlock());
33:       assertEquals("#document", document0.nodeName());
34:       assertEquals(0, document0.siblingIndex());
35:       assertEquals("Unexpected token type: ", document0.location());
36:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
37:       assertEquals("#root", document0.tagName());
38:       assertEquals(1, document0.childNodeSize());
39:       assertFalse(document0.updateMetaCharsetElement());
40:       assertEquals("Unexpected token type: ", document0.baseUri());
41:       assertFalse(document0.hasParent());
42:       
43:       Element element0 = document0.prependElement("br");
44:       assertNotNull(element0);
45:       assertFalse(document0.isBlock());
46:       assertEquals("#document", document0.nodeName());
47:       assertEquals(0, document0.siblingIndex());
48:       assertEquals("Unexpected token type: ", document0.location());
49:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
50:       assertEquals("#root", document0.tagName());
51:       assertEquals(2, document0.childNodeSize());
52:       assertFalse(document0.updateMetaCharsetElement());
53:       assertEquals("Unexpected token type: ", document0.baseUri());
54:       assertFalse(document0.hasParent());
55:       assertEquals("br", element0.nodeName());
56:       assertEquals("Unexpected token type: ", element0.baseUri());
57:       assertEquals("br", element0.tagName());
58:       assertFalse(element0.isBlock());
59:       assertEquals(0, element0.siblingIndex());
60:       assertEquals(0, element0.childNodeSize());
61:       assertTrue(element0.hasParent());
62:       
63:       Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
64:       assertNotNull(evaluator_IsOnlyChild0);
65:       assertEquals(":only-child", evaluator_IsOnlyChild0.toString());
66:       
67:       Attributes attributes0 = new Attributes();
68:       assertNotNull(attributes0);
69:       assertEquals(0, attributes0.size());
70:       
71:       List<DataNode> list0 = document0.dataNodes();
72:       assertNotNull(list0);
73:       assertFalse(document0.isBlock());
74:       assertEquals("#document", document0.nodeName());
75:       assertEquals(0, document0.siblingIndex());
76:       assertEquals("Unexpected token type: ", document0.location());
77:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
78:       assertEquals("#root", document0.tagName());
79:       assertEquals(2, document0.childNodeSize());
80:       assertFalse(document0.updateMetaCharsetElement());
81:       assertEquals("Unexpected token type: ", document0.baseUri());
82:       assertFalse(document0.hasParent());
83:       assertTrue(list0.isEmpty());
84:       assertEquals(0, list0.size());
85:       
86:       Attribute attribute0 = Attribute.createFromEncoded("_3pk#+Gvo#mWlL6w", "_3pk#+Gvo#mWlL6w");
87:       assertNotNull(attribute0);
88:       assertEquals("_3pk#+Gvo#mWlL6w", attribute0.getValue());
89:       assertEquals("_3pk#+Gvo#mWlL6w", attribute0.getKey());
90:       
91:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
92:       Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
93:       assertNotNull(comparator1);
94:       
95:       Attributes attributes1 = attributes0.put(attribute0);
96:       assertNotNull(attributes1);
97:       assertEquals(1, attributes0.size());
98:       assertEquals("_3pk#+Gvo#mWlL6w", attribute0.getValue());
99:       assertEquals("_3pk#+Gvo#mWlL6w", attribute0.getKey());
100:       assertEquals(1, attributes1.size());
101:       assertSame(attributes0, attributes1);
102:       assertSame(attributes1, attributes0);
103:       
104:       Element element1 = document0.head();
105:       assertNotNull(element1);
106:       assertFalse(element1.equals((Object)element0));
107:       assertFalse(document0.isBlock());
108:       assertEquals("#document", document0.nodeName());
109:       assertEquals(0, document0.siblingIndex());
110:       assertEquals("Unexpected token type: ", document0.location());
111:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
112:       assertEquals("#root", document0.tagName());
113:       assertEquals(2, document0.childNodeSize());
114:       assertFalse(document0.updateMetaCharsetElement());
115:       assertEquals("Unexpected token type: ", document0.baseUri());
116:       assertFalse(document0.hasParent());
117:       assertTrue(element1.hasParent());
118:       assertEquals(0, element1.siblingIndex());
119:       assertEquals("head", element1.tagName());
120:       assertEquals(0, element1.childNodeSize());
121:       assertEquals("head", element1.nodeName());
122:       assertEquals("Unexpected token type: ", element1.baseUri());
123:       assertTrue(element1.isBlock());
124:       assertNotSame(element1, element0);
125:       
126:       boolean boolean0 = document0.is((Evaluator) evaluator_IsOnlyChild0);
127:       assertFalse(boolean0);
128:       assertFalse(document0.isBlock());
129:       assertEquals("#document", document0.nodeName());
130:       assertEquals(0, document0.siblingIndex());
131:       assertEquals("Unexpected token type: ", document0.location());
132:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
133:       assertEquals("#root", document0.tagName());
134:       assertEquals(2, document0.childNodeSize());
135:       assertFalse(document0.updateMetaCharsetElement());
136:       assertEquals("Unexpected token type: ", document0.baseUri());
137:       assertFalse(document0.hasParent());
138:       assertEquals(":only-child", evaluator_IsOnlyChild0.toString());
139:       
140:       Document document1 = document0.clone();
141:       assertNotNull(document1);
142:       assertFalse(document1.equals((Object)document0));
143:       assertFalse(document0.isBlock());
144:       assertEquals("#document", document0.nodeName());
145:       assertEquals(0, document0.siblingIndex());
146:       assertEquals("Unexpected token type: ", document0.location());
147:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
148:       assertEquals("#root", document0.tagName());
149:       assertEquals(2, document0.childNodeSize());
150:       assertFalse(document0.updateMetaCharsetElement());
151:       assertEquals("Unexpected token type: ", document0.baseUri());
152:       assertFalse(document0.hasParent());
153:       assertEquals(0, document1.siblingIndex());
154:       assertFalse(document1.updateMetaCharsetElement());
155:       assertFalse(document1.isBlock());
156:       assertEquals("Unexpected token type: ", document1.location());
157:       assertEquals("#root", document1.tagName());
158:       assertEquals("#document", document1.nodeName());
159:       assertEquals(2, document1.childNodeSize());
160:       assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
161:       assertFalse(document1.hasParent());
162:       assertEquals("Unexpected token type: ", document1.baseUri());
163:       assertNotSame(document0, document1);
164:       assertNotSame(document1, document0);
165:       
166:       String string0 = document1.wholeText();
167:       assertNotNull(string0);
168:       assertEquals("", string0);
169:       assertFalse(document0.equals((Object)document1));
170:       assertFalse(document1.equals((Object)document0));
171:       assertFalse(document0.isBlock());
172:       assertEquals("#document", document0.nodeName());
173:       assertEquals(0, document0.siblingIndex());
174:       assertEquals("Unexpected token type: ", document0.location());
175:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
176:       assertEquals("#root", document0.tagName());
177:       assertEquals(2, document0.childNodeSize());
178:       assertFalse(document0.updateMetaCharsetElement());
179:       assertEquals("Unexpected token type: ", document0.baseUri());
180:       assertFalse(document0.hasParent());
181:       assertEquals(0, document1.siblingIndex());
182:       assertFalse(document1.updateMetaCharsetElement());
183:       assertFalse(document1.isBlock());
184:       assertEquals("Unexpected token type: ", document1.location());
185:       assertEquals("#root", document1.tagName());
186:       assertEquals("#document", document1.nodeName());
187:       assertEquals(2, document1.childNodeSize());
188:       assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
189:       assertFalse(document1.hasParent());
190:       assertEquals("Unexpected token type: ", document1.baseUri());
191:       assertNotSame(document0, document1);
192:       assertNotSame(document1, document0);
193:       
194:       String string1 = document1.className();
195:       assertNotNull(string1);
196:       assertEquals("", string1);
197:       assertFalse(document0.equals((Object)document1));
198:       assertFalse(document1.equals((Object)document0));
199:       assertTrue(string1.equals((Object)string0));
200:       assertFalse(document0.isBlock());
201:       assertEquals("#document", document0.nodeName());
202:       assertEquals(0, document0.siblingIndex());
203:       assertEquals("Unexpected token type: ", document0.location());
204:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
205:       assertEquals("#root", document0.tagName());
206:       assertEquals(2, document0.childNodeSize());
207:       assertFalse(document0.updateMetaCharsetElement());
208:       assertEquals("Unexpected token type: ", document0.baseUri());
209:       assertFalse(document0.hasParent());
210:       assertEquals(0, document1.siblingIndex());
211:       assertFalse(document1.updateMetaCharsetElement());
212:       assertFalse(document1.isBlock());
213:       assertEquals("Unexpected token type: ", document1.location());
214:       assertEquals("#root", document1.tagName());
215:       assertEquals("#document", document1.nodeName());
216:       assertEquals(2, document1.childNodeSize());
217:       assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
218:       assertFalse(document1.hasParent());
219:       assertEquals("Unexpected token type: ", document1.baseUri());
220:       assertNotSame(document0, document1);
221:       assertNotSame(document1, document0);
222:       
223:       String string2 = element1.cssSelector();
224:       assertNotNull(string2);
225:       assertEquals("html > head", string2);
226:       assertFalse(document0.equals((Object)document1));
227:       assertFalse(element1.equals((Object)element0));
228:       assertFalse(string2.equals((Object)string1));
229:       assertFalse(string2.equals((Object)string0));
230:       assertFalse(document0.isBlock());
231:       assertEquals("#document", document0.nodeName());
232:       assertEquals(0, document0.siblingIndex());
233:       assertEquals("Unexpected token type: ", document0.location());
234:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
235:       assertEquals("#root", document0.tagName());
236:       assertEquals(2, document0.childNodeSize());
237:       assertFalse(document0.updateMetaCharsetElement());
238:       assertEquals("Unexpected token type: ", document0.baseUri());
239:       assertFalse(document0.hasParent());
240:       assertTrue(element1.hasParent());
241:       assertEquals(0, element1.siblingIndex());
242:       assertEquals("head", element1.tagName());
243:       assertEquals(0, element1.childNodeSize());
244:       assertEquals("head", element1.nodeName());
245:       assertEquals("Unexpected token type: ", element1.baseUri());
246:       assertTrue(element1.isBlock());
247:       assertNotSame(document0, document1);
248:       assertNotSame(element1, element0);
249:       
250:       Element element2 = document1.selectFirst("html > head");
251:       assertNotNull(element2);
252:       assertFalse(document0.equals((Object)document1));
253:       assertFalse(document1.equals((Object)document0));
254:       assertFalse(element2.equals((Object)element0));
255:       assertFalse(element2.equals((Object)element1));
256:       assertFalse(document0.isBlock());
257:       assertEquals("#document", document0.nodeName());
258:       assertEquals(0, document0.siblingIndex());
259:       assertEquals("Unexpected token type: ", document0.location());
260:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
261:       assertEquals("#root", document0.tagName());
262:       assertEquals(2, document0.childNodeSize());
263:       assertFalse(document0.updateMetaCharsetElement());
264:       assertEquals("Unexpected token type: ", document0.baseUri());
265:       assertFalse(document0.hasParent());
266:       assertEquals(0, document1.siblingIndex());
267:       assertFalse(document1.updateMetaCharsetElement());
268:       assertFalse(document1.isBlock());
269:       assertEquals("Unexpected token type: ", document1.location());
270:       assertEquals("#root", document1.tagName());
271:       assertEquals("#document", document1.nodeName());
272:       assertEquals(2, document1.childNodeSize());
273:       assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
274:       assertFalse(document1.hasParent());
275:       assertEquals("Unexpected token type: ", document1.baseUri());
276:       assertEquals("Unexpected token type: ", element2.baseUri());
277:       assertEquals("head", element2.tagName());
278:       assertTrue(element2.isBlock());
279:       assertEquals("head", element2.nodeName());
280:       assertTrue(element2.hasParent());
281:       assertEquals(0, element2.childNodeSize());
282:       assertEquals(0, element2.siblingIndex());
283:       assertNotSame(document0, document1);
284:       assertNotSame(document1, document0);
285:       assertNotSame(element2, element0);
286:       assertNotSame(element2, element1);
287:   }
288: }
RegularFileObject[/tmp/EvoSuite_205_1628288893836/org/jsoup/nodes/Element_205_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 22:28:13 GMT 2021
5:  */
6: 
7: package org.jsoup.nodes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class Element_205_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.jsoup.nodes.Element"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Element_205_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.jsoup.nodes.Document$QuirksMode",
72:       "org.jsoup.parser.HtmlTreeBuilderState$18",
73:       "org.jsoup.select.StructuralEvaluator$ImmediateParent",
74:       "org.jsoup.parser.HtmlTreeBuilderState$19",
75:       "org.jsoup.parser.HtmlTreeBuilderState$16",
76:       "org.jsoup.helper.ChangeNotifyingArrayList",
77:       "org.jsoup.parser.HtmlTreeBuilderState$17",
78:       "org.jsoup.parser.HtmlTreeBuilderState$14",
79:       "org.jsoup.parser.HtmlTreeBuilderState$15",
80:       "org.jsoup.select.Evaluator$IndexEvaluator",
81:       "org.jsoup.select.Evaluator$IsOnlyOfType",
82:       "org.jsoup.nodes.Entities$CoreCharset",
83:       "org.jsoup.nodes.Element",
84:       "org.jsoup.parser.HtmlTreeBuilderState$12",
85:       "org.jsoup.parser.HtmlTreeBuilderState$13",
86:       "org.jsoup.parser.HtmlTreeBuilderState$10",
87:       "org.jsoup.parser.HtmlTreeBuilderState$11",
88:       "org.jsoup.select.NodeTraversor",
89:       "org.jsoup.select.Evaluator$MatchesOwn",
90:       "org.jsoup.select.CombiningEvaluator$And",
91:       "org.jsoup.parser.Token$EndTag",
92:       "org.jsoup.nodes.Document",
93:       "org.jsoup.Jsoup",
94:       "org.jsoup.parser.HtmlTreeBuilder",
95:       "org.jsoup.nodes.FormElement",
96:       "org.jsoup.select.StructuralEvaluator",
97:       "org.jsoup.select.Evaluator$IndexEquals",
98:       "org.jsoup.select.Selector$SelectorParseException",
99:       "org.jsoup.parser.Token$Tag",
100:       "org.jsoup.nodes.XmlDeclaration",
101:       "org.jsoup.parser.Token$Doctype",
102:       "org.jsoup.select.Evaluator$TagEndsWith",
103:       "org.jsoup.parser.HtmlTreeBuilderState$23",
104:       "org.jsoup.parser.HtmlTreeBuilderState$24",
105:       "org.jsoup.select.Evaluator$Tag",
106:       "org.jsoup.parser.HtmlTreeBuilderState$21",
107:       "org.jsoup.nodes.Document$OutputSettings$Syntax",
108:       "org.jsoup.parser.HtmlTreeBuilderState$22",
109:       "org.jsoup.parser.HtmlTreeBuilderState$20",
110:       "org.jsoup.parser.Token$1",
111:       "org.jsoup.internal.StringUtil",
112:       "org.jsoup.parser.Tokeniser",
113:       "org.jsoup.nodes.Comment",
114:       "org.jsoup.select.Evaluator$IndexGreaterThan",
115:       "org.jsoup.nodes.LeafNode",
116:       "org.jsoup.select.Selector",
117:       "org.jsoup.select.Evaluator$AttributeWithValueEnding",
118:       "org.jsoup.select.Collector$FirstFinder",
119:       "org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling",
120:       "org.jsoup.nodes.Node",
121:       "org.jsoup.parser.HtmlTreeBuilderState",
122:       "org.jsoup.select.Evaluator$AttributeStarting",
123:       "org.jsoup.nodes.DataNode",
124:       "org.jsoup.nodes.Attributes",
125:       "org.jsoup.parser.XmlTreeBuilder",
126:       "org.jsoup.nodes.Document$OutputSettings",
127:       "org.jsoup.select.CombiningEvaluator",
128:       "org.jsoup.select.Evaluator$ContainsData",
129:       "org.jsoup.internal.Normalizer",
130:       "org.jsoup.nodes.Attributes$Dataset$EntrySet",
131:       "org.jsoup.nodes.Attributes$Dataset",
132:       "org.jsoup.helper.Validate",
133:       "org.jsoup.select.Evaluator$CssNthEvaluator",
134:       "org.jsoup.parser.Token$Comment",
135:       "org.jsoup.select.Evaluator$IsFirstOfType",
136:       "org.jsoup.nodes.Element$NodeList",
137:       "org.jsoup.parser.TokeniserState$56",
138:       "org.jsoup.parser.TokeniserState$57",
139:       "org.jsoup.parser.TokeniserState$58",
140:       "org.jsoup.parser.TokeniserState$59",
141:       "org.jsoup.parser.TokeniserState$52",
142:       "org.jsoup.parser.TokeniserState$53",
143:       "org.jsoup.parser.TreeBuilder",
144:       "org.jsoup.parser.TokeniserState$54",
145:       "org.jsoup.parser.TokeniserState$55",
146:       "org.jsoup.nodes.PseudoTextElement",
147:       "org.jsoup.parser.TokeniserState$50",
148:       "org.jsoup.parser.TokeniserState$51",
149:       "org.jsoup.parser.Parser",
150:       "org.jsoup.select.Evaluator$IsEmpty",
151:       "org.jsoup.select.Evaluator$AttributeWithValueMatching",
152:       "org.jsoup.select.Evaluator$IsNthChild",
153:       "org.jsoup.parser.HtmlTreeBuilderState$Constants",
154:       "org.jsoup.select.Evaluator$Class",
155:       "org.jsoup.parser.TokeniserState$67",
156:       "org.jsoup.parser.TokeniserState$63",
157:       "org.jsoup.nodes.Node$OuterHtmlVisitor",
158:       "org.jsoup.parser.TokeniserState$64",
159:       "org.jsoup.parser.TokeniserState$65",
160:       "org.jsoup.parser.Token",
161:       "org.jsoup.parser.TokeniserState$66",
162:       "org.jsoup.parser.TokeniserState$60",
163:       "org.jsoup.select.Evaluator$AttributeKeyPair",
164:       "org.jsoup.parser.TokeniserState$61",
165:       "org.jsoup.parser.TokeniserState$62",
166:       "org.jsoup.select.Evaluator$IsNthLastOfType",
167:       "org.jsoup.parser.Tag",
168:       "org.jsoup.parser.Token$Character",
169:       "org.jsoup.select.Evaluator$IsLastOfType",
170:       "org.jsoup.select.Evaluator$Attribute",
171:       "org.jsoup.select.NodeFilter$FilterResult",
172:       "org.jsoup.nodes.Entities",
173:       "org.jsoup.select.Evaluator$AttributeWithValueContaining",
174:       "org.jsoup.select.Elements",
175:       "org.jsoup.parser.Token$CData",
176:       "org.jsoup.nodes.Element$2",
177:       "org.jsoup.select.Evaluator$AllElements",
178:       "org.jsoup.nodes.Element$1",
179:       "org.jsoup.nodes.TextNode",
180:       "org.jsoup.select.Evaluator$AttributeWithValue",
181:       "org.jsoup.select.Evaluator$AttributeWithValueNot",
182:       "org.jsoup.parser.ParseErrorList",
183:       "org.jsoup.nodes.BooleanAttribute",
184:       "org.jsoup.SerializationException",
185:       "org.jsoup.select.CombiningEvaluator$Or",
186:       "org.jsoup.select.Evaluator$ContainsText",
187:       "org.jsoup.select.Evaluator$Id",
188:       "org.jsoup.select.Evaluator$IsNthOfType",
189:       "org.jsoup.select.Collector",
190:       "org.jsoup.select.Collector$Accumulator",
191:       "org.jsoup.nodes.Attributes$Dataset$DatasetIterator",
192:       "org.jsoup.parser.XmlTreeBuilder$1",
193:       "org.jsoup.parser.CharacterReader",
194:       "org.jsoup.select.Evaluator$IsFirstChild",
195:       "org.jsoup.select.StructuralEvaluator$Root",
196:       "org.jsoup.nodes.Node$1",
197:       "org.jsoup.select.NodeVisitor",
198:       "org.jsoup.parser.TokeniserState$2",
199:       "org.jsoup.parser.TokeniserState$12",
200:       "org.jsoup.parser.TokeniserState$1",
201:       "org.jsoup.parser.TokeniserState$13",
202:       "org.jsoup.nodes.Attributes$1",
203:       "org.jsoup.parser.TokeniserState$14",
204:       "org.jsoup.parser.TokeniserState$15",
205:       "org.jsoup.select.Evaluator$AttributeWithValueStarting",
206:       "org.jsoup.parser.Token$StartTag",
207:       "org.jsoup.parser.Token$EOF",
208:       "org.jsoup.parser.TokeniserState$10",
209:       "org.jsoup.parser.TokeniserState$11",
210:       "org.jsoup.nodes.DocumentType",
211:       "org.jsoup.parser.TokeniserState$9",
212:       "org.jsoup.parser.TokeniserState$8",
213:       "org.jsoup.parser.TokeniserState$7",
214:       "org.jsoup.parser.TokeniserState$6",
215:       "org.jsoup.parser.TokeniserState$5",
216:       "org.jsoup.parser.TokeniserState$4",
217:       "org.jsoup.select.QueryParser",
218:       "org.jsoup.parser.TokeniserState$3",
219:       "org.jsoup.nodes.NodeUtils",
220:       "org.jsoup.select.Evaluator$Matches",
221:       "org.jsoup.select.Evaluator$IsOnlyChild",
222:       "org.jsoup.parser.TokeniserState$16",
223:       "org.jsoup.parser.TokeniserState$17",
224:       "org.jsoup.parser.TokeniserState$18",
225:       "org.jsoup.nodes.Entities$1",
226:       "org.jsoup.parser.TokeniserState$19",
227:       "org.jsoup.parser.TokeniserState$23",
228:       "org.jsoup.UncheckedIOException",
229:       "org.jsoup.parser.TokeniserState$24",
230:       "org.jsoup.parser.TokeniserState$25",
231:       "org.jsoup.parser.TokeniserState$26",
232:       "org.jsoup.parser.TokeniserState$20",
233:       "org.jsoup.parser.TokeniserState$21",
234:       "org.jsoup.parser.TokeniserState$22",
235:       "org.jsoup.parser.TokenQueue",
236:       "org.jsoup.parser.ParseSettings",
237:       "org.jsoup.select.NodeFilter",
238:       "org.jsoup.select.Evaluator$ContainsOwnText",
239:       "org.jsoup.parser.TokeniserState$27",
240:       "org.jsoup.parser.TokeniserState",
241:       "org.jsoup.parser.TokeniserState$28",
242:       "org.jsoup.parser.TokeniserState$29",
243:       "org.jsoup.parser.TokeniserState$34",
244:       "org.jsoup.select.Evaluator$IndexLessThan",
245:       "org.jsoup.parser.TokeniserState$35",
246:       "org.jsoup.parser.TokeniserState$36",
247:       "org.jsoup.parser.TokeniserState$37",
248:       "org.jsoup.parser.TokeniserState$30",
249:       "org.jsoup.parser.TokeniserState$31",
250:       "org.jsoup.parser.TokeniserState$32",
251:       "org.jsoup.parser.TokeniserState$33",
252:       "org.jsoup.nodes.Entities$EscapeMode",
253:       "org.jsoup.select.Evaluator$MatchText",
254:       "org.jsoup.select.Evaluator",
255:       "org.jsoup.Connection",
256:       "org.jsoup.select.Evaluator$IsRoot",
257:       "org.jsoup.parser.TokeniserState$38",
258:       "org.jsoup.parser.TokeniserState$39",
259:       "org.jsoup.nodes.CDataNode",
260:       "org.jsoup.parser.TokeniserState$45",
261:       "org.jsoup.parser.TokeniserState$46",
262:       "org.jsoup.parser.TokeniserState$47",
263:       "org.jsoup.select.StructuralEvaluator$Parent",
264:       "org.jsoup.parser.TokeniserState$48",
265:       "org.jsoup.select.Evaluator$IsLastChild",
266:       "org.jsoup.parser.TokeniserState$41",
267:       "org.jsoup.select.Evaluator$IsNthLastChild",
268:       "org.jsoup.parser.TokeniserState$42",
269:       "org.jsoup.parser.TokeniserState$43",
270:       "org.jsoup.parser.TokeniserState$44",
271:       "org.jsoup.parser.TokeniserState$40",
272:       "org.jsoup.parser.Token$TokenType",
273:       "org.jsoup.parser.HtmlTreeBuilderState$2",
274:       "org.jsoup.parser.HtmlTreeBuilderState$1",
275:       "org.jsoup.parser.HtmlTreeBuilderState$4",
276:       "org.jsoup.nodes.Attribute",
277:       "org.jsoup.parser.HtmlTreeBuilderState$3",
278:       "org.jsoup.parser.HtmlTreeBuilderState$9",
279:       "org.jsoup.parser.TokeniserState$49",
280:       "org.jsoup.parser.HtmlTreeBuilderState$6",
281:       "org.jsoup.parser.HtmlTreeBuilderState$5",
282:       "org.jsoup.parser.HtmlTreeBuilderState$8",
283:       "org.jsoup.parser.HtmlTreeBuilderState$7"
284:     );
285:   } 
286:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
287:     mock(Class.forName("java.util.Comparator", false, Element_205_tmp__ESTest_scaffolding.class.getClassLoader()));
288:   }
289: 
290:   private static void resetClasses() {
291:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Element_205_tmp__ESTest_scaffolding.class.getClassLoader()); 
292: 
293:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
294:       "org.jsoup.nodes.Node",
295:       "org.jsoup.nodes.Element",
296:       "org.jsoup.helper.ChangeNotifyingArrayList",
297:       "org.jsoup.nodes.Element$NodeList",
298:       "org.jsoup.nodes.Element$1",
299:       "org.jsoup.nodes.Element$2",
300:       "org.jsoup.helper.Validate",
301:       "org.jsoup.parser.Tag",
302:       "org.jsoup.parser.ParseSettings",
303:       "org.jsoup.select.NodeFilter$FilterResult",
304:       "org.jsoup.internal.StringUtil",
305:       "org.jsoup.nodes.Document$OutputSettings$Syntax",
306:       "org.jsoup.parser.Parser",
307:       "org.jsoup.parser.TreeBuilder",
308:       "org.jsoup.parser.HtmlTreeBuilder",
309:       "org.jsoup.parser.Token",
310:       "org.jsoup.parser.Token$Tag",
311:       "org.jsoup.parser.Token$StartTag",
312:       "org.jsoup.nodes.Attributes",
313:       "org.jsoup.parser.Token$TokenType",
314:       "org.jsoup.parser.Token$EndTag",
315:       "org.jsoup.parser.ParseErrorList",
316:       "org.jsoup.nodes.Document",
317:       "org.jsoup.internal.Normalizer",
318:       "org.jsoup.parser.Tokeniser",
319:       "org.jsoup.parser.TokeniserState",
320:       "org.jsoup.parser.Token$Character",
321:       "org.jsoup.parser.Token$Doctype",
322:       "org.jsoup.parser.Token$Comment",
323:       "org.jsoup.parser.HtmlTreeBuilderState",
324:       "org.jsoup.parser.Token$EOF",
325:       "org.jsoup.nodes.Node$OuterHtmlVisitor",
326:       "org.jsoup.nodes.NodeUtils",
327:       "org.jsoup.nodes.Entities$CoreCharset",
328:       "org.jsoup.select.NodeTraversor",
329:       "org.jsoup.parser.HtmlTreeBuilderState$24",
330:       "org.jsoup.select.Evaluator",
331:       "org.jsoup.select.Evaluator$AttributeKeyPair",
332:       "org.jsoup.select.Evaluator$AttributeWithValue",
333:       "org.jsoup.nodes.LeafNode",
334:       "org.jsoup.nodes.TextNode",
335:       "org.jsoup.nodes.Entities$1",
336:       "org.jsoup.select.Evaluator$Tag",
337:       "org.jsoup.select.Collector",
338:       "org.jsoup.select.Elements",
339:       "org.jsoup.select.Collector$Accumulator",
340:       "org.jsoup.select.Evaluator$AttributeWithValueMatching",
341:       "org.jsoup.nodes.Attributes$Dataset",
342:       "org.jsoup.nodes.Attribute",
343:       "org.jsoup.select.Evaluator$AttributeWithValueContaining",
344:       "org.jsoup.select.Evaluator$MatchesOwn",
345:       "org.jsoup.parser.XmlTreeBuilder",
346:       "org.jsoup.parser.XmlTreeBuilder$1",
347:       "org.jsoup.select.Evaluator$AttributeWithValueNot",
348:       "org.jsoup.nodes.Attributes$Dataset$EntrySet",
349:       "org.jsoup.nodes.Attributes$Dataset$DatasetIterator",
350:       "org.jsoup.nodes.Attributes$1",
351:       "org.jsoup.select.Selector",
352:       "org.jsoup.select.QueryParser",
353:       "org.jsoup.parser.TokenQueue",
354:       "org.jsoup.select.Evaluator$Class",
355:       "org.jsoup.select.Selector$SelectorParseException",
356:       "org.jsoup.nodes.FormElement",
357:       "org.jsoup.select.Evaluator$Matches",
358:       "org.jsoup.select.Evaluator$IndexEvaluator",
359:       "org.jsoup.select.Evaluator$IndexEquals",
360:       "org.jsoup.select.Evaluator$AllElements",
361:       "org.jsoup.select.Evaluator$IsOnlyChild",
362:       "org.jsoup.select.StructuralEvaluator$Root",
363:       "org.jsoup.select.Evaluator$IndexLessThan",
364:       "org.jsoup.select.Evaluator$ContainsText",
365:       "org.jsoup.select.Evaluator$AttributeStarting",
366:       "org.jsoup.nodes.Comment",
367:       "org.jsoup.select.Evaluator$IsOnlyOfType",
368:       "org.jsoup.select.Evaluator$IndexGreaterThan",
369:       "org.jsoup.nodes.CDataNode",
370:       "org.jsoup.select.Collector$FirstFinder",
371:       "org.jsoup.select.Evaluator$Id",
372:       "org.jsoup.nodes.Node$1",
373:       "org.jsoup.select.Evaluator$ContainsOwnText",
374:       "org.jsoup.nodes.DocumentType",
375:       "org.jsoup.parser.HtmlTreeBuilderState$Constants",
376:       "org.jsoup.nodes.PseudoTextElement",
377:       "org.jsoup.Connection$Method",
378:       "org.jsoup.Jsoup",
379:       "org.jsoup.helper.HttpConnection",
380:       "org.jsoup.helper.HttpConnection$Base",
381:       "org.jsoup.helper.HttpConnection$Request",
382:       "org.jsoup.helper.HttpConnection$Response",
383:       "org.jsoup.select.Evaluator$AttributeWithValueStarting",
384:       "org.jsoup.select.CombiningEvaluator",
385:       "org.jsoup.select.CombiningEvaluator$And",
386:       "org.jsoup.select.StructuralEvaluator",
387:       "org.jsoup.select.StructuralEvaluator$ImmediateParent",
388:       "org.jsoup.select.StructuralEvaluator$Parent",
389:       "org.jsoup.nodes.XmlDeclaration",
390:       "org.jsoup.select.Evaluator$IsRoot",
391:       "org.jsoup.nodes.DataNode",
392:       "org.jsoup.select.Evaluator$Attribute",
393:       "org.jsoup.select.Evaluator$AttributeWithValueEnding",
394:       "org.jsoup.select.Evaluator$IsFirstChild",
395:       "org.jsoup.select.Evaluator$CssNthEvaluator",
396:       "org.jsoup.select.Evaluator$IsNthLastOfType",
397:       "org.jsoup.select.Evaluator$IsLastOfType",
398:       "org.jsoup.select.StructuralEvaluator$PreviousSibling",
399:       "org.jsoup.select.CombiningEvaluator$Or",
400:       "org.jsoup.nodes.BooleanAttribute",
401:       "org.jsoup.SerializationException",
402:       "org.jsoup.select.Evaluator$TagEndsWith",
403:       "org.jsoup.select.Evaluator$IsNthChild",
404:       "org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling",
405:       "org.jsoup.select.Evaluator$IsLastChild",
406:       "org.jsoup.select.Evaluator$ContainsData",
407:       "org.jsoup.parser.ParseError",
408:       "org.jsoup.select.Evaluator$IsNthLastChild",
409:       "org.jsoup.select.Evaluator$MatchText",
410:       "org.jsoup.select.Evaluator$IsNthOfType",
411:       "org.jsoup.select.Evaluator$IsFirstOfType"
412:     );
413:   }
414: }

[MASTER] 22:28:13.886 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Document document0 = Document.createShell("Unexpected token type: ");
assertNotNull(document0);
assertFalse(document0.isBlock());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertEquals("Unexpected token type: ", document0.location());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("#root", document0.tagName());
assertEquals(1, document0.childNodeSize());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("Unexpected token type: ", document0.baseUri());
assertFalse(document0.hasParent());

Element element0 = document0.prependElement("br");
assertNotNull(element0);
assertFalse(document0.isBlock());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertEquals("Unexpected token type: ", document0.location());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("#root", document0.tagName());
assertEquals(2, document0.childNodeSize());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("Unexpected token type: ", document0.baseUri());
assertFalse(document0.hasParent());
assertEquals("br", element0.nodeName());
assertEquals("Unexpected token type: ", element0.baseUri());
assertEquals("br", element0.tagName());
assertFalse(element0.isBlock());
assertEquals(0, element0.siblingIndex());
assertEquals(0, element0.childNodeSize());
assertTrue(element0.hasParent());

Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
assertNotNull(evaluator_IsOnlyChild0);
assertEquals(":only-child", evaluator_IsOnlyChild0.toString());

Attributes attributes0 = new Attributes();
assertNotNull(attributes0);
assertEquals(0, attributes0.size());

List<DataNode> list0 = document0.dataNodes();
assertNotNull(list0);
assertFalse(document0.isBlock());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertEquals("Unexpected token type: ", document0.location());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("#root", document0.tagName());
assertEquals(2, document0.childNodeSize());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("Unexpected token type: ", document0.baseUri());
assertFalse(document0.hasParent());
assertTrue(list0.isEmpty());
assertEquals(0, list0.size());

Attribute attribute0 = Attribute.createFromEncoded("_3pk#+Gvo#mWlL6w", "_3pk#+Gvo#mWlL6w");
assertNotNull(attribute0);
assertEquals("_3pk#+Gvo#mWlL6w", attribute0.getValue());
assertEquals("_3pk#+Gvo#mWlL6w", attribute0.getKey());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

Attributes attributes1 = attributes0.put(attribute0);
assertNotNull(attributes1);
assertEquals(1, attributes0.size());
assertEquals("_3pk#+Gvo#mWlL6w", attribute0.getValue());
assertEquals("_3pk#+Gvo#mWlL6w", attribute0.getKey());
assertEquals(1, attributes1.size());
assertSame(attributes0, attributes1);
assertSame(attributes1, attributes0);

Element element1 = document0.head();
assertNotNull(element1);
assertFalse(element1.equals((Object)element0));
assertFalse(document0.isBlock());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertEquals("Unexpected token type: ", document0.location());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("#root", document0.tagName());
assertEquals(2, document0.childNodeSize());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("Unexpected token type: ", document0.baseUri());
assertFalse(document0.hasParent());
assertTrue(element1.hasParent());
assertEquals(0, element1.siblingIndex());
assertEquals("head", element1.tagName());
assertEquals(0, element1.childNodeSize());
assertEquals("head", element1.nodeName());
assertEquals("Unexpected token type: ", element1.baseUri());
assertTrue(element1.isBlock());
assertNotSame(element1, element0);

boolean boolean0 = document0.is((Evaluator) evaluator_IsOnlyChild0);
assertFalse(boolean0);
assertFalse(document0.isBlock());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertEquals("Unexpected token type: ", document0.location());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("#root", document0.tagName());
assertEquals(2, document0.childNodeSize());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("Unexpected token type: ", document0.baseUri());
assertFalse(document0.hasParent());
assertEquals(":only-child", evaluator_IsOnlyChild0.toString());

Document document1 = document0.clone();
assertNotNull(document1);
assertFalse(document1.equals((Object)document0));
assertFalse(document0.isBlock());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertEquals("Unexpected token type: ", document0.location());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("#root", document0.tagName());
assertEquals(2, document0.childNodeSize());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("Unexpected token type: ", document0.baseUri());
assertFalse(document0.hasParent());
assertEquals(0, document1.siblingIndex());
assertFalse(document1.updateMetaCharsetElement());
assertFalse(document1.isBlock());
assertEquals("Unexpected token type: ", document1.location());
assertEquals("#root", document1.tagName());
assertEquals("#document", document1.nodeName());
assertEquals(2, document1.childNodeSize());
assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
assertFalse(document1.hasParent());
assertEquals("Unexpected token type: ", document1.baseUri());
assertNotSame(document0, document1);
assertNotSame(document1, document0);

String string0 = document1.wholeText();
assertNotNull(string0);
assertEquals("", string0);
assertFalse(document0.equals((Object)document1));
assertFalse(document1.equals((Object)document0));
assertFalse(document0.isBlock());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertEquals("Unexpected token type: ", document0.location());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("#root", document0.tagName());
assertEquals(2, document0.childNodeSize());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("Unexpected token type: ", document0.baseUri());
assertFalse(document0.hasParent());
assertEquals(0, document1.siblingIndex());
assertFalse(document1.updateMetaCharsetElement());
assertFalse(document1.isBlock());
assertEquals("Unexpected token type: ", document1.location());
assertEquals("#root", document1.tagName());
assertEquals("#document", document1.nodeName());
assertEquals(2, document1.childNodeSize());
assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
assertFalse(document1.hasParent());
assertEquals("Unexpected token type: ", document1.baseUri());
assertNotSame(document0, document1);
assertNotSame(document1, document0);

String string1 = document1.className();
assertNotNull(string1);
assertEquals("", string1);
assertFalse(document0.equals((Object)document1));
assertFalse(document1.equals((Object)document0));
assertTrue(string1.equals((Object)string0));
assertFalse(document0.isBlock());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertEquals("Unexpected token type: ", document0.location());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("#root", document0.tagName());
assertEquals(2, document0.childNodeSize());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("Unexpected token type: ", document0.baseUri());
assertFalse(document0.hasParent());
assertEquals(0, document1.siblingIndex());
assertFalse(document1.updateMetaCharsetElement());
assertFalse(document1.isBlock());
assertEquals("Unexpected token type: ", document1.location());
assertEquals("#root", document1.tagName());
assertEquals("#document", document1.nodeName());
assertEquals(2, document1.childNodeSize());
assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
assertFalse(document1.hasParent());
assertEquals("Unexpected token type: ", document1.baseUri());
assertNotSame(document0, document1);
assertNotSame(document1, document0);

String string2 = element1.cssSelector();
assertNotNull(string2);
assertEquals("html > head", string2);
assertFalse(document0.equals((Object)document1));
assertFalse(element1.equals((Object)element0));
assertFalse(string2.equals((Object)string1));
assertFalse(string2.equals((Object)string0));
assertFalse(document0.isBlock());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertEquals("Unexpected token type: ", document0.location());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("#root", document0.tagName());
assertEquals(2, document0.childNodeSize());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("Unexpected token type: ", document0.baseUri());
assertFalse(document0.hasParent());
assertTrue(element1.hasParent());
assertEquals(0, element1.siblingIndex());
assertEquals("head", element1.tagName());
assertEquals(0, element1.childNodeSize());
assertEquals("head", element1.nodeName());
assertEquals("Unexpected token type: ", element1.baseUri());
assertTrue(element1.isBlock());
assertNotSame(document0, document1);
assertNotSame(element1, element0);

Element element2 = document1.selectFirst("html > head");
assertNotNull(element2);
assertFalse(document0.equals((Object)document1));
assertFalse(document1.equals((Object)document0));
assertFalse(element2.equals((Object)element0));
assertFalse(element2.equals((Object)element1));
assertFalse(document0.isBlock());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertEquals("Unexpected token type: ", document0.location());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("#root", document0.tagName());
assertEquals(2, document0.childNodeSize());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("Unexpected token type: ", document0.baseUri());
assertFalse(document0.hasParent());
assertEquals(0, document1.siblingIndex());
assertFalse(document1.updateMetaCharsetElement());
assertFalse(document1.isBlock());
assertEquals("Unexpected token type: ", document1.location());
assertEquals("#root", document1.tagName());
assertEquals("#document", document1.nodeName());
assertEquals(2, document1.childNodeSize());
assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
assertFalse(document1.hasParent());
assertEquals("Unexpected token type: ", document1.baseUri());
assertEquals("Unexpected token type: ", element2.baseUri());
assertEquals("head", element2.tagName());
assertTrue(element2.isBlock());
assertEquals("head", element2.nodeName());
assertTrue(element2.hasParent());
assertEquals(0, element2.childNodeSize());
assertEquals(0, element2.siblingIndex());
assertNotSame(document0, document1);
assertNotSame(document1, document0);
assertNotSame(element2, element0);
assertNotSame(element2, element1);


[MASTER] 22:28:13.918 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_206_1628288893887/org/jsoup/nodes/Element_206_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_206_1628288893887/org/jsoup/nodes/Element_206_tmp__ESTest_scaffolding.java]]
[MASTER] 22:28:13.918 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Jsoup-87/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Jsoup-87/target/classes
[MASTER] 22:28:13.918 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Jsoup-87/target/classes
[MASTER] 22:28:13.918 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Integer>>: 98
[MASTER] 22:28:13.918 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_206_1628288893887/org/jsoup/nodes/Element_206_tmp__ESTest.java uses or overrides a deprecated API.: -1
[MASTER] 22:28:13.918 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:deprecation for details.: -1
[MASTER] 22:28:13.918 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_206_1628288893887/org/jsoup/nodes/Element_206_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 22:28:13.918 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 22:28:13.919 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_206_1628288893887/org/jsoup/nodes/Element_206_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 22:28:13 GMT 2021
4:  */
5: 
6: package org.jsoup.nodes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.Comparator;
12: import java.util.Map;
13: import java.util.Set;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.evosuite.runtime.ViolatedAssumptionAnswer;
17: import org.evosuite.runtime.testdata.EvoSuiteFile;
18: import org.evosuite.runtime.testdata.FileSystemHandling;
19: import org.jsoup.nodes.Attribute;
20: import org.jsoup.nodes.Attributes;
21: import org.jsoup.nodes.Document;
22: import org.jsoup.nodes.Element;
23: import org.jsoup.parser.ParseSettings;
24: import org.jsoup.parser.Parser;
25: import org.jsoup.select.Evaluator;
26: import org.junit.runner.RunWith;
27: 
28: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
29: public class Element_206_tmp__ESTest extends Element_206_tmp__ESTest_scaffolding {
30: 
31:   @Test(timeout = 4000)
32:   public void test0()  throws Throwable  {
33:       Document document0 = Parser.parseBodyFragmentRelaxed("WdGlQ@9m", "WdGlQ@9m");
34:       assertNotNull(document0);
35:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
36:       assertFalse(document0.hasParent());
37:       assertEquals("#root", document0.tagName());
38:       assertFalse(document0.updateMetaCharsetElement());
39:       assertEquals(1, document0.childNodeSize());
40:       assertFalse(document0.isBlock());
41:       assertEquals("#document", document0.nodeName());
42:       assertEquals(0, document0.siblingIndex());
43:       
44:       Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
45:       Document document1 = document0.quirksMode(document_QuirksMode0);
46:       assertNotNull(document1);
47:       assertFalse(document0.hasParent());
48:       assertEquals("#root", document0.tagName());
49:       assertFalse(document0.updateMetaCharsetElement());
50:       assertEquals(1, document0.childNodeSize());
51:       assertFalse(document0.isBlock());
52:       assertEquals("#document", document0.nodeName());
53:       assertEquals(0, document0.siblingIndex());
54:       assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
55:       assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
56:       assertEquals("#document", document1.nodeName());
57:       assertFalse(document1.isBlock());
58:       assertEquals("#root", document1.tagName());
59:       assertEquals(0, document1.siblingIndex());
60:       assertFalse(document1.updateMetaCharsetElement());
61:       assertEquals(1, document1.childNodeSize());
62:       assertFalse(document1.hasParent());
63:       assertSame(document0, document1);
64:       assertSame(document1, document0);
65:       
66:       boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "WdGlQ@9m");
67:       assertFalse(boolean0);
68:       
69:       Element element0 = document0.appendElement("label");
70:       assertNotNull(element0);
71:       assertFalse(document0.hasParent());
72:       assertEquals("#root", document0.tagName());
73:       assertFalse(document0.updateMetaCharsetElement());
74:       assertEquals(2, document0.childNodeSize());
75:       assertFalse(document0.isBlock());
76:       assertEquals("#document", document0.nodeName());
77:       assertEquals(0, document0.siblingIndex());
78:       assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
79:       assertEquals(0, element0.childNodeSize());
80:       assertEquals("label", element0.tagName());
81:       assertEquals("label", element0.nodeName());
82:       assertEquals(1, element0.siblingIndex());
83:       assertTrue(element0.hasParent());
84:       assertFalse(element0.isBlock());
85:       assertSame(document0, document1);
86:       
87:       ParseSettings parseSettings0 = ParseSettings.preserveCase;
88:       assertNotNull(parseSettings0);
89:       
90:       Parser parser0 = Parser.htmlParser();
91:       assertNotNull(parser0);
92:       assertFalse(parser0.isTrackErrors());
93:       
94:       Attribute attribute0 = Attribute.createFromEncoded("WdGlQ@9m", "WdGlQ@9m");
95:       assertNotNull(attribute0);
96:       
97:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
98:       Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
99:       assertNotNull(comparator1);
100:       
101:       Attributes attributes0 = new Attributes();
102:       assertNotNull(attributes0);
103:       assertEquals(0, attributes0.size());
104:       
105:       Attributes attributes1 = attributes0.clone();
106:       assertNotNull(attributes1);
107:       assertTrue(attributes1.equals((Object)attributes0));
108:       assertEquals(0, attributes0.size());
109:       assertEquals(0, attributes1.size());
110:       assertNotSame(attributes0, attributes1);
111:       assertNotSame(attributes1, attributes0);
112:       
113:       Attributes attributes2 = attributes1.put(attribute0);
114:       assertNotNull(attributes2);
115:       assertFalse(attributes0.equals((Object)attributes1));
116:       assertFalse(attributes1.equals((Object)attributes0));
117:       assertFalse(attributes2.equals((Object)attributes0));
118:       assertEquals(0, attributes0.size());
119:       assertEquals(1, attributes1.size());
120:       assertEquals(1, attributes2.size());
121:       assertNotSame(attributes0, attributes1);
122:       assertNotSame(attributes0, attributes2);
123:       assertNotSame(attributes1, attributes0);
124:       assertSame(attributes1, attributes2);
125:       assertSame(attributes2, attributes1);
126:       assertNotSame(attributes2, attributes0);
127:       
128:       Element element1 = document1.head();
129:       assertNotNull(element1);
130:       assertFalse(element1.equals((Object)element0));
131:       assertFalse(document0.hasParent());
132:       assertEquals("#root", document0.tagName());
133:       assertFalse(document0.updateMetaCharsetElement());
134:       assertEquals(2, document0.childNodeSize());
135:       assertFalse(document0.isBlock());
136:       assertEquals("#document", document0.nodeName());
137:       assertEquals(0, document0.siblingIndex());
138:       assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
139:       assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
140:       assertEquals("#document", document1.nodeName());
141:       assertFalse(document1.isBlock());
142:       assertEquals("#root", document1.tagName());
143:       assertEquals(0, document1.siblingIndex());
144:       assertEquals(2, document1.childNodeSize());
145:       assertFalse(document1.updateMetaCharsetElement());
146:       assertFalse(document1.hasParent());
147:       assertEquals("head", element1.tagName());
148:       assertTrue(element1.hasParent());
149:       assertEquals("head", element1.nodeName());
150:       assertEquals(0, element1.childNodeSize());
151:       assertEquals(0, element1.siblingIndex());
152:       assertTrue(element1.isBlock());
153:       assertSame(document0, document1);
154:       assertSame(document1, document0);
155:       assertNotSame(element1, element0);
156:       
157:       Evaluator.AttributeWithValueStarting evaluator_AttributeWithValueStarting0 = new Evaluator.AttributeWithValueStarting("9GU5NTP6}}2", "9GU5NTP6}}2");
158:       assertNotNull(evaluator_AttributeWithValueStarting0);
159:       
160:       boolean boolean1 = document0.is((Evaluator) evaluator_AttributeWithValueStarting0);
161:       assertFalse(boolean1);
162:       assertTrue(boolean1 == boolean0);
163:       assertFalse(document0.hasParent());
164:       assertEquals("#root", document0.tagName());
165:       assertFalse(document0.updateMetaCharsetElement());
166:       assertEquals(2, document0.childNodeSize());
167:       assertFalse(document0.isBlock());
168:       assertEquals("#document", document0.nodeName());
169:       assertEquals(0, document0.siblingIndex());
170:       assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
171:       assertSame(document0, document1);
172:       
173:       Document document2 = document0.clone();
174:       assertNotNull(document2);
175:       assertFalse(document2.equals((Object)document1));
176:       assertFalse(document2.equals((Object)document0));
177:       assertEquals("#root", document2.tagName());
178:       assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
179:       assertFalse(document2.hasParent());
180:       assertFalse(document2.isBlock());
181:       assertFalse(document2.updateMetaCharsetElement());
182:       assertEquals(0, document2.siblingIndex());
183:       assertEquals(2, document2.childNodeSize());
184:       assertEquals("#document", document2.nodeName());
185:       assertFalse(document0.hasParent());
186:       assertEquals("#root", document0.tagName());
187:       assertFalse(document0.updateMetaCharsetElement());
188:       assertEquals(2, document0.childNodeSize());
189:       assertFalse(document0.isBlock());
190:       assertEquals("#document", document0.nodeName());
191:       assertEquals(0, document0.siblingIndex());
192:       assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
193:       assertNotSame(document2, document1);
194:       assertNotSame(document2, document0);
195:       assertNotSame(document0, document2);
196:       assertSame(document0, document1);
197:       
198:       String string0 = document0.className();
199:       assertNotNull(string0);
200:       assertEquals("", string0);
201:       assertFalse(document0.equals((Object)document2));
202:       assertFalse(document0.hasParent());
203:       assertEquals("#root", document0.tagName());
204:       assertFalse(document0.updateMetaCharsetElement());
205:       assertEquals(2, document0.childNodeSize());
206:       assertFalse(document0.isBlock());
207:       assertEquals("#document", document0.nodeName());
208:       assertEquals(0, document0.siblingIndex());
209:       assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
210:       assertNotSame(document0, document2);
211:       assertSame(document0, document1);
212:       
213:       String string1 = element0.cssSelector();
214:       assertNotNull(string1);
215:       assertEquals("label", string1);
216:       assertFalse(document0.equals((Object)document2));
217:       assertFalse(string1.equals((Object)string0));
218:       assertFalse(element0.equals((Object)element1));
219:       assertFalse(document0.hasParent());
220:       assertEquals("#root", document0.tagName());
221:       assertFalse(document0.updateMetaCharsetElement());
222:       assertEquals(2, document0.childNodeSize());
223:       assertFalse(document0.isBlock());
224:       assertEquals("#document", document0.nodeName());
225:       assertEquals(0, document0.siblingIndex());
226:       assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
227:       assertEquals(0, element0.childNodeSize());
228:       assertEquals("label", element0.tagName());
229:       assertEquals("label", element0.nodeName());
230:       assertEquals(1, element0.siblingIndex());
231:       assertTrue(element0.hasParent());
232:       assertFalse(element0.isBlock());
233:       assertNotSame(document0, document2);
234:       assertSame(document0, document1);
235:       assertNotSame(element0, element1);
236:       
237:       Element element2 = element0.wrap("9GU5NTP6}}2");
238:       assertNull(element2);
239:       assertFalse(document0.equals((Object)document2));
240:       assertFalse(element0.equals((Object)element1));
241:       assertFalse(document0.hasParent());
242:       assertEquals("#root", document0.tagName());
243:       assertFalse(document0.updateMetaCharsetElement());
244:       assertEquals(2, document0.childNodeSize());
245:       assertFalse(document0.isBlock());
246:       assertEquals("#document", document0.nodeName());
247:       assertEquals(0, document0.siblingIndex());
248:       assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
249:       assertEquals(0, element0.childNodeSize());
250:       assertEquals("label", element0.tagName());
251:       assertEquals("label", element0.nodeName());
252:       assertEquals(1, element0.siblingIndex());
253:       assertTrue(element0.hasParent());
254:       assertFalse(element0.isBlock());
255:       assertNotSame(document0, document2);
256:       assertSame(document0, document1);
257:       assertNotSame(element0, element1);
258:       
259:       Set<String> set0 = document0.classNames();
260:       assertNotNull(set0);
261:       assertFalse(document0.equals((Object)document2));
262:       assertFalse(document0.hasParent());
263:       assertEquals("#root", document0.tagName());
264:       assertFalse(document0.updateMetaCharsetElement());
265:       assertEquals(2, document0.childNodeSize());
266:       assertFalse(document0.isBlock());
267:       assertEquals("#document", document0.nodeName());
268:       assertEquals(0, document0.siblingIndex());
269:       assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
270:       assertTrue(set0.isEmpty());
271:       assertEquals(0, set0.size());
272:       assertFalse(set0.contains(string0));
273:       assertNotSame(document0, document2);
274:       assertSame(document0, document1);
275:   }
276: }
RegularFileObject[/tmp/EvoSuite_206_1628288893887/org/jsoup/nodes/Element_206_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 22:28:13 GMT 2021
5:  */
6: 
7: package org.jsoup.nodes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class Element_206_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.jsoup.nodes.Element"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Element_206_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.jsoup.nodes.Document$QuirksMode",
72:       "org.jsoup.parser.HtmlTreeBuilderState$18",
73:       "org.jsoup.select.StructuralEvaluator$ImmediateParent",
74:       "org.jsoup.parser.HtmlTreeBuilderState$19",
75:       "org.jsoup.parser.HtmlTreeBuilderState$16",
76:       "org.jsoup.helper.ChangeNotifyingArrayList",
77:       "org.jsoup.parser.HtmlTreeBuilderState$17",
78:       "org.jsoup.parser.HtmlTreeBuilderState$14",
79:       "org.jsoup.parser.HtmlTreeBuilderState$15",
80:       "org.jsoup.select.Evaluator$IndexEvaluator",
81:       "org.jsoup.select.Evaluator$IsOnlyOfType",
82:       "org.jsoup.nodes.Entities$CoreCharset",
83:       "org.jsoup.nodes.Element",
84:       "org.jsoup.parser.HtmlTreeBuilderState$12",
85:       "org.jsoup.parser.HtmlTreeBuilderState$13",
86:       "org.jsoup.parser.HtmlTreeBuilderState$10",
87:       "org.jsoup.parser.HtmlTreeBuilderState$11",
88:       "org.jsoup.select.NodeTraversor",
89:       "org.jsoup.select.Evaluator$MatchesOwn",
90:       "org.jsoup.select.CombiningEvaluator$And",
91:       "org.jsoup.parser.Token$EndTag",
92:       "org.jsoup.nodes.Document",
93:       "org.jsoup.Jsoup",
94:       "org.jsoup.parser.HtmlTreeBuilder",
95:       "org.jsoup.nodes.FormElement",
96:       "org.jsoup.select.StructuralEvaluator",
97:       "org.jsoup.select.Evaluator$IndexEquals",
98:       "org.jsoup.select.Selector$SelectorParseException",
99:       "org.jsoup.parser.Token$Tag",
100:       "org.jsoup.nodes.XmlDeclaration",
101:       "org.jsoup.parser.Token$Doctype",
102:       "org.jsoup.select.Evaluator$TagEndsWith",
103:       "org.jsoup.parser.HtmlTreeBuilderState$23",
104:       "org.jsoup.parser.HtmlTreeBuilderState$24",
105:       "org.jsoup.select.Evaluator$Tag",
106:       "org.jsoup.parser.HtmlTreeBuilderState$21",
107:       "org.jsoup.nodes.Document$OutputSettings$Syntax",
108:       "org.jsoup.parser.HtmlTreeBuilderState$22",
109:       "org.jsoup.parser.HtmlTreeBuilderState$20",
110:       "org.jsoup.parser.Token$1",
111:       "org.jsoup.internal.StringUtil",
112:       "org.jsoup.parser.Tokeniser",
113:       "org.jsoup.nodes.Comment",
114:       "org.jsoup.select.Evaluator$IndexGreaterThan",
115:       "org.jsoup.nodes.LeafNode",
116:       "org.jsoup.select.Selector",
117:       "org.jsoup.select.Evaluator$AttributeWithValueEnding",
118:       "org.jsoup.select.Collector$FirstFinder",
119:       "org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling",
120:       "org.jsoup.nodes.Node",
121:       "org.jsoup.parser.HtmlTreeBuilderState",
122:       "org.jsoup.select.Evaluator$AttributeStarting",
123:       "org.jsoup.nodes.DataNode",
124:       "org.jsoup.nodes.Attributes",
125:       "org.jsoup.parser.XmlTreeBuilder",
126:       "org.jsoup.nodes.Document$OutputSettings",
127:       "org.jsoup.select.CombiningEvaluator",
128:       "org.jsoup.select.Evaluator$ContainsData",
129:       "org.jsoup.internal.Normalizer",
130:       "org.jsoup.nodes.Attributes$Dataset$EntrySet",
131:       "org.jsoup.nodes.Attributes$Dataset",
132:       "org.jsoup.helper.Validate",
133:       "org.jsoup.select.Evaluator$CssNthEvaluator",
134:       "org.jsoup.parser.Token$Comment",
135:       "org.jsoup.select.Evaluator$IsFirstOfType",
136:       "org.jsoup.nodes.Element$NodeList",
137:       "org.jsoup.parser.TokeniserState$56",
138:       "org.jsoup.parser.TokeniserState$57",
139:       "org.jsoup.parser.TokeniserState$58",
140:       "org.jsoup.parser.TokeniserState$59",
141:       "org.jsoup.parser.TokeniserState$52",
142:       "org.jsoup.parser.TokeniserState$53",
143:       "org.jsoup.parser.TreeBuilder",
144:       "org.jsoup.parser.TokeniserState$54",
145:       "org.jsoup.parser.TokeniserState$55",
146:       "org.jsoup.nodes.PseudoTextElement",
147:       "org.jsoup.parser.TokeniserState$50",
148:       "org.jsoup.parser.TokeniserState$51",
149:       "org.jsoup.parser.Parser",
150:       "org.jsoup.select.Evaluator$IsEmpty",
151:       "org.jsoup.select.Evaluator$AttributeWithValueMatching",
152:       "org.jsoup.select.Evaluator$IsNthChild",
153:       "org.jsoup.parser.HtmlTreeBuilderState$Constants",
154:       "org.jsoup.select.Evaluator$Class",
155:       "org.jsoup.parser.TokeniserState$67",
156:       "org.jsoup.parser.TokeniserState$63",
157:       "org.jsoup.nodes.Node$OuterHtmlVisitor",
158:       "org.jsoup.parser.TokeniserState$64",
159:       "org.jsoup.parser.TokeniserState$65",
160:       "org.jsoup.parser.Token",
161:       "org.jsoup.parser.TokeniserState$66",
162:       "org.jsoup.parser.TokeniserState$60",
163:       "org.jsoup.select.Evaluator$AttributeKeyPair",
164:       "org.jsoup.parser.TokeniserState$61",
165:       "org.jsoup.parser.TokeniserState$62",
166:       "org.jsoup.select.Evaluator$IsNthLastOfType",
167:       "org.jsoup.parser.Tag",
168:       "org.jsoup.parser.Token$Character",
169:       "org.jsoup.select.Evaluator$IsLastOfType",
170:       "org.jsoup.select.Evaluator$Attribute",
171:       "org.jsoup.select.NodeFilter$FilterResult",
172:       "org.jsoup.nodes.Entities",
173:       "org.jsoup.select.Evaluator$AttributeWithValueContaining",
174:       "org.jsoup.select.Elements",
175:       "org.jsoup.parser.Token$CData",
176:       "org.jsoup.nodes.Element$2",
177:       "org.jsoup.select.Evaluator$AllElements",
178:       "org.jsoup.nodes.Element$1",
179:       "org.jsoup.nodes.TextNode",
180:       "org.jsoup.select.Evaluator$AttributeWithValue",
181:       "org.jsoup.select.Evaluator$AttributeWithValueNot",
182:       "org.jsoup.parser.ParseErrorList",
183:       "org.jsoup.nodes.BooleanAttribute",
184:       "org.jsoup.SerializationException",
185:       "org.jsoup.select.CombiningEvaluator$Or",
186:       "org.jsoup.select.Evaluator$ContainsText",
187:       "org.jsoup.select.Evaluator$Id",
188:       "org.jsoup.select.Evaluator$IsNthOfType",
189:       "org.jsoup.select.Collector",
190:       "org.jsoup.select.Collector$Accumulator",
191:       "org.jsoup.nodes.Attributes$Dataset$DatasetIterator",
192:       "org.jsoup.parser.XmlTreeBuilder$1",
193:       "org.jsoup.parser.CharacterReader",
194:       "org.jsoup.select.Evaluator$IsFirstChild",
195:       "org.jsoup.select.StructuralEvaluator$Root",
196:       "org.jsoup.nodes.Node$1",
197:       "org.jsoup.select.NodeVisitor",
198:       "org.jsoup.parser.TokeniserState$2",
199:       "org.jsoup.parser.TokeniserState$12",
200:       "org.jsoup.parser.TokeniserState$1",
201:       "org.jsoup.parser.TokeniserState$13",
202:       "org.jsoup.nodes.Attributes$1",
203:       "org.jsoup.parser.TokeniserState$14",
204:       "org.jsoup.parser.TokeniserState$15",
205:       "org.jsoup.select.Evaluator$AttributeWithValueStarting",
206:       "org.jsoup.parser.Token$StartTag",
207:       "org.jsoup.parser.Token$EOF",
208:       "org.jsoup.parser.TokeniserState$10",
209:       "org.jsoup.parser.TokeniserState$11",
210:       "org.jsoup.nodes.DocumentType",
211:       "org.jsoup.parser.TokeniserState$9",
212:       "org.jsoup.parser.TokeniserState$8",
213:       "org.jsoup.parser.TokeniserState$7",
214:       "org.jsoup.parser.TokeniserState$6",
215:       "org.jsoup.parser.TokeniserState$5",
216:       "org.jsoup.parser.TokeniserState$4",
217:       "org.jsoup.select.QueryParser",
218:       "org.jsoup.parser.TokeniserState$3",
219:       "org.jsoup.nodes.NodeUtils",
220:       "org.jsoup.select.Evaluator$Matches",
221:       "org.jsoup.select.Evaluator$IsOnlyChild",
222:       "org.jsoup.parser.TokeniserState$16",
223:       "org.jsoup.parser.TokeniserState$17",
224:       "org.jsoup.parser.TokeniserState$18",
225:       "org.jsoup.nodes.Entities$1",
226:       "org.jsoup.parser.TokeniserState$19",
227:       "org.jsoup.parser.TokeniserState$23",
228:       "org.jsoup.UncheckedIOException",
229:       "org.jsoup.parser.TokeniserState$24",
230:       "org.jsoup.parser.TokeniserState$25",
231:       "org.jsoup.parser.TokeniserState$26",
232:       "org.jsoup.parser.TokeniserState$20",
233:       "org.jsoup.parser.TokeniserState$21",
234:       "org.jsoup.parser.TokeniserState$22",
235:       "org.jsoup.parser.TokenQueue",
236:       "org.jsoup.parser.ParseSettings",
237:       "org.jsoup.select.NodeFilter",
238:       "org.jsoup.select.Evaluator$ContainsOwnText",
239:       "org.jsoup.parser.TokeniserState$27",
240:       "org.jsoup.parser.TokeniserState",
241:       "org.jsoup.parser.TokeniserState$28",
242:       "org.jsoup.parser.TokeniserState$29",
243:       "org.jsoup.parser.TokeniserState$34",
244:       "org.jsoup.select.Evaluator$IndexLessThan",
245:       "org.jsoup.parser.TokeniserState$35",
246:       "org.jsoup.parser.TokeniserState$36",
247:       "org.jsoup.parser.TokeniserState$37",
248:       "org.jsoup.parser.TokeniserState$30",
249:       "org.jsoup.parser.TokeniserState$31",
250:       "org.jsoup.parser.TokeniserState$32",
251:       "org.jsoup.parser.TokeniserState$33",
252:       "org.jsoup.nodes.Entities$EscapeMode",
253:       "org.jsoup.select.Evaluator$MatchText",
254:       "org.jsoup.select.Evaluator",
255:       "org.jsoup.Connection",
256:       "org.jsoup.select.Evaluator$IsRoot",
257:       "org.jsoup.parser.TokeniserState$38",
258:       "org.jsoup.parser.TokeniserState$39",
259:       "org.jsoup.nodes.CDataNode",
260:       "org.jsoup.parser.TokeniserState$45",
261:       "org.jsoup.parser.TokeniserState$46",
262:       "org.jsoup.parser.TokeniserState$47",
263:       "org.jsoup.select.StructuralEvaluator$Parent",
264:       "org.jsoup.parser.TokeniserState$48",
265:       "org.jsoup.select.Evaluator$IsLastChild",
266:       "org.jsoup.parser.TokeniserState$41",
267:       "org.jsoup.select.Evaluator$IsNthLastChild",
268:       "org.jsoup.parser.TokeniserState$42",
269:       "org.jsoup.parser.TokeniserState$43",
270:       "org.jsoup.parser.TokeniserState$44",
271:       "org.jsoup.parser.TokeniserState$40",
272:       "org.jsoup.parser.Token$TokenType",
273:       "org.jsoup.parser.HtmlTreeBuilderState$2",
274:       "org.jsoup.parser.HtmlTreeBuilderState$1",
275:       "org.jsoup.parser.HtmlTreeBuilderState$4",
276:       "org.jsoup.nodes.Attribute",
277:       "org.jsoup.parser.HtmlTreeBuilderState$3",
278:       "org.jsoup.parser.HtmlTreeBuilderState$9",
279:       "org.jsoup.parser.TokeniserState$49",
280:       "org.jsoup.parser.HtmlTreeBuilderState$6",
281:       "org.jsoup.parser.HtmlTreeBuilderState$5",
282:       "org.jsoup.parser.HtmlTreeBuilderState$8",
283:       "org.jsoup.parser.HtmlTreeBuilderState$7"
284:     );
285:   } 
286:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
287:     mock(Class.forName("java.util.Comparator", false, Element_206_tmp__ESTest_scaffolding.class.getClassLoader()));
288:   }
289: 
290:   private static void resetClasses() {
291:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Element_206_tmp__ESTest_scaffolding.class.getClassLoader()); 
292: 
293:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
294:       "org.jsoup.nodes.Node",
295:       "org.jsoup.nodes.Element",
296:       "org.jsoup.helper.ChangeNotifyingArrayList",
297:       "org.jsoup.nodes.Element$NodeList",
298:       "org.jsoup.nodes.Element$1",
299:       "org.jsoup.nodes.Element$2",
300:       "org.jsoup.helper.Validate",
301:       "org.jsoup.parser.Tag",
302:       "org.jsoup.parser.ParseSettings",
303:       "org.jsoup.select.NodeFilter$FilterResult",
304:       "org.jsoup.internal.StringUtil",
305:       "org.jsoup.nodes.Document$OutputSettings$Syntax",
306:       "org.jsoup.parser.Parser",
307:       "org.jsoup.parser.TreeBuilder",
308:       "org.jsoup.parser.HtmlTreeBuilder",
309:       "org.jsoup.parser.Token",
310:       "org.jsoup.parser.Token$Tag",
311:       "org.jsoup.parser.Token$StartTag",
312:       "org.jsoup.nodes.Attributes",
313:       "org.jsoup.parser.Token$TokenType",
314:       "org.jsoup.parser.Token$EndTag",
315:       "org.jsoup.parser.ParseErrorList",
316:       "org.jsoup.nodes.Document",
317:       "org.jsoup.internal.Normalizer",
318:       "org.jsoup.parser.Tokeniser",
319:       "org.jsoup.parser.TokeniserState",
320:       "org.jsoup.parser.Token$Character",
321:       "org.jsoup.parser.Token$Doctype",
322:       "org.jsoup.parser.Token$Comment",
323:       "org.jsoup.parser.HtmlTreeBuilderState",
324:       "org.jsoup.parser.Token$EOF",
325:       "org.jsoup.nodes.Node$OuterHtmlVisitor",
326:       "org.jsoup.nodes.NodeUtils",
327:       "org.jsoup.nodes.Entities$CoreCharset",
328:       "org.jsoup.select.NodeTraversor",
329:       "org.jsoup.parser.HtmlTreeBuilderState$24",
330:       "org.jsoup.select.Evaluator",
331:       "org.jsoup.select.Evaluator$AttributeKeyPair",
332:       "org.jsoup.select.Evaluator$AttributeWithValue",
333:       "org.jsoup.nodes.LeafNode",
334:       "org.jsoup.nodes.TextNode",
335:       "org.jsoup.nodes.Entities$1",
336:       "org.jsoup.select.Evaluator$Tag",
337:       "org.jsoup.select.Collector",
338:       "org.jsoup.select.Elements",
339:       "org.jsoup.select.Collector$Accumulator",
340:       "org.jsoup.select.Evaluator$AttributeWithValueMatching",
341:       "org.jsoup.nodes.Attributes$Dataset",
342:       "org.jsoup.nodes.Attribute",
343:       "org.jsoup.select.Evaluator$AttributeWithValueContaining",
344:       "org.jsoup.select.Evaluator$MatchesOwn",
345:       "org.jsoup.parser.XmlTreeBuilder",
346:       "org.jsoup.parser.XmlTreeBuilder$1",
347:       "org.jsoup.select.Evaluator$AttributeWithValueNot",
348:       "org.jsoup.nodes.Attributes$Dataset$EntrySet",
349:       "org.jsoup.nodes.Attributes$Dataset$DatasetIterator",
350:       "org.jsoup.nodes.Attributes$1",
351:       "org.jsoup.select.Selector",
352:       "org.jsoup.select.QueryParser",
353:       "org.jsoup.parser.TokenQueue",
354:       "org.jsoup.select.Evaluator$Class",
355:       "org.jsoup.select.Selector$SelectorParseException",
356:       "org.jsoup.nodes.FormElement",
357:       "org.jsoup.select.Evaluator$Matches",
358:       "org.jsoup.select.Evaluator$IndexEvaluator",
359:       "org.jsoup.select.Evaluator$IndexEquals",
360:       "org.jsoup.select.Evaluator$AllElements",
361:       "org.jsoup.select.Evaluator$IsOnlyChild",
362:       "org.jsoup.select.StructuralEvaluator$Root",
363:       "org.jsoup.select.Evaluator$IndexLessThan",
364:       "org.jsoup.select.Evaluator$ContainsText",
365:       "org.jsoup.select.Evaluator$AttributeStarting",
366:       "org.jsoup.nodes.Comment",
367:       "org.jsoup.select.Evaluator$IsOnlyOfType",
368:       "org.jsoup.select.Evaluator$IndexGreaterThan",
369:       "org.jsoup.nodes.CDataNode",
370:       "org.jsoup.select.Collector$FirstFinder",
371:       "org.jsoup.select.Evaluator$Id",
372:       "org.jsoup.nodes.Node$1",
373:       "org.jsoup.select.Evaluator$ContainsOwnText",
374:       "org.jsoup.nodes.DocumentType",
375:       "org.jsoup.parser.HtmlTreeBuilderState$Constants",
376:       "org.jsoup.nodes.PseudoTextElement",
377:       "org.jsoup.Connection$Method",
378:       "org.jsoup.Jsoup",
379:       "org.jsoup.helper.HttpConnection",
380:       "org.jsoup.helper.HttpConnection$Base",
381:       "org.jsoup.helper.HttpConnection$Request",
382:       "org.jsoup.helper.HttpConnection$Response",
383:       "org.jsoup.select.Evaluator$AttributeWithValueStarting",
384:       "org.jsoup.select.CombiningEvaluator",
385:       "org.jsoup.select.CombiningEvaluator$And",
386:       "org.jsoup.select.StructuralEvaluator",
387:       "org.jsoup.select.StructuralEvaluator$ImmediateParent",
388:       "org.jsoup.select.StructuralEvaluator$Parent",
389:       "org.jsoup.nodes.XmlDeclaration",
390:       "org.jsoup.select.Evaluator$IsRoot",
391:       "org.jsoup.nodes.DataNode",
392:       "org.jsoup.select.Evaluator$Attribute",
393:       "org.jsoup.select.Evaluator$AttributeWithValueEnding",
394:       "org.jsoup.select.Evaluator$IsFirstChild",
395:       "org.jsoup.select.Evaluator$CssNthEvaluator",
396:       "org.jsoup.select.Evaluator$IsNthLastOfType",
397:       "org.jsoup.select.Evaluator$IsLastOfType",
398:       "org.jsoup.select.StructuralEvaluator$PreviousSibling",
399:       "org.jsoup.select.CombiningEvaluator$Or",
400:       "org.jsoup.nodes.BooleanAttribute",
401:       "org.jsoup.SerializationException",
402:       "org.jsoup.select.Evaluator$TagEndsWith",
403:       "org.jsoup.select.Evaluator$IsNthChild",
404:       "org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling",
405:       "org.jsoup.select.Evaluator$IsLastChild",
406:       "org.jsoup.select.Evaluator$ContainsData",
407:       "org.jsoup.parser.ParseError",
408:       "org.jsoup.select.Evaluator$IsNthLastChild",
409:       "org.jsoup.select.Evaluator$MatchText",
410:       "org.jsoup.select.Evaluator$IsNthOfType",
411:       "org.jsoup.select.Evaluator$IsFirstOfType"
412:     );
413:   }
414: }

[MASTER] 22:28:13.922 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Document document0 = Parser.parseBodyFragmentRelaxed("WdGlQ@9m", "WdGlQ@9m");
assertNotNull(document0);
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(1, document0.childNodeSize());
assertFalse(document0.isBlock());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());

Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
Document document1 = document0.quirksMode(document_QuirksMode0);
assertNotNull(document1);
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(1, document0.childNodeSize());
assertFalse(document0.isBlock());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
assertEquals("#document", document1.nodeName());
assertFalse(document1.isBlock());
assertEquals("#root", document1.tagName());
assertEquals(0, document1.siblingIndex());
assertFalse(document1.updateMetaCharsetElement());
assertEquals(1, document1.childNodeSize());
assertFalse(document1.hasParent());
assertSame(document0, document1);
assertSame(document1, document0);

boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "WdGlQ@9m");
assertFalse(boolean0);

Element element0 = document0.appendElement("label");
assertNotNull(element0);
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(2, document0.childNodeSize());
assertFalse(document0.isBlock());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
assertEquals(0, element0.childNodeSize());
assertEquals("label", element0.tagName());
assertEquals("label", element0.nodeName());
assertEquals(1, element0.siblingIndex());
assertTrue(element0.hasParent());
assertFalse(element0.isBlock());
assertSame(document0, document1);

ParseSettings parseSettings0 = ParseSettings.preserveCase;
assertNotNull(parseSettings0);

Parser parser0 = Parser.htmlParser();
assertNotNull(parser0);
assertFalse(parser0.isTrackErrors());

Attribute attribute0 = Attribute.createFromEncoded("WdGlQ@9m", "WdGlQ@9m");
assertNotNull(attribute0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

Attributes attributes0 = new Attributes();
assertNotNull(attributes0);
assertEquals(0, attributes0.size());

Attributes attributes1 = attributes0.clone();
assertNotNull(attributes1);
assertTrue(attributes1.equals((Object)attributes0));
assertEquals(0, attributes0.size());
assertEquals(0, attributes1.size());
assertNotSame(attributes0, attributes1);
assertNotSame(attributes1, attributes0);

Attributes attributes2 = attributes1.put(attribute0);
assertNotNull(attributes2);
assertFalse(attributes0.equals((Object)attributes1));
assertFalse(attributes1.equals((Object)attributes0));
assertFalse(attributes2.equals((Object)attributes0));
assertEquals(0, attributes0.size());
assertEquals(1, attributes1.size());
assertEquals(1, attributes2.size());
assertNotSame(attributes0, attributes1);
assertNotSame(attributes0, attributes2);
assertNotSame(attributes1, attributes0);
assertSame(attributes1, attributes2);
assertSame(attributes2, attributes1);
assertNotSame(attributes2, attributes0);

Element element1 = document1.head();
assertNotNull(element1);
assertFalse(element1.equals((Object)element0));
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(2, document0.childNodeSize());
assertFalse(document0.isBlock());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
assertEquals("#document", document1.nodeName());
assertFalse(document1.isBlock());
assertEquals("#root", document1.tagName());
assertEquals(0, document1.siblingIndex());
assertEquals(2, document1.childNodeSize());
assertFalse(document1.updateMetaCharsetElement());
assertFalse(document1.hasParent());
assertEquals("head", element1.tagName());
assertTrue(element1.hasParent());
assertEquals("head", element1.nodeName());
assertEquals(0, element1.childNodeSize());
assertEquals(0, element1.siblingIndex());
assertTrue(element1.isBlock());
assertSame(document0, document1);
assertSame(document1, document0);
assertNotSame(element1, element0);

Evaluator.AttributeWithValueStarting evaluator_AttributeWithValueStarting0 = new Evaluator.AttributeWithValueStarting("9GU5NTP6}}2", "9GU5NTP6}}2");
assertNotNull(evaluator_AttributeWithValueStarting0);

boolean boolean1 = document0.is((Evaluator) evaluator_AttributeWithValueStarting0);
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(2, document0.childNodeSize());
assertFalse(document0.isBlock());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
assertSame(document0, document1);

Document document2 = document0.clone();
assertNotNull(document2);
assertFalse(document2.equals((Object)document1));
assertFalse(document2.equals((Object)document0));
assertEquals("#root", document2.tagName());
assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
assertFalse(document2.hasParent());
assertFalse(document2.isBlock());
assertFalse(document2.updateMetaCharsetElement());
assertEquals(0, document2.siblingIndex());
assertEquals(2, document2.childNodeSize());
assertEquals("#document", document2.nodeName());
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(2, document0.childNodeSize());
assertFalse(document0.isBlock());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
assertNotSame(document2, document1);
assertNotSame(document2, document0);
assertNotSame(document0, document2);
assertSame(document0, document1);

String string0 = document0.className();
assertNotNull(string0);
assertEquals("", string0);
assertFalse(document0.equals((Object)document2));
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(2, document0.childNodeSize());
assertFalse(document0.isBlock());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
assertNotSame(document0, document2);
assertSame(document0, document1);

String string1 = element0.cssSelector();
assertNotNull(string1);
assertEquals("label", string1);
assertFalse(document0.equals((Object)document2));
assertFalse(string1.equals((Object)string0));
assertFalse(element0.equals((Object)element1));
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(2, document0.childNodeSize());
assertFalse(document0.isBlock());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
assertEquals(0, element0.childNodeSize());
assertEquals("label", element0.tagName());
assertEquals("label", element0.nodeName());
assertEquals(1, element0.siblingIndex());
assertTrue(element0.hasParent());
assertFalse(element0.isBlock());
assertNotSame(document0, document2);
assertSame(document0, document1);
assertNotSame(element0, element1);

Element element2 = element0.wrap("9GU5NTP6}}2");
assertNull(element2);
assertFalse(document0.equals((Object)document2));
assertFalse(element0.equals((Object)element1));
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(2, document0.childNodeSize());
assertFalse(document0.isBlock());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
assertEquals(0, element0.childNodeSize());
assertEquals("label", element0.tagName());
assertEquals("label", element0.nodeName());
assertEquals(1, element0.siblingIndex());
assertTrue(element0.hasParent());
assertFalse(element0.isBlock());
assertNotSame(document0, document2);
assertSame(document0, document1);
assertNotSame(element0, element1);

Set<String> set0 = document0.classNames();
assertNotNull(set0);
assertFalse(document0.equals((Object)document2));
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(2, document0.childNodeSize());
assertFalse(document0.isBlock());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
assertTrue(set0.isEmpty());
assertEquals(0, set0.size());
assertFalse(set0.contains(string0));
assertNotSame(document0, document2);
assertSame(document0, document1);


[MASTER] 22:28:14.383 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_216_1628288894290/org/jsoup/nodes/Element_216_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_216_1628288894290/org/jsoup/nodes/Element_216_tmp__ESTest_scaffolding.java]]
[MASTER] 22:28:14.383 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Jsoup-87/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Jsoup-87/target/classes
[MASTER] 22:28:14.383 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Jsoup-87/target/classes
[MASTER] 22:28:14.384 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Integer>>: 67
[MASTER] 22:28:14.384 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_216_1628288894290/org/jsoup/nodes/Element_216_tmp__ESTest.java uses or overrides a deprecated API.: -1
[MASTER] 22:28:14.384 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:deprecation for details.: -1
[MASTER] 22:28:14.384 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_216_1628288894290/org/jsoup/nodes/Element_216_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 22:28:14.384 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 22:28:14.384 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_216_1628288894290/org/jsoup/nodes/Element_216_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 22:28:14 GMT 2021
4:  */
5: 
6: package org.jsoup.nodes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.Comparator;
12: import java.util.Map;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.ViolatedAssumptionAnswer;
16: import org.jsoup.nodes.Attributes;
17: import org.jsoup.nodes.Document;
18: import org.jsoup.nodes.Element;
19: import org.jsoup.nodes.Node;
20: import org.jsoup.parser.Parser;
21: import org.jsoup.parser.Tag;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class Element_216_tmp__ESTest extends Element_216_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       Document document0 = Document.createShell("Unexpected token type: ");
30:       assertNotNull(document0);
31:       assertEquals("#document", document0.nodeName());
32:       assertFalse(document0.isBlock());
33:       assertEquals(0, document0.siblingIndex());
34:       assertEquals("Unexpected token type: ", document0.location());
35:       assertEquals("Unexpected token type: ", document0.baseUri());
36:       assertFalse(document0.hasParent());
37:       assertEquals("#root", document0.tagName());
38:       assertFalse(document0.updateMetaCharsetElement());
39:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
40:       assertEquals(1, document0.childNodeSize());
41:       
42:       Element element0 = document0.prependElement("br");
43:       assertNotNull(element0);
44:       assertEquals("#document", document0.nodeName());
45:       assertFalse(document0.isBlock());
46:       assertEquals(0, document0.siblingIndex());
47:       assertEquals("Unexpected token type: ", document0.location());
48:       assertEquals("Unexpected token type: ", document0.baseUri());
49:       assertFalse(document0.hasParent());
50:       assertEquals("#root", document0.tagName());
51:       assertEquals(2, document0.childNodeSize());
52:       assertFalse(document0.updateMetaCharsetElement());
53:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
54:       assertEquals(0, element0.childNodeSize());
55:       assertEquals("br", element0.tagName());
56:       assertTrue(element0.hasParent());
57:       assertEquals("br", element0.nodeName());
58:       assertEquals("Unexpected token type: ", element0.baseUri());
59:       assertEquals(0, element0.siblingIndex());
60:       assertFalse(element0.isBlock());
61:       
62:       Attributes attributes0 = new Attributes();
63:       assertNotNull(attributes0);
64:       assertEquals(0, attributes0.size());
65:       
66:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
67:       Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
68:       assertNotNull(comparator1);
69:       
70:       Element element1 = document0.head();
71:       assertNotNull(element1);
72:       assertFalse(element1.equals((Object)element0));
73:       assertEquals("#document", document0.nodeName());
74:       assertFalse(document0.isBlock());
75:       assertEquals(0, document0.siblingIndex());
76:       assertEquals("Unexpected token type: ", document0.location());
77:       assertEquals("Unexpected token type: ", document0.baseUri());
78:       assertFalse(document0.hasParent());
79:       assertEquals("#root", document0.tagName());
80:       assertEquals(2, document0.childNodeSize());
81:       assertFalse(document0.updateMetaCharsetElement());
82:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
83:       assertEquals(0, element1.siblingIndex());
84:       assertEquals("head", element1.nodeName());
85:       assertEquals(0, element1.childNodeSize());
86:       assertTrue(element1.hasParent());
87:       assertEquals("head", element1.tagName());
88:       assertTrue(element1.isBlock());
89:       assertEquals("Unexpected token type: ", element1.baseUri());
90:       assertNotSame(element1, element0);
91:       
92:       String string0 = element1.cssSelector();
93:       assertNotNull(string0);
94:       assertEquals("html > head", string0);
95:       assertFalse(element1.equals((Object)element0));
96:       assertEquals("#document", document0.nodeName());
97:       assertFalse(document0.isBlock());
98:       assertEquals(0, document0.siblingIndex());
99:       assertEquals("Unexpected token type: ", document0.location());
100:       assertEquals("Unexpected token type: ", document0.baseUri());
101:       assertFalse(document0.hasParent());
102:       assertEquals("#root", document0.tagName());
103:       assertEquals(2, document0.childNodeSize());
104:       assertFalse(document0.updateMetaCharsetElement());
105:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
106:       assertEquals(0, element1.siblingIndex());
107:       assertEquals("head", element1.nodeName());
108:       assertEquals(0, element1.childNodeSize());
109:       assertTrue(element1.hasParent());
110:       assertEquals("head", element1.tagName());
111:       assertTrue(element1.isBlock());
112:       assertEquals("Unexpected token type: ", element1.baseUri());
113:       assertNotSame(element1, element0);
114:       
115:       Document document1 = Parser.parseBodyFragment("</", "html > head");
116:       assertNotNull(document1);
117:       assertFalse(document1.equals((Object)document0));
118:       assertFalse(document1.updateMetaCharsetElement());
119:       assertEquals(1, document1.childNodeSize());
120:       assertEquals("#document", document1.nodeName());
121:       assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
122:       assertEquals("html > head", document1.baseUri());
123:       assertFalse(document1.hasParent());
124:       assertFalse(document1.isBlock());
125:       assertEquals("html > head", document1.location());
126:       assertEquals("#root", document1.tagName());
127:       assertEquals(0, document1.siblingIndex());
128:       assertNotSame(document1, document0);
129:       
130:       String string1 = element1.data();
131:       assertNotNull(string1);
132:       assertEquals("", string1);
133:       assertFalse(document0.equals((Object)document1));
134:       assertFalse(element1.equals((Object)element0));
135:       assertFalse(string1.equals((Object)string0));
136:       assertEquals("#document", document0.nodeName());
137:       assertFalse(document0.isBlock());
138:       assertEquals(0, document0.siblingIndex());
139:       assertEquals("Unexpected token type: ", document0.location());
140:       assertEquals("Unexpected token type: ", document0.baseUri());
141:       assertFalse(document0.hasParent());
142:       assertEquals("#root", document0.tagName());
143:       assertEquals(2, document0.childNodeSize());
144:       assertFalse(document0.updateMetaCharsetElement());
145:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
146:       assertEquals(0, element1.siblingIndex());
147:       assertEquals("head", element1.nodeName());
148:       assertEquals(0, element1.childNodeSize());
149:       assertTrue(element1.hasParent());
150:       assertEquals("head", element1.tagName());
151:       assertTrue(element1.isBlock());
152:       assertEquals("Unexpected token type: ", element1.baseUri());
153:       assertNotSame(document0, document1);
154:       assertNotSame(element1, element0);
155:       
156:       Tag tag0 = element0.tag();
157:       assertNotNull(tag0);
158:       assertFalse(document0.equals((Object)document1));
159:       assertFalse(element0.equals((Object)element1));
160:       assertEquals("#document", document0.nodeName());
161:       assertFalse(document0.isBlock());
162:       assertEquals(0, document0.siblingIndex());
163:       assertEquals("Unexpected token type: ", document0.location());
164:       assertEquals("Unexpected token type: ", document0.baseUri());
165:       assertFalse(document0.hasParent());
166:       assertEquals("#root", document0.tagName());
167:       assertEquals(2, document0.childNodeSize());
168:       assertFalse(document0.updateMetaCharsetElement());
169:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
170:       assertEquals(0, element0.childNodeSize());
171:       assertEquals("br", element0.tagName());
172:       assertTrue(element0.hasParent());
173:       assertEquals("br", element0.nodeName());
174:       assertEquals("Unexpected token type: ", element0.baseUri());
175:       assertEquals(0, element0.siblingIndex());
176:       assertFalse(element0.isBlock());
177:       assertFalse(tag0.isData());
178:       assertTrue(tag0.isEmpty());
179:       assertTrue(tag0.isKnownTag());
180:       assertFalse(tag0.formatAsBlock());
181:       assertFalse(tag0.isFormListed());
182:       assertFalse(tag0.isFormSubmittable());
183:       assertFalse(tag0.canContainBlock());
184:       assertTrue(tag0.isSelfClosing());
185:       assertFalse(tag0.isBlock());
186:       assertFalse(tag0.preserveWhitespace());
187:       assertTrue(tag0.isInline());
188:       assertEquals("br", tag0.toString());
189:       assertEquals("br", tag0.getName());
190:       assertNotSame(document0, document1);
191:       assertNotSame(element0, element1);
192:       
193:       Element element2 = element1.after((Node) document0);
194:       assertNotNull(element2);
195:       assertFalse(document0.equals((Object)document1));
196:       assertFalse(element1.equals((Object)element0));
197:       assertFalse(element2.equals((Object)element0));
198:       assertEquals("#document", document0.nodeName());
199:       assertEquals(1, document0.siblingIndex());
200:       assertFalse(document0.isBlock());
201:       assertEquals("Unexpected token type: ", document0.location());
202:       assertEquals("Unexpected token type: ", document0.baseUri());
203:       assertEquals("#root", document0.tagName());
204:       assertEquals(2, document0.childNodeSize());
205:       assertFalse(document0.updateMetaCharsetElement());
206:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
207:       assertTrue(document0.hasParent());
208:       assertEquals(0, element1.siblingIndex());
209:       assertEquals("head", element1.nodeName());
210:       assertEquals(0, element1.childNodeSize());
211:       assertTrue(element1.hasParent());
212:       assertEquals("head", element1.tagName());
213:       assertTrue(element1.isBlock());
214:       assertEquals("Unexpected token type: ", element1.baseUri());
215:       assertEquals("head", element2.tagName());
216:       assertTrue(element2.isBlock());
217:       assertEquals(0, element2.childNodeSize());
218:       assertTrue(element2.hasParent());
219:       assertEquals("head", element2.nodeName());
220:       assertEquals(0, element2.siblingIndex());
221:       assertEquals("Unexpected token type: ", element2.baseUri());
222:       assertNotSame(document0, document1);
223:       assertNotSame(element1, element0);
224:       assertSame(element1, element2);
225:       assertSame(element2, element1);
226:       assertNotSame(element2, element0);
227:   }
228: }
RegularFileObject[/tmp/EvoSuite_216_1628288894290/org/jsoup/nodes/Element_216_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 22:28:14 GMT 2021
5:  */
6: 
7: package org.jsoup.nodes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class Element_216_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.jsoup.nodes.Element"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Element_216_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.jsoup.nodes.Document$QuirksMode",
72:       "org.jsoup.parser.HtmlTreeBuilderState$18",
73:       "org.jsoup.select.StructuralEvaluator$ImmediateParent",
74:       "org.jsoup.parser.HtmlTreeBuilderState$19",
75:       "org.jsoup.parser.HtmlTreeBuilderState$16",
76:       "org.jsoup.helper.ChangeNotifyingArrayList",
77:       "org.jsoup.parser.HtmlTreeBuilderState$17",
78:       "org.jsoup.parser.HtmlTreeBuilderState$14",
79:       "org.jsoup.parser.HtmlTreeBuilderState$15",
80:       "org.jsoup.select.Evaluator$IndexEvaluator",
81:       "org.jsoup.select.Evaluator$IsOnlyOfType",
82:       "org.jsoup.nodes.Entities$CoreCharset",
83:       "org.jsoup.nodes.Element",
84:       "org.jsoup.parser.HtmlTreeBuilderState$12",
85:       "org.jsoup.parser.HtmlTreeBuilderState$13",
86:       "org.jsoup.parser.HtmlTreeBuilderState$10",
87:       "org.jsoup.parser.HtmlTreeBuilderState$11",
88:       "org.jsoup.select.NodeTraversor",
89:       "org.jsoup.select.Evaluator$MatchesOwn",
90:       "org.jsoup.select.CombiningEvaluator$And",
91:       "org.jsoup.parser.Token$EndTag",
92:       "org.jsoup.nodes.Document",
93:       "org.jsoup.Jsoup",
94:       "org.jsoup.parser.HtmlTreeBuilder",
95:       "org.jsoup.nodes.FormElement",
96:       "org.jsoup.select.StructuralEvaluator",
97:       "org.jsoup.select.Evaluator$IndexEquals",
98:       "org.jsoup.select.Selector$SelectorParseException",
99:       "org.jsoup.parser.Token$Tag",
100:       "org.jsoup.nodes.XmlDeclaration",
101:       "org.jsoup.parser.Token$Doctype",
102:       "org.jsoup.select.Evaluator$TagEndsWith",
103:       "org.jsoup.parser.HtmlTreeBuilderState$23",
104:       "org.jsoup.parser.HtmlTreeBuilderState$24",
105:       "org.jsoup.select.Evaluator$Tag",
106:       "org.jsoup.parser.HtmlTreeBuilderState$21",
107:       "org.jsoup.nodes.Document$OutputSettings$Syntax",
108:       "org.jsoup.parser.HtmlTreeBuilderState$22",
109:       "org.jsoup.parser.HtmlTreeBuilderState$20",
110:       "org.jsoup.parser.Token$1",
111:       "org.jsoup.internal.StringUtil",
112:       "org.jsoup.parser.Tokeniser",
113:       "org.jsoup.nodes.Comment",
114:       "org.jsoup.select.Evaluator$IndexGreaterThan",
115:       "org.jsoup.nodes.LeafNode",
116:       "org.jsoup.select.Selector",
117:       "org.jsoup.select.Evaluator$AttributeWithValueEnding",
118:       "org.jsoup.select.Collector$FirstFinder",
119:       "org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling",
120:       "org.jsoup.nodes.Node",
121:       "org.jsoup.parser.HtmlTreeBuilderState",
122:       "org.jsoup.select.Evaluator$AttributeStarting",
123:       "org.jsoup.nodes.DataNode",
124:       "org.jsoup.nodes.Attributes",
125:       "org.jsoup.parser.XmlTreeBuilder",
126:       "org.jsoup.nodes.Document$OutputSettings",
127:       "org.jsoup.select.CombiningEvaluator",
128:       "org.jsoup.select.Evaluator$ContainsData",
129:       "org.jsoup.internal.Normalizer",
130:       "org.jsoup.nodes.Attributes$Dataset$EntrySet",
131:       "org.jsoup.nodes.Attributes$Dataset",
132:       "org.jsoup.helper.Validate",
133:       "org.jsoup.select.Evaluator$CssNthEvaluator",
134:       "org.jsoup.parser.Token$Comment",
135:       "org.jsoup.select.Evaluator$IsFirstOfType",
136:       "org.jsoup.nodes.Element$NodeList",
137:       "org.jsoup.parser.TokeniserState$56",
138:       "org.jsoup.parser.TokeniserState$57",
139:       "org.jsoup.parser.TokeniserState$58",
140:       "org.jsoup.parser.TokeniserState$59",
141:       "org.jsoup.parser.TokeniserState$52",
142:       "org.jsoup.parser.TokeniserState$53",
143:       "org.jsoup.parser.TreeBuilder",
144:       "org.jsoup.parser.TokeniserState$54",
145:       "org.jsoup.parser.TokeniserState$55",
146:       "org.jsoup.nodes.PseudoTextElement",
147:       "org.jsoup.parser.TokeniserState$50",
148:       "org.jsoup.parser.TokeniserState$51",
149:       "org.jsoup.parser.Parser",
150:       "org.jsoup.select.Evaluator$IsEmpty",
151:       "org.jsoup.select.Evaluator$AttributeWithValueMatching",
152:       "org.jsoup.select.Evaluator$IsNthChild",
153:       "org.jsoup.parser.HtmlTreeBuilderState$Constants",
154:       "org.jsoup.select.Evaluator$Class",
155:       "org.jsoup.parser.TokeniserState$67",
156:       "org.jsoup.parser.TokeniserState$63",
157:       "org.jsoup.nodes.Node$OuterHtmlVisitor",
158:       "org.jsoup.parser.TokeniserState$64",
159:       "org.jsoup.parser.TokeniserState$65",
160:       "org.jsoup.parser.Token",
161:       "org.jsoup.parser.TokeniserState$66",
162:       "org.jsoup.parser.TokeniserState$60",
163:       "org.jsoup.select.Evaluator$AttributeKeyPair",
164:       "org.jsoup.parser.TokeniserState$61",
165:       "org.jsoup.parser.TokeniserState$62",
166:       "org.jsoup.select.Evaluator$IsNthLastOfType",
167:       "org.jsoup.parser.Tag",
168:       "org.jsoup.parser.Token$Character",
169:       "org.jsoup.select.Evaluator$IsLastOfType",
170:       "org.jsoup.select.Evaluator$Attribute",
171:       "org.jsoup.select.NodeFilter$FilterResult",
172:       "org.jsoup.nodes.Entities",
173:       "org.jsoup.select.Evaluator$AttributeWithValueContaining",
174:       "org.jsoup.select.Elements",
175:       "org.jsoup.parser.Token$CData",
176:       "org.jsoup.nodes.Element$2",
177:       "org.jsoup.select.Evaluator$AllElements",
178:       "org.jsoup.nodes.Element$1",
179:       "org.jsoup.nodes.TextNode",
180:       "org.jsoup.select.Evaluator$AttributeWithValue",
181:       "org.jsoup.select.Evaluator$AttributeWithValueNot",
182:       "org.jsoup.parser.ParseErrorList",
183:       "org.jsoup.nodes.BooleanAttribute",
184:       "org.jsoup.SerializationException",
185:       "org.jsoup.select.CombiningEvaluator$Or",
186:       "org.jsoup.select.Evaluator$ContainsText",
187:       "org.jsoup.select.Evaluator$Id",
188:       "org.jsoup.select.Evaluator$IsNthOfType",
189:       "org.jsoup.select.Collector",
190:       "org.jsoup.select.Collector$Accumulator",
191:       "org.jsoup.nodes.Attributes$Dataset$DatasetIterator",
192:       "org.jsoup.parser.XmlTreeBuilder$1",
193:       "org.jsoup.parser.CharacterReader",
194:       "org.jsoup.select.Evaluator$IsFirstChild",
195:       "org.jsoup.select.StructuralEvaluator$Root",
196:       "org.jsoup.nodes.Node$1",
197:       "org.jsoup.select.NodeVisitor",
198:       "org.jsoup.parser.TokeniserState$2",
199:       "org.jsoup.parser.TokeniserState$12",
200:       "org.jsoup.parser.TokeniserState$1",
201:       "org.jsoup.parser.TokeniserState$13",
202:       "org.jsoup.nodes.Attributes$1",
203:       "org.jsoup.parser.TokeniserState$14",
204:       "org.jsoup.parser.TokeniserState$15",
205:       "org.jsoup.select.Evaluator$AttributeWithValueStarting",
206:       "org.jsoup.parser.Token$StartTag",
207:       "org.jsoup.parser.Token$EOF",
208:       "org.jsoup.parser.TokeniserState$10",
209:       "org.jsoup.parser.TokeniserState$11",
210:       "org.jsoup.nodes.DocumentType",
211:       "org.jsoup.parser.TokeniserState$9",
212:       "org.jsoup.parser.TokeniserState$8",
213:       "org.jsoup.parser.TokeniserState$7",
214:       "org.jsoup.parser.TokeniserState$6",
215:       "org.jsoup.parser.TokeniserState$5",
216:       "org.jsoup.parser.TokeniserState$4",
217:       "org.jsoup.select.QueryParser",
218:       "org.jsoup.parser.TokeniserState$3",
219:       "org.jsoup.nodes.NodeUtils",
220:       "org.jsoup.select.Evaluator$Matches",
221:       "org.jsoup.select.Evaluator$IsOnlyChild",
222:       "org.jsoup.parser.TokeniserState$16",
223:       "org.jsoup.parser.TokeniserState$17",
224:       "org.jsoup.parser.TokeniserState$18",
225:       "org.jsoup.nodes.Entities$1",
226:       "org.jsoup.parser.TokeniserState$19",
227:       "org.jsoup.parser.TokeniserState$23",
228:       "org.jsoup.UncheckedIOException",
229:       "org.jsoup.parser.TokeniserState$24",
230:       "org.jsoup.parser.TokeniserState$25",
231:       "org.jsoup.parser.TokeniserState$26",
232:       "org.jsoup.parser.TokeniserState$20",
233:       "org.jsoup.parser.TokeniserState$21",
234:       "org.jsoup.parser.TokeniserState$22",
235:       "org.jsoup.parser.TokenQueue",
236:       "org.jsoup.parser.ParseSettings",
237:       "org.jsoup.select.NodeFilter",
238:       "org.jsoup.select.Evaluator$ContainsOwnText",
239:       "org.jsoup.parser.TokeniserState$27",
240:       "org.jsoup.parser.TokeniserState",
241:       "org.jsoup.parser.TokeniserState$28",
242:       "org.jsoup.parser.TokeniserState$29",
243:       "org.jsoup.parser.TokeniserState$34",
244:       "org.jsoup.select.Evaluator$IndexLessThan",
245:       "org.jsoup.parser.TokeniserState$35",
246:       "org.jsoup.parser.TokeniserState$36",
247:       "org.jsoup.parser.TokeniserState$37",
248:       "org.jsoup.parser.TokeniserState$30",
249:       "org.jsoup.parser.TokeniserState$31",
250:       "org.jsoup.parser.TokeniserState$32",
251:       "org.jsoup.parser.TokeniserState$33",
252:       "org.jsoup.nodes.Entities$EscapeMode",
253:       "org.jsoup.select.Evaluator$MatchText",
254:       "org.jsoup.select.Evaluator",
255:       "org.jsoup.Connection",
256:       "org.jsoup.select.Evaluator$IsRoot",
257:       "org.jsoup.parser.TokeniserState$38",
258:       "org.jsoup.parser.TokeniserState$39",
259:       "org.jsoup.nodes.CDataNode",
260:       "org.jsoup.parser.TokeniserState$45",
261:       "org.jsoup.parser.TokeniserState$46",
262:       "org.jsoup.parser.TokeniserState$47",
263:       "org.jsoup.select.StructuralEvaluator$Parent",
264:       "org.jsoup.parser.TokeniserState$48",
265:       "org.jsoup.select.Evaluator$IsLastChild",
266:       "org.jsoup.parser.TokeniserState$41",
267:       "org.jsoup.select.Evaluator$IsNthLastChild",
268:       "org.jsoup.parser.TokeniserState$42",
269:       "org.jsoup.parser.TokeniserState$43",
270:       "org.jsoup.parser.TokeniserState$44",
271:       "org.jsoup.parser.TokeniserState$40",
272:       "org.jsoup.parser.Token$TokenType",
273:       "org.jsoup.parser.HtmlTreeBuilderState$2",
274:       "org.jsoup.parser.HtmlTreeBuilderState$1",
275:       "org.jsoup.parser.HtmlTreeBuilderState$4",
276:       "org.jsoup.nodes.Attribute",
277:       "org.jsoup.parser.HtmlTreeBuilderState$3",
278:       "org.jsoup.parser.HtmlTreeBuilderState$9",
279:       "org.jsoup.parser.TokeniserState$49",
280:       "org.jsoup.parser.HtmlTreeBuilderState$6",
281:       "org.jsoup.parser.HtmlTreeBuilderState$5",
282:       "org.jsoup.parser.HtmlTreeBuilderState$8",
283:       "org.jsoup.parser.HtmlTreeBuilderState$7"
284:     );
285:   } 
286:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
287:     mock(Class.forName("java.util.Comparator", false, Element_216_tmp__ESTest_scaffolding.class.getClassLoader()));
288:   }
289: 
290:   private static void resetClasses() {
291:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Element_216_tmp__ESTest_scaffolding.class.getClassLoader()); 
292: 
293:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
294:       "org.jsoup.nodes.Node",
295:       "org.jsoup.nodes.Element",
296:       "org.jsoup.helper.ChangeNotifyingArrayList",
297:       "org.jsoup.nodes.Element$NodeList",
298:       "org.jsoup.nodes.Element$1",
299:       "org.jsoup.nodes.Element$2",
300:       "org.jsoup.helper.Validate",
301:       "org.jsoup.parser.Tag",
302:       "org.jsoup.parser.ParseSettings",
303:       "org.jsoup.select.NodeFilter$FilterResult",
304:       "org.jsoup.internal.StringUtil",
305:       "org.jsoup.nodes.Document$OutputSettings$Syntax",
306:       "org.jsoup.parser.Parser",
307:       "org.jsoup.parser.TreeBuilder",
308:       "org.jsoup.parser.HtmlTreeBuilder",
309:       "org.jsoup.parser.Token",
310:       "org.jsoup.parser.Token$Tag",
311:       "org.jsoup.parser.Token$StartTag",
312:       "org.jsoup.nodes.Attributes",
313:       "org.jsoup.parser.Token$TokenType",
314:       "org.jsoup.parser.Token$EndTag",
315:       "org.jsoup.parser.ParseErrorList",
316:       "org.jsoup.nodes.Document",
317:       "org.jsoup.internal.Normalizer",
318:       "org.jsoup.parser.Tokeniser",
319:       "org.jsoup.parser.TokeniserState",
320:       "org.jsoup.parser.Token$Character",
321:       "org.jsoup.parser.Token$Doctype",
322:       "org.jsoup.parser.Token$Comment",
323:       "org.jsoup.parser.HtmlTreeBuilderState",
324:       "org.jsoup.parser.Token$EOF",
325:       "org.jsoup.nodes.Node$OuterHtmlVisitor",
326:       "org.jsoup.nodes.NodeUtils",
327:       "org.jsoup.nodes.Entities$CoreCharset",
328:       "org.jsoup.select.NodeTraversor",
329:       "org.jsoup.parser.HtmlTreeBuilderState$24",
330:       "org.jsoup.select.Evaluator",
331:       "org.jsoup.select.Evaluator$AttributeKeyPair",
332:       "org.jsoup.select.Evaluator$AttributeWithValue",
333:       "org.jsoup.nodes.LeafNode",
334:       "org.jsoup.nodes.TextNode",
335:       "org.jsoup.nodes.Entities$1",
336:       "org.jsoup.select.Evaluator$Tag",
337:       "org.jsoup.select.Collector",
338:       "org.jsoup.select.Elements",
339:       "org.jsoup.select.Collector$Accumulator",
340:       "org.jsoup.select.Evaluator$AttributeWithValueMatching",
341:       "org.jsoup.nodes.Attributes$Dataset",
342:       "org.jsoup.nodes.Attribute",
343:       "org.jsoup.select.Evaluator$AttributeWithValueContaining",
344:       "org.jsoup.select.Evaluator$MatchesOwn",
345:       "org.jsoup.parser.XmlTreeBuilder",
346:       "org.jsoup.parser.XmlTreeBuilder$1",
347:       "org.jsoup.select.Evaluator$AttributeWithValueNot",
348:       "org.jsoup.nodes.Attributes$Dataset$EntrySet",
349:       "org.jsoup.nodes.Attributes$Dataset$DatasetIterator",
350:       "org.jsoup.nodes.Attributes$1",
351:       "org.jsoup.select.Selector",
352:       "org.jsoup.select.QueryParser",
353:       "org.jsoup.parser.TokenQueue",
354:       "org.jsoup.select.Evaluator$Class",
355:       "org.jsoup.select.Selector$SelectorParseException",
356:       "org.jsoup.nodes.FormElement",
357:       "org.jsoup.select.Evaluator$Matches",
358:       "org.jsoup.select.Evaluator$IndexEvaluator",
359:       "org.jsoup.select.Evaluator$IndexEquals",
360:       "org.jsoup.select.Evaluator$AllElements",
361:       "org.jsoup.select.Evaluator$IsOnlyChild",
362:       "org.jsoup.select.StructuralEvaluator$Root",
363:       "org.jsoup.select.Evaluator$IndexLessThan",
364:       "org.jsoup.select.Evaluator$ContainsText",
365:       "org.jsoup.select.Evaluator$AttributeStarting",
366:       "org.jsoup.nodes.Comment",
367:       "org.jsoup.select.Evaluator$IsOnlyOfType",
368:       "org.jsoup.select.Evaluator$IndexGreaterThan",
369:       "org.jsoup.nodes.CDataNode",
370:       "org.jsoup.select.Collector$FirstFinder",
371:       "org.jsoup.select.Evaluator$Id",
372:       "org.jsoup.nodes.Node$1",
373:       "org.jsoup.select.Evaluator$ContainsOwnText",
374:       "org.jsoup.nodes.DocumentType",
375:       "org.jsoup.parser.HtmlTreeBuilderState$Constants",
376:       "org.jsoup.nodes.PseudoTextElement",
377:       "org.jsoup.Connection$Method",
378:       "org.jsoup.Jsoup",
379:       "org.jsoup.helper.HttpConnection",
380:       "org.jsoup.helper.HttpConnection$Base",
381:       "org.jsoup.helper.HttpConnection$Request",
382:       "org.jsoup.helper.HttpConnection$Response",
383:       "org.jsoup.select.Evaluator$AttributeWithValueStarting",
384:       "org.jsoup.select.CombiningEvaluator",
385:       "org.jsoup.select.CombiningEvaluator$And",
386:       "org.jsoup.select.StructuralEvaluator",
387:       "org.jsoup.select.StructuralEvaluator$ImmediateParent",
388:       "org.jsoup.select.StructuralEvaluator$Parent",
389:       "org.jsoup.nodes.XmlDeclaration",
390:       "org.jsoup.select.Evaluator$IsRoot",
391:       "org.jsoup.nodes.DataNode",
392:       "org.jsoup.select.Evaluator$Attribute",
393:       "org.jsoup.select.Evaluator$AttributeWithValueEnding",
394:       "org.jsoup.select.Evaluator$IsFirstChild",
395:       "org.jsoup.select.Evaluator$CssNthEvaluator",
396:       "org.jsoup.select.Evaluator$IsNthLastOfType",
397:       "org.jsoup.select.Evaluator$IsLastOfType",
398:       "org.jsoup.select.StructuralEvaluator$PreviousSibling",
399:       "org.jsoup.select.CombiningEvaluator$Or",
400:       "org.jsoup.nodes.BooleanAttribute",
401:       "org.jsoup.SerializationException",
402:       "org.jsoup.select.Evaluator$TagEndsWith",
403:       "org.jsoup.select.Evaluator$IsNthChild",
404:       "org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling",
405:       "org.jsoup.select.Evaluator$IsLastChild",
406:       "org.jsoup.select.Evaluator$ContainsData",
407:       "org.jsoup.parser.ParseError",
408:       "org.jsoup.select.Evaluator$IsNthLastChild",
409:       "org.jsoup.select.Evaluator$MatchText",
410:       "org.jsoup.select.Evaluator$IsNthOfType",
411:       "org.jsoup.select.Evaluator$IsFirstOfType"
412:     );
413:   }
414: }

[MASTER] 22:28:14.387 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Document document0 = Document.createShell("Unexpected token type: ");
assertNotNull(document0);
assertEquals("#document", document0.nodeName());
assertFalse(document0.isBlock());
assertEquals(0, document0.siblingIndex());
assertEquals("Unexpected token type: ", document0.location());
assertEquals("Unexpected token type: ", document0.baseUri());
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals(1, document0.childNodeSize());

Element element0 = document0.prependElement("br");
assertNotNull(element0);
assertEquals("#document", document0.nodeName());
assertFalse(document0.isBlock());
assertEquals(0, document0.siblingIndex());
assertEquals("Unexpected token type: ", document0.location());
assertEquals("Unexpected token type: ", document0.baseUri());
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertEquals(2, document0.childNodeSize());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals(0, element0.childNodeSize());
assertEquals("br", element0.tagName());
assertTrue(element0.hasParent());
assertEquals("br", element0.nodeName());
assertEquals("Unexpected token type: ", element0.baseUri());
assertEquals(0, element0.siblingIndex());
assertFalse(element0.isBlock());

Attributes attributes0 = new Attributes();
assertNotNull(attributes0);
assertEquals(0, attributes0.size());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

Element element1 = document0.head();
assertNotNull(element1);
assertFalse(element1.equals((Object)element0));
assertEquals("#document", document0.nodeName());
assertFalse(document0.isBlock());
assertEquals(0, document0.siblingIndex());
assertEquals("Unexpected token type: ", document0.location());
assertEquals("Unexpected token type: ", document0.baseUri());
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertEquals(2, document0.childNodeSize());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals(0, element1.siblingIndex());
assertEquals("head", element1.nodeName());
assertEquals(0, element1.childNodeSize());
assertTrue(element1.hasParent());
assertEquals("head", element1.tagName());
assertTrue(element1.isBlock());
assertEquals("Unexpected token type: ", element1.baseUri());
assertNotSame(element1, element0);

String string0 = element1.cssSelector();
assertNotNull(string0);
assertEquals("html > head", string0);
assertFalse(element1.equals((Object)element0));
assertEquals("#document", document0.nodeName());
assertFalse(document0.isBlock());
assertEquals(0, document0.siblingIndex());
assertEquals("Unexpected token type: ", document0.location());
assertEquals("Unexpected token type: ", document0.baseUri());
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertEquals(2, document0.childNodeSize());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals(0, element1.siblingIndex());
assertEquals("head", element1.nodeName());
assertEquals(0, element1.childNodeSize());
assertTrue(element1.hasParent());
assertEquals("head", element1.tagName());
assertTrue(element1.isBlock());
assertEquals("Unexpected token type: ", element1.baseUri());
assertNotSame(element1, element0);

Document document1 = Parser.parseBodyFragment("</", "html > head");
assertNotNull(document1);
assertFalse(document1.equals((Object)document0));
assertFalse(document1.updateMetaCharsetElement());
assertEquals(1, document1.childNodeSize());
assertEquals("#document", document1.nodeName());
assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
assertEquals("html > head", document1.baseUri());
assertFalse(document1.hasParent());
assertFalse(document1.isBlock());
assertEquals("html > head", document1.location());
assertEquals("#root", document1.tagName());
assertEquals(0, document1.siblingIndex());
assertNotSame(document1, document0);

String string1 = element1.data();
assertNotNull(string1);
assertEquals("", string1);
assertFalse(document0.equals((Object)document1));
assertFalse(element1.equals((Object)element0));
assertFalse(string1.equals((Object)string0));
assertEquals("#document", document0.nodeName());
assertFalse(document0.isBlock());
assertEquals(0, document0.siblingIndex());
assertEquals("Unexpected token type: ", document0.location());
assertEquals("Unexpected token type: ", document0.baseUri());
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertEquals(2, document0.childNodeSize());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals(0, element1.siblingIndex());
assertEquals("head", element1.nodeName());
assertEquals(0, element1.childNodeSize());
assertTrue(element1.hasParent());
assertEquals("head", element1.tagName());
assertTrue(element1.isBlock());
assertEquals("Unexpected token type: ", element1.baseUri());
assertNotSame(document0, document1);
assertNotSame(element1, element0);

Tag tag0 = element0.tag();
assertNotNull(tag0);
assertFalse(document0.equals((Object)document1));
assertFalse(element0.equals((Object)element1));
assertEquals("#document", document0.nodeName());
assertFalse(document0.isBlock());
assertEquals(0, document0.siblingIndex());
assertEquals("Unexpected token type: ", document0.location());
assertEquals("Unexpected token type: ", document0.baseUri());
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertEquals(2, document0.childNodeSize());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals(0, element0.childNodeSize());
assertEquals("br", element0.tagName());
assertTrue(element0.hasParent());
assertEquals("br", element0.nodeName());
assertEquals("Unexpected token type: ", element0.baseUri());
assertEquals(0, element0.siblingIndex());
assertFalse(element0.isBlock());
assertFalse(tag0.isData());
assertTrue(tag0.isEmpty());
assertTrue(tag0.isKnownTag());
assertFalse(tag0.formatAsBlock());
assertFalse(tag0.isFormListed());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.canContainBlock());
assertTrue(tag0.isSelfClosing());
assertFalse(tag0.isBlock());
assertFalse(tag0.preserveWhitespace());
assertTrue(tag0.isInline());
assertEquals("br", tag0.toString());
assertEquals("br", tag0.getName());
assertNotSame(document0, document1);
assertNotSame(element0, element1);

Element element2 = element1.after((Node) document0);
assertNotNull(element2);
assertFalse(document0.equals((Object)document1));
assertFalse(element1.equals((Object)element0));
assertFalse(element2.equals((Object)element0));
assertEquals("#document", document0.nodeName());
assertEquals(1, document0.siblingIndex());
assertFalse(document0.isBlock());
assertEquals("Unexpected token type: ", document0.location());
assertEquals("Unexpected token type: ", document0.baseUri());
assertEquals("#root", document0.tagName());
assertEquals(2, document0.childNodeSize());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertTrue(document0.hasParent());
assertEquals(0, element1.siblingIndex());
assertEquals("head", element1.nodeName());
assertEquals(0, element1.childNodeSize());
assertTrue(element1.hasParent());
assertEquals("head", element1.tagName());
assertTrue(element1.isBlock());
assertEquals("Unexpected token type: ", element1.baseUri());
assertEquals("head", element2.tagName());
assertTrue(element2.isBlock());
assertEquals(0, element2.childNodeSize());
assertTrue(element2.hasParent());
assertEquals("head", element2.nodeName());
assertEquals(0, element2.siblingIndex());
assertEquals("Unexpected token type: ", element2.baseUri());
assertNotSame(document0, document1);
assertNotSame(element1, element0);
assertSame(element1, element2);
assertSame(element2, element1);
assertNotSame(element2, element0);


[MASTER] 22:28:14.851 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_224_1628288894816/org/jsoup/nodes/Element_224_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_224_1628288894816/org/jsoup/nodes/Element_224_tmp__ESTest_scaffolding.java]]
[MASTER] 22:28:14.851 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Jsoup-87/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Jsoup-87/target/classes
[MASTER] 22:28:14.851 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Jsoup-87/target/classes
[MASTER] 22:28:14.852 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Integer>>: 168
[MASTER] 22:28:14.852 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_224_1628288894816/org/jsoup/nodes/Element_224_tmp__ESTest.java uses or overrides a deprecated API.: -1
[MASTER] 22:28:14.852 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:deprecation for details.: -1
[MASTER] 22:28:14.852 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_224_1628288894816/org/jsoup/nodes/Element_224_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 22:28:14.852 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 22:28:14.852 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_224_1628288894816/org/jsoup/nodes/Element_224_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 22:28:14 GMT 2021
4:  */
5: 
6: package org.jsoup.nodes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.Comparator;
12: import java.util.Map;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.ViolatedAssumptionAnswer;
16: import org.jsoup.nodes.Attributes;
17: import org.jsoup.nodes.Document;
18: import org.jsoup.nodes.Element;
19: import org.jsoup.nodes.Entities;
20: import org.jsoup.nodes.FormElement;
21: import org.jsoup.nodes.Node;
22: import org.jsoup.parser.ParseSettings;
23: import org.jsoup.parser.Parser;
24: import org.jsoup.parser.Tag;
25: import org.jsoup.select.Elements;
26: import org.junit.runner.RunWith;
27: 
28: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
29: public class Element_224_tmp__ESTest extends Element_224_tmp__ESTest_scaffolding {
30: 
31:   @Test(timeout = 4000)
32:   public void test0()  throws Throwable  {
33:       Document document0 = Document.createShell("2|-^8");
34:       assertNotNull(document0);
35:       assertFalse(document0.hasParent());
36:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
37:       assertEquals(1, document0.childNodeSize());
38:       assertEquals("#root", document0.tagName());
39:       assertEquals(0, document0.siblingIndex());
40:       assertEquals("#document", document0.nodeName());
41:       assertEquals("2|-^8", document0.baseUri());
42:       assertFalse(document0.isBlock());
43:       assertEquals("2|-^8", document0.location());
44:       assertFalse(document0.updateMetaCharsetElement());
45:       
46:       Document document1 = Parser.parseBodyFragment("2|-^8", "2|-^8");
47:       assertNotNull(document1);
48:       assertFalse(document1.equals((Object)document0));
49:       assertEquals(0, document1.siblingIndex());
50:       assertEquals("2|-^8", document1.location());
51:       assertEquals("2|-^8", document1.baseUri());
52:       assertEquals("#document", document1.nodeName());
53:       assertFalse(document1.isBlock());
54:       assertFalse(document1.hasParent());
55:       assertEquals("#root", document1.tagName());
56:       assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
57:       assertEquals(1, document1.childNodeSize());
58:       assertFalse(document1.updateMetaCharsetElement());
59:       assertNotSame(document1, document0);
60:       
61:       Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
62:       assertNotNull(document_OutputSettings0);
63:       assertFalse(document_OutputSettings0.outline());
64:       assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
65:       assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
66:       assertEquals(1, document_OutputSettings0.indentAmount());
67:       assertTrue(document_OutputSettings0.prettyPrint());
68:       
69:       Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
70:       assertNotNull(document_OutputSettings1);
71:       assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
72:       assertEquals(1, document_OutputSettings1.indentAmount());
73:       assertTrue(document_OutputSettings1.prettyPrint());
74:       assertFalse(document_OutputSettings1.outline());
75:       assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
76:       assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
77:       
78:       ParseSettings parseSettings0 = ParseSettings.preserveCase;
79:       assertNotNull(parseSettings0);
80:       
81:       Elements elements0 = document0.getElementsByIndexEquals(60);
82:       assertNotNull(elements0);
83:       assertFalse(document0.equals((Object)document1));
84:       assertFalse(document0.hasParent());
85:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
86:       assertEquals(1, document0.childNodeSize());
87:       assertEquals("#root", document0.tagName());
88:       assertEquals(0, document0.siblingIndex());
89:       assertEquals("#document", document0.nodeName());
90:       assertEquals("2|-^8", document0.baseUri());
91:       assertFalse(document0.isBlock());
92:       assertEquals("2|-^8", document0.location());
93:       assertFalse(document0.updateMetaCharsetElement());
94:       assertEquals(0, elements0.size());
95:       assertTrue(elements0.isEmpty());
96:       assertNotSame(document0, document1);
97:       
98:       Document document2 = new Document("html");
99:       assertNotNull(document2);
100:       assertFalse(document2.equals((Object)document1));
101:       assertFalse(document2.equals((Object)document0));
102:       assertEquals(0, document2.childNodeSize());
103:       assertEquals("#root", document2.tagName());
104:       assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
105:       assertEquals("#document", document2.nodeName());
106:       assertFalse(document2.updateMetaCharsetElement());
107:       assertEquals(0, document2.siblingIndex());
108:       assertEquals("html", document2.location());
109:       assertFalse(document2.isBlock());
110:       assertEquals("html", document2.baseUri());
111:       assertFalse(document2.hasParent());
112:       
113:       Node[] nodeArray0 = new Node[6];
114:       nodeArray0[0] = (Node) document1;
115:       nodeArray0[1] = (Node) document1;
116:       Tag tag0 = Tag.valueOf("!Bj<_V>NUO:3uPq/", parseSettings0);
117:       assertNotNull(tag0);
118:       assertFalse(tag0.isData());
119:       assertFalse(tag0.isKnownTag());
120:       assertEquals("!Bj<_V>NUO:3uPq/", tag0.toString());
121:       assertFalse(tag0.isFormSubmittable());
122:       assertFalse(tag0.isEmpty());
123:       assertFalse(tag0.isFormListed());
124:       assertEquals("!Bj<_V>NUO:3uPq/", tag0.getName());
125:       assertFalse(tag0.preserveWhitespace());
126:       assertTrue(tag0.isInline());
127:       assertTrue(tag0.formatAsBlock());
128:       assertFalse(tag0.canContainBlock());
129:       assertFalse(tag0.isSelfClosing());
130:       assertFalse(tag0.isBlock());
131:       
132:       Attributes attributes0 = new Attributes();
133:       assertNotNull(attributes0);
134:       assertEquals(0, attributes0.size());
135:       
136:       Attributes attributes1 = attributes0.put("(FEJ,GwF", "2|-^8");
137:       assertNotNull(attributes1);
138:       assertEquals(1, attributes0.size());
139:       assertEquals(1, attributes1.size());
140:       assertSame(attributes0, attributes1);
141:       assertSame(attributes1, attributes0);
142:       
143:       FormElement formElement0 = new FormElement(tag0, "(FEJ,GwF", attributes0);
144:       assertNotNull(formElement0);
145:       assertFalse(tag0.isData());
146:       assertFalse(tag0.isKnownTag());
147:       assertEquals("!Bj<_V>NUO:3uPq/", tag0.toString());
148:       assertFalse(tag0.isFormSubmittable());
149:       assertFalse(tag0.isEmpty());
150:       assertFalse(tag0.isFormListed());
151:       assertEquals("!Bj<_V>NUO:3uPq/", tag0.getName());
152:       assertFalse(tag0.preserveWhitespace());
153:       assertTrue(tag0.isInline());
154:       assertTrue(tag0.formatAsBlock());
155:       assertFalse(tag0.canContainBlock());
156:       assertFalse(tag0.isSelfClosing());
157:       assertFalse(tag0.isBlock());
158:       assertEquals(1, attributes0.size());
159:       assertFalse(formElement0.hasParent());
160:       assertEquals(0, formElement0.childNodeSize());
161:       assertEquals("!Bj<_V>NUO:3uPq/", formElement0.tagName());
162:       assertEquals("(FEJ,GwF", formElement0.baseUri());
163:       assertEquals("!Bj<_V>NUO:3uPq/", formElement0.nodeName());
164:       assertEquals(0, formElement0.siblingIndex());
165:       assertFalse(formElement0.isBlock());
166:       
167:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
168:       Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
169:       assertNotNull(comparator1);
170:       
171:       Element element0 = document1.head();
172:       assertNotNull(element0);
173:       assertFalse(document1.equals((Object)document2));
174:       assertFalse(document1.equals((Object)document0));
175:       assertTrue(element0.hasParent());
176:       assertTrue(element0.isBlock());
177:       assertEquals("head", element0.tagName());
178:       assertEquals(0, element0.childNodeSize());
179:       assertEquals("head", element0.nodeName());
180:       assertEquals(0, element0.siblingIndex());
181:       assertEquals("2|-^8", element0.baseUri());
182:       assertEquals(0, document1.siblingIndex());
183:       assertEquals("2|-^8", document1.location());
184:       assertEquals("2|-^8", document1.baseUri());
185:       assertEquals("#document", document1.nodeName());
186:       assertFalse(document1.isBlock());
187:       assertFalse(document1.hasParent());
188:       assertEquals("#root", document1.tagName());
189:       assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
190:       assertEquals(1, document1.childNodeSize());
191:       assertFalse(document1.updateMetaCharsetElement());
192:       assertNotSame(document1, document2);
193:       assertNotSame(document1, document0);
194:       
195:       Element element1 = element0.appendChild(document2);
196:       assertNotNull(element1);
197:       assertFalse(document1.equals((Object)document2));
198:       assertFalse(document1.equals((Object)document0));
199:       assertFalse(document2.equals((Object)document1));
200:       assertFalse(document2.equals((Object)document0));
201:       assertTrue(element0.hasParent());
202:       assertEquals(1, element0.childNodeSize());
203:       assertTrue(element0.isBlock());
204:       assertEquals("head", element0.tagName());
205:       assertEquals("head", element0.nodeName());
206:       assertEquals(0, element0.siblingIndex());
207:       assertEquals("2|-^8", element0.baseUri());
208:       assertEquals("head", element1.nodeName());
209:       assertEquals(0, element1.siblingIndex());
210:       assertEquals("2|-^8", element1.baseUri());
211:       assertEquals("head", element1.tagName());
212:       assertTrue(element1.isBlock());
213:       assertTrue(element1.hasParent());
214:       assertEquals(1, element1.childNodeSize());
215:       assertEquals(0, document1.siblingIndex());
216:       assertEquals("2|-^8", document1.location());
217:       assertEquals("2|-^8", document1.baseUri());
218:       assertEquals("#document", document1.nodeName());
219:       assertFalse(document1.isBlock());
220:       assertFalse(document1.hasParent());
221:       assertEquals("#root", document1.tagName());
222:       assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
223:       assertEquals(1, document1.childNodeSize());
224:       assertFalse(document1.updateMetaCharsetElement());
225:       assertEquals(0, document2.childNodeSize());
226:       assertEquals("#root", document2.tagName());
227:       assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
228:       assertTrue(document2.hasParent());
229:       assertEquals("#document", document2.nodeName());
230:       assertFalse(document2.updateMetaCharsetElement());
231:       assertEquals(0, document2.siblingIndex());
232:       assertEquals("html", document2.location());
233:       assertFalse(document2.isBlock());
234:       assertEquals("html", document2.baseUri());
235:       assertSame(element0, element1);
236:       assertSame(element1, element0);
237:       assertNotSame(document1, document2);
238:       assertNotSame(document1, document0);
239:       assertNotSame(document2, document1);
240:       assertNotSame(document2, document0);
241:       
242:       Element element2 = element0.getElementById(")R");
243:       assertNull(element2);
244:       assertFalse(document1.equals((Object)document2));
245:       assertFalse(document1.equals((Object)document0));
246:       assertTrue(element0.hasParent());
247:       assertEquals(1, element0.childNodeSize());
248:       assertTrue(element0.isBlock());
249:       assertEquals("head", element0.tagName());
250:       assertEquals("head", element0.nodeName());
251:       assertEquals(0, element0.siblingIndex());
252:       assertEquals("2|-^8", element0.baseUri());
253:       assertEquals(0, document1.siblingIndex());
254:       assertEquals("2|-^8", document1.location());
255:       assertEquals("2|-^8", document1.baseUri());
256:       assertEquals("#document", document1.nodeName());
257:       assertFalse(document1.isBlock());
258:       assertFalse(document1.hasParent());
259:       assertEquals("#root", document1.tagName());
260:       assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
261:       assertEquals(1, document1.childNodeSize());
262:       assertFalse(document1.updateMetaCharsetElement());
263:       assertSame(element0, element1);
264:       assertNotSame(document1, document2);
265:       assertNotSame(document1, document0);
266:       
267:       String string0 = element0.cssSelector();
268:       assertNotNull(string0);
269:       assertEquals("html > head", string0);
270:       assertFalse(document1.equals((Object)document2));
271:       assertFalse(document1.equals((Object)document0));
272:       assertTrue(element0.hasParent());
273:       assertEquals(1, element0.childNodeSize());
274:       assertTrue(element0.isBlock());
275:       assertEquals("head", element0.tagName());
276:       assertEquals("head", element0.nodeName());
277:       assertEquals(0, element0.siblingIndex());
278:       assertEquals("2|-^8", element0.baseUri());
279:       assertEquals(0, document1.siblingIndex());
280:       assertEquals("2|-^8", document1.location());
281:       assertEquals("2|-^8", document1.baseUri());
282:       assertEquals("#document", document1.nodeName());
283:       assertFalse(document1.isBlock());
284:       assertFalse(document1.hasParent());
285:       assertEquals("#root", document1.tagName());
286:       assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
287:       assertEquals(1, document1.childNodeSize());
288:       assertFalse(document1.updateMetaCharsetElement());
289:       assertSame(element0, element1);
290:       assertNotSame(document1, document2);
291:       assertNotSame(document1, document0);
292:   }
293: }
RegularFileObject[/tmp/EvoSuite_224_1628288894816/org/jsoup/nodes/Element_224_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 22:28:14 GMT 2021
5:  */
6: 
7: package org.jsoup.nodes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class Element_224_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.jsoup.nodes.Element"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Element_224_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.jsoup.nodes.Document$QuirksMode",
72:       "org.jsoup.parser.HtmlTreeBuilderState$18",
73:       "org.jsoup.select.StructuralEvaluator$ImmediateParent",
74:       "org.jsoup.parser.HtmlTreeBuilderState$19",
75:       "org.jsoup.parser.HtmlTreeBuilderState$16",
76:       "org.jsoup.helper.ChangeNotifyingArrayList",
77:       "org.jsoup.parser.HtmlTreeBuilderState$17",
78:       "org.jsoup.parser.HtmlTreeBuilderState$14",
79:       "org.jsoup.parser.HtmlTreeBuilderState$15",
80:       "org.jsoup.select.Evaluator$IndexEvaluator",
81:       "org.jsoup.select.Evaluator$IsOnlyOfType",
82:       "org.jsoup.nodes.Entities$CoreCharset",
83:       "org.jsoup.nodes.Element",
84:       "org.jsoup.parser.HtmlTreeBuilderState$12",
85:       "org.jsoup.parser.HtmlTreeBuilderState$13",
86:       "org.jsoup.parser.HtmlTreeBuilderState$10",
87:       "org.jsoup.parser.HtmlTreeBuilderState$11",
88:       "org.jsoup.select.NodeTraversor",
89:       "org.jsoup.select.Evaluator$MatchesOwn",
90:       "org.jsoup.select.CombiningEvaluator$And",
91:       "org.jsoup.parser.Token$EndTag",
92:       "org.jsoup.nodes.Document",
93:       "org.jsoup.Jsoup",
94:       "org.jsoup.parser.HtmlTreeBuilder",
95:       "org.jsoup.nodes.FormElement",
96:       "org.jsoup.select.StructuralEvaluator",
97:       "org.jsoup.select.Evaluator$IndexEquals",
98:       "org.jsoup.select.Selector$SelectorParseException",
99:       "org.jsoup.parser.Token$Tag",
100:       "org.jsoup.nodes.XmlDeclaration",
101:       "org.jsoup.parser.Token$Doctype",
102:       "org.jsoup.select.Evaluator$TagEndsWith",
103:       "org.jsoup.parser.HtmlTreeBuilderState$23",
104:       "org.jsoup.parser.HtmlTreeBuilderState$24",
105:       "org.jsoup.select.Evaluator$Tag",
106:       "org.jsoup.parser.HtmlTreeBuilderState$21",
107:       "org.jsoup.nodes.Document$OutputSettings$Syntax",
108:       "org.jsoup.parser.HtmlTreeBuilderState$22",
109:       "org.jsoup.parser.HtmlTreeBuilderState$20",
110:       "org.jsoup.parser.Token$1",
111:       "org.jsoup.internal.StringUtil",
112:       "org.jsoup.parser.Tokeniser",
113:       "org.jsoup.nodes.Comment",
114:       "org.jsoup.select.Evaluator$IndexGreaterThan",
115:       "org.jsoup.nodes.LeafNode",
116:       "org.jsoup.select.Selector",
117:       "org.jsoup.select.Evaluator$AttributeWithValueEnding",
118:       "org.jsoup.select.Collector$FirstFinder",
119:       "org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling",
120:       "org.jsoup.nodes.Node",
121:       "org.jsoup.parser.HtmlTreeBuilderState",
122:       "org.jsoup.select.Evaluator$AttributeStarting",
123:       "org.jsoup.nodes.DataNode",
124:       "org.jsoup.nodes.Attributes",
125:       "org.jsoup.parser.XmlTreeBuilder",
126:       "org.jsoup.nodes.Document$OutputSettings",
127:       "org.jsoup.select.CombiningEvaluator",
128:       "org.jsoup.select.Evaluator$ContainsData",
129:       "org.jsoup.internal.Normalizer",
130:       "org.jsoup.nodes.Attributes$Dataset$EntrySet",
131:       "org.jsoup.nodes.Attributes$Dataset",
132:       "org.jsoup.helper.Validate",
133:       "org.jsoup.select.Evaluator$CssNthEvaluator",
134:       "org.jsoup.parser.Token$Comment",
135:       "org.jsoup.select.Evaluator$IsFirstOfType",
136:       "org.jsoup.nodes.Element$NodeList",
137:       "org.jsoup.parser.TokeniserState$56",
138:       "org.jsoup.parser.TokeniserState$57",
139:       "org.jsoup.parser.TokeniserState$58",
140:       "org.jsoup.parser.TokeniserState$59",
141:       "org.jsoup.parser.TokeniserState$52",
142:       "org.jsoup.parser.TokeniserState$53",
143:       "org.jsoup.parser.TreeBuilder",
144:       "org.jsoup.parser.TokeniserState$54",
145:       "org.jsoup.parser.TokeniserState$55",
146:       "org.jsoup.nodes.PseudoTextElement",
147:       "org.jsoup.parser.TokeniserState$50",
148:       "org.jsoup.parser.TokeniserState$51",
149:       "org.jsoup.parser.Parser",
150:       "org.jsoup.select.Evaluator$IsEmpty",
151:       "org.jsoup.select.Evaluator$AttributeWithValueMatching",
152:       "org.jsoup.select.Evaluator$IsNthChild",
153:       "org.jsoup.parser.HtmlTreeBuilderState$Constants",
154:       "org.jsoup.select.Evaluator$Class",
155:       "org.jsoup.parser.TokeniserState$67",
156:       "org.jsoup.parser.TokeniserState$63",
157:       "org.jsoup.nodes.Node$OuterHtmlVisitor",
158:       "org.jsoup.parser.TokeniserState$64",
159:       "org.jsoup.parser.TokeniserState$65",
160:       "org.jsoup.parser.Token",
161:       "org.jsoup.parser.TokeniserState$66",
162:       "org.jsoup.parser.TokeniserState$60",
163:       "org.jsoup.select.Evaluator$AttributeKeyPair",
164:       "org.jsoup.parser.TokeniserState$61",
165:       "org.jsoup.parser.TokeniserState$62",
166:       "org.jsoup.select.Evaluator$IsNthLastOfType",
167:       "org.jsoup.parser.Tag",
168:       "org.jsoup.parser.Token$Character",
169:       "org.jsoup.select.Evaluator$IsLastOfType",
170:       "org.jsoup.select.Evaluator$Attribute",
171:       "org.jsoup.select.NodeFilter$FilterResult",
172:       "org.jsoup.nodes.Entities",
173:       "org.jsoup.select.Evaluator$AttributeWithValueContaining",
174:       "org.jsoup.select.Elements",
175:       "org.jsoup.parser.Token$CData",
176:       "org.jsoup.nodes.Element$2",
177:       "org.jsoup.select.Evaluator$AllElements",
178:       "org.jsoup.nodes.Element$1",
179:       "org.jsoup.nodes.TextNode",
180:       "org.jsoup.select.Evaluator$AttributeWithValue",
181:       "org.jsoup.select.Evaluator$AttributeWithValueNot",
182:       "org.jsoup.parser.ParseErrorList",
183:       "org.jsoup.nodes.BooleanAttribute",
184:       "org.jsoup.SerializationException",
185:       "org.jsoup.select.CombiningEvaluator$Or",
186:       "org.jsoup.select.Evaluator$ContainsText",
187:       "org.jsoup.select.Evaluator$Id",
188:       "org.jsoup.select.Evaluator$IsNthOfType",
189:       "org.jsoup.select.Collector",
190:       "org.jsoup.select.Collector$Accumulator",
191:       "org.jsoup.nodes.Attributes$Dataset$DatasetIterator",
192:       "org.jsoup.parser.XmlTreeBuilder$1",
193:       "org.jsoup.parser.CharacterReader",
194:       "org.jsoup.select.Evaluator$IsFirstChild",
195:       "org.jsoup.select.StructuralEvaluator$Root",
196:       "org.jsoup.nodes.Node$1",
197:       "org.jsoup.select.NodeVisitor",
198:       "org.jsoup.parser.TokeniserState$2",
199:       "org.jsoup.parser.TokeniserState$12",
200:       "org.jsoup.parser.TokeniserState$1",
201:       "org.jsoup.parser.TokeniserState$13",
202:       "org.jsoup.nodes.Attributes$1",
203:       "org.jsoup.parser.TokeniserState$14",
204:       "org.jsoup.parser.TokeniserState$15",
205:       "org.jsoup.select.Evaluator$AttributeWithValueStarting",
206:       "org.jsoup.parser.Token$StartTag",
207:       "org.jsoup.parser.Token$EOF",
208:       "org.jsoup.parser.TokeniserState$10",
209:       "org.jsoup.parser.TokeniserState$11",
210:       "org.jsoup.nodes.DocumentType",
211:       "org.jsoup.parser.TokeniserState$9",
212:       "org.jsoup.parser.TokeniserState$8",
213:       "org.jsoup.parser.TokeniserState$7",
214:       "org.jsoup.parser.TokeniserState$6",
215:       "org.jsoup.parser.TokeniserState$5",
216:       "org.jsoup.parser.TokeniserState$4",
217:       "org.jsoup.select.QueryParser",
218:       "org.jsoup.parser.TokeniserState$3",
219:       "org.jsoup.nodes.NodeUtils",
220:       "org.jsoup.select.Evaluator$Matches",
221:       "org.jsoup.select.Evaluator$IsOnlyChild",
222:       "org.jsoup.parser.TokeniserState$16",
223:       "org.jsoup.parser.TokeniserState$17",
224:       "org.jsoup.parser.TokeniserState$18",
225:       "org.jsoup.nodes.Entities$1",
226:       "org.jsoup.parser.TokeniserState$19",
227:       "org.jsoup.parser.TokeniserState$23",
228:       "org.jsoup.UncheckedIOException",
229:       "org.jsoup.parser.TokeniserState$24",
230:       "org.jsoup.parser.TokeniserState$25",
231:       "org.jsoup.parser.TokeniserState$26",
232:       "org.jsoup.parser.TokeniserState$20",
233:       "org.jsoup.parser.TokeniserState$21",
234:       "org.jsoup.parser.TokeniserState$22",
235:       "org.jsoup.parser.TokenQueue",
236:       "org.jsoup.parser.ParseSettings",
237:       "org.jsoup.select.NodeFilter",
238:       "org.jsoup.select.Evaluator$ContainsOwnText",
239:       "org.jsoup.parser.TokeniserState$27",
240:       "org.jsoup.parser.TokeniserState",
241:       "org.jsoup.parser.TokeniserState$28",
242:       "org.jsoup.parser.TokeniserState$29",
243:       "org.jsoup.parser.TokeniserState$34",
244:       "org.jsoup.select.Evaluator$IndexLessThan",
245:       "org.jsoup.parser.TokeniserState$35",
246:       "org.jsoup.parser.TokeniserState$36",
247:       "org.jsoup.parser.TokeniserState$37",
248:       "org.jsoup.parser.TokeniserState$30",
249:       "org.jsoup.parser.TokeniserState$31",
250:       "org.jsoup.parser.TokeniserState$32",
251:       "org.jsoup.parser.TokeniserState$33",
252:       "org.jsoup.nodes.Entities$EscapeMode",
253:       "org.jsoup.select.Evaluator$MatchText",
254:       "org.jsoup.select.Evaluator",
255:       "org.jsoup.Connection",
256:       "org.jsoup.select.Evaluator$IsRoot",
257:       "org.jsoup.parser.TokeniserState$38",
258:       "org.jsoup.parser.TokeniserState$39",
259:       "org.jsoup.nodes.CDataNode",
260:       "org.jsoup.parser.TokeniserState$45",
261:       "org.jsoup.parser.TokeniserState$46",
262:       "org.jsoup.parser.TokeniserState$47",
263:       "org.jsoup.select.StructuralEvaluator$Parent",
264:       "org.jsoup.parser.TokeniserState$48",
265:       "org.jsoup.select.Evaluator$IsLastChild",
266:       "org.jsoup.parser.TokeniserState$41",
267:       "org.jsoup.select.Evaluator$IsNthLastChild",
268:       "org.jsoup.parser.TokeniserState$42",
269:       "org.jsoup.parser.TokeniserState$43",
270:       "org.jsoup.parser.TokeniserState$44",
271:       "org.jsoup.parser.TokeniserState$40",
272:       "org.jsoup.parser.Token$TokenType",
273:       "org.jsoup.parser.HtmlTreeBuilderState$2",
274:       "org.jsoup.parser.HtmlTreeBuilderState$1",
275:       "org.jsoup.parser.HtmlTreeBuilderState$4",
276:       "org.jsoup.nodes.Attribute",
277:       "org.jsoup.parser.HtmlTreeBuilderState$3",
278:       "org.jsoup.parser.HtmlTreeBuilderState$9",
279:       "org.jsoup.parser.TokeniserState$49",
280:       "org.jsoup.parser.HtmlTreeBuilderState$6",
281:       "org.jsoup.parser.HtmlTreeBuilderState$5",
282:       "org.jsoup.parser.HtmlTreeBuilderState$8",
283:       "org.jsoup.parser.HtmlTreeBuilderState$7"
284:     );
285:   } 
286:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
287:     mock(Class.forName("java.util.Comparator", false, Element_224_tmp__ESTest_scaffolding.class.getClassLoader()));
288:   }
289: 
290:   private static void resetClasses() {
291:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Element_224_tmp__ESTest_scaffolding.class.getClassLoader()); 
292: 
293:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
294:       "org.jsoup.nodes.Node",
295:       "org.jsoup.nodes.Element",
296:       "org.jsoup.helper.ChangeNotifyingArrayList",
297:       "org.jsoup.nodes.Element$NodeList",
298:       "org.jsoup.nodes.Element$1",
299:       "org.jsoup.nodes.Element$2",
300:       "org.jsoup.helper.Validate",
301:       "org.jsoup.parser.Tag",
302:       "org.jsoup.parser.ParseSettings",
303:       "org.jsoup.select.NodeFilter$FilterResult",
304:       "org.jsoup.internal.StringUtil",
305:       "org.jsoup.nodes.Document$OutputSettings$Syntax",
306:       "org.jsoup.parser.Parser",
307:       "org.jsoup.parser.TreeBuilder",
308:       "org.jsoup.parser.HtmlTreeBuilder",
309:       "org.jsoup.parser.Token",
310:       "org.jsoup.parser.Token$Tag",
311:       "org.jsoup.parser.Token$StartTag",
312:       "org.jsoup.nodes.Attributes",
313:       "org.jsoup.parser.Token$TokenType",
314:       "org.jsoup.parser.Token$EndTag",
315:       "org.jsoup.parser.ParseErrorList",
316:       "org.jsoup.nodes.Document",
317:       "org.jsoup.internal.Normalizer",
318:       "org.jsoup.parser.Tokeniser",
319:       "org.jsoup.parser.TokeniserState",
320:       "org.jsoup.parser.Token$Character",
321:       "org.jsoup.parser.Token$Doctype",
322:       "org.jsoup.parser.Token$Comment",
323:       "org.jsoup.parser.HtmlTreeBuilderState",
324:       "org.jsoup.parser.Token$EOF",
325:       "org.jsoup.nodes.Node$OuterHtmlVisitor",
326:       "org.jsoup.nodes.NodeUtils",
327:       "org.jsoup.nodes.Entities$CoreCharset",
328:       "org.jsoup.select.NodeTraversor",
329:       "org.jsoup.parser.HtmlTreeBuilderState$24",
330:       "org.jsoup.select.Evaluator",
331:       "org.jsoup.select.Evaluator$AttributeKeyPair",
332:       "org.jsoup.select.Evaluator$AttributeWithValue",
333:       "org.jsoup.nodes.LeafNode",
334:       "org.jsoup.nodes.TextNode",
335:       "org.jsoup.nodes.Entities$1",
336:       "org.jsoup.select.Evaluator$Tag",
337:       "org.jsoup.select.Collector",
338:       "org.jsoup.select.Elements",
339:       "org.jsoup.select.Collector$Accumulator",
340:       "org.jsoup.select.Evaluator$AttributeWithValueMatching",
341:       "org.jsoup.nodes.Attributes$Dataset",
342:       "org.jsoup.nodes.Attribute",
343:       "org.jsoup.select.Evaluator$AttributeWithValueContaining",
344:       "org.jsoup.select.Evaluator$MatchesOwn",
345:       "org.jsoup.parser.XmlTreeBuilder",
346:       "org.jsoup.parser.XmlTreeBuilder$1",
347:       "org.jsoup.select.Evaluator$AttributeWithValueNot",
348:       "org.jsoup.nodes.Attributes$Dataset$EntrySet",
349:       "org.jsoup.nodes.Attributes$Dataset$DatasetIterator",
350:       "org.jsoup.nodes.Attributes$1",
351:       "org.jsoup.select.Selector",
352:       "org.jsoup.select.QueryParser",
353:       "org.jsoup.parser.TokenQueue",
354:       "org.jsoup.select.Evaluator$Class",
355:       "org.jsoup.select.Selector$SelectorParseException",
356:       "org.jsoup.nodes.FormElement",
357:       "org.jsoup.select.Evaluator$Matches",
358:       "org.jsoup.select.Evaluator$IndexEvaluator",
359:       "org.jsoup.select.Evaluator$IndexEquals",
360:       "org.jsoup.select.Evaluator$AllElements",
361:       "org.jsoup.select.Evaluator$IsOnlyChild",
362:       "org.jsoup.select.StructuralEvaluator$Root",
363:       "org.jsoup.select.Evaluator$IndexLessThan",
364:       "org.jsoup.select.Evaluator$ContainsText",
365:       "org.jsoup.select.Evaluator$AttributeStarting",
366:       "org.jsoup.nodes.Comment",
367:       "org.jsoup.select.Evaluator$IsOnlyOfType",
368:       "org.jsoup.select.Evaluator$IndexGreaterThan",
369:       "org.jsoup.nodes.CDataNode",
370:       "org.jsoup.select.Collector$FirstFinder",
371:       "org.jsoup.select.Evaluator$Id",
372:       "org.jsoup.nodes.Node$1",
373:       "org.jsoup.select.Evaluator$ContainsOwnText",
374:       "org.jsoup.nodes.DocumentType",
375:       "org.jsoup.parser.HtmlTreeBuilderState$Constants",
376:       "org.jsoup.nodes.PseudoTextElement",
377:       "org.jsoup.Connection$Method",
378:       "org.jsoup.Jsoup",
379:       "org.jsoup.helper.HttpConnection",
380:       "org.jsoup.helper.HttpConnection$Base",
381:       "org.jsoup.helper.HttpConnection$Request",
382:       "org.jsoup.helper.HttpConnection$Response",
383:       "org.jsoup.select.Evaluator$AttributeWithValueStarting",
384:       "org.jsoup.select.CombiningEvaluator",
385:       "org.jsoup.select.CombiningEvaluator$And",
386:       "org.jsoup.select.StructuralEvaluator",
387:       "org.jsoup.select.StructuralEvaluator$ImmediateParent",
388:       "org.jsoup.select.StructuralEvaluator$Parent",
389:       "org.jsoup.nodes.XmlDeclaration",
390:       "org.jsoup.select.Evaluator$IsRoot",
391:       "org.jsoup.nodes.DataNode",
392:       "org.jsoup.select.Evaluator$Attribute",
393:       "org.jsoup.select.Evaluator$AttributeWithValueEnding",
394:       "org.jsoup.select.Evaluator$IsFirstChild",
395:       "org.jsoup.select.Evaluator$CssNthEvaluator",
396:       "org.jsoup.select.Evaluator$IsNthLastOfType",
397:       "org.jsoup.select.Evaluator$IsLastOfType",
398:       "org.jsoup.select.StructuralEvaluator$PreviousSibling",
399:       "org.jsoup.select.CombiningEvaluator$Or",
400:       "org.jsoup.nodes.BooleanAttribute",
401:       "org.jsoup.SerializationException",
402:       "org.jsoup.select.Evaluator$TagEndsWith",
403:       "org.jsoup.select.Evaluator$IsNthChild",
404:       "org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling",
405:       "org.jsoup.select.Evaluator$IsLastChild",
406:       "org.jsoup.select.Evaluator$ContainsData",
407:       "org.jsoup.parser.ParseError",
408:       "org.jsoup.select.Evaluator$IsNthLastChild",
409:       "org.jsoup.select.Evaluator$MatchText",
410:       "org.jsoup.select.Evaluator$IsNthOfType",
411:       "org.jsoup.select.Evaluator$IsFirstOfType"
412:     );
413:   }
414: }

[MASTER] 22:28:14.856 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Document document0 = Document.createShell("2|-^8");
assertNotNull(document0);
assertFalse(document0.hasParent());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals(1, document0.childNodeSize());
assertEquals("#root", document0.tagName());
assertEquals(0, document0.siblingIndex());
assertEquals("#document", document0.nodeName());
assertEquals("2|-^8", document0.baseUri());
assertFalse(document0.isBlock());
assertEquals("2|-^8", document0.location());
assertFalse(document0.updateMetaCharsetElement());

Document document1 = Parser.parseBodyFragment("2|-^8", "2|-^8");
assertNotNull(document1);
assertFalse(document1.equals((Object)document0));
assertEquals(0, document1.siblingIndex());
assertEquals("2|-^8", document1.location());
assertEquals("2|-^8", document1.baseUri());
assertEquals("#document", document1.nodeName());
assertFalse(document1.isBlock());
assertFalse(document1.hasParent());
assertEquals("#root", document1.tagName());
assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
assertEquals(1, document1.childNodeSize());
assertFalse(document1.updateMetaCharsetElement());
assertNotSame(document1, document0);

Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
assertNotNull(document_OutputSettings0);
assertFalse(document_OutputSettings0.outline());
assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
assertEquals(1, document_OutputSettings0.indentAmount());
assertTrue(document_OutputSettings0.prettyPrint());

Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
assertNotNull(document_OutputSettings1);
assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
assertEquals(1, document_OutputSettings1.indentAmount());
assertTrue(document_OutputSettings1.prettyPrint());
assertFalse(document_OutputSettings1.outline());
assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());

ParseSettings parseSettings0 = ParseSettings.preserveCase;
assertNotNull(parseSettings0);

Elements elements0 = document0.getElementsByIndexEquals(60);
assertNotNull(elements0);
assertFalse(document0.equals((Object)document1));
assertFalse(document0.hasParent());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals(1, document0.childNodeSize());
assertEquals("#root", document0.tagName());
assertEquals(0, document0.siblingIndex());
assertEquals("#document", document0.nodeName());
assertEquals("2|-^8", document0.baseUri());
assertFalse(document0.isBlock());
assertEquals("2|-^8", document0.location());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(0, elements0.size());
assertTrue(elements0.isEmpty());
assertNotSame(document0, document1);

Document document2 = new Document("html");
assertNotNull(document2);
assertFalse(document2.equals((Object)document1));
assertFalse(document2.equals((Object)document0));
assertEquals(0, document2.childNodeSize());
assertEquals("#root", document2.tagName());
assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
assertEquals("#document", document2.nodeName());
assertFalse(document2.updateMetaCharsetElement());
assertEquals(0, document2.siblingIndex());
assertEquals("html", document2.location());
assertFalse(document2.isBlock());
assertEquals("html", document2.baseUri());
assertFalse(document2.hasParent());

Node[] nodeArray0 = new Node[6];
nodeArray0[0] = (Node) document1;
nodeArray0[1] = (Node) document1;
Tag tag0 = Tag.valueOf("!Bj<_V>NUO:3uPq/", parseSettings0);
assertNotNull(tag0);
assertFalse(tag0.isData());
assertFalse(tag0.isKnownTag());
assertEquals("!Bj<_V>NUO:3uPq/", tag0.toString());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isFormListed());
assertEquals("!Bj<_V>NUO:3uPq/", tag0.getName());
assertFalse(tag0.preserveWhitespace());
assertTrue(tag0.isInline());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isBlock());

Attributes attributes0 = new Attributes();
assertNotNull(attributes0);
assertEquals(0, attributes0.size());

Attributes attributes1 = attributes0.put("(FEJ,GwF", "2|-^8");
assertNotNull(attributes1);
assertEquals(1, attributes0.size());
assertEquals(1, attributes1.size());
assertSame(attributes0, attributes1);
assertSame(attributes1, attributes0);

FormElement formElement0 = new FormElement(tag0, "(FEJ,GwF", attributes0);
assertNotNull(formElement0);
assertFalse(tag0.isData());
assertFalse(tag0.isKnownTag());
assertEquals("!Bj<_V>NUO:3uPq/", tag0.toString());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isFormListed());
assertEquals("!Bj<_V>NUO:3uPq/", tag0.getName());
assertFalse(tag0.preserveWhitespace());
assertTrue(tag0.isInline());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isBlock());
assertEquals(1, attributes0.size());
assertFalse(formElement0.hasParent());
assertEquals(0, formElement0.childNodeSize());
assertEquals("!Bj<_V>NUO:3uPq/", formElement0.tagName());
assertEquals("(FEJ,GwF", formElement0.baseUri());
assertEquals("!Bj<_V>NUO:3uPq/", formElement0.nodeName());
assertEquals(0, formElement0.siblingIndex());
assertFalse(formElement0.isBlock());

Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

Element element0 = document1.head();
assertNotNull(element0);
assertFalse(document1.equals((Object)document2));
assertFalse(document1.equals((Object)document0));
assertTrue(element0.hasParent());
assertTrue(element0.isBlock());
assertEquals("head", element0.tagName());
assertEquals(0, element0.childNodeSize());
assertEquals("head", element0.nodeName());
assertEquals(0, element0.siblingIndex());
assertEquals("2|-^8", element0.baseUri());
assertEquals(0, document1.siblingIndex());
assertEquals("2|-^8", document1.location());
assertEquals("2|-^8", document1.baseUri());
assertEquals("#document", document1.nodeName());
assertFalse(document1.isBlock());
assertFalse(document1.hasParent());
assertEquals("#root", document1.tagName());
assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
assertEquals(1, document1.childNodeSize());
assertFalse(document1.updateMetaCharsetElement());
assertNotSame(document1, document2);
assertNotSame(document1, document0);

Element element1 = element0.appendChild(document2);
assertNotNull(element1);
assertFalse(document1.equals((Object)document2));
assertFalse(document1.equals((Object)document0));
assertFalse(document2.equals((Object)document1));
assertFalse(document2.equals((Object)document0));
assertTrue(element0.hasParent());
assertEquals(1, element0.childNodeSize());
assertTrue(element0.isBlock());
assertEquals("head", element0.tagName());
assertEquals("head", element0.nodeName());
assertEquals(0, element0.siblingIndex());
assertEquals("2|-^8", element0.baseUri());
assertEquals("head", element1.nodeName());
assertEquals(0, element1.siblingIndex());
assertEquals("2|-^8", element1.baseUri());
assertEquals("head", element1.tagName());
assertTrue(element1.isBlock());
assertTrue(element1.hasParent());
assertEquals(1, element1.childNodeSize());
assertEquals(0, document1.siblingIndex());
assertEquals("2|-^8", document1.location());
assertEquals("2|-^8", document1.baseUri());
assertEquals("#document", document1.nodeName());
assertFalse(document1.isBlock());
assertFalse(document1.hasParent());
assertEquals("#root", document1.tagName());
assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
assertEquals(1, document1.childNodeSize());
assertFalse(document1.updateMetaCharsetElement());
assertEquals(0, document2.childNodeSize());
assertEquals("#root", document2.tagName());
assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
assertTrue(document2.hasParent());
assertEquals("#document", document2.nodeName());
assertFalse(document2.updateMetaCharsetElement());
assertEquals(0, document2.siblingIndex());
assertEquals("html", document2.location());
assertFalse(document2.isBlock());
assertEquals("html", document2.baseUri());
assertSame(element0, element1);
assertSame(element1, element0);
assertNotSame(document1, document2);
assertNotSame(document1, document0);
assertNotSame(document2, document1);
assertNotSame(document2, document0);

Element element2 = element0.getElementById(")R");
assertNull(element2);
assertFalse(document1.equals((Object)document2));
assertFalse(document1.equals((Object)document0));
assertTrue(element0.hasParent());
assertEquals(1, element0.childNodeSize());
assertTrue(element0.isBlock());
assertEquals("head", element0.tagName());
assertEquals("head", element0.nodeName());
assertEquals(0, element0.siblingIndex());
assertEquals("2|-^8", element0.baseUri());
assertEquals(0, document1.siblingIndex());
assertEquals("2|-^8", document1.location());
assertEquals("2|-^8", document1.baseUri());
assertEquals("#document", document1.nodeName());
assertFalse(document1.isBlock());
assertFalse(document1.hasParent());
assertEquals("#root", document1.tagName());
assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
assertEquals(1, document1.childNodeSize());
assertFalse(document1.updateMetaCharsetElement());
assertSame(element0, element1);
assertNotSame(document1, document2);
assertNotSame(document1, document0);

String string0 = element0.cssSelector();
assertNotNull(string0);
assertEquals("html > head", string0);
assertFalse(document1.equals((Object)document2));
assertFalse(document1.equals((Object)document0));
assertTrue(element0.hasParent());
assertEquals(1, element0.childNodeSize());
assertTrue(element0.isBlock());
assertEquals("head", element0.tagName());
assertEquals("head", element0.nodeName());
assertEquals(0, element0.siblingIndex());
assertEquals("2|-^8", element0.baseUri());
assertEquals(0, document1.siblingIndex());
assertEquals("2|-^8", document1.location());
assertEquals("2|-^8", document1.baseUri());
assertEquals("#document", document1.nodeName());
assertFalse(document1.isBlock());
assertFalse(document1.hasParent());
assertEquals("#root", document1.tagName());
assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
assertEquals(1, document1.childNodeSize());
assertFalse(document1.updateMetaCharsetElement());
assertSame(element0, element1);
assertNotSame(document1, document2);
assertNotSame(document1, document0);


[MASTER] 22:28:15.141 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_230_1628288895100/org/jsoup/nodes/Element_230_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_230_1628288895100/org/jsoup/nodes/Element_230_tmp__ESTest_scaffolding.java]]
[MASTER] 22:28:15.141 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Jsoup-87/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Jsoup-87/target/classes
[MASTER] 22:28:15.141 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Jsoup-87/target/classes
[MASTER] 22:28:15.141 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Integer>>: 54
[MASTER] 22:28:15.141 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_230_1628288895100/org/jsoup/nodes/Element_230_tmp__ESTest.java uses or overrides a deprecated API.: -1
[MASTER] 22:28:15.141 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:deprecation for details.: -1
[MASTER] 22:28:15.141 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_230_1628288895100/org/jsoup/nodes/Element_230_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 22:28:15.141 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 22:28:15.142 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_230_1628288895100/org/jsoup/nodes/Element_230_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 22:28:15 GMT 2021
4:  */
5: 
6: package org.jsoup.nodes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.Comparator;
12: import java.util.Map;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.ViolatedAssumptionAnswer;
16: import org.jsoup.nodes.Document;
17: import org.jsoup.nodes.Element;
18: import org.jsoup.parser.Parser;
19: import org.jsoup.select.Elements;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class Element_230_tmp__ESTest extends Element_230_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       Document document0 = Parser.parseBodyFragmentRelaxed("            ", "            ");
28:       assertNotNull(document0);
29:       assertEquals(1, document0.childNodeSize());
30:       assertEquals("#root", document0.tagName());
31:       assertEquals(0, document0.siblingIndex());
32:       assertEquals("#document", document0.nodeName());
33:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
34:       assertFalse(document0.updateMetaCharsetElement());
35:       assertEquals("            ", document0.location());
36:       assertFalse(document0.isBlock());
37:       assertFalse(document0.hasParent());
38:       assertEquals("            ", document0.baseUri());
39:       
40:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
41:       boolean boolean0 = document0.hasClass("(n");
42:       assertFalse(boolean0);
43:       assertEquals(1, document0.childNodeSize());
44:       assertEquals("#root", document0.tagName());
45:       assertEquals(0, document0.siblingIndex());
46:       assertEquals("#document", document0.nodeName());
47:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
48:       assertFalse(document0.updateMetaCharsetElement());
49:       assertEquals("            ", document0.location());
50:       assertFalse(document0.isBlock());
51:       assertFalse(document0.hasParent());
52:       assertEquals("            ", document0.baseUri());
53:       
54:       Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
55:       assertNotNull(comparator1);
56:       
57:       Element element0 = document0.head();
58:       assertNotNull(element0);
59:       assertEquals(1, document0.childNodeSize());
60:       assertEquals("#root", document0.tagName());
61:       assertEquals(0, document0.siblingIndex());
62:       assertEquals("#document", document0.nodeName());
63:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
64:       assertFalse(document0.updateMetaCharsetElement());
65:       assertEquals("            ", document0.location());
66:       assertFalse(document0.isBlock());
67:       assertFalse(document0.hasParent());
68:       assertEquals("            ", document0.baseUri());
69:       assertEquals("            ", element0.baseUri());
70:       assertTrue(element0.isBlock());
71:       assertEquals("head", element0.tagName());
72:       assertEquals(0, element0.siblingIndex());
73:       assertTrue(element0.hasParent());
74:       assertEquals("head", element0.nodeName());
75:       assertEquals(0, element0.childNodeSize());
76:       
77:       Elements elements0 = document0.getElementsContainingOwnText("org.jsoup.nodes.NodeUtils");
78:       assertNotNull(elements0);
79:       assertEquals(1, document0.childNodeSize());
80:       assertEquals("#root", document0.tagName());
81:       assertEquals(0, document0.siblingIndex());
82:       assertEquals("#document", document0.nodeName());
83:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
84:       assertFalse(document0.updateMetaCharsetElement());
85:       assertEquals("            ", document0.location());
86:       assertFalse(document0.isBlock());
87:       assertFalse(document0.hasParent());
88:       assertEquals("            ", document0.baseUri());
89:       assertEquals(0, elements0.size());
90:       assertTrue(elements0.isEmpty());
91:       
92:       Element element1 = element0.before("x");
93:       assertNotNull(element1);
94:       assertEquals(1, document0.childNodeSize());
95:       assertEquals("#root", document0.tagName());
96:       assertEquals(0, document0.siblingIndex());
97:       assertEquals("#document", document0.nodeName());
98:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
99:       assertFalse(document0.updateMetaCharsetElement());
100:       assertEquals("            ", document0.location());
101:       assertFalse(document0.isBlock());
102:       assertFalse(document0.hasParent());
103:       assertEquals("            ", document0.baseUri());
104:       assertEquals("            ", element0.baseUri());
105:       assertTrue(element0.isBlock());
106:       assertEquals("head", element0.tagName());
107:       assertTrue(element0.hasParent());
108:       assertEquals("head", element0.nodeName());
109:       assertEquals(2, element0.siblingIndex());
110:       assertEquals(0, element0.childNodeSize());
111:       assertEquals("            ", element1.baseUri());
112:       assertTrue(element1.isBlock());
113:       assertEquals("head", element1.tagName());
114:       assertEquals(2, element1.siblingIndex());
115:       assertTrue(element1.hasParent());
116:       assertEquals("head", element1.nodeName());
117:       assertEquals(0, element1.childNodeSize());
118:       assertSame(element0, element1);
119:       assertSame(element1, element0);
120:   }
121: }
RegularFileObject[/tmp/EvoSuite_230_1628288895100/org/jsoup/nodes/Element_230_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 22:28:15 GMT 2021
5:  */
6: 
7: package org.jsoup.nodes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class Element_230_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.jsoup.nodes.Element"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Element_230_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.jsoup.nodes.Document$QuirksMode",
72:       "org.jsoup.parser.HtmlTreeBuilderState$18",
73:       "org.jsoup.select.StructuralEvaluator$ImmediateParent",
74:       "org.jsoup.parser.HtmlTreeBuilderState$19",
75:       "org.jsoup.parser.HtmlTreeBuilderState$16",
76:       "org.jsoup.helper.ChangeNotifyingArrayList",
77:       "org.jsoup.parser.HtmlTreeBuilderState$17",
78:       "org.jsoup.parser.HtmlTreeBuilderState$14",
79:       "org.jsoup.parser.HtmlTreeBuilderState$15",
80:       "org.jsoup.select.Evaluator$IndexEvaluator",
81:       "org.jsoup.select.Evaluator$IsOnlyOfType",
82:       "org.jsoup.nodes.Entities$CoreCharset",
83:       "org.jsoup.nodes.Element",
84:       "org.jsoup.parser.HtmlTreeBuilderState$12",
85:       "org.jsoup.parser.HtmlTreeBuilderState$13",
86:       "org.jsoup.parser.HtmlTreeBuilderState$10",
87:       "org.jsoup.parser.HtmlTreeBuilderState$11",
88:       "org.jsoup.select.NodeTraversor",
89:       "org.jsoup.select.Evaluator$MatchesOwn",
90:       "org.jsoup.select.CombiningEvaluator$And",
91:       "org.jsoup.parser.Token$EndTag",
92:       "org.jsoup.nodes.Document",
93:       "org.jsoup.Jsoup",
94:       "org.jsoup.parser.HtmlTreeBuilder",
95:       "org.jsoup.nodes.FormElement",
96:       "org.jsoup.select.StructuralEvaluator",
97:       "org.jsoup.select.Evaluator$IndexEquals",
98:       "org.jsoup.select.Selector$SelectorParseException",
99:       "org.jsoup.parser.Token$Tag",
100:       "org.jsoup.nodes.XmlDeclaration",
101:       "org.jsoup.parser.Token$Doctype",
102:       "org.jsoup.select.Evaluator$TagEndsWith",
103:       "org.jsoup.parser.HtmlTreeBuilderState$23",
104:       "org.jsoup.parser.HtmlTreeBuilderState$24",
105:       "org.jsoup.select.Evaluator$Tag",
106:       "org.jsoup.parser.HtmlTreeBuilderState$21",
107:       "org.jsoup.nodes.Document$OutputSettings$Syntax",
108:       "org.jsoup.parser.HtmlTreeBuilderState$22",
109:       "org.jsoup.parser.HtmlTreeBuilderState$20",
110:       "org.jsoup.parser.Token$1",
111:       "org.jsoup.internal.StringUtil",
112:       "org.jsoup.parser.Tokeniser",
113:       "org.jsoup.nodes.Comment",
114:       "org.jsoup.select.Evaluator$IndexGreaterThan",
115:       "org.jsoup.nodes.LeafNode",
116:       "org.jsoup.select.Selector",
117:       "org.jsoup.select.Evaluator$AttributeWithValueEnding",
118:       "org.jsoup.select.Collector$FirstFinder",
119:       "org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling",
120:       "org.jsoup.nodes.Node",
121:       "org.jsoup.parser.HtmlTreeBuilderState",
122:       "org.jsoup.select.Evaluator$AttributeStarting",
123:       "org.jsoup.nodes.DataNode",
124:       "org.jsoup.nodes.Attributes",
125:       "org.jsoup.parser.XmlTreeBuilder",
126:       "org.jsoup.nodes.Document$OutputSettings",
127:       "org.jsoup.select.CombiningEvaluator",
128:       "org.jsoup.select.Evaluator$ContainsData",
129:       "org.jsoup.internal.Normalizer",
130:       "org.jsoup.nodes.Attributes$Dataset$EntrySet",
131:       "org.jsoup.nodes.Attributes$Dataset",
132:       "org.jsoup.helper.Validate",
133:       "org.jsoup.select.Evaluator$CssNthEvaluator",
134:       "org.jsoup.parser.Token$Comment",
135:       "org.jsoup.select.Evaluator$IsFirstOfType",
136:       "org.jsoup.nodes.Element$NodeList",
137:       "org.jsoup.parser.TokeniserState$56",
138:       "org.jsoup.parser.TokeniserState$57",
139:       "org.jsoup.parser.TokeniserState$58",
140:       "org.jsoup.parser.TokeniserState$59",
141:       "org.jsoup.parser.TokeniserState$52",
142:       "org.jsoup.parser.TokeniserState$53",
143:       "org.jsoup.parser.TreeBuilder",
144:       "org.jsoup.parser.TokeniserState$54",
145:       "org.jsoup.parser.TokeniserState$55",
146:       "org.jsoup.nodes.PseudoTextElement",
147:       "org.jsoup.parser.TokeniserState$50",
148:       "org.jsoup.parser.TokeniserState$51",
149:       "org.jsoup.parser.Parser",
150:       "org.jsoup.select.Evaluator$IsEmpty",
151:       "org.jsoup.select.Evaluator$AttributeWithValueMatching",
152:       "org.jsoup.select.Evaluator$IsNthChild",
153:       "org.jsoup.parser.HtmlTreeBuilderState$Constants",
154:       "org.jsoup.select.Evaluator$Class",
155:       "org.jsoup.parser.TokeniserState$67",
156:       "org.jsoup.parser.TokeniserState$63",
157:       "org.jsoup.nodes.Node$OuterHtmlVisitor",
158:       "org.jsoup.parser.TokeniserState$64",
159:       "org.jsoup.parser.TokeniserState$65",
160:       "org.jsoup.parser.Token",
161:       "org.jsoup.parser.TokeniserState$66",
162:       "org.jsoup.parser.TokeniserState$60",
163:       "org.jsoup.select.Evaluator$AttributeKeyPair",
164:       "org.jsoup.parser.TokeniserState$61",
165:       "org.jsoup.parser.TokeniserState$62",
166:       "org.jsoup.select.Evaluator$IsNthLastOfType",
167:       "org.jsoup.parser.Tag",
168:       "org.jsoup.parser.Token$Character",
169:       "org.jsoup.select.Evaluator$IsLastOfType",
170:       "org.jsoup.select.Evaluator$Attribute",
171:       "org.jsoup.select.NodeFilter$FilterResult",
172:       "org.jsoup.nodes.Entities",
173:       "org.jsoup.select.Evaluator$AttributeWithValueContaining",
174:       "org.jsoup.select.Elements",
175:       "org.jsoup.parser.Token$CData",
176:       "org.jsoup.nodes.Element$2",
177:       "org.jsoup.select.Evaluator$AllElements",
178:       "org.jsoup.nodes.Element$1",
179:       "org.jsoup.nodes.TextNode",
180:       "org.jsoup.select.Evaluator$AttributeWithValue",
181:       "org.jsoup.select.Evaluator$AttributeWithValueNot",
182:       "org.jsoup.parser.ParseErrorList",
183:       "org.jsoup.nodes.BooleanAttribute",
184:       "org.jsoup.SerializationException",
185:       "org.jsoup.select.CombiningEvaluator$Or",
186:       "org.jsoup.select.Evaluator$ContainsText",
187:       "org.jsoup.select.Evaluator$Id",
188:       "org.jsoup.select.Evaluator$IsNthOfType",
189:       "org.jsoup.select.Collector",
190:       "org.jsoup.select.Collector$Accumulator",
191:       "org.jsoup.nodes.Attributes$Dataset$DatasetIterator",
192:       "org.jsoup.parser.XmlTreeBuilder$1",
193:       "org.jsoup.parser.CharacterReader",
194:       "org.jsoup.select.Evaluator$IsFirstChild",
195:       "org.jsoup.select.StructuralEvaluator$Root",
196:       "org.jsoup.nodes.Node$1",
197:       "org.jsoup.select.NodeVisitor",
198:       "org.jsoup.parser.TokeniserState$2",
199:       "org.jsoup.parser.TokeniserState$12",
200:       "org.jsoup.parser.TokeniserState$1",
201:       "org.jsoup.parser.TokeniserState$13",
202:       "org.jsoup.nodes.Attributes$1",
203:       "org.jsoup.parser.TokeniserState$14",
204:       "org.jsoup.parser.TokeniserState$15",
205:       "org.jsoup.select.Evaluator$AttributeWithValueStarting",
206:       "org.jsoup.parser.Token$StartTag",
207:       "org.jsoup.parser.Token$EOF",
208:       "org.jsoup.parser.TokeniserState$10",
209:       "org.jsoup.parser.TokeniserState$11",
210:       "org.jsoup.nodes.DocumentType",
211:       "org.jsoup.parser.TokeniserState$9",
212:       "org.jsoup.parser.TokeniserState$8",
213:       "org.jsoup.parser.TokeniserState$7",
214:       "org.jsoup.parser.TokeniserState$6",
215:       "org.jsoup.parser.TokeniserState$5",
216:       "org.jsoup.parser.TokeniserState$4",
217:       "org.jsoup.select.QueryParser",
218:       "org.jsoup.parser.TokeniserState$3",
219:       "org.jsoup.nodes.NodeUtils",
220:       "org.jsoup.select.Evaluator$Matches",
221:       "org.jsoup.select.Evaluator$IsOnlyChild",
222:       "org.jsoup.parser.TokeniserState$16",
223:       "org.jsoup.parser.TokeniserState$17",
224:       "org.jsoup.parser.TokeniserState$18",
225:       "org.jsoup.nodes.Entities$1",
226:       "org.jsoup.parser.TokeniserState$19",
227:       "org.jsoup.parser.TokeniserState$23",
228:       "org.jsoup.UncheckedIOException",
229:       "org.jsoup.parser.TokeniserState$24",
230:       "org.jsoup.parser.TokeniserState$25",
231:       "org.jsoup.parser.TokeniserState$26",
232:       "org.jsoup.parser.TokeniserState$20",
233:       "org.jsoup.parser.TokeniserState$21",
234:       "org.jsoup.parser.TokeniserState$22",
235:       "org.jsoup.parser.TokenQueue",
236:       "org.jsoup.parser.ParseSettings",
237:       "org.jsoup.select.NodeFilter",
238:       "org.jsoup.select.Evaluator$ContainsOwnText",
239:       "org.jsoup.parser.TokeniserState$27",
240:       "org.jsoup.parser.TokeniserState",
241:       "org.jsoup.parser.TokeniserState$28",
242:       "org.jsoup.parser.TokeniserState$29",
243:       "org.jsoup.parser.TokeniserState$34",
244:       "org.jsoup.select.Evaluator$IndexLessThan",
245:       "org.jsoup.parser.TokeniserState$35",
246:       "org.jsoup.parser.TokeniserState$36",
247:       "org.jsoup.parser.TokeniserState$37",
248:       "org.jsoup.parser.TokeniserState$30",
249:       "org.jsoup.parser.TokeniserState$31",
250:       "org.jsoup.parser.TokeniserState$32",
251:       "org.jsoup.parser.TokeniserState$33",
252:       "org.jsoup.nodes.Entities$EscapeMode",
253:       "org.jsoup.select.Evaluator$MatchText",
254:       "org.jsoup.select.Evaluator",
255:       "org.jsoup.Connection",
256:       "org.jsoup.select.Evaluator$IsRoot",
257:       "org.jsoup.parser.TokeniserState$38",
258:       "org.jsoup.parser.TokeniserState$39",
259:       "org.jsoup.nodes.CDataNode",
260:       "org.jsoup.parser.TokeniserState$45",
261:       "org.jsoup.parser.TokeniserState$46",
262:       "org.jsoup.parser.TokeniserState$47",
263:       "org.jsoup.select.StructuralEvaluator$Parent",
264:       "org.jsoup.parser.TokeniserState$48",
265:       "org.jsoup.select.Evaluator$IsLastChild",
266:       "org.jsoup.parser.TokeniserState$41",
267:       "org.jsoup.select.Evaluator$IsNthLastChild",
268:       "org.jsoup.parser.TokeniserState$42",
269:       "org.jsoup.parser.TokeniserState$43",
270:       "org.jsoup.parser.TokeniserState$44",
271:       "org.jsoup.parser.TokeniserState$40",
272:       "org.jsoup.parser.Token$TokenType",
273:       "org.jsoup.parser.HtmlTreeBuilderState$2",
274:       "org.jsoup.parser.HtmlTreeBuilderState$1",
275:       "org.jsoup.parser.HtmlTreeBuilderState$4",
276:       "org.jsoup.nodes.Attribute",
277:       "org.jsoup.parser.HtmlTreeBuilderState$3",
278:       "org.jsoup.parser.HtmlTreeBuilderState$9",
279:       "org.jsoup.parser.TokeniserState$49",
280:       "org.jsoup.parser.HtmlTreeBuilderState$6",
281:       "org.jsoup.parser.HtmlTreeBuilderState$5",
282:       "org.jsoup.parser.HtmlTreeBuilderState$8",
283:       "org.jsoup.parser.HtmlTreeBuilderState$7"
284:     );
285:   } 
286:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
287:     mock(Class.forName("java.util.Comparator", false, Element_230_tmp__ESTest_scaffolding.class.getClassLoader()));
288:   }
289: 
290:   private static void resetClasses() {
291:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Element_230_tmp__ESTest_scaffolding.class.getClassLoader()); 
292: 
293:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
294:       "org.jsoup.nodes.Node",
295:       "org.jsoup.nodes.Element",
296:       "org.jsoup.helper.ChangeNotifyingArrayList",
297:       "org.jsoup.nodes.Element$NodeList",
298:       "org.jsoup.nodes.Element$1",
299:       "org.jsoup.nodes.Element$2",
300:       "org.jsoup.helper.Validate",
301:       "org.jsoup.parser.Tag",
302:       "org.jsoup.parser.ParseSettings",
303:       "org.jsoup.select.NodeFilter$FilterResult",
304:       "org.jsoup.internal.StringUtil",
305:       "org.jsoup.nodes.Document$OutputSettings$Syntax",
306:       "org.jsoup.parser.Parser",
307:       "org.jsoup.parser.TreeBuilder",
308:       "org.jsoup.parser.HtmlTreeBuilder",
309:       "org.jsoup.parser.Token",
310:       "org.jsoup.parser.Token$Tag",
311:       "org.jsoup.parser.Token$StartTag",
312:       "org.jsoup.nodes.Attributes",
313:       "org.jsoup.parser.Token$TokenType",
314:       "org.jsoup.parser.Token$EndTag",
315:       "org.jsoup.parser.ParseErrorList",
316:       "org.jsoup.nodes.Document",
317:       "org.jsoup.internal.Normalizer",
318:       "org.jsoup.parser.Tokeniser",
319:       "org.jsoup.parser.TokeniserState",
320:       "org.jsoup.parser.Token$Character",
321:       "org.jsoup.parser.Token$Doctype",
322:       "org.jsoup.parser.Token$Comment",
323:       "org.jsoup.parser.HtmlTreeBuilderState",
324:       "org.jsoup.parser.Token$EOF",
325:       "org.jsoup.nodes.Node$OuterHtmlVisitor",
326:       "org.jsoup.nodes.NodeUtils",
327:       "org.jsoup.nodes.Entities$CoreCharset",
328:       "org.jsoup.select.NodeTraversor",
329:       "org.jsoup.parser.HtmlTreeBuilderState$24",
330:       "org.jsoup.select.Evaluator",
331:       "org.jsoup.select.Evaluator$AttributeKeyPair",
332:       "org.jsoup.select.Evaluator$AttributeWithValue",
333:       "org.jsoup.nodes.LeafNode",
334:       "org.jsoup.nodes.TextNode",
335:       "org.jsoup.nodes.Entities$1",
336:       "org.jsoup.select.Evaluator$Tag",
337:       "org.jsoup.select.Collector",
338:       "org.jsoup.select.Elements",
339:       "org.jsoup.select.Collector$Accumulator",
340:       "org.jsoup.select.Evaluator$AttributeWithValueMatching",
341:       "org.jsoup.nodes.Attributes$Dataset",
342:       "org.jsoup.nodes.Attribute",
343:       "org.jsoup.select.Evaluator$AttributeWithValueContaining",
344:       "org.jsoup.select.Evaluator$MatchesOwn",
345:       "org.jsoup.parser.XmlTreeBuilder",
346:       "org.jsoup.parser.XmlTreeBuilder$1",
347:       "org.jsoup.select.Evaluator$AttributeWithValueNot",
348:       "org.jsoup.nodes.Attributes$Dataset$EntrySet",
349:       "org.jsoup.nodes.Attributes$Dataset$DatasetIterator",
350:       "org.jsoup.nodes.Attributes$1",
351:       "org.jsoup.select.Selector",
352:       "org.jsoup.select.QueryParser",
353:       "org.jsoup.parser.TokenQueue",
354:       "org.jsoup.select.Evaluator$Class",
355:       "org.jsoup.select.Selector$SelectorParseException",
356:       "org.jsoup.nodes.FormElement",
357:       "org.jsoup.select.Evaluator$Matches",
358:       "org.jsoup.select.Evaluator$IndexEvaluator",
359:       "org.jsoup.select.Evaluator$IndexEquals",
360:       "org.jsoup.select.Evaluator$AllElements",
361:       "org.jsoup.select.Evaluator$IsOnlyChild",
362:       "org.jsoup.select.StructuralEvaluator$Root",
363:       "org.jsoup.select.Evaluator$IndexLessThan",
364:       "org.jsoup.select.Evaluator$ContainsText",
365:       "org.jsoup.select.Evaluator$AttributeStarting",
366:       "org.jsoup.nodes.Comment",
367:       "org.jsoup.select.Evaluator$IsOnlyOfType",
368:       "org.jsoup.select.Evaluator$IndexGreaterThan",
369:       "org.jsoup.nodes.CDataNode",
370:       "org.jsoup.select.Collector$FirstFinder",
371:       "org.jsoup.select.Evaluator$Id",
372:       "org.jsoup.nodes.Node$1",
373:       "org.jsoup.select.Evaluator$ContainsOwnText",
374:       "org.jsoup.nodes.DocumentType",
375:       "org.jsoup.parser.HtmlTreeBuilderState$Constants",
376:       "org.jsoup.nodes.PseudoTextElement",
377:       "org.jsoup.Connection$Method",
378:       "org.jsoup.Jsoup",
379:       "org.jsoup.helper.HttpConnection",
380:       "org.jsoup.helper.HttpConnection$Base",
381:       "org.jsoup.helper.HttpConnection$Request",
382:       "org.jsoup.helper.HttpConnection$Response",
383:       "org.jsoup.select.Evaluator$AttributeWithValueStarting",
384:       "org.jsoup.select.CombiningEvaluator",
385:       "org.jsoup.select.CombiningEvaluator$And",
386:       "org.jsoup.select.StructuralEvaluator",
387:       "org.jsoup.select.StructuralEvaluator$ImmediateParent",
388:       "org.jsoup.select.StructuralEvaluator$Parent",
389:       "org.jsoup.nodes.XmlDeclaration",
390:       "org.jsoup.select.Evaluator$IsRoot",
391:       "org.jsoup.nodes.DataNode",
392:       "org.jsoup.select.Evaluator$Attribute",
393:       "org.jsoup.select.Evaluator$AttributeWithValueEnding",
394:       "org.jsoup.select.Evaluator$IsFirstChild",
395:       "org.jsoup.select.Evaluator$CssNthEvaluator",
396:       "org.jsoup.select.Evaluator$IsNthLastOfType",
397:       "org.jsoup.select.Evaluator$IsLastOfType",
398:       "org.jsoup.select.StructuralEvaluator$PreviousSibling",
399:       "org.jsoup.select.CombiningEvaluator$Or",
400:       "org.jsoup.nodes.BooleanAttribute",
401:       "org.jsoup.SerializationException",
402:       "org.jsoup.select.Evaluator$TagEndsWith",
403:       "org.jsoup.select.Evaluator$IsNthChild",
404:       "org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling",
405:       "org.jsoup.select.Evaluator$IsLastChild",
406:       "org.jsoup.select.Evaluator$ContainsData",
407:       "org.jsoup.parser.ParseError",
408:       "org.jsoup.select.Evaluator$IsNthLastChild",
409:       "org.jsoup.select.Evaluator$MatchText",
410:       "org.jsoup.select.Evaluator$IsNthOfType",
411:       "org.jsoup.select.Evaluator$IsFirstOfType"
412:     );
413:   }
414: }

[MASTER] 22:28:15.191 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Document document0 = Parser.parseBodyFragmentRelaxed("            ", "            ");
assertNotNull(document0);
assertEquals(1, document0.childNodeSize());
assertEquals("#root", document0.tagName());
assertEquals(0, document0.siblingIndex());
assertEquals("#document", document0.nodeName());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("            ", document0.location());
assertFalse(document0.isBlock());
assertFalse(document0.hasParent());
assertEquals("            ", document0.baseUri());

Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
boolean boolean0 = document0.hasClass("(n");
assertFalse(boolean0);
assertEquals(1, document0.childNodeSize());
assertEquals("#root", document0.tagName());
assertEquals(0, document0.siblingIndex());
assertEquals("#document", document0.nodeName());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("            ", document0.location());
assertFalse(document0.isBlock());
assertFalse(document0.hasParent());
assertEquals("            ", document0.baseUri());

Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

Element element0 = document0.head();
assertNotNull(element0);
assertEquals(1, document0.childNodeSize());
assertEquals("#root", document0.tagName());
assertEquals(0, document0.siblingIndex());
assertEquals("#document", document0.nodeName());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("            ", document0.location());
assertFalse(document0.isBlock());
assertFalse(document0.hasParent());
assertEquals("            ", document0.baseUri());
assertEquals("            ", element0.baseUri());
assertTrue(element0.isBlock());
assertEquals("head", element0.tagName());
assertEquals(0, element0.siblingIndex());
assertTrue(element0.hasParent());
assertEquals("head", element0.nodeName());
assertEquals(0, element0.childNodeSize());

Elements elements0 = document0.getElementsContainingOwnText("org.jsoup.nodes.NodeUtils");
assertNotNull(elements0);
assertEquals(1, document0.childNodeSize());
assertEquals("#root", document0.tagName());
assertEquals(0, document0.siblingIndex());
assertEquals("#document", document0.nodeName());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("            ", document0.location());
assertFalse(document0.isBlock());
assertFalse(document0.hasParent());
assertEquals("            ", document0.baseUri());
assertEquals(0, elements0.size());
assertTrue(elements0.isEmpty());

Element element1 = element0.before("x");
assertNotNull(element1);
assertEquals(1, document0.childNodeSize());
assertEquals("#root", document0.tagName());
assertEquals(0, document0.siblingIndex());
assertEquals("#document", document0.nodeName());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("            ", document0.location());
assertFalse(document0.isBlock());
assertFalse(document0.hasParent());
assertEquals("            ", document0.baseUri());
assertEquals("            ", element0.baseUri());
assertTrue(element0.isBlock());
assertEquals("head", element0.tagName());
assertTrue(element0.hasParent());
assertEquals("head", element0.nodeName());
assertEquals(2, element0.siblingIndex());
assertEquals(0, element0.childNodeSize());
assertEquals("            ", element1.baseUri());
assertTrue(element1.isBlock());
assertEquals("head", element1.tagName());
assertEquals(2, element1.siblingIndex());
assertTrue(element1.hasParent());
assertEquals("head", element1.nodeName());
assertEquals(0, element1.childNodeSize());
assertSame(element0, element1);
assertSame(element1, element0);


[MASTER] 22:28:15.250 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_232_1628288895220/org/jsoup/nodes/Element_232_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_232_1628288895220/org/jsoup/nodes/Element_232_tmp__ESTest_scaffolding.java]]
[MASTER] 22:28:15.250 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Jsoup-87/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Jsoup-87/target/classes
[MASTER] 22:28:15.250 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Jsoup-87/target/classes
[MASTER] 22:28:15.251 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Integer>>: 41
[MASTER] 22:28:15.251 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_232_1628288895220/org/jsoup/nodes/Element_232_tmp__ESTest.java uses or overrides a deprecated API.: -1
[MASTER] 22:28:15.251 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:deprecation for details.: -1
[MASTER] 22:28:15.251 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_232_1628288895220/org/jsoup/nodes/Element_232_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 22:28:15.251 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 22:28:15.252 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_232_1628288895220/org/jsoup/nodes/Element_232_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 22:28:15 GMT 2021
4:  */
5: 
6: package org.jsoup.nodes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.Comparator;
12: import java.util.Map;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.ViolatedAssumptionAnswer;
16: import org.jsoup.nodes.Document;
17: import org.jsoup.nodes.Element;
18: import org.jsoup.parser.Parser;
19: import org.jsoup.select.Elements;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class Element_232_tmp__ESTest extends Element_232_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       Document document0 = Parser.parseBodyFragmentRelaxed("            ", "            ");
28:       assertNotNull(document0);
29:       assertFalse(document0.hasParent());
30:       assertEquals("            ", document0.location());
31:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
32:       assertEquals("            ", document0.baseUri());
33:       assertEquals(1, document0.childNodeSize());
34:       assertFalse(document0.updateMetaCharsetElement());
35:       assertEquals(0, document0.siblingIndex());
36:       assertEquals("#document", document0.nodeName());
37:       assertEquals("#root", document0.tagName());
38:       assertFalse(document0.isBlock());
39:       
40:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
41:       Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
42:       assertNotNull(comparator1);
43:       
44:       Element element0 = document0.head();
45:       assertNotNull(element0);
46:       assertFalse(document0.hasParent());
47:       assertEquals("            ", document0.location());
48:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
49:       assertEquals("            ", document0.baseUri());
50:       assertEquals(1, document0.childNodeSize());
51:       assertFalse(document0.updateMetaCharsetElement());
52:       assertEquals(0, document0.siblingIndex());
53:       assertEquals("#document", document0.nodeName());
54:       assertEquals("#root", document0.tagName());
55:       assertFalse(document0.isBlock());
56:       assertEquals("            ", element0.baseUri());
57:       assertEquals(0, element0.childNodeSize());
58:       assertTrue(element0.isBlock());
59:       assertEquals("head", element0.tagName());
60:       assertEquals(0, element0.siblingIndex());
61:       assertTrue(element0.hasParent());
62:       assertEquals("head", element0.nodeName());
63:       
64:       Elements elements0 = document0.getElementsContainingOwnText("8=kom,#3XjaSj,Z");
65:       assertNotNull(elements0);
66:       assertFalse(document0.hasParent());
67:       assertEquals("            ", document0.location());
68:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
69:       assertEquals("            ", document0.baseUri());
70:       assertEquals(1, document0.childNodeSize());
71:       assertFalse(document0.updateMetaCharsetElement());
72:       assertEquals(0, document0.siblingIndex());
73:       assertEquals("#document", document0.nodeName());
74:       assertEquals("#root", document0.tagName());
75:       assertFalse(document0.isBlock());
76:       assertTrue(elements0.isEmpty());
77:       assertEquals(0, elements0.size());
78:       
79:       Element element1 = element0.appendElement("title");
80:       assertNotNull(element1);
81:       assertFalse(element1.equals((Object)element0));
82:       assertFalse(document0.hasParent());
83:       assertEquals("            ", document0.location());
84:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
85:       assertEquals("            ", document0.baseUri());
86:       assertEquals(1, document0.childNodeSize());
87:       assertFalse(document0.updateMetaCharsetElement());
88:       assertEquals(0, document0.siblingIndex());
89:       assertEquals("#document", document0.nodeName());
90:       assertEquals("#root", document0.tagName());
91:       assertFalse(document0.isBlock());
92:       assertEquals("            ", element0.baseUri());
93:       assertEquals(1, element0.childNodeSize());
94:       assertTrue(element0.isBlock());
95:       assertEquals("head", element0.tagName());
96:       assertEquals(0, element0.siblingIndex());
97:       assertTrue(element0.hasParent());
98:       assertEquals("head", element0.nodeName());
99:       assertEquals("title", element1.tagName());
100:       assertTrue(element1.hasParent());
101:       assertEquals("title", element1.nodeName());
102:       assertTrue(element1.isBlock());
103:       assertEquals(0, element1.siblingIndex());
104:       assertEquals(0, element1.childNodeSize());
105:       assertEquals("            ", element1.baseUri());
106:       assertNotSame(element0, element1);
107:       assertNotSame(element1, element0);
108:       
109:       Element element2 = element1.getElementById("title");
110:       assertNull(element2);
111:       assertFalse(element0.equals((Object)element1));
112:       assertFalse(element1.equals((Object)element0));
113:       assertFalse(document0.hasParent());
114:       assertEquals("            ", document0.location());
115:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
116:       assertEquals("            ", document0.baseUri());
117:       assertEquals(1, document0.childNodeSize());
118:       assertFalse(document0.updateMetaCharsetElement());
119:       assertEquals(0, document0.siblingIndex());
120:       assertEquals("#document", document0.nodeName());
121:       assertEquals("#root", document0.tagName());
122:       assertFalse(document0.isBlock());
123:       assertEquals("            ", element0.baseUri());
124:       assertEquals(1, element0.childNodeSize());
125:       assertTrue(element0.isBlock());
126:       assertEquals("head", element0.tagName());
127:       assertEquals(0, element0.siblingIndex());
128:       assertTrue(element0.hasParent());
129:       assertEquals("head", element0.nodeName());
130:       assertEquals("title", element1.tagName());
131:       assertTrue(element1.hasParent());
132:       assertEquals("title", element1.nodeName());
133:       assertTrue(element1.isBlock());
134:       assertEquals(0, element1.siblingIndex());
135:       assertEquals(0, element1.childNodeSize());
136:       assertEquals("            ", element1.baseUri());
137:       assertNotSame(element0, element1);
138:       assertNotSame(element1, element0);
139:       
140:       Element element3 = element0.prepend("title");
141:       assertNotNull(element3);
142:       assertFalse(element0.equals((Object)element1));
143:       assertFalse(element3.equals((Object)element1));
144:       assertFalse(document0.hasParent());
145:       assertEquals("            ", document0.location());
146:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
147:       assertEquals("            ", document0.baseUri());
148:       assertEquals(1, document0.childNodeSize());
149:       assertFalse(document0.updateMetaCharsetElement());
150:       assertEquals(0, document0.siblingIndex());
151:       assertEquals("#document", document0.nodeName());
152:       assertEquals("#root", document0.tagName());
153:       assertFalse(document0.isBlock());
154:       assertEquals("            ", element0.baseUri());
155:       assertTrue(element0.isBlock());
156:       assertEquals(2, element0.childNodeSize());
157:       assertEquals("head", element0.tagName());
158:       assertEquals(0, element0.siblingIndex());
159:       assertTrue(element0.hasParent());
160:       assertEquals("head", element0.nodeName());
161:       assertEquals("head", element3.nodeName());
162:       assertEquals(2, element3.childNodeSize());
163:       assertTrue(element3.hasParent());
164:       assertEquals(0, element3.siblingIndex());
165:       assertEquals("head", element3.tagName());
166:       assertEquals("            ", element3.baseUri());
167:       assertTrue(element3.isBlock());
168:       assertSame(element0, element3);
169:       assertNotSame(element0, element1);
170:       assertNotSame(element3, element1);
171:       assertSame(element3, element0);
172:   }
173: }
RegularFileObject[/tmp/EvoSuite_232_1628288895220/org/jsoup/nodes/Element_232_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 22:28:15 GMT 2021
5:  */
6: 
7: package org.jsoup.nodes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class Element_232_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.jsoup.nodes.Element"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Element_232_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.jsoup.nodes.Document$QuirksMode",
72:       "org.jsoup.parser.HtmlTreeBuilderState$18",
73:       "org.jsoup.select.StructuralEvaluator$ImmediateParent",
74:       "org.jsoup.parser.HtmlTreeBuilderState$19",
75:       "org.jsoup.parser.HtmlTreeBuilderState$16",
76:       "org.jsoup.helper.ChangeNotifyingArrayList",
77:       "org.jsoup.parser.HtmlTreeBuilderState$17",
78:       "org.jsoup.parser.HtmlTreeBuilderState$14",
79:       "org.jsoup.parser.HtmlTreeBuilderState$15",
80:       "org.jsoup.select.Evaluator$IndexEvaluator",
81:       "org.jsoup.select.Evaluator$IsOnlyOfType",
82:       "org.jsoup.nodes.Entities$CoreCharset",
83:       "org.jsoup.nodes.Element",
84:       "org.jsoup.parser.HtmlTreeBuilderState$12",
85:       "org.jsoup.parser.HtmlTreeBuilderState$13",
86:       "org.jsoup.parser.HtmlTreeBuilderState$10",
87:       "org.jsoup.parser.HtmlTreeBuilderState$11",
88:       "org.jsoup.select.NodeTraversor",
89:       "org.jsoup.select.Evaluator$MatchesOwn",
90:       "org.jsoup.select.CombiningEvaluator$And",
91:       "org.jsoup.parser.Token$EndTag",
92:       "org.jsoup.nodes.Document",
93:       "org.jsoup.Jsoup",
94:       "org.jsoup.parser.HtmlTreeBuilder",
95:       "org.jsoup.nodes.FormElement",
96:       "org.jsoup.select.StructuralEvaluator",
97:       "org.jsoup.select.Evaluator$IndexEquals",
98:       "org.jsoup.select.Selector$SelectorParseException",
99:       "org.jsoup.parser.Token$Tag",
100:       "org.jsoup.nodes.XmlDeclaration",
101:       "org.jsoup.parser.Token$Doctype",
102:       "org.jsoup.select.Evaluator$TagEndsWith",
103:       "org.jsoup.parser.HtmlTreeBuilderState$23",
104:       "org.jsoup.parser.HtmlTreeBuilderState$24",
105:       "org.jsoup.select.Evaluator$Tag",
106:       "org.jsoup.parser.HtmlTreeBuilderState$21",
107:       "org.jsoup.nodes.Document$OutputSettings$Syntax",
108:       "org.jsoup.parser.HtmlTreeBuilderState$22",
109:       "org.jsoup.parser.HtmlTreeBuilderState$20",
110:       "org.jsoup.parser.Token$1",
111:       "org.jsoup.internal.StringUtil",
112:       "org.jsoup.parser.Tokeniser",
113:       "org.jsoup.nodes.Comment",
114:       "org.jsoup.select.Evaluator$IndexGreaterThan",
115:       "org.jsoup.nodes.LeafNode",
116:       "org.jsoup.select.Selector",
117:       "org.jsoup.select.Evaluator$AttributeWithValueEnding",
118:       "org.jsoup.select.Collector$FirstFinder",
119:       "org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling",
120:       "org.jsoup.nodes.Node",
121:       "org.jsoup.parser.HtmlTreeBuilderState",
122:       "org.jsoup.select.Evaluator$AttributeStarting",
123:       "org.jsoup.nodes.DataNode",
124:       "org.jsoup.nodes.Attributes",
125:       "org.jsoup.parser.XmlTreeBuilder",
126:       "org.jsoup.nodes.Document$OutputSettings",
127:       "org.jsoup.select.CombiningEvaluator",
128:       "org.jsoup.select.Evaluator$ContainsData",
129:       "org.jsoup.internal.Normalizer",
130:       "org.jsoup.nodes.Attributes$Dataset$EntrySet",
131:       "org.jsoup.nodes.Attributes$Dataset",
132:       "org.jsoup.helper.Validate",
133:       "org.jsoup.select.Evaluator$CssNthEvaluator",
134:       "org.jsoup.parser.Token$Comment",
135:       "org.jsoup.select.Evaluator$IsFirstOfType",
136:       "org.jsoup.nodes.Element$NodeList",
137:       "org.jsoup.parser.TokeniserState$56",
138:       "org.jsoup.parser.TokeniserState$57",
139:       "org.jsoup.parser.TokeniserState$58",
140:       "org.jsoup.parser.TokeniserState$59",
141:       "org.jsoup.parser.TokeniserState$52",
142:       "org.jsoup.parser.TokeniserState$53",
143:       "org.jsoup.parser.TreeBuilder",
144:       "org.jsoup.parser.TokeniserState$54",
145:       "org.jsoup.parser.TokeniserState$55",
146:       "org.jsoup.nodes.PseudoTextElement",
147:       "org.jsoup.parser.TokeniserState$50",
148:       "org.jsoup.parser.TokeniserState$51",
149:       "org.jsoup.parser.Parser",
150:       "org.jsoup.select.Evaluator$IsEmpty",
151:       "org.jsoup.select.Evaluator$AttributeWithValueMatching",
152:       "org.jsoup.select.Evaluator$IsNthChild",
153:       "org.jsoup.parser.HtmlTreeBuilderState$Constants",
154:       "org.jsoup.select.Evaluator$Class",
155:       "org.jsoup.parser.TokeniserState$67",
156:       "org.jsoup.parser.TokeniserState$63",
157:       "org.jsoup.nodes.Node$OuterHtmlVisitor",
158:       "org.jsoup.parser.TokeniserState$64",
159:       "org.jsoup.parser.TokeniserState$65",
160:       "org.jsoup.parser.Token",
161:       "org.jsoup.parser.TokeniserState$66",
162:       "org.jsoup.parser.TokeniserState$60",
163:       "org.jsoup.select.Evaluator$AttributeKeyPair",
164:       "org.jsoup.parser.TokeniserState$61",
165:       "org.jsoup.parser.TokeniserState$62",
166:       "org.jsoup.select.Evaluator$IsNthLastOfType",
167:       "org.jsoup.parser.Tag",
168:       "org.jsoup.parser.Token$Character",
169:       "org.jsoup.select.Evaluator$IsLastOfType",
170:       "org.jsoup.select.Evaluator$Attribute",
171:       "org.jsoup.select.NodeFilter$FilterResult",
172:       "org.jsoup.nodes.Entities",
173:       "org.jsoup.select.Evaluator$AttributeWithValueContaining",
174:       "org.jsoup.select.Elements",
175:       "org.jsoup.parser.Token$CData",
176:       "org.jsoup.nodes.Element$2",
177:       "org.jsoup.select.Evaluator$AllElements",
178:       "org.jsoup.nodes.Element$1",
179:       "org.jsoup.nodes.TextNode",
180:       "org.jsoup.select.Evaluator$AttributeWithValue",
181:       "org.jsoup.select.Evaluator$AttributeWithValueNot",
182:       "org.jsoup.parser.ParseErrorList",
183:       "org.jsoup.nodes.BooleanAttribute",
184:       "org.jsoup.SerializationException",
185:       "org.jsoup.select.CombiningEvaluator$Or",
186:       "org.jsoup.select.Evaluator$ContainsText",
187:       "org.jsoup.select.Evaluator$Id",
188:       "org.jsoup.select.Evaluator$IsNthOfType",
189:       "org.jsoup.select.Collector",
190:       "org.jsoup.select.Collector$Accumulator",
191:       "org.jsoup.nodes.Attributes$Dataset$DatasetIterator",
192:       "org.jsoup.parser.XmlTreeBuilder$1",
193:       "org.jsoup.parser.CharacterReader",
194:       "org.jsoup.select.Evaluator$IsFirstChild",
195:       "org.jsoup.select.StructuralEvaluator$Root",
196:       "org.jsoup.nodes.Node$1",
197:       "org.jsoup.select.NodeVisitor",
198:       "org.jsoup.parser.TokeniserState$2",
199:       "org.jsoup.parser.TokeniserState$12",
200:       "org.jsoup.parser.TokeniserState$1",
201:       "org.jsoup.parser.TokeniserState$13",
202:       "org.jsoup.nodes.Attributes$1",
203:       "org.jsoup.parser.TokeniserState$14",
204:       "org.jsoup.parser.TokeniserState$15",
205:       "org.jsoup.select.Evaluator$AttributeWithValueStarting",
206:       "org.jsoup.parser.Token$StartTag",
207:       "org.jsoup.parser.Token$EOF",
208:       "org.jsoup.parser.TokeniserState$10",
209:       "org.jsoup.parser.TokeniserState$11",
210:       "org.jsoup.nodes.DocumentType",
211:       "org.jsoup.parser.TokeniserState$9",
212:       "org.jsoup.parser.TokeniserState$8",
213:       "org.jsoup.parser.TokeniserState$7",
214:       "org.jsoup.parser.TokeniserState$6",
215:       "org.jsoup.parser.TokeniserState$5",
216:       "org.jsoup.parser.TokeniserState$4",
217:       "org.jsoup.select.QueryParser",
218:       "org.jsoup.parser.TokeniserState$3",
219:       "org.jsoup.nodes.NodeUtils",
220:       "org.jsoup.select.Evaluator$Matches",
221:       "org.jsoup.select.Evaluator$IsOnlyChild",
222:       "org.jsoup.parser.TokeniserState$16",
223:       "org.jsoup.parser.TokeniserState$17",
224:       "org.jsoup.parser.TokeniserState$18",
225:       "org.jsoup.nodes.Entities$1",
226:       "org.jsoup.parser.TokeniserState$19",
227:       "org.jsoup.parser.TokeniserState$23",
228:       "org.jsoup.UncheckedIOException",
229:       "org.jsoup.parser.TokeniserState$24",
230:       "org.jsoup.parser.TokeniserState$25",
231:       "org.jsoup.parser.TokeniserState$26",
232:       "org.jsoup.parser.TokeniserState$20",
233:       "org.jsoup.parser.TokeniserState$21",
234:       "org.jsoup.parser.TokeniserState$22",
235:       "org.jsoup.parser.TokenQueue",
236:       "org.jsoup.parser.ParseSettings",
237:       "org.jsoup.select.NodeFilter",
238:       "org.jsoup.select.Evaluator$ContainsOwnText",
239:       "org.jsoup.parser.TokeniserState$27",
240:       "org.jsoup.parser.TokeniserState",
241:       "org.jsoup.parser.TokeniserState$28",
242:       "org.jsoup.parser.TokeniserState$29",
243:       "org.jsoup.parser.TokeniserState$34",
244:       "org.jsoup.select.Evaluator$IndexLessThan",
245:       "org.jsoup.parser.TokeniserState$35",
246:       "org.jsoup.parser.TokeniserState$36",
247:       "org.jsoup.parser.TokeniserState$37",
248:       "org.jsoup.parser.TokeniserState$30",
249:       "org.jsoup.parser.TokeniserState$31",
250:       "org.jsoup.parser.TokeniserState$32",
251:       "org.jsoup.parser.TokeniserState$33",
252:       "org.jsoup.nodes.Entities$EscapeMode",
253:       "org.jsoup.select.Evaluator$MatchText",
254:       "org.jsoup.select.Evaluator",
255:       "org.jsoup.Connection",
256:       "org.jsoup.select.Evaluator$IsRoot",
257:       "org.jsoup.parser.TokeniserState$38",
258:       "org.jsoup.parser.TokeniserState$39",
259:       "org.jsoup.nodes.CDataNode",
260:       "org.jsoup.parser.TokeniserState$45",
261:       "org.jsoup.parser.TokeniserState$46",
262:       "org.jsoup.parser.TokeniserState$47",
263:       "org.jsoup.select.StructuralEvaluator$Parent",
264:       "org.jsoup.parser.TokeniserState$48",
265:       "org.jsoup.select.Evaluator$IsLastChild",
266:       "org.jsoup.parser.TokeniserState$41",
267:       "org.jsoup.select.Evaluator$IsNthLastChild",
268:       "org.jsoup.parser.TokeniserState$42",
269:       "org.jsoup.parser.TokeniserState$43",
270:       "org.jsoup.parser.TokeniserState$44",
271:       "org.jsoup.parser.TokeniserState$40",
272:       "org.jsoup.parser.Token$TokenType",
273:       "org.jsoup.parser.HtmlTreeBuilderState$2",
274:       "org.jsoup.parser.HtmlTreeBuilderState$1",
275:       "org.jsoup.parser.HtmlTreeBuilderState$4",
276:       "org.jsoup.nodes.Attribute",
277:       "org.jsoup.parser.HtmlTreeBuilderState$3",
278:       "org.jsoup.parser.HtmlTreeBuilderState$9",
279:       "org.jsoup.parser.TokeniserState$49",
280:       "org.jsoup.parser.HtmlTreeBuilderState$6",
281:       "org.jsoup.parser.HtmlTreeBuilderState$5",
282:       "org.jsoup.parser.HtmlTreeBuilderState$8",
283:       "org.jsoup.parser.HtmlTreeBuilderState$7"
284:     );
285:   } 
286:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
287:     mock(Class.forName("java.util.Comparator", false, Element_232_tmp__ESTest_scaffolding.class.getClassLoader()));
288:   }
289: 
290:   private static void resetClasses() {
291:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Element_232_tmp__ESTest_scaffolding.class.getClassLoader()); 
292: 
293:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
294:       "org.jsoup.nodes.Node",
295:       "org.jsoup.nodes.Element",
296:       "org.jsoup.helper.ChangeNotifyingArrayList",
297:       "org.jsoup.nodes.Element$NodeList",
298:       "org.jsoup.nodes.Element$1",
299:       "org.jsoup.nodes.Element$2",
300:       "org.jsoup.helper.Validate",
301:       "org.jsoup.parser.Tag",
302:       "org.jsoup.parser.ParseSettings",
303:       "org.jsoup.select.NodeFilter$FilterResult",
304:       "org.jsoup.internal.StringUtil",
305:       "org.jsoup.nodes.Document$OutputSettings$Syntax",
306:       "org.jsoup.parser.Parser",
307:       "org.jsoup.parser.TreeBuilder",
308:       "org.jsoup.parser.HtmlTreeBuilder",
309:       "org.jsoup.parser.Token",
310:       "org.jsoup.parser.Token$Tag",
311:       "org.jsoup.parser.Token$StartTag",
312:       "org.jsoup.nodes.Attributes",
313:       "org.jsoup.parser.Token$TokenType",
314:       "org.jsoup.parser.Token$EndTag",
315:       "org.jsoup.parser.ParseErrorList",
316:       "org.jsoup.nodes.Document",
317:       "org.jsoup.internal.Normalizer",
318:       "org.jsoup.parser.Tokeniser",
319:       "org.jsoup.parser.TokeniserState",
320:       "org.jsoup.parser.Token$Character",
321:       "org.jsoup.parser.Token$Doctype",
322:       "org.jsoup.parser.Token$Comment",
323:       "org.jsoup.parser.HtmlTreeBuilderState",
324:       "org.jsoup.parser.Token$EOF",
325:       "org.jsoup.nodes.Node$OuterHtmlVisitor",
326:       "org.jsoup.nodes.NodeUtils",
327:       "org.jsoup.nodes.Entities$CoreCharset",
328:       "org.jsoup.select.NodeTraversor",
329:       "org.jsoup.parser.HtmlTreeBuilderState$24",
330:       "org.jsoup.select.Evaluator",
331:       "org.jsoup.select.Evaluator$AttributeKeyPair",
332:       "org.jsoup.select.Evaluator$AttributeWithValue",
333:       "org.jsoup.nodes.LeafNode",
334:       "org.jsoup.nodes.TextNode",
335:       "org.jsoup.nodes.Entities$1",
336:       "org.jsoup.select.Evaluator$Tag",
337:       "org.jsoup.select.Collector",
338:       "org.jsoup.select.Elements",
339:       "org.jsoup.select.Collector$Accumulator",
340:       "org.jsoup.select.Evaluator$AttributeWithValueMatching",
341:       "org.jsoup.nodes.Attributes$Dataset",
342:       "org.jsoup.nodes.Attribute",
343:       "org.jsoup.select.Evaluator$AttributeWithValueContaining",
344:       "org.jsoup.select.Evaluator$MatchesOwn",
345:       "org.jsoup.parser.XmlTreeBuilder",
346:       "org.jsoup.parser.XmlTreeBuilder$1",
347:       "org.jsoup.select.Evaluator$AttributeWithValueNot",
348:       "org.jsoup.nodes.Attributes$Dataset$EntrySet",
349:       "org.jsoup.nodes.Attributes$Dataset$DatasetIterator",
350:       "org.jsoup.nodes.Attributes$1",
351:       "org.jsoup.select.Selector",
352:       "org.jsoup.select.QueryParser",
353:       "org.jsoup.parser.TokenQueue",
354:       "org.jsoup.select.Evaluator$Class",
355:       "org.jsoup.select.Selector$SelectorParseException",
356:       "org.jsoup.nodes.FormElement",
357:       "org.jsoup.select.Evaluator$Matches",
358:       "org.jsoup.select.Evaluator$IndexEvaluator",
359:       "org.jsoup.select.Evaluator$IndexEquals",
360:       "org.jsoup.select.Evaluator$AllElements",
361:       "org.jsoup.select.Evaluator$IsOnlyChild",
362:       "org.jsoup.select.StructuralEvaluator$Root",
363:       "org.jsoup.select.Evaluator$IndexLessThan",
364:       "org.jsoup.select.Evaluator$ContainsText",
365:       "org.jsoup.select.Evaluator$AttributeStarting",
366:       "org.jsoup.nodes.Comment",
367:       "org.jsoup.select.Evaluator$IsOnlyOfType",
368:       "org.jsoup.select.Evaluator$IndexGreaterThan",
369:       "org.jsoup.nodes.CDataNode",
370:       "org.jsoup.select.Collector$FirstFinder",
371:       "org.jsoup.select.Evaluator$Id",
372:       "org.jsoup.nodes.Node$1",
373:       "org.jsoup.select.Evaluator$ContainsOwnText",
374:       "org.jsoup.nodes.DocumentType",
375:       "org.jsoup.parser.HtmlTreeBuilderState$Constants",
376:       "org.jsoup.nodes.PseudoTextElement",
377:       "org.jsoup.Connection$Method",
378:       "org.jsoup.Jsoup",
379:       "org.jsoup.helper.HttpConnection",
380:       "org.jsoup.helper.HttpConnection$Base",
381:       "org.jsoup.helper.HttpConnection$Request",
382:       "org.jsoup.helper.HttpConnection$Response",
383:       "org.jsoup.select.Evaluator$AttributeWithValueStarting",
384:       "org.jsoup.select.CombiningEvaluator",
385:       "org.jsoup.select.CombiningEvaluator$And",
386:       "org.jsoup.select.StructuralEvaluator",
387:       "org.jsoup.select.StructuralEvaluator$ImmediateParent",
388:       "org.jsoup.select.StructuralEvaluator$Parent",
389:       "org.jsoup.nodes.XmlDeclaration",
390:       "org.jsoup.select.Evaluator$IsRoot",
391:       "org.jsoup.nodes.DataNode",
392:       "org.jsoup.select.Evaluator$Attribute",
393:       "org.jsoup.select.Evaluator$AttributeWithValueEnding",
394:       "org.jsoup.select.Evaluator$IsFirstChild",
395:       "org.jsoup.select.Evaluator$CssNthEvaluator",
396:       "org.jsoup.select.Evaluator$IsNthLastOfType",
397:       "org.jsoup.select.Evaluator$IsLastOfType",
398:       "org.jsoup.select.StructuralEvaluator$PreviousSibling",
399:       "org.jsoup.select.CombiningEvaluator$Or",
400:       "org.jsoup.nodes.BooleanAttribute",
401:       "org.jsoup.SerializationException",
402:       "org.jsoup.select.Evaluator$TagEndsWith",
403:       "org.jsoup.select.Evaluator$IsNthChild",
404:       "org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling",
405:       "org.jsoup.select.Evaluator$IsLastChild",
406:       "org.jsoup.select.Evaluator$ContainsData",
407:       "org.jsoup.parser.ParseError",
408:       "org.jsoup.select.Evaluator$IsNthLastChild",
409:       "org.jsoup.select.Evaluator$MatchText",
410:       "org.jsoup.select.Evaluator$IsNthOfType",
411:       "org.jsoup.select.Evaluator$IsFirstOfType"
412:     );
413:   }
414: }

[MASTER] 22:28:15.254 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Document document0 = Parser.parseBodyFragmentRelaxed("            ", "            ");
assertNotNull(document0);
assertFalse(document0.hasParent());
assertEquals("            ", document0.location());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("            ", document0.baseUri());
assertEquals(1, document0.childNodeSize());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(0, document0.siblingIndex());
assertEquals("#document", document0.nodeName());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());

Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

Element element0 = document0.head();
assertNotNull(element0);
assertFalse(document0.hasParent());
assertEquals("            ", document0.location());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("            ", document0.baseUri());
assertEquals(1, document0.childNodeSize());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(0, document0.siblingIndex());
assertEquals("#document", document0.nodeName());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertEquals("            ", element0.baseUri());
assertEquals(0, element0.childNodeSize());
assertTrue(element0.isBlock());
assertEquals("head", element0.tagName());
assertEquals(0, element0.siblingIndex());
assertTrue(element0.hasParent());
assertEquals("head", element0.nodeName());

Elements elements0 = document0.getElementsContainingOwnText("8=kom,#3XjaSj,Z");
assertNotNull(elements0);
assertFalse(document0.hasParent());
assertEquals("            ", document0.location());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("            ", document0.baseUri());
assertEquals(1, document0.childNodeSize());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(0, document0.siblingIndex());
assertEquals("#document", document0.nodeName());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertTrue(elements0.isEmpty());
assertEquals(0, elements0.size());

Element element1 = element0.appendElement("title");
assertNotNull(element1);
assertFalse(element1.equals((Object)element0));
assertFalse(document0.hasParent());
assertEquals("            ", document0.location());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("            ", document0.baseUri());
assertEquals(1, document0.childNodeSize());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(0, document0.siblingIndex());
assertEquals("#document", document0.nodeName());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertEquals("            ", element0.baseUri());
assertEquals(1, element0.childNodeSize());
assertTrue(element0.isBlock());
assertEquals("head", element0.tagName());
assertEquals(0, element0.siblingIndex());
assertTrue(element0.hasParent());
assertEquals("head", element0.nodeName());
assertEquals("title", element1.tagName());
assertTrue(element1.hasParent());
assertEquals("title", element1.nodeName());
assertTrue(element1.isBlock());
assertEquals(0, element1.siblingIndex());
assertEquals(0, element1.childNodeSize());
assertEquals("            ", element1.baseUri());
assertNotSame(element0, element1);
assertNotSame(element1, element0);

Element element2 = element1.getElementById("title");
assertNull(element2);
assertFalse(element0.equals((Object)element1));
assertFalse(element1.equals((Object)element0));
assertFalse(document0.hasParent());
assertEquals("            ", document0.location());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("            ", document0.baseUri());
assertEquals(1, document0.childNodeSize());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(0, document0.siblingIndex());
assertEquals("#document", document0.nodeName());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertEquals("            ", element0.baseUri());
assertEquals(1, element0.childNodeSize());
assertTrue(element0.isBlock());
assertEquals("head", element0.tagName());
assertEquals(0, element0.siblingIndex());
assertTrue(element0.hasParent());
assertEquals("head", element0.nodeName());
assertEquals("title", element1.tagName());
assertTrue(element1.hasParent());
assertEquals("title", element1.nodeName());
assertTrue(element1.isBlock());
assertEquals(0, element1.siblingIndex());
assertEquals(0, element1.childNodeSize());
assertEquals("            ", element1.baseUri());
assertNotSame(element0, element1);
assertNotSame(element1, element0);

Element element3 = element0.prepend("title");
assertNotNull(element3);
assertFalse(element0.equals((Object)element1));
assertFalse(element3.equals((Object)element1));
assertFalse(document0.hasParent());
assertEquals("            ", document0.location());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("            ", document0.baseUri());
assertEquals(1, document0.childNodeSize());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(0, document0.siblingIndex());
assertEquals("#document", document0.nodeName());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertEquals("            ", element0.baseUri());
assertTrue(element0.isBlock());
assertEquals(2, element0.childNodeSize());
assertEquals("head", element0.tagName());
assertEquals(0, element0.siblingIndex());
assertTrue(element0.hasParent());
assertEquals("head", element0.nodeName());
assertEquals("head", element3.nodeName());
assertEquals(2, element3.childNodeSize());
assertTrue(element3.hasParent());
assertEquals(0, element3.siblingIndex());
assertEquals("head", element3.tagName());
assertEquals("            ", element3.baseUri());
assertTrue(element3.isBlock());
assertSame(element0, element3);
assertNotSame(element0, element1);
assertNotSame(element3, element1);
assertSame(element3, element0);


[MASTER] 22:28:15.287 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_233_1628288895255/org/jsoup/nodes/Element_233_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_233_1628288895255/org/jsoup/nodes/Element_233_tmp__ESTest_scaffolding.java]]
[MASTER] 22:28:15.287 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Jsoup-87/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Jsoup-87/target/classes
[MASTER] 22:28:15.287 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Jsoup-87/target/classes
[MASTER] 22:28:15.288 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Integer>>: 41
[MASTER] 22:28:15.288 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_233_1628288895255/org/jsoup/nodes/Element_233_tmp__ESTest.java uses or overrides a deprecated API.: -1
[MASTER] 22:28:15.288 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:deprecation for details.: -1
[MASTER] 22:28:15.288 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_233_1628288895255/org/jsoup/nodes/Element_233_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 22:28:15.288 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 22:28:15.288 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_233_1628288895255/org/jsoup/nodes/Element_233_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 22:28:15 GMT 2021
4:  */
5: 
6: package org.jsoup.nodes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.Comparator;
12: import java.util.Map;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.ViolatedAssumptionAnswer;
16: import org.jsoup.nodes.Document;
17: import org.jsoup.nodes.Element;
18: import org.jsoup.parser.Parser;
19: import org.jsoup.select.Elements;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class Element_233_tmp__ESTest extends Element_233_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
28:       assertNotNull(document0);
29:       assertFalse(document0.updateMetaCharsetElement());
30:       assertEquals("#document", document0.nodeName());
31:       assertEquals(1, document0.childNodeSize());
32:       assertEquals("br", document0.location());
33:       assertFalse(document0.hasParent());
34:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
35:       assertEquals("br", document0.baseUri());
36:       assertEquals("#root", document0.tagName());
37:       assertFalse(document0.isBlock());
38:       assertEquals(0, document0.siblingIndex());
39:       
40:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
41:       Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
42:       assertNotNull(comparator1);
43:       
44:       Element element0 = document0.head();
45:       assertNotNull(element0);
46:       assertFalse(document0.updateMetaCharsetElement());
47:       assertEquals("#document", document0.nodeName());
48:       assertEquals(1, document0.childNodeSize());
49:       assertEquals("br", document0.location());
50:       assertFalse(document0.hasParent());
51:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
52:       assertEquals("br", document0.baseUri());
53:       assertEquals("#root", document0.tagName());
54:       assertFalse(document0.isBlock());
55:       assertEquals(0, document0.siblingIndex());
56:       assertTrue(element0.isBlock());
57:       assertEquals("head", element0.tagName());
58:       assertEquals(0, element0.siblingIndex());
59:       assertTrue(element0.hasParent());
60:       assertEquals("head", element0.nodeName());
61:       assertEquals(0, element0.childNodeSize());
62:       assertEquals("br", element0.baseUri());
63:       
64:       String string0 = document0.cssSelector();
65:       assertNotNull(string0);
66:       assertEquals("#root", string0);
67:       assertFalse(document0.updateMetaCharsetElement());
68:       assertEquals("#document", document0.nodeName());
69:       assertEquals(1, document0.childNodeSize());
70:       assertEquals("br", document0.location());
71:       assertFalse(document0.hasParent());
72:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
73:       assertEquals("br", document0.baseUri());
74:       assertEquals("#root", document0.tagName());
75:       assertFalse(document0.isBlock());
76:       assertEquals(0, document0.siblingIndex());
77:       
78:       Element element1 = element0.parent();
79:       assertNotNull(element1);
80:       assertFalse(element1.equals((Object)element0));
81:       assertFalse(document0.updateMetaCharsetElement());
82:       assertEquals("#document", document0.nodeName());
83:       assertEquals(1, document0.childNodeSize());
84:       assertEquals("br", document0.location());
85:       assertFalse(document0.hasParent());
86:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
87:       assertEquals("br", document0.baseUri());
88:       assertEquals("#root", document0.tagName());
89:       assertFalse(document0.isBlock());
90:       assertEquals(0, document0.siblingIndex());
91:       assertTrue(element0.isBlock());
92:       assertEquals("head", element0.tagName());
93:       assertEquals(0, element0.siblingIndex());
94:       assertTrue(element0.hasParent());
95:       assertEquals("head", element0.nodeName());
96:       assertEquals(0, element0.childNodeSize());
97:       assertEquals("br", element0.baseUri());
98:       assertEquals(2, element1.childNodeSize());
99:       assertEquals("html", element1.tagName());
100:       assertTrue(element1.isBlock());
101:       assertTrue(element1.hasParent());
102:       assertEquals("html", element1.nodeName());
103:       assertEquals(0, element1.siblingIndex());
104:       assertEquals("br", element1.baseUri());
105:       assertNotSame(element0, element1);
106:       assertNotSame(element1, element0);
107:       
108:       Elements elements0 = document0.getElementsByAttributeValueNot("XBc<1(S<", "XBc<1(S<");
109:       assertNotNull(elements0);
110:       assertFalse(document0.updateMetaCharsetElement());
111:       assertEquals("#document", document0.nodeName());
112:       assertEquals(1, document0.childNodeSize());
113:       assertEquals("br", document0.location());
114:       assertFalse(document0.hasParent());
115:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
116:       assertEquals("br", document0.baseUri());
117:       assertEquals("#root", document0.tagName());
118:       assertFalse(document0.isBlock());
119:       assertEquals(0, document0.siblingIndex());
120:       assertFalse(elements0.isEmpty());
121:       assertEquals(4, elements0.size());
122:       
123:       Elements elements1 = element1.getElementsByAttribute("#root");
124:       assertNotNull(elements1);
125:       assertFalse(element0.equals((Object)element1));
126:       assertFalse(element1.equals((Object)element0));
127:       assertFalse(elements1.equals((Object)elements0));
128:       assertFalse(document0.updateMetaCharsetElement());
129:       assertEquals("#document", document0.nodeName());
130:       assertEquals(1, document0.childNodeSize());
131:       assertEquals("br", document0.location());
132:       assertFalse(document0.hasParent());
133:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
134:       assertEquals("br", document0.baseUri());
135:       assertEquals("#root", document0.tagName());
136:       assertFalse(document0.isBlock());
137:       assertEquals(0, document0.siblingIndex());
138:       assertTrue(element0.isBlock());
139:       assertEquals("head", element0.tagName());
140:       assertEquals(0, element0.siblingIndex());
141:       assertTrue(element0.hasParent());
142:       assertEquals("head", element0.nodeName());
143:       assertEquals(0, element0.childNodeSize());
144:       assertEquals("br", element0.baseUri());
145:       assertEquals(2, element1.childNodeSize());
146:       assertEquals("html", element1.tagName());
147:       assertTrue(element1.isBlock());
148:       assertTrue(element1.hasParent());
149:       assertEquals("html", element1.nodeName());
150:       assertEquals(0, element1.siblingIndex());
151:       assertEquals("br", element1.baseUri());
152:       assertTrue(elements1.isEmpty());
153:       assertEquals(0, elements1.size());
154:       assertNotSame(element0, element1);
155:       assertNotSame(element1, element0);
156:       assertNotSame(elements1, elements0);
157:   }
158: }
RegularFileObject[/tmp/EvoSuite_233_1628288895255/org/jsoup/nodes/Element_233_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 22:28:15 GMT 2021
5:  */
6: 
7: package org.jsoup.nodes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class Element_233_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.jsoup.nodes.Element"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Element_233_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.jsoup.nodes.Document$QuirksMode",
72:       "org.jsoup.parser.HtmlTreeBuilderState$18",
73:       "org.jsoup.select.StructuralEvaluator$ImmediateParent",
74:       "org.jsoup.parser.HtmlTreeBuilderState$19",
75:       "org.jsoup.parser.HtmlTreeBuilderState$16",
76:       "org.jsoup.helper.ChangeNotifyingArrayList",
77:       "org.jsoup.parser.HtmlTreeBuilderState$17",
78:       "org.jsoup.parser.HtmlTreeBuilderState$14",
79:       "org.jsoup.parser.HtmlTreeBuilderState$15",
80:       "org.jsoup.select.Evaluator$IndexEvaluator",
81:       "org.jsoup.select.Evaluator$IsOnlyOfType",
82:       "org.jsoup.nodes.Entities$CoreCharset",
83:       "org.jsoup.nodes.Element",
84:       "org.jsoup.parser.HtmlTreeBuilderState$12",
85:       "org.jsoup.parser.HtmlTreeBuilderState$13",
86:       "org.jsoup.parser.HtmlTreeBuilderState$10",
87:       "org.jsoup.parser.HtmlTreeBuilderState$11",
88:       "org.jsoup.select.NodeTraversor",
89:       "org.jsoup.select.Evaluator$MatchesOwn",
90:       "org.jsoup.select.CombiningEvaluator$And",
91:       "org.jsoup.parser.Token$EndTag",
92:       "org.jsoup.nodes.Document",
93:       "org.jsoup.Jsoup",
94:       "org.jsoup.parser.HtmlTreeBuilder",
95:       "org.jsoup.nodes.FormElement",
96:       "org.jsoup.select.StructuralEvaluator",
97:       "org.jsoup.select.Evaluator$IndexEquals",
98:       "org.jsoup.select.Selector$SelectorParseException",
99:       "org.jsoup.parser.Token$Tag",
100:       "org.jsoup.nodes.XmlDeclaration",
101:       "org.jsoup.parser.Token$Doctype",
102:       "org.jsoup.select.Evaluator$TagEndsWith",
103:       "org.jsoup.parser.HtmlTreeBuilderState$23",
104:       "org.jsoup.parser.HtmlTreeBuilderState$24",
105:       "org.jsoup.select.Evaluator$Tag",
106:       "org.jsoup.parser.HtmlTreeBuilderState$21",
107:       "org.jsoup.nodes.Document$OutputSettings$Syntax",
108:       "org.jsoup.parser.HtmlTreeBuilderState$22",
109:       "org.jsoup.parser.HtmlTreeBuilderState$20",
110:       "org.jsoup.parser.Token$1",
111:       "org.jsoup.internal.StringUtil",
112:       "org.jsoup.parser.Tokeniser",
113:       "org.jsoup.nodes.Comment",
114:       "org.jsoup.select.Evaluator$IndexGreaterThan",
115:       "org.jsoup.nodes.LeafNode",
116:       "org.jsoup.select.Selector",
117:       "org.jsoup.select.Evaluator$AttributeWithValueEnding",
118:       "org.jsoup.select.Collector$FirstFinder",
119:       "org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling",
120:       "org.jsoup.nodes.Node",
121:       "org.jsoup.parser.HtmlTreeBuilderState",
122:       "org.jsoup.select.Evaluator$AttributeStarting",
123:       "org.jsoup.nodes.DataNode",
124:       "org.jsoup.nodes.Attributes",
125:       "org.jsoup.parser.XmlTreeBuilder",
126:       "org.jsoup.nodes.Document$OutputSettings",
127:       "org.jsoup.select.CombiningEvaluator",
128:       "org.jsoup.select.Evaluator$ContainsData",
129:       "org.jsoup.internal.Normalizer",
130:       "org.jsoup.nodes.Attributes$Dataset$EntrySet",
131:       "org.jsoup.nodes.Attributes$Dataset",
132:       "org.jsoup.helper.Validate",
133:       "org.jsoup.select.Evaluator$CssNthEvaluator",
134:       "org.jsoup.parser.Token$Comment",
135:       "org.jsoup.select.Evaluator$IsFirstOfType",
136:       "org.jsoup.nodes.Element$NodeList",
137:       "org.jsoup.parser.TokeniserState$56",
138:       "org.jsoup.parser.TokeniserState$57",
139:       "org.jsoup.parser.TokeniserState$58",
140:       "org.jsoup.parser.TokeniserState$59",
141:       "org.jsoup.parser.TokeniserState$52",
142:       "org.jsoup.parser.TokeniserState$53",
143:       "org.jsoup.parser.TreeBuilder",
144:       "org.jsoup.parser.TokeniserState$54",
145:       "org.jsoup.parser.TokeniserState$55",
146:       "org.jsoup.nodes.PseudoTextElement",
147:       "org.jsoup.parser.TokeniserState$50",
148:       "org.jsoup.parser.TokeniserState$51",
149:       "org.jsoup.parser.Parser",
150:       "org.jsoup.select.Evaluator$IsEmpty",
151:       "org.jsoup.select.Evaluator$AttributeWithValueMatching",
152:       "org.jsoup.select.Evaluator$IsNthChild",
153:       "org.jsoup.parser.HtmlTreeBuilderState$Constants",
154:       "org.jsoup.select.Evaluator$Class",
155:       "org.jsoup.parser.TokeniserState$67",
156:       "org.jsoup.parser.TokeniserState$63",
157:       "org.jsoup.nodes.Node$OuterHtmlVisitor",
158:       "org.jsoup.parser.TokeniserState$64",
159:       "org.jsoup.parser.TokeniserState$65",
160:       "org.jsoup.parser.Token",
161:       "org.jsoup.parser.TokeniserState$66",
162:       "org.jsoup.parser.TokeniserState$60",
163:       "org.jsoup.select.Evaluator$AttributeKeyPair",
164:       "org.jsoup.parser.TokeniserState$61",
165:       "org.jsoup.parser.TokeniserState$62",
166:       "org.jsoup.select.Evaluator$IsNthLastOfType",
167:       "org.jsoup.parser.Tag",
168:       "org.jsoup.parser.Token$Character",
169:       "org.jsoup.select.Evaluator$IsLastOfType",
170:       "org.jsoup.select.Evaluator$Attribute",
171:       "org.jsoup.select.NodeFilter$FilterResult",
172:       "org.jsoup.nodes.Entities",
173:       "org.jsoup.select.Evaluator$AttributeWithValueContaining",
174:       "org.jsoup.select.Elements",
175:       "org.jsoup.parser.Token$CData",
176:       "org.jsoup.nodes.Element$2",
177:       "org.jsoup.select.Evaluator$AllElements",
178:       "org.jsoup.nodes.Element$1",
179:       "org.jsoup.nodes.TextNode",
180:       "org.jsoup.select.Evaluator$AttributeWithValue",
181:       "org.jsoup.select.Evaluator$AttributeWithValueNot",
182:       "org.jsoup.parser.ParseErrorList",
183:       "org.jsoup.nodes.BooleanAttribute",
184:       "org.jsoup.SerializationException",
185:       "org.jsoup.select.CombiningEvaluator$Or",
186:       "org.jsoup.select.Evaluator$ContainsText",
187:       "org.jsoup.select.Evaluator$Id",
188:       "org.jsoup.select.Evaluator$IsNthOfType",
189:       "org.jsoup.select.Collector",
190:       "org.jsoup.select.Collector$Accumulator",
191:       "org.jsoup.nodes.Attributes$Dataset$DatasetIterator",
192:       "org.jsoup.parser.XmlTreeBuilder$1",
193:       "org.jsoup.parser.CharacterReader",
194:       "org.jsoup.select.Evaluator$IsFirstChild",
195:       "org.jsoup.select.StructuralEvaluator$Root",
196:       "org.jsoup.nodes.Node$1",
197:       "org.jsoup.select.NodeVisitor",
198:       "org.jsoup.parser.TokeniserState$2",
199:       "org.jsoup.parser.TokeniserState$12",
200:       "org.jsoup.parser.TokeniserState$1",
201:       "org.jsoup.parser.TokeniserState$13",
202:       "org.jsoup.nodes.Attributes$1",
203:       "org.jsoup.parser.TokeniserState$14",
204:       "org.jsoup.parser.TokeniserState$15",
205:       "org.jsoup.select.Evaluator$AttributeWithValueStarting",
206:       "org.jsoup.parser.Token$StartTag",
207:       "org.jsoup.parser.Token$EOF",
208:       "org.jsoup.parser.TokeniserState$10",
209:       "org.jsoup.parser.TokeniserState$11",
210:       "org.jsoup.nodes.DocumentType",
211:       "org.jsoup.parser.TokeniserState$9",
212:       "org.jsoup.parser.TokeniserState$8",
213:       "org.jsoup.parser.TokeniserState$7",
214:       "org.jsoup.parser.TokeniserState$6",
215:       "org.jsoup.parser.TokeniserState$5",
216:       "org.jsoup.parser.TokeniserState$4",
217:       "org.jsoup.select.QueryParser",
218:       "org.jsoup.parser.TokeniserState$3",
219:       "org.jsoup.nodes.NodeUtils",
220:       "org.jsoup.select.Evaluator$Matches",
221:       "org.jsoup.select.Evaluator$IsOnlyChild",
222:       "org.jsoup.parser.TokeniserState$16",
223:       "org.jsoup.parser.TokeniserState$17",
224:       "org.jsoup.parser.TokeniserState$18",
225:       "org.jsoup.nodes.Entities$1",
226:       "org.jsoup.parser.TokeniserState$19",
227:       "org.jsoup.parser.TokeniserState$23",
228:       "org.jsoup.UncheckedIOException",
229:       "org.jsoup.parser.TokeniserState$24",
230:       "org.jsoup.parser.TokeniserState$25",
231:       "org.jsoup.parser.TokeniserState$26",
232:       "org.jsoup.parser.TokeniserState$20",
233:       "org.jsoup.parser.TokeniserState$21",
234:       "org.jsoup.parser.TokeniserState$22",
235:       "org.jsoup.parser.TokenQueue",
236:       "org.jsoup.parser.ParseSettings",
237:       "org.jsoup.select.NodeFilter",
238:       "org.jsoup.select.Evaluator$ContainsOwnText",
239:       "org.jsoup.parser.TokeniserState$27",
240:       "org.jsoup.parser.TokeniserState",
241:       "org.jsoup.parser.TokeniserState$28",
242:       "org.jsoup.parser.TokeniserState$29",
243:       "org.jsoup.parser.TokeniserState$34",
244:       "org.jsoup.select.Evaluator$IndexLessThan",
245:       "org.jsoup.parser.TokeniserState$35",
246:       "org.jsoup.parser.TokeniserState$36",
247:       "org.jsoup.parser.TokeniserState$37",
248:       "org.jsoup.parser.TokeniserState$30",
249:       "org.jsoup.parser.TokeniserState$31",
250:       "org.jsoup.parser.TokeniserState$32",
251:       "org.jsoup.parser.TokeniserState$33",
252:       "org.jsoup.nodes.Entities$EscapeMode",
253:       "org.jsoup.select.Evaluator$MatchText",
254:       "org.jsoup.select.Evaluator",
255:       "org.jsoup.Connection",
256:       "org.jsoup.select.Evaluator$IsRoot",
257:       "org.jsoup.parser.TokeniserState$38",
258:       "org.jsoup.parser.TokeniserState$39",
259:       "org.jsoup.nodes.CDataNode",
260:       "org.jsoup.parser.TokeniserState$45",
261:       "org.jsoup.parser.TokeniserState$46",
262:       "org.jsoup.parser.TokeniserState$47",
263:       "org.jsoup.select.StructuralEvaluator$Parent",
264:       "org.jsoup.parser.TokeniserState$48",
265:       "org.jsoup.select.Evaluator$IsLastChild",
266:       "org.jsoup.parser.TokeniserState$41",
267:       "org.jsoup.select.Evaluator$IsNthLastChild",
268:       "org.jsoup.parser.TokeniserState$42",
269:       "org.jsoup.parser.TokeniserState$43",
270:       "org.jsoup.parser.TokeniserState$44",
271:       "org.jsoup.parser.TokeniserState$40",
272:       "org.jsoup.parser.Token$TokenType",
273:       "org.jsoup.parser.HtmlTreeBuilderState$2",
274:       "org.jsoup.parser.HtmlTreeBuilderState$1",
275:       "org.jsoup.parser.HtmlTreeBuilderState$4",
276:       "org.jsoup.nodes.Attribute",
277:       "org.jsoup.parser.HtmlTreeBuilderState$3",
278:       "org.jsoup.parser.HtmlTreeBuilderState$9",
279:       "org.jsoup.parser.TokeniserState$49",
280:       "org.jsoup.parser.HtmlTreeBuilderState$6",
281:       "org.jsoup.parser.HtmlTreeBuilderState$5",
282:       "org.jsoup.parser.HtmlTreeBuilderState$8",
283:       "org.jsoup.parser.HtmlTreeBuilderState$7"
284:     );
285:   } 
286:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
287:     mock(Class.forName("java.util.Comparator", false, Element_233_tmp__ESTest_scaffolding.class.getClassLoader()));
288:   }
289: 
290:   private static void resetClasses() {
291:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Element_233_tmp__ESTest_scaffolding.class.getClassLoader()); 
292: 
293:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
294:       "org.jsoup.nodes.Node",
295:       "org.jsoup.nodes.Element",
296:       "org.jsoup.helper.ChangeNotifyingArrayList",
297:       "org.jsoup.nodes.Element$NodeList",
298:       "org.jsoup.nodes.Element$1",
299:       "org.jsoup.nodes.Element$2",
300:       "org.jsoup.helper.Validate",
301:       "org.jsoup.parser.Tag",
302:       "org.jsoup.parser.ParseSettings",
303:       "org.jsoup.select.NodeFilter$FilterResult",
304:       "org.jsoup.internal.StringUtil",
305:       "org.jsoup.nodes.Document$OutputSettings$Syntax",
306:       "org.jsoup.parser.Parser",
307:       "org.jsoup.parser.TreeBuilder",
308:       "org.jsoup.parser.HtmlTreeBuilder",
309:       "org.jsoup.parser.Token",
310:       "org.jsoup.parser.Token$Tag",
311:       "org.jsoup.parser.Token$StartTag",
312:       "org.jsoup.nodes.Attributes",
313:       "org.jsoup.parser.Token$TokenType",
314:       "org.jsoup.parser.Token$EndTag",
315:       "org.jsoup.parser.ParseErrorList",
316:       "org.jsoup.nodes.Document",
317:       "org.jsoup.internal.Normalizer",
318:       "org.jsoup.parser.Tokeniser",
319:       "org.jsoup.parser.TokeniserState",
320:       "org.jsoup.parser.Token$Character",
321:       "org.jsoup.parser.Token$Doctype",
322:       "org.jsoup.parser.Token$Comment",
323:       "org.jsoup.parser.HtmlTreeBuilderState",
324:       "org.jsoup.parser.Token$EOF",
325:       "org.jsoup.nodes.Node$OuterHtmlVisitor",
326:       "org.jsoup.nodes.NodeUtils",
327:       "org.jsoup.nodes.Entities$CoreCharset",
328:       "org.jsoup.select.NodeTraversor",
329:       "org.jsoup.parser.HtmlTreeBuilderState$24",
330:       "org.jsoup.select.Evaluator",
331:       "org.jsoup.select.Evaluator$AttributeKeyPair",
332:       "org.jsoup.select.Evaluator$AttributeWithValue",
333:       "org.jsoup.nodes.LeafNode",
334:       "org.jsoup.nodes.TextNode",
335:       "org.jsoup.nodes.Entities$1",
336:       "org.jsoup.select.Evaluator$Tag",
337:       "org.jsoup.select.Collector",
338:       "org.jsoup.select.Elements",
339:       "org.jsoup.select.Collector$Accumulator",
340:       "org.jsoup.select.Evaluator$AttributeWithValueMatching",
341:       "org.jsoup.nodes.Attributes$Dataset",
342:       "org.jsoup.nodes.Attribute",
343:       "org.jsoup.select.Evaluator$AttributeWithValueContaining",
344:       "org.jsoup.select.Evaluator$MatchesOwn",
345:       "org.jsoup.parser.XmlTreeBuilder",
346:       "org.jsoup.parser.XmlTreeBuilder$1",
347:       "org.jsoup.select.Evaluator$AttributeWithValueNot",
348:       "org.jsoup.nodes.Attributes$Dataset$EntrySet",
349:       "org.jsoup.nodes.Attributes$Dataset$DatasetIterator",
350:       "org.jsoup.nodes.Attributes$1",
351:       "org.jsoup.select.Selector",
352:       "org.jsoup.select.QueryParser",
353:       "org.jsoup.parser.TokenQueue",
354:       "org.jsoup.select.Evaluator$Class",
355:       "org.jsoup.select.Selector$SelectorParseException",
356:       "org.jsoup.nodes.FormElement",
357:       "org.jsoup.select.Evaluator$Matches",
358:       "org.jsoup.select.Evaluator$IndexEvaluator",
359:       "org.jsoup.select.Evaluator$IndexEquals",
360:       "org.jsoup.select.Evaluator$AllElements",
361:       "org.jsoup.select.Evaluator$IsOnlyChild",
362:       "org.jsoup.select.StructuralEvaluator$Root",
363:       "org.jsoup.select.Evaluator$IndexLessThan",
364:       "org.jsoup.select.Evaluator$ContainsText",
365:       "org.jsoup.select.Evaluator$AttributeStarting",
366:       "org.jsoup.nodes.Comment",
367:       "org.jsoup.select.Evaluator$IsOnlyOfType",
368:       "org.jsoup.select.Evaluator$IndexGreaterThan",
369:       "org.jsoup.nodes.CDataNode",
370:       "org.jsoup.select.Collector$FirstFinder",
371:       "org.jsoup.select.Evaluator$Id",
372:       "org.jsoup.nodes.Node$1",
373:       "org.jsoup.select.Evaluator$ContainsOwnText",
374:       "org.jsoup.nodes.DocumentType",
375:       "org.jsoup.parser.HtmlTreeBuilderState$Constants",
376:       "org.jsoup.nodes.PseudoTextElement",
377:       "org.jsoup.Connection$Method",
378:       "org.jsoup.Jsoup",
379:       "org.jsoup.helper.HttpConnection",
380:       "org.jsoup.helper.HttpConnection$Base",
381:       "org.jsoup.helper.HttpConnection$Request",
382:       "org.jsoup.helper.HttpConnection$Response",
383:       "org.jsoup.select.Evaluator$AttributeWithValueStarting",
384:       "org.jsoup.select.CombiningEvaluator",
385:       "org.jsoup.select.CombiningEvaluator$And",
386:       "org.jsoup.select.StructuralEvaluator",
387:       "org.jsoup.select.StructuralEvaluator$ImmediateParent",
388:       "org.jsoup.select.StructuralEvaluator$Parent",
389:       "org.jsoup.nodes.XmlDeclaration",
390:       "org.jsoup.select.Evaluator$IsRoot",
391:       "org.jsoup.nodes.DataNode",
392:       "org.jsoup.select.Evaluator$Attribute",
393:       "org.jsoup.select.Evaluator$AttributeWithValueEnding",
394:       "org.jsoup.select.Evaluator$IsFirstChild",
395:       "org.jsoup.select.Evaluator$CssNthEvaluator",
396:       "org.jsoup.select.Evaluator$IsNthLastOfType",
397:       "org.jsoup.select.Evaluator$IsLastOfType",
398:       "org.jsoup.select.StructuralEvaluator$PreviousSibling",
399:       "org.jsoup.select.CombiningEvaluator$Or",
400:       "org.jsoup.nodes.BooleanAttribute",
401:       "org.jsoup.SerializationException",
402:       "org.jsoup.select.Evaluator$TagEndsWith",
403:       "org.jsoup.select.Evaluator$IsNthChild",
404:       "org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling",
405:       "org.jsoup.select.Evaluator$IsLastChild",
406:       "org.jsoup.select.Evaluator$ContainsData",
407:       "org.jsoup.parser.ParseError",
408:       "org.jsoup.select.Evaluator$IsNthLastChild",
409:       "org.jsoup.select.Evaluator$MatchText",
410:       "org.jsoup.select.Evaluator$IsNthOfType",
411:       "org.jsoup.select.Evaluator$IsFirstOfType"
412:     );
413:   }
414: }

[MASTER] 22:28:15.290 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
assertNotNull(document0);
assertFalse(document0.updateMetaCharsetElement());
assertEquals("#document", document0.nodeName());
assertEquals(1, document0.childNodeSize());
assertEquals("br", document0.location());
assertFalse(document0.hasParent());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("br", document0.baseUri());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertEquals(0, document0.siblingIndex());

Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

Element element0 = document0.head();
assertNotNull(element0);
assertFalse(document0.updateMetaCharsetElement());
assertEquals("#document", document0.nodeName());
assertEquals(1, document0.childNodeSize());
assertEquals("br", document0.location());
assertFalse(document0.hasParent());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("br", document0.baseUri());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertEquals(0, document0.siblingIndex());
assertTrue(element0.isBlock());
assertEquals("head", element0.tagName());
assertEquals(0, element0.siblingIndex());
assertTrue(element0.hasParent());
assertEquals("head", element0.nodeName());
assertEquals(0, element0.childNodeSize());
assertEquals("br", element0.baseUri());

String string0 = document0.cssSelector();
assertNotNull(string0);
assertEquals("#root", string0);
assertFalse(document0.updateMetaCharsetElement());
assertEquals("#document", document0.nodeName());
assertEquals(1, document0.childNodeSize());
assertEquals("br", document0.location());
assertFalse(document0.hasParent());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("br", document0.baseUri());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertEquals(0, document0.siblingIndex());

Element element1 = element0.parent();
assertNotNull(element1);
assertFalse(element1.equals((Object)element0));
assertFalse(document0.updateMetaCharsetElement());
assertEquals("#document", document0.nodeName());
assertEquals(1, document0.childNodeSize());
assertEquals("br", document0.location());
assertFalse(document0.hasParent());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("br", document0.baseUri());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertEquals(0, document0.siblingIndex());
assertTrue(element0.isBlock());
assertEquals("head", element0.tagName());
assertEquals(0, element0.siblingIndex());
assertTrue(element0.hasParent());
assertEquals("head", element0.nodeName());
assertEquals(0, element0.childNodeSize());
assertEquals("br", element0.baseUri());
assertEquals(2, element1.childNodeSize());
assertEquals("html", element1.tagName());
assertTrue(element1.isBlock());
assertTrue(element1.hasParent());
assertEquals("html", element1.nodeName());
assertEquals(0, element1.siblingIndex());
assertEquals("br", element1.baseUri());
assertNotSame(element0, element1);
assertNotSame(element1, element0);

Elements elements0 = document0.getElementsByAttributeValueNot("XBc<1(S<", "XBc<1(S<");
assertNotNull(elements0);
assertFalse(document0.updateMetaCharsetElement());
assertEquals("#document", document0.nodeName());
assertEquals(1, document0.childNodeSize());
assertEquals("br", document0.location());
assertFalse(document0.hasParent());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("br", document0.baseUri());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertEquals(0, document0.siblingIndex());
assertFalse(elements0.isEmpty());
assertEquals(4, elements0.size());

Elements elements1 = element1.getElementsByAttribute("#root");
assertNotNull(elements1);
assertFalse(element0.equals((Object)element1));
assertFalse(element1.equals((Object)element0));
assertFalse(elements1.equals((Object)elements0));
assertFalse(document0.updateMetaCharsetElement());
assertEquals("#document", document0.nodeName());
assertEquals(1, document0.childNodeSize());
assertEquals("br", document0.location());
assertFalse(document0.hasParent());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("br", document0.baseUri());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertEquals(0, document0.siblingIndex());
assertTrue(element0.isBlock());
assertEquals("head", element0.tagName());
assertEquals(0, element0.siblingIndex());
assertTrue(element0.hasParent());
assertEquals("head", element0.nodeName());
assertEquals(0, element0.childNodeSize());
assertEquals("br", element0.baseUri());
assertEquals(2, element1.childNodeSize());
assertEquals("html", element1.tagName());
assertTrue(element1.isBlock());
assertTrue(element1.hasParent());
assertEquals("html", element1.nodeName());
assertEquals(0, element1.siblingIndex());
assertEquals("br", element1.baseUri());
assertTrue(elements1.isEmpty());
assertEquals(0, elements1.size());
assertNotSame(element0, element1);
assertNotSame(element1, element0);
assertNotSame(elements1, elements0);


[MASTER] 22:28:15.363 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_235_1628288895327/org/jsoup/nodes/Element_235_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_235_1628288895327/org/jsoup/nodes/Element_235_tmp__ESTest_scaffolding.java]]
[MASTER] 22:28:15.363 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Jsoup-87/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Jsoup-87/target/classes
[MASTER] 22:28:15.363 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Jsoup-87/target/classes
[MASTER] 22:28:15.363 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Integer>>: 54
[MASTER] 22:28:15.363 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_235_1628288895327/org/jsoup/nodes/Element_235_tmp__ESTest.java uses or overrides a deprecated API.: -1
[MASTER] 22:28:15.363 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:deprecation for details.: -1
[MASTER] 22:28:15.363 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_235_1628288895327/org/jsoup/nodes/Element_235_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 22:28:15.363 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 22:28:15.364 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_235_1628288895327/org/jsoup/nodes/Element_235_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 22:28:15 GMT 2021
4:  */
5: 
6: package org.jsoup.nodes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.Comparator;
12: import java.util.Map;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.ViolatedAssumptionAnswer;
16: import org.jsoup.nodes.Document;
17: import org.jsoup.nodes.Element;
18: import org.jsoup.parser.Parser;
19: import org.jsoup.select.Elements;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class Element_235_tmp__ESTest extends Element_235_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       Document document0 = Parser.parseBodyFragmentRelaxed("  m       C ", "  m       C ");
28:       assertNotNull(document0);
29:       assertEquals("  m       C ", document0.baseUri());
30:       assertFalse(document0.isBlock());
31:       assertFalse(document0.hasParent());
32:       assertFalse(document0.updateMetaCharsetElement());
33:       assertEquals("#root", document0.tagName());
34:       assertEquals(0, document0.siblingIndex());
35:       assertEquals("#document", document0.nodeName());
36:       assertEquals("  m       C ", document0.location());
37:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
38:       assertEquals(1, document0.childNodeSize());
39:       
40:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
41:       boolean boolean0 = document0.hasClass("(n");
42:       assertFalse(boolean0);
43:       assertEquals("  m       C ", document0.baseUri());
44:       assertFalse(document0.isBlock());
45:       assertFalse(document0.hasParent());
46:       assertFalse(document0.updateMetaCharsetElement());
47:       assertEquals("#root", document0.tagName());
48:       assertEquals(0, document0.siblingIndex());
49:       assertEquals("#document", document0.nodeName());
50:       assertEquals("  m       C ", document0.location());
51:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
52:       assertEquals(1, document0.childNodeSize());
53:       
54:       Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
55:       assertNotNull(comparator1);
56:       
57:       Element element0 = document0.head();
58:       assertNotNull(element0);
59:       assertEquals("  m       C ", document0.baseUri());
60:       assertFalse(document0.isBlock());
61:       assertFalse(document0.hasParent());
62:       assertFalse(document0.updateMetaCharsetElement());
63:       assertEquals("#root", document0.tagName());
64:       assertEquals(0, document0.siblingIndex());
65:       assertEquals("#document", document0.nodeName());
66:       assertEquals("  m       C ", document0.location());
67:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
68:       assertEquals(1, document0.childNodeSize());
69:       assertEquals("  m       C ", element0.baseUri());
70:       assertTrue(element0.isBlock());
71:       assertEquals(0, element0.childNodeSize());
72:       assertEquals("head", element0.tagName());
73:       assertEquals(0, element0.siblingIndex());
74:       assertTrue(element0.hasParent());
75:       assertEquals("head", element0.nodeName());
76:       
77:       Elements elements0 = document0.getElementsByAttributeValueStarting("h?ccw0+", "Yt\"hksDz/r");
78:       assertNotNull(elements0);
79:       assertEquals("  m       C ", document0.baseUri());
80:       assertFalse(document0.isBlock());
81:       assertFalse(document0.hasParent());
82:       assertFalse(document0.updateMetaCharsetElement());
83:       assertEquals("#root", document0.tagName());
84:       assertEquals(0, document0.siblingIndex());
85:       assertEquals("#document", document0.nodeName());
86:       assertEquals("  m       C ", document0.location());
87:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
88:       assertEquals(1, document0.childNodeSize());
89:       assertEquals(0, elements0.size());
90:       assertTrue(elements0.isEmpty());
91:       
92:       Elements elements1 = document0.getElementsContainingOwnText("org.jsoup.nodes.NodeUtils");
93:       assertNotNull(elements1);
94:       assertTrue(elements1.equals((Object)elements0));
95:       assertEquals("  m       C ", document0.baseUri());
96:       assertFalse(document0.isBlock());
97:       assertFalse(document0.hasParent());
98:       assertFalse(document0.updateMetaCharsetElement());
99:       assertEquals("#root", document0.tagName());
100:       assertEquals(0, document0.siblingIndex());
101:       assertEquals("#document", document0.nodeName());
102:       assertEquals("  m       C ", document0.location());
103:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
104:       assertEquals(1, document0.childNodeSize());
105:       assertTrue(elements1.isEmpty());
106:       assertEquals(0, elements1.size());
107:       assertNotSame(elements1, elements0);
108:       
109:       Element element1 = element0.before("x");
110:       assertNotNull(element1);
111:       assertEquals("  m       C ", document0.baseUri());
112:       assertFalse(document0.isBlock());
113:       assertFalse(document0.hasParent());
114:       assertFalse(document0.updateMetaCharsetElement());
115:       assertEquals("#root", document0.tagName());
116:       assertEquals(0, document0.siblingIndex());
117:       assertEquals("#document", document0.nodeName());
118:       assertEquals("  m       C ", document0.location());
119:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
120:       assertEquals(1, document0.childNodeSize());
121:       assertEquals("  m       C ", element0.baseUri());
122:       assertTrue(element0.isBlock());
123:       assertEquals(0, element0.childNodeSize());
124:       assertEquals("head", element0.tagName());
125:       assertEquals(2, element0.siblingIndex());
126:       assertTrue(element0.hasParent());
127:       assertEquals("head", element0.nodeName());
128:       assertEquals(0, element1.childNodeSize());
129:       assertEquals("  m       C ", element1.baseUri());
130:       assertTrue(element1.hasParent());
131:       assertEquals("head", element1.nodeName());
132:       assertEquals(2, element1.siblingIndex());
133:       assertTrue(element1.isBlock());
134:       assertEquals("head", element1.tagName());
135:       assertSame(element0, element1);
136:       assertSame(element1, element0);
137:       
138:       Element element2 = element0.nextElementSibling();
139:       assertNotNull(element2);
140:       assertFalse(element2.equals((Object)element1));
141:       assertFalse(element2.equals((Object)element0));
142:       assertEquals("  m       C ", document0.baseUri());
143:       assertFalse(document0.isBlock());
144:       assertFalse(document0.hasParent());
145:       assertFalse(document0.updateMetaCharsetElement());
146:       assertEquals("#root", document0.tagName());
147:       assertEquals(0, document0.siblingIndex());
148:       assertEquals("#document", document0.nodeName());
149:       assertEquals("  m       C ", document0.location());
150:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
151:       assertEquals(1, document0.childNodeSize());
152:       assertEquals("  m       C ", element0.baseUri());
153:       assertTrue(element0.isBlock());
154:       assertEquals(0, element0.childNodeSize());
155:       assertEquals("head", element0.tagName());
156:       assertEquals(2, element0.siblingIndex());
157:       assertTrue(element0.hasParent());
158:       assertEquals("head", element0.nodeName());
159:       assertEquals("body", element2.tagName());
160:       assertEquals(1, element2.childNodeSize());
161:       assertTrue(element2.isBlock());
162:       assertEquals("  m       C ", element2.baseUri());
163:       assertEquals("body", element2.nodeName());
164:       assertTrue(element2.hasParent());
165:       assertEquals(3, element2.siblingIndex());
166:       assertSame(element0, element1);
167:       assertNotSame(element0, element2);
168:       assertNotSame(element2, element1);
169:       assertNotSame(element2, element0);
170:   }
171: }
RegularFileObject[/tmp/EvoSuite_235_1628288895327/org/jsoup/nodes/Element_235_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 22:28:15 GMT 2021
5:  */
6: 
7: package org.jsoup.nodes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class Element_235_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.jsoup.nodes.Element"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Element_235_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.jsoup.nodes.Document$QuirksMode",
72:       "org.jsoup.parser.HtmlTreeBuilderState$18",
73:       "org.jsoup.select.StructuralEvaluator$ImmediateParent",
74:       "org.jsoup.parser.HtmlTreeBuilderState$19",
75:       "org.jsoup.parser.HtmlTreeBuilderState$16",
76:       "org.jsoup.helper.ChangeNotifyingArrayList",
77:       "org.jsoup.parser.HtmlTreeBuilderState$17",
78:       "org.jsoup.parser.HtmlTreeBuilderState$14",
79:       "org.jsoup.parser.HtmlTreeBuilderState$15",
80:       "org.jsoup.select.Evaluator$IndexEvaluator",
81:       "org.jsoup.select.Evaluator$IsOnlyOfType",
82:       "org.jsoup.nodes.Entities$CoreCharset",
83:       "org.jsoup.nodes.Element",
84:       "org.jsoup.parser.HtmlTreeBuilderState$12",
85:       "org.jsoup.parser.HtmlTreeBuilderState$13",
86:       "org.jsoup.parser.HtmlTreeBuilderState$10",
87:       "org.jsoup.parser.HtmlTreeBuilderState$11",
88:       "org.jsoup.select.NodeTraversor",
89:       "org.jsoup.select.Evaluator$MatchesOwn",
90:       "org.jsoup.select.CombiningEvaluator$And",
91:       "org.jsoup.parser.Token$EndTag",
92:       "org.jsoup.nodes.Document",
93:       "org.jsoup.Jsoup",
94:       "org.jsoup.parser.HtmlTreeBuilder",
95:       "org.jsoup.nodes.FormElement",
96:       "org.jsoup.select.StructuralEvaluator",
97:       "org.jsoup.select.Evaluator$IndexEquals",
98:       "org.jsoup.select.Selector$SelectorParseException",
99:       "org.jsoup.parser.Token$Tag",
100:       "org.jsoup.nodes.XmlDeclaration",
101:       "org.jsoup.parser.Token$Doctype",
102:       "org.jsoup.select.Evaluator$TagEndsWith",
103:       "org.jsoup.parser.HtmlTreeBuilderState$23",
104:       "org.jsoup.parser.HtmlTreeBuilderState$24",
105:       "org.jsoup.select.Evaluator$Tag",
106:       "org.jsoup.parser.HtmlTreeBuilderState$21",
107:       "org.jsoup.nodes.Document$OutputSettings$Syntax",
108:       "org.jsoup.parser.HtmlTreeBuilderState$22",
109:       "org.jsoup.parser.HtmlTreeBuilderState$20",
110:       "org.jsoup.parser.Token$1",
111:       "org.jsoup.internal.StringUtil",
112:       "org.jsoup.parser.Tokeniser",
113:       "org.jsoup.nodes.Comment",
114:       "org.jsoup.select.Evaluator$IndexGreaterThan",
115:       "org.jsoup.nodes.LeafNode",
116:       "org.jsoup.select.Selector",
117:       "org.jsoup.select.Evaluator$AttributeWithValueEnding",
118:       "org.jsoup.select.Collector$FirstFinder",
119:       "org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling",
120:       "org.jsoup.nodes.Node",
121:       "org.jsoup.parser.HtmlTreeBuilderState",
122:       "org.jsoup.select.Evaluator$AttributeStarting",
123:       "org.jsoup.nodes.DataNode",
124:       "org.jsoup.nodes.Attributes",
125:       "org.jsoup.parser.XmlTreeBuilder",
126:       "org.jsoup.nodes.Document$OutputSettings",
127:       "org.jsoup.select.CombiningEvaluator",
128:       "org.jsoup.select.Evaluator$ContainsData",
129:       "org.jsoup.internal.Normalizer",
130:       "org.jsoup.nodes.Attributes$Dataset$EntrySet",
131:       "org.jsoup.nodes.Attributes$Dataset",
132:       "org.jsoup.helper.Validate",
133:       "org.jsoup.select.Evaluator$CssNthEvaluator",
134:       "org.jsoup.parser.Token$Comment",
135:       "org.jsoup.select.Evaluator$IsFirstOfType",
136:       "org.jsoup.nodes.Element$NodeList",
137:       "org.jsoup.parser.TokeniserState$56",
138:       "org.jsoup.parser.TokeniserState$57",
139:       "org.jsoup.parser.TokeniserState$58",
140:       "org.jsoup.parser.TokeniserState$59",
141:       "org.jsoup.parser.TokeniserState$52",
142:       "org.jsoup.parser.TokeniserState$53",
143:       "org.jsoup.parser.TreeBuilder",
144:       "org.jsoup.parser.TokeniserState$54",
145:       "org.jsoup.parser.TokeniserState$55",
146:       "org.jsoup.nodes.PseudoTextElement",
147:       "org.jsoup.parser.TokeniserState$50",
148:       "org.jsoup.parser.TokeniserState$51",
149:       "org.jsoup.parser.Parser",
150:       "org.jsoup.select.Evaluator$IsEmpty",
151:       "org.jsoup.select.Evaluator$AttributeWithValueMatching",
152:       "org.jsoup.select.Evaluator$IsNthChild",
153:       "org.jsoup.parser.HtmlTreeBuilderState$Constants",
154:       "org.jsoup.select.Evaluator$Class",
155:       "org.jsoup.parser.TokeniserState$67",
156:       "org.jsoup.parser.TokeniserState$63",
157:       "org.jsoup.nodes.Node$OuterHtmlVisitor",
158:       "org.jsoup.parser.TokeniserState$64",
159:       "org.jsoup.parser.TokeniserState$65",
160:       "org.jsoup.parser.Token",
161:       "org.jsoup.parser.TokeniserState$66",
162:       "org.jsoup.parser.TokeniserState$60",
163:       "org.jsoup.select.Evaluator$AttributeKeyPair",
164:       "org.jsoup.parser.TokeniserState$61",
165:       "org.jsoup.parser.TokeniserState$62",
166:       "org.jsoup.select.Evaluator$IsNthLastOfType",
167:       "org.jsoup.parser.Tag",
168:       "org.jsoup.parser.Token$Character",
169:       "org.jsoup.select.Evaluator$IsLastOfType",
170:       "org.jsoup.select.Evaluator$Attribute",
171:       "org.jsoup.select.NodeFilter$FilterResult",
172:       "org.jsoup.nodes.Entities",
173:       "org.jsoup.select.Evaluator$AttributeWithValueContaining",
174:       "org.jsoup.select.Elements",
175:       "org.jsoup.parser.Token$CData",
176:       "org.jsoup.nodes.Element$2",
177:       "org.jsoup.select.Evaluator$AllElements",
178:       "org.jsoup.nodes.Element$1",
179:       "org.jsoup.nodes.TextNode",
180:       "org.jsoup.select.Evaluator$AttributeWithValue",
181:       "org.jsoup.select.Evaluator$AttributeWithValueNot",
182:       "org.jsoup.parser.ParseErrorList",
183:       "org.jsoup.nodes.BooleanAttribute",
184:       "org.jsoup.SerializationException",
185:       "org.jsoup.select.CombiningEvaluator$Or",
186:       "org.jsoup.select.Evaluator$ContainsText",
187:       "org.jsoup.select.Evaluator$Id",
188:       "org.jsoup.select.Evaluator$IsNthOfType",
189:       "org.jsoup.select.Collector",
190:       "org.jsoup.select.Collector$Accumulator",
191:       "org.jsoup.nodes.Attributes$Dataset$DatasetIterator",
192:       "org.jsoup.parser.XmlTreeBuilder$1",
193:       "org.jsoup.parser.CharacterReader",
194:       "org.jsoup.select.Evaluator$IsFirstChild",
195:       "org.jsoup.select.StructuralEvaluator$Root",
196:       "org.jsoup.nodes.Node$1",
197:       "org.jsoup.select.NodeVisitor",
198:       "org.jsoup.parser.TokeniserState$2",
199:       "org.jsoup.parser.TokeniserState$12",
200:       "org.jsoup.parser.TokeniserState$1",
201:       "org.jsoup.parser.TokeniserState$13",
202:       "org.jsoup.nodes.Attributes$1",
203:       "org.jsoup.parser.TokeniserState$14",
204:       "org.jsoup.parser.TokeniserState$15",
205:       "org.jsoup.select.Evaluator$AttributeWithValueStarting",
206:       "org.jsoup.parser.Token$StartTag",
207:       "org.jsoup.parser.Token$EOF",
208:       "org.jsoup.parser.TokeniserState$10",
209:       "org.jsoup.parser.TokeniserState$11",
210:       "org.jsoup.nodes.DocumentType",
211:       "org.jsoup.parser.TokeniserState$9",
212:       "org.jsoup.parser.TokeniserState$8",
213:       "org.jsoup.parser.TokeniserState$7",
214:       "org.jsoup.parser.TokeniserState$6",
215:       "org.jsoup.parser.TokeniserState$5",
216:       "org.jsoup.parser.TokeniserState$4",
217:       "org.jsoup.select.QueryParser",
218:       "org.jsoup.parser.TokeniserState$3",
219:       "org.jsoup.nodes.NodeUtils",
220:       "org.jsoup.select.Evaluator$Matches",
221:       "org.jsoup.select.Evaluator$IsOnlyChild",
222:       "org.jsoup.parser.TokeniserState$16",
223:       "org.jsoup.parser.TokeniserState$17",
224:       "org.jsoup.parser.TokeniserState$18",
225:       "org.jsoup.nodes.Entities$1",
226:       "org.jsoup.parser.TokeniserState$19",
227:       "org.jsoup.parser.TokeniserState$23",
228:       "org.jsoup.UncheckedIOException",
229:       "org.jsoup.parser.TokeniserState$24",
230:       "org.jsoup.parser.TokeniserState$25",
231:       "org.jsoup.parser.TokeniserState$26",
232:       "org.jsoup.parser.TokeniserState$20",
233:       "org.jsoup.parser.TokeniserState$21",
234:       "org.jsoup.parser.TokeniserState$22",
235:       "org.jsoup.parser.TokenQueue",
236:       "org.jsoup.parser.ParseSettings",
237:       "org.jsoup.select.NodeFilter",
238:       "org.jsoup.select.Evaluator$ContainsOwnText",
239:       "org.jsoup.parser.TokeniserState$27",
240:       "org.jsoup.parser.TokeniserState",
241:       "org.jsoup.parser.TokeniserState$28",
242:       "org.jsoup.parser.TokeniserState$29",
243:       "org.jsoup.parser.TokeniserState$34",
244:       "org.jsoup.select.Evaluator$IndexLessThan",
245:       "org.jsoup.parser.TokeniserState$35",
246:       "org.jsoup.parser.TokeniserState$36",
247:       "org.jsoup.parser.TokeniserState$37",
248:       "org.jsoup.parser.TokeniserState$30",
249:       "org.jsoup.parser.TokeniserState$31",
250:       "org.jsoup.parser.TokeniserState$32",
251:       "org.jsoup.parser.TokeniserState$33",
252:       "org.jsoup.nodes.Entities$EscapeMode",
253:       "org.jsoup.select.Evaluator$MatchText",
254:       "org.jsoup.select.Evaluator",
255:       "org.jsoup.Connection",
256:       "org.jsoup.select.Evaluator$IsRoot",
257:       "org.jsoup.parser.TokeniserState$38",
258:       "org.jsoup.parser.TokeniserState$39",
259:       "org.jsoup.nodes.CDataNode",
260:       "org.jsoup.parser.TokeniserState$45",
261:       "org.jsoup.parser.TokeniserState$46",
262:       "org.jsoup.parser.TokeniserState$47",
263:       "org.jsoup.select.StructuralEvaluator$Parent",
264:       "org.jsoup.parser.TokeniserState$48",
265:       "org.jsoup.select.Evaluator$IsLastChild",
266:       "org.jsoup.parser.TokeniserState$41",
267:       "org.jsoup.select.Evaluator$IsNthLastChild",
268:       "org.jsoup.parser.TokeniserState$42",
269:       "org.jsoup.parser.TokeniserState$43",
270:       "org.jsoup.parser.TokeniserState$44",
271:       "org.jsoup.parser.TokeniserState$40",
272:       "org.jsoup.parser.Token$TokenType",
273:       "org.jsoup.parser.HtmlTreeBuilderState$2",
274:       "org.jsoup.parser.HtmlTreeBuilderState$1",
275:       "org.jsoup.parser.HtmlTreeBuilderState$4",
276:       "org.jsoup.nodes.Attribute",
277:       "org.jsoup.parser.HtmlTreeBuilderState$3",
278:       "org.jsoup.parser.HtmlTreeBuilderState$9",
279:       "org.jsoup.parser.TokeniserState$49",
280:       "org.jsoup.parser.HtmlTreeBuilderState$6",
281:       "org.jsoup.parser.HtmlTreeBuilderState$5",
282:       "org.jsoup.parser.HtmlTreeBuilderState$8",
283:       "org.jsoup.parser.HtmlTreeBuilderState$7"
284:     );
285:   } 
286:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
287:     mock(Class.forName("java.util.Comparator", false, Element_235_tmp__ESTest_scaffolding.class.getClassLoader()));
288:   }
289: 
290:   private static void resetClasses() {
291:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Element_235_tmp__ESTest_scaffolding.class.getClassLoader()); 
292: 
293:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
294:       "org.jsoup.nodes.Node",
295:       "org.jsoup.nodes.Element",
296:       "org.jsoup.helper.ChangeNotifyingArrayList",
297:       "org.jsoup.nodes.Element$NodeList",
298:       "org.jsoup.nodes.Element$1",
299:       "org.jsoup.nodes.Element$2",
300:       "org.jsoup.helper.Validate",
301:       "org.jsoup.parser.Tag",
302:       "org.jsoup.parser.ParseSettings",
303:       "org.jsoup.select.NodeFilter$FilterResult",
304:       "org.jsoup.internal.StringUtil",
305:       "org.jsoup.nodes.Document$OutputSettings$Syntax",
306:       "org.jsoup.parser.Parser",
307:       "org.jsoup.parser.TreeBuilder",
308:       "org.jsoup.parser.HtmlTreeBuilder",
309:       "org.jsoup.parser.Token",
310:       "org.jsoup.parser.Token$Tag",
311:       "org.jsoup.parser.Token$StartTag",
312:       "org.jsoup.nodes.Attributes",
313:       "org.jsoup.parser.Token$TokenType",
314:       "org.jsoup.parser.Token$EndTag",
315:       "org.jsoup.parser.ParseErrorList",
316:       "org.jsoup.nodes.Document",
317:       "org.jsoup.internal.Normalizer",
318:       "org.jsoup.parser.Tokeniser",
319:       "org.jsoup.parser.TokeniserState",
320:       "org.jsoup.parser.Token$Character",
321:       "org.jsoup.parser.Token$Doctype",
322:       "org.jsoup.parser.Token$Comment",
323:       "org.jsoup.parser.HtmlTreeBuilderState",
324:       "org.jsoup.parser.Token$EOF",
325:       "org.jsoup.nodes.Node$OuterHtmlVisitor",
326:       "org.jsoup.nodes.NodeUtils",
327:       "org.jsoup.nodes.Entities$CoreCharset",
328:       "org.jsoup.select.NodeTraversor",
329:       "org.jsoup.parser.HtmlTreeBuilderState$24",
330:       "org.jsoup.select.Evaluator",
331:       "org.jsoup.select.Evaluator$AttributeKeyPair",
332:       "org.jsoup.select.Evaluator$AttributeWithValue",
333:       "org.jsoup.nodes.LeafNode",
334:       "org.jsoup.nodes.TextNode",
335:       "org.jsoup.nodes.Entities$1",
336:       "org.jsoup.select.Evaluator$Tag",
337:       "org.jsoup.select.Collector",
338:       "org.jsoup.select.Elements",
339:       "org.jsoup.select.Collector$Accumulator",
340:       "org.jsoup.select.Evaluator$AttributeWithValueMatching",
341:       "org.jsoup.nodes.Attributes$Dataset",
342:       "org.jsoup.nodes.Attribute",
343:       "org.jsoup.select.Evaluator$AttributeWithValueContaining",
344:       "org.jsoup.select.Evaluator$MatchesOwn",
345:       "org.jsoup.parser.XmlTreeBuilder",
346:       "org.jsoup.parser.XmlTreeBuilder$1",
347:       "org.jsoup.select.Evaluator$AttributeWithValueNot",
348:       "org.jsoup.nodes.Attributes$Dataset$EntrySet",
349:       "org.jsoup.nodes.Attributes$Dataset$DatasetIterator",
350:       "org.jsoup.nodes.Attributes$1",
351:       "org.jsoup.select.Selector",
352:       "org.jsoup.select.QueryParser",
353:       "org.jsoup.parser.TokenQueue",
354:       "org.jsoup.select.Evaluator$Class",
355:       "org.jsoup.select.Selector$SelectorParseException",
356:       "org.jsoup.nodes.FormElement",
357:       "org.jsoup.select.Evaluator$Matches",
358:       "org.jsoup.select.Evaluator$IndexEvaluator",
359:       "org.jsoup.select.Evaluator$IndexEquals",
360:       "org.jsoup.select.Evaluator$AllElements",
361:       "org.jsoup.select.Evaluator$IsOnlyChild",
362:       "org.jsoup.select.StructuralEvaluator$Root",
363:       "org.jsoup.select.Evaluator$IndexLessThan",
364:       "org.jsoup.select.Evaluator$ContainsText",
365:       "org.jsoup.select.Evaluator$AttributeStarting",
366:       "org.jsoup.nodes.Comment",
367:       "org.jsoup.select.Evaluator$IsOnlyOfType",
368:       "org.jsoup.select.Evaluator$IndexGreaterThan",
369:       "org.jsoup.nodes.CDataNode",
370:       "org.jsoup.select.Collector$FirstFinder",
371:       "org.jsoup.select.Evaluator$Id",
372:       "org.jsoup.nodes.Node$1",
373:       "org.jsoup.select.Evaluator$ContainsOwnText",
374:       "org.jsoup.nodes.DocumentType",
375:       "org.jsoup.parser.HtmlTreeBuilderState$Constants",
376:       "org.jsoup.nodes.PseudoTextElement",
377:       "org.jsoup.Connection$Method",
378:       "org.jsoup.Jsoup",
379:       "org.jsoup.helper.HttpConnection",
380:       "org.jsoup.helper.HttpConnection$Base",
381:       "org.jsoup.helper.HttpConnection$Request",
382:       "org.jsoup.helper.HttpConnection$Response",
383:       "org.jsoup.select.Evaluator$AttributeWithValueStarting",
384:       "org.jsoup.select.CombiningEvaluator",
385:       "org.jsoup.select.CombiningEvaluator$And",
386:       "org.jsoup.select.StructuralEvaluator",
387:       "org.jsoup.select.StructuralEvaluator$ImmediateParent",
388:       "org.jsoup.select.StructuralEvaluator$Parent",
389:       "org.jsoup.nodes.XmlDeclaration",
390:       "org.jsoup.select.Evaluator$IsRoot",
391:       "org.jsoup.nodes.DataNode",
392:       "org.jsoup.select.Evaluator$Attribute",
393:       "org.jsoup.select.Evaluator$AttributeWithValueEnding",
394:       "org.jsoup.select.Evaluator$IsFirstChild",
395:       "org.jsoup.select.Evaluator$CssNthEvaluator",
396:       "org.jsoup.select.Evaluator$IsNthLastOfType",
397:       "org.jsoup.select.Evaluator$IsLastOfType",
398:       "org.jsoup.select.StructuralEvaluator$PreviousSibling",
399:       "org.jsoup.select.CombiningEvaluator$Or",
400:       "org.jsoup.nodes.BooleanAttribute",
401:       "org.jsoup.SerializationException",
402:       "org.jsoup.select.Evaluator$TagEndsWith",
403:       "org.jsoup.select.Evaluator$IsNthChild",
404:       "org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling",
405:       "org.jsoup.select.Evaluator$IsLastChild",
406:       "org.jsoup.select.Evaluator$ContainsData",
407:       "org.jsoup.parser.ParseError",
408:       "org.jsoup.select.Evaluator$IsNthLastChild",
409:       "org.jsoup.select.Evaluator$MatchText",
410:       "org.jsoup.select.Evaluator$IsNthOfType",
411:       "org.jsoup.select.Evaluator$IsFirstOfType"
412:     );
413:   }
414: }

[MASTER] 22:28:15.365 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Document document0 = Parser.parseBodyFragmentRelaxed("  m       C ", "  m       C ");
assertNotNull(document0);
assertEquals("  m       C ", document0.baseUri());
assertFalse(document0.isBlock());
assertFalse(document0.hasParent());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("#root", document0.tagName());
assertEquals(0, document0.siblingIndex());
assertEquals("#document", document0.nodeName());
assertEquals("  m       C ", document0.location());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals(1, document0.childNodeSize());

Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
boolean boolean0 = document0.hasClass("(n");
assertFalse(boolean0);
assertEquals("  m       C ", document0.baseUri());
assertFalse(document0.isBlock());
assertFalse(document0.hasParent());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("#root", document0.tagName());
assertEquals(0, document0.siblingIndex());
assertEquals("#document", document0.nodeName());
assertEquals("  m       C ", document0.location());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals(1, document0.childNodeSize());

Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

Element element0 = document0.head();
assertNotNull(element0);
assertEquals("  m       C ", document0.baseUri());
assertFalse(document0.isBlock());
assertFalse(document0.hasParent());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("#root", document0.tagName());
assertEquals(0, document0.siblingIndex());
assertEquals("#document", document0.nodeName());
assertEquals("  m       C ", document0.location());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals(1, document0.childNodeSize());
assertEquals("  m       C ", element0.baseUri());
assertTrue(element0.isBlock());
assertEquals(0, element0.childNodeSize());
assertEquals("head", element0.tagName());
assertEquals(0, element0.siblingIndex());
assertTrue(element0.hasParent());
assertEquals("head", element0.nodeName());

Elements elements0 = document0.getElementsByAttributeValueStarting("h?ccw0+", "Yt\"hksDz/r");
assertNotNull(elements0);
assertEquals("  m       C ", document0.baseUri());
assertFalse(document0.isBlock());
assertFalse(document0.hasParent());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("#root", document0.tagName());
assertEquals(0, document0.siblingIndex());
assertEquals("#document", document0.nodeName());
assertEquals("  m       C ", document0.location());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals(1, document0.childNodeSize());
assertEquals(0, elements0.size());
assertTrue(elements0.isEmpty());

Elements elements1 = document0.getElementsContainingOwnText("org.jsoup.nodes.NodeUtils");
assertNotNull(elements1);
assertTrue(elements1.equals((Object)elements0));
assertEquals("  m       C ", document0.baseUri());
assertFalse(document0.isBlock());
assertFalse(document0.hasParent());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("#root", document0.tagName());
assertEquals(0, document0.siblingIndex());
assertEquals("#document", document0.nodeName());
assertEquals("  m       C ", document0.location());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals(1, document0.childNodeSize());
assertTrue(elements1.isEmpty());
assertEquals(0, elements1.size());
assertNotSame(elements1, elements0);

Element element1 = element0.before("x");
assertNotNull(element1);
assertEquals("  m       C ", document0.baseUri());
assertFalse(document0.isBlock());
assertFalse(document0.hasParent());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("#root", document0.tagName());
assertEquals(0, document0.siblingIndex());
assertEquals("#document", document0.nodeName());
assertEquals("  m       C ", document0.location());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals(1, document0.childNodeSize());
assertEquals("  m       C ", element0.baseUri());
assertTrue(element0.isBlock());
assertEquals(0, element0.childNodeSize());
assertEquals("head", element0.tagName());
assertEquals(2, element0.siblingIndex());
assertTrue(element0.hasParent());
assertEquals("head", element0.nodeName());
assertEquals(0, element1.childNodeSize());
assertEquals("  m       C ", element1.baseUri());
assertTrue(element1.hasParent());
assertEquals("head", element1.nodeName());
assertEquals(2, element1.siblingIndex());
assertTrue(element1.isBlock());
assertEquals("head", element1.tagName());
assertSame(element0, element1);
assertSame(element1, element0);

Element element2 = element0.nextElementSibling();
assertNotNull(element2);
assertFalse(element2.equals((Object)element1));
assertFalse(element2.equals((Object)element0));
assertEquals("  m       C ", document0.baseUri());
assertFalse(document0.isBlock());
assertFalse(document0.hasParent());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("#root", document0.tagName());
assertEquals(0, document0.siblingIndex());
assertEquals("#document", document0.nodeName());
assertEquals("  m       C ", document0.location());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals(1, document0.childNodeSize());
assertEquals("  m       C ", element0.baseUri());
assertTrue(element0.isBlock());
assertEquals(0, element0.childNodeSize());
assertEquals("head", element0.tagName());
assertEquals(2, element0.siblingIndex());
assertTrue(element0.hasParent());
assertEquals("head", element0.nodeName());
assertEquals("body", element2.tagName());
assertEquals(1, element2.childNodeSize());
assertTrue(element2.isBlock());
assertEquals("  m       C ", element2.baseUri());
assertEquals("body", element2.nodeName());
assertTrue(element2.hasParent());
assertEquals(3, element2.siblingIndex());
assertSame(element0, element1);
assertNotSame(element0, element2);
assertNotSame(element2, element1);
assertNotSame(element2, element0);


[MASTER] 22:28:15.455 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_238_1628288895423/org/jsoup/nodes/Element_238_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_238_1628288895423/org/jsoup/nodes/Element_238_tmp__ESTest_scaffolding.java]]
[MASTER] 22:28:15.455 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Jsoup-87/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Jsoup-87/target/classes
[MASTER] 22:28:15.455 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Jsoup-87/target/classes
[MASTER] 22:28:15.455 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Integer>>: 98
[MASTER] 22:28:15.456 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_238_1628288895423/org/jsoup/nodes/Element_238_tmp__ESTest.java uses or overrides a deprecated API.: -1
[MASTER] 22:28:15.456 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:deprecation for details.: -1
[MASTER] 22:28:15.456 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_238_1628288895423/org/jsoup/nodes/Element_238_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 22:28:15.456 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 22:28:15.456 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_238_1628288895423/org/jsoup/nodes/Element_238_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 22:28:15 GMT 2021
4:  */
5: 
6: package org.jsoup.nodes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.evosuite.runtime.ViolatedAssumptionAnswer;
17: import org.jsoup.nodes.Document;
18: import org.jsoup.nodes.Element;
19: import org.jsoup.nodes.Node;
20: import org.jsoup.parser.Parser;
21: import org.jsoup.select.Evaluator;
22: import org.jsoup.select.NodeVisitor;
23: import org.junit.runner.RunWith;
24: 
25: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
26: public class Element_238_tmp__ESTest extends Element_238_tmp__ESTest_scaffolding {
27: 
28:   @Test(timeout = 4000)
29:   public void test0()  throws Throwable  {
30:       Document document0 = Parser.parseBodyFragmentRelaxed("FD", "FD");
31:       assertNotNull(document0);
32:       assertEquals("FD", document0.location());
33:       assertEquals("FD", document0.baseUri());
34:       assertFalse(document0.hasParent());
35:       assertFalse(document0.updateMetaCharsetElement());
36:       assertEquals(1, document0.childNodeSize());
37:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
38:       assertFalse(document0.isBlock());
39:       assertEquals("#document", document0.nodeName());
40:       assertEquals(0, document0.siblingIndex());
41:       assertEquals("#root", document0.tagName());
42:       
43:       Element element0 = document0.prependElement("FD");
44:       assertNotNull(element0);
45:       assertEquals("FD", document0.location());
46:       assertEquals("FD", document0.baseUri());
47:       assertFalse(document0.hasParent());
48:       assertFalse(document0.updateMetaCharsetElement());
49:       assertEquals(2, document0.childNodeSize());
50:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
51:       assertFalse(document0.isBlock());
52:       assertEquals("#document", document0.nodeName());
53:       assertEquals(0, document0.siblingIndex());
54:       assertEquals("#root", document0.tagName());
55:       assertEquals("fd", element0.nodeName());
56:       assertTrue(element0.hasParent());
57:       assertEquals(0, element0.siblingIndex());
58:       assertEquals("fd", element0.tagName());
59:       assertFalse(element0.isBlock());
60:       assertEquals(0, element0.childNodeSize());
61:       assertEquals("FD", element0.baseUri());
62:       
63:       Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
64:       assertNotNull(evaluator_IsOnlyChild0);
65:       assertEquals(":only-child", evaluator_IsOnlyChild0.toString());
66:       
67:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
68:       NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
69:       Element element1 = (Element)element0.traverse(nodeVisitor0);
70:       assertNotNull(element1);
71:       assertEquals("FD", document0.location());
72:       assertEquals("FD", document0.baseUri());
73:       assertFalse(document0.hasParent());
74:       assertFalse(document0.updateMetaCharsetElement());
75:       assertEquals(2, document0.childNodeSize());
76:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
77:       assertFalse(document0.isBlock());
78:       assertEquals("#document", document0.nodeName());
79:       assertEquals(0, document0.siblingIndex());
80:       assertEquals("#root", document0.tagName());
81:       assertEquals("fd", element0.nodeName());
82:       assertTrue(element0.hasParent());
83:       assertEquals(0, element0.siblingIndex());
84:       assertEquals("fd", element0.tagName());
85:       assertFalse(element0.isBlock());
86:       assertEquals(0, element0.childNodeSize());
87:       assertEquals("FD", element0.baseUri());
88:       assertEquals(0, element1.childNodeSize());
89:       assertTrue(element1.hasParent());
90:       assertFalse(element1.isBlock());
91:       assertEquals("fd", element1.nodeName());
92:       assertEquals(0, element1.siblingIndex());
93:       assertEquals("FD", element1.baseUri());
94:       assertEquals("fd", element1.tagName());
95:       assertSame(element0, element1);
96:       assertSame(element1, element0);
97:       
98:       Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
99:       assertNotNull(comparator1);
100:       
101:       Element element2 = document0.head();
102:       assertNotNull(element2);
103:       assertFalse(element2.equals((Object)element1));
104:       assertFalse(element2.equals((Object)element0));
105:       assertEquals("FD", document0.location());
106:       assertEquals("FD", document0.baseUri());
107:       assertFalse(document0.hasParent());
108:       assertFalse(document0.updateMetaCharsetElement());
109:       assertEquals(2, document0.childNodeSize());
110:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
111:       assertFalse(document0.isBlock());
112:       assertEquals("#document", document0.nodeName());
113:       assertEquals(0, document0.siblingIndex());
114:       assertEquals("#root", document0.tagName());
115:       assertEquals("head", element2.nodeName());
116:       assertEquals("head", element2.tagName());
117:       assertEquals("FD", element2.baseUri());
118:       assertTrue(element2.isBlock());
119:       assertTrue(element2.hasParent());
120:       assertEquals(0, element2.siblingIndex());
121:       assertEquals(0, element2.childNodeSize());
122:       assertNotSame(element2, element1);
123:       assertNotSame(element2, element0);
124:       
125:       String string0 = element0.cssSelector();
126:       assertNotNull(string0);
127:       assertEquals("fd", string0);
128:       assertFalse(element0.equals((Object)element2));
129:       assertEquals("FD", document0.location());
130:       assertEquals("FD", document0.baseUri());
131:       assertFalse(document0.hasParent());
132:       assertFalse(document0.updateMetaCharsetElement());
133:       assertEquals(2, document0.childNodeSize());
134:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
135:       assertFalse(document0.isBlock());
136:       assertEquals("#document", document0.nodeName());
137:       assertEquals(0, document0.siblingIndex());
138:       assertEquals("#root", document0.tagName());
139:       assertEquals("fd", element0.nodeName());
140:       assertTrue(element0.hasParent());
141:       assertEquals(0, element0.siblingIndex());
142:       assertEquals("fd", element0.tagName());
143:       assertFalse(element0.isBlock());
144:       assertEquals(0, element0.childNodeSize());
145:       assertEquals("FD", element0.baseUri());
146:       assertNotSame(element0, element2);
147:       assertSame(element0, element1);
148:       
149:       Element element3 = element2.tagName("FD");
150:       assertNotNull(element3);
151:       assertFalse(element2.equals((Object)element1));
152:       assertFalse(element2.equals((Object)element0));
153:       assertFalse(element3.equals((Object)element1));
154:       assertFalse(element3.equals((Object)element0));
155:       assertEquals("FD", document0.location());
156:       assertEquals("FD", document0.baseUri());
157:       assertFalse(document0.hasParent());
158:       assertFalse(document0.updateMetaCharsetElement());
159:       assertEquals(2, document0.childNodeSize());
160:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
161:       assertFalse(document0.isBlock());
162:       assertEquals("#document", document0.nodeName());
163:       assertEquals(0, document0.siblingIndex());
164:       assertEquals("#root", document0.tagName());
165:       assertEquals("fd", element2.tagName());
166:       assertEquals("FD", element2.baseUri());
167:       assertEquals("fd", element2.nodeName());
168:       assertFalse(element2.isBlock());
169:       assertTrue(element2.hasParent());
170:       assertEquals(0, element2.siblingIndex());
171:       assertEquals(0, element2.childNodeSize());
172:       assertEquals("FD", element3.baseUri());
173:       assertEquals(0, element3.childNodeSize());
174:       assertEquals("fd", element3.nodeName());
175:       assertEquals("fd", element3.tagName());
176:       assertFalse(element3.isBlock());
177:       assertTrue(element3.hasParent());
178:       assertEquals(0, element3.siblingIndex());
179:       assertSame(element2, element3);
180:       assertNotSame(element2, element1);
181:       assertNotSame(element2, element0);
182:       assertNotSame(element3, element1);
183:       assertSame(element3, element2);
184:       assertNotSame(element3, element0);
185:       
186:       Document document1 = Parser.parse("xE|rN%g{JZF", "bivrpx\";\u0005jh");
187:       assertNotNull(document1);
188:       assertFalse(document1.equals((Object)document0));
189:       assertFalse(document1.hasParent());
190:       assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
191:       assertEquals(1, document1.childNodeSize());
192:       assertFalse(document1.updateMetaCharsetElement());
193:       assertEquals("bivrpx\";\u0005jh", document1.location());
194:       assertEquals(0, document1.siblingIndex());
195:       assertEquals("#document", document1.nodeName());
196:       assertEquals("bivrpx\";\u0005jh", document1.baseUri());
197:       assertEquals("#root", document1.tagName());
198:       assertFalse(document1.isBlock());
199:       assertNotSame(document1, document0);
200:       
201:       // Undeclared exception!
202:       try { 
203:         document0.after((Node) document1);
204:         fail("Expecting exception: IllegalArgumentException");
205:       
206:       } catch(IllegalArgumentException e) {
207:          //
208:          // Object must not be null
209:          //
210:          verifyException("org.jsoup.helper.Validate", e);
211:       }
212:   }
213: }
RegularFileObject[/tmp/EvoSuite_238_1628288895423/org/jsoup/nodes/Element_238_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 22:28:15 GMT 2021
5:  */
6: 
7: package org.jsoup.nodes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class Element_238_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.jsoup.nodes.Element"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Element_238_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.jsoup.nodes.Document$QuirksMode",
72:       "org.jsoup.parser.HtmlTreeBuilderState$18",
73:       "org.jsoup.select.StructuralEvaluator$ImmediateParent",
74:       "org.jsoup.parser.HtmlTreeBuilderState$19",
75:       "org.jsoup.parser.HtmlTreeBuilderState$16",
76:       "org.jsoup.helper.ChangeNotifyingArrayList",
77:       "org.jsoup.parser.HtmlTreeBuilderState$17",
78:       "org.jsoup.parser.HtmlTreeBuilderState$14",
79:       "org.jsoup.parser.HtmlTreeBuilderState$15",
80:       "org.jsoup.select.Evaluator$IndexEvaluator",
81:       "org.jsoup.select.Evaluator$IsOnlyOfType",
82:       "org.jsoup.nodes.Entities$CoreCharset",
83:       "org.jsoup.nodes.Element",
84:       "org.jsoup.parser.HtmlTreeBuilderState$12",
85:       "org.jsoup.parser.HtmlTreeBuilderState$13",
86:       "org.jsoup.parser.HtmlTreeBuilderState$10",
87:       "org.jsoup.parser.HtmlTreeBuilderState$11",
88:       "org.jsoup.select.NodeTraversor",
89:       "org.jsoup.select.Evaluator$MatchesOwn",
90:       "org.jsoup.select.CombiningEvaluator$And",
91:       "org.jsoup.parser.Token$EndTag",
92:       "org.jsoup.nodes.Document",
93:       "org.jsoup.Jsoup",
94:       "org.jsoup.parser.HtmlTreeBuilder",
95:       "org.jsoup.nodes.FormElement",
96:       "org.jsoup.select.StructuralEvaluator",
97:       "org.jsoup.select.Evaluator$IndexEquals",
98:       "org.jsoup.select.Selector$SelectorParseException",
99:       "org.jsoup.parser.Token$Tag",
100:       "org.jsoup.nodes.XmlDeclaration",
101:       "org.jsoup.parser.Token$Doctype",
102:       "org.jsoup.select.Evaluator$TagEndsWith",
103:       "org.jsoup.parser.HtmlTreeBuilderState$23",
104:       "org.jsoup.parser.HtmlTreeBuilderState$24",
105:       "org.jsoup.select.Evaluator$Tag",
106:       "org.jsoup.parser.HtmlTreeBuilderState$21",
107:       "org.jsoup.nodes.Document$OutputSettings$Syntax",
108:       "org.jsoup.parser.HtmlTreeBuilderState$22",
109:       "org.jsoup.parser.HtmlTreeBuilderState$20",
110:       "org.jsoup.parser.Token$1",
111:       "org.jsoup.internal.StringUtil",
112:       "org.jsoup.parser.Tokeniser",
113:       "org.jsoup.nodes.Comment",
114:       "org.jsoup.select.Evaluator$IndexGreaterThan",
115:       "org.jsoup.nodes.LeafNode",
116:       "org.jsoup.select.Selector",
117:       "org.jsoup.select.Evaluator$AttributeWithValueEnding",
118:       "org.jsoup.select.Collector$FirstFinder",
119:       "org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling",
120:       "org.jsoup.nodes.Node",
121:       "org.jsoup.parser.HtmlTreeBuilderState",
122:       "org.jsoup.select.Evaluator$AttributeStarting",
123:       "org.jsoup.nodes.DataNode",
124:       "org.jsoup.nodes.Attributes",
125:       "org.jsoup.parser.XmlTreeBuilder",
126:       "org.jsoup.nodes.Document$OutputSettings",
127:       "org.jsoup.select.CombiningEvaluator",
128:       "org.jsoup.select.Evaluator$ContainsData",
129:       "org.jsoup.internal.Normalizer",
130:       "org.jsoup.nodes.Attributes$Dataset$EntrySet",
131:       "org.jsoup.nodes.Attributes$Dataset",
132:       "org.jsoup.helper.Validate",
133:       "org.jsoup.select.Evaluator$CssNthEvaluator",
134:       "org.jsoup.parser.Token$Comment",
135:       "org.jsoup.select.Evaluator$IsFirstOfType",
136:       "org.jsoup.nodes.Element$NodeList",
137:       "org.jsoup.parser.TokeniserState$56",
138:       "org.jsoup.parser.TokeniserState$57",
139:       "org.jsoup.parser.TokeniserState$58",
140:       "org.jsoup.parser.TokeniserState$59",
141:       "org.jsoup.parser.TokeniserState$52",
142:       "org.jsoup.parser.TokeniserState$53",
143:       "org.jsoup.parser.TreeBuilder",
144:       "org.jsoup.parser.TokeniserState$54",
145:       "org.jsoup.parser.TokeniserState$55",
146:       "org.jsoup.nodes.PseudoTextElement",
147:       "org.jsoup.parser.TokeniserState$50",
148:       "org.jsoup.parser.TokeniserState$51",
149:       "org.jsoup.parser.Parser",
150:       "org.jsoup.select.Evaluator$IsEmpty",
151:       "org.jsoup.select.Evaluator$AttributeWithValueMatching",
152:       "org.jsoup.select.Evaluator$IsNthChild",
153:       "org.jsoup.parser.HtmlTreeBuilderState$Constants",
154:       "org.jsoup.select.Evaluator$Class",
155:       "org.jsoup.parser.TokeniserState$67",
156:       "org.jsoup.parser.TokeniserState$63",
157:       "org.jsoup.nodes.Node$OuterHtmlVisitor",
158:       "org.jsoup.parser.TokeniserState$64",
159:       "org.jsoup.parser.TokeniserState$65",
160:       "org.jsoup.parser.Token",
161:       "org.jsoup.parser.TokeniserState$66",
162:       "org.jsoup.parser.TokeniserState$60",
163:       "org.jsoup.select.Evaluator$AttributeKeyPair",
164:       "org.jsoup.parser.TokeniserState$61",
165:       "org.jsoup.parser.TokeniserState$62",
166:       "org.jsoup.select.Evaluator$IsNthLastOfType",
167:       "org.jsoup.parser.Tag",
168:       "org.jsoup.parser.Token$Character",
169:       "org.jsoup.select.Evaluator$IsLastOfType",
170:       "org.jsoup.select.Evaluator$Attribute",
171:       "org.jsoup.select.NodeFilter$FilterResult",
172:       "org.jsoup.nodes.Entities",
173:       "org.jsoup.select.Evaluator$AttributeWithValueContaining",
174:       "org.jsoup.select.Elements",
175:       "org.jsoup.parser.Token$CData",
176:       "org.jsoup.nodes.Element$2",
177:       "org.jsoup.select.Evaluator$AllElements",
178:       "org.jsoup.nodes.Element$1",
179:       "org.jsoup.nodes.TextNode",
180:       "org.jsoup.select.Evaluator$AttributeWithValue",
181:       "org.jsoup.select.Evaluator$AttributeWithValueNot",
182:       "org.jsoup.parser.ParseErrorList",
183:       "org.jsoup.nodes.BooleanAttribute",
184:       "org.jsoup.SerializationException",
185:       "org.jsoup.select.CombiningEvaluator$Or",
186:       "org.jsoup.select.Evaluator$ContainsText",
187:       "org.jsoup.select.Evaluator$Id",
188:       "org.jsoup.select.Evaluator$IsNthOfType",
189:       "org.jsoup.select.Collector",
190:       "org.jsoup.select.Collector$Accumulator",
191:       "org.jsoup.nodes.Attributes$Dataset$DatasetIterator",
192:       "org.jsoup.parser.XmlTreeBuilder$1",
193:       "org.jsoup.parser.CharacterReader",
194:       "org.jsoup.select.Evaluator$IsFirstChild",
195:       "org.jsoup.select.StructuralEvaluator$Root",
196:       "org.jsoup.nodes.Node$1",
197:       "org.jsoup.select.NodeVisitor",
198:       "org.jsoup.parser.TokeniserState$2",
199:       "org.jsoup.parser.TokeniserState$12",
200:       "org.jsoup.parser.TokeniserState$1",
201:       "org.jsoup.parser.TokeniserState$13",
202:       "org.jsoup.nodes.Attributes$1",
203:       "org.jsoup.parser.TokeniserState$14",
204:       "org.jsoup.parser.TokeniserState$15",
205:       "org.jsoup.select.Evaluator$AttributeWithValueStarting",
206:       "org.jsoup.parser.Token$StartTag",
207:       "org.jsoup.parser.Token$EOF",
208:       "org.jsoup.parser.TokeniserState$10",
209:       "org.jsoup.parser.TokeniserState$11",
210:       "org.jsoup.nodes.DocumentType",
211:       "org.jsoup.parser.TokeniserState$9",
212:       "org.jsoup.parser.TokeniserState$8",
213:       "org.jsoup.parser.TokeniserState$7",
214:       "org.jsoup.parser.TokeniserState$6",
215:       "org.jsoup.parser.TokeniserState$5",
216:       "org.jsoup.parser.TokeniserState$4",
217:       "org.jsoup.select.QueryParser",
218:       "org.jsoup.parser.TokeniserState$3",
219:       "org.jsoup.nodes.NodeUtils",
220:       "org.jsoup.select.Evaluator$Matches",
221:       "org.jsoup.select.Evaluator$IsOnlyChild",
222:       "org.jsoup.parser.TokeniserState$16",
223:       "org.jsoup.parser.TokeniserState$17",
224:       "org.jsoup.parser.TokeniserState$18",
225:       "org.jsoup.nodes.Entities$1",
226:       "org.jsoup.parser.TokeniserState$19",
227:       "org.jsoup.parser.TokeniserState$23",
228:       "org.jsoup.UncheckedIOException",
229:       "org.jsoup.parser.TokeniserState$24",
230:       "org.jsoup.parser.TokeniserState$25",
231:       "org.jsoup.parser.TokeniserState$26",
232:       "org.jsoup.parser.TokeniserState$20",
233:       "org.jsoup.parser.TokeniserState$21",
234:       "org.jsoup.parser.TokeniserState$22",
235:       "org.jsoup.parser.TokenQueue",
236:       "org.jsoup.parser.ParseSettings",
237:       "org.jsoup.select.NodeFilter",
238:       "org.jsoup.select.Evaluator$ContainsOwnText",
239:       "org.jsoup.parser.TokeniserState$27",
240:       "org.jsoup.parser.TokeniserState",
241:       "org.jsoup.parser.TokeniserState$28",
242:       "org.jsoup.parser.TokeniserState$29",
243:       "org.jsoup.parser.TokeniserState$34",
244:       "org.jsoup.select.Evaluator$IndexLessThan",
245:       "org.jsoup.parser.TokeniserState$35",
246:       "org.jsoup.parser.TokeniserState$36",
247:       "org.jsoup.parser.TokeniserState$37",
248:       "org.jsoup.parser.TokeniserState$30",
249:       "org.jsoup.parser.TokeniserState$31",
250:       "org.jsoup.parser.TokeniserState$32",
251:       "org.jsoup.parser.TokeniserState$33",
252:       "org.jsoup.nodes.Entities$EscapeMode",
253:       "org.jsoup.select.Evaluator$MatchText",
254:       "org.jsoup.select.Evaluator",
255:       "org.jsoup.Connection",
256:       "org.jsoup.select.Evaluator$IsRoot",
257:       "org.jsoup.parser.TokeniserState$38",
258:       "org.jsoup.parser.TokeniserState$39",
259:       "org.jsoup.nodes.CDataNode",
260:       "org.jsoup.parser.TokeniserState$45",
261:       "org.jsoup.parser.TokeniserState$46",
262:       "org.jsoup.parser.TokeniserState$47",
263:       "org.jsoup.select.StructuralEvaluator$Parent",
264:       "org.jsoup.parser.TokeniserState$48",
265:       "org.jsoup.select.Evaluator$IsLastChild",
266:       "org.jsoup.parser.TokeniserState$41",
267:       "org.jsoup.select.Evaluator$IsNthLastChild",
268:       "org.jsoup.parser.TokeniserState$42",
269:       "org.jsoup.parser.TokeniserState$43",
270:       "org.jsoup.parser.TokeniserState$44",
271:       "org.jsoup.parser.TokeniserState$40",
272:       "org.jsoup.parser.Token$TokenType",
273:       "org.jsoup.parser.HtmlTreeBuilderState$2",
274:       "org.jsoup.parser.HtmlTreeBuilderState$1",
275:       "org.jsoup.parser.HtmlTreeBuilderState$4",
276:       "org.jsoup.nodes.Attribute",
277:       "org.jsoup.parser.HtmlTreeBuilderState$3",
278:       "org.jsoup.parser.HtmlTreeBuilderState$9",
279:       "org.jsoup.parser.TokeniserState$49",
280:       "org.jsoup.parser.HtmlTreeBuilderState$6",
281:       "org.jsoup.parser.HtmlTreeBuilderState$5",
282:       "org.jsoup.parser.HtmlTreeBuilderState$8",
283:       "org.jsoup.parser.HtmlTreeBuilderState$7"
284:     );
285:   } 
286:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
287:     mock(Class.forName("java.util.Comparator", false, Element_238_tmp__ESTest_scaffolding.class.getClassLoader()));
288:     mock(Class.forName("org.jsoup.select.NodeVisitor", false, Element_238_tmp__ESTest_scaffolding.class.getClassLoader()));
289:   }
290: 
291:   private static void resetClasses() {
292:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Element_238_tmp__ESTest_scaffolding.class.getClassLoader()); 
293: 
294:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
295:       "org.jsoup.nodes.Node",
296:       "org.jsoup.nodes.Element",
297:       "org.jsoup.helper.ChangeNotifyingArrayList",
298:       "org.jsoup.nodes.Element$NodeList",
299:       "org.jsoup.nodes.Element$1",
300:       "org.jsoup.nodes.Element$2",
301:       "org.jsoup.helper.Validate",
302:       "org.jsoup.parser.Tag",
303:       "org.jsoup.parser.ParseSettings",
304:       "org.jsoup.select.NodeFilter$FilterResult",
305:       "org.jsoup.internal.StringUtil",
306:       "org.jsoup.nodes.Document$OutputSettings$Syntax",
307:       "org.jsoup.parser.Parser",
308:       "org.jsoup.parser.TreeBuilder",
309:       "org.jsoup.parser.HtmlTreeBuilder",
310:       "org.jsoup.parser.Token",
311:       "org.jsoup.parser.Token$Tag",
312:       "org.jsoup.parser.Token$StartTag",
313:       "org.jsoup.nodes.Attributes",
314:       "org.jsoup.parser.Token$TokenType",
315:       "org.jsoup.parser.Token$EndTag",
316:       "org.jsoup.parser.ParseErrorList",
317:       "org.jsoup.nodes.Document",
318:       "org.jsoup.internal.Normalizer",
319:       "org.jsoup.parser.Tokeniser",
320:       "org.jsoup.parser.TokeniserState",
321:       "org.jsoup.parser.Token$Character",
322:       "org.jsoup.parser.Token$Doctype",
323:       "org.jsoup.parser.Token$Comment",
324:       "org.jsoup.parser.HtmlTreeBuilderState",
325:       "org.jsoup.parser.Token$EOF",
326:       "org.jsoup.nodes.Node$OuterHtmlVisitor",
327:       "org.jsoup.nodes.NodeUtils",
328:       "org.jsoup.nodes.Entities$CoreCharset",
329:       "org.jsoup.select.NodeTraversor",
330:       "org.jsoup.parser.HtmlTreeBuilderState$24",
331:       "org.jsoup.select.Evaluator",
332:       "org.jsoup.select.Evaluator$AttributeKeyPair",
333:       "org.jsoup.select.Evaluator$AttributeWithValue",
334:       "org.jsoup.nodes.LeafNode",
335:       "org.jsoup.nodes.TextNode",
336:       "org.jsoup.nodes.Entities$1",
337:       "org.jsoup.select.Evaluator$Tag",
338:       "org.jsoup.select.Collector",
339:       "org.jsoup.select.Elements",
340:       "org.jsoup.select.Collector$Accumulator",
341:       "org.jsoup.select.Evaluator$AttributeWithValueMatching",
342:       "org.jsoup.nodes.Attributes$Dataset",
343:       "org.jsoup.nodes.Attribute",
344:       "org.jsoup.select.Evaluator$AttributeWithValueContaining",
345:       "org.jsoup.select.Evaluator$MatchesOwn",
346:       "org.jsoup.parser.XmlTreeBuilder",
347:       "org.jsoup.parser.XmlTreeBuilder$1",
348:       "org.jsoup.select.Evaluator$AttributeWithValueNot",
349:       "org.jsoup.nodes.Attributes$Dataset$EntrySet",
350:       "org.jsoup.nodes.Attributes$Dataset$DatasetIterator",
351:       "org.jsoup.nodes.Attributes$1",
352:       "org.jsoup.select.Selector",
353:       "org.jsoup.select.QueryParser",
354:       "org.jsoup.parser.TokenQueue",
355:       "org.jsoup.select.Evaluator$Class",
356:       "org.jsoup.select.Selector$SelectorParseException",
357:       "org.jsoup.nodes.FormElement",
358:       "org.jsoup.select.Evaluator$Matches",
359:       "org.jsoup.select.Evaluator$IndexEvaluator",
360:       "org.jsoup.select.Evaluator$IndexEquals",
361:       "org.jsoup.select.Evaluator$AllElements",
362:       "org.jsoup.select.Evaluator$IsOnlyChild",
363:       "org.jsoup.select.StructuralEvaluator$Root",
364:       "org.jsoup.select.Evaluator$IndexLessThan",
365:       "org.jsoup.select.Evaluator$ContainsText",
366:       "org.jsoup.select.Evaluator$AttributeStarting",
367:       "org.jsoup.nodes.Comment",
368:       "org.jsoup.select.Evaluator$IsOnlyOfType",
369:       "org.jsoup.select.Evaluator$IndexGreaterThan",
370:       "org.jsoup.nodes.CDataNode",
371:       "org.jsoup.select.Collector$FirstFinder",
372:       "org.jsoup.select.Evaluator$Id",
373:       "org.jsoup.nodes.Node$1",
374:       "org.jsoup.select.Evaluator$ContainsOwnText",
375:       "org.jsoup.nodes.DocumentType",
376:       "org.jsoup.parser.HtmlTreeBuilderState$Constants",
377:       "org.jsoup.nodes.PseudoTextElement",
378:       "org.jsoup.Connection$Method",
379:       "org.jsoup.Jsoup",
380:       "org.jsoup.helper.HttpConnection",
381:       "org.jsoup.helper.HttpConnection$Base",
382:       "org.jsoup.helper.HttpConnection$Request",
383:       "org.jsoup.helper.HttpConnection$Response",
384:       "org.jsoup.select.Evaluator$AttributeWithValueStarting",
385:       "org.jsoup.select.CombiningEvaluator",
386:       "org.jsoup.select.CombiningEvaluator$And",
387:       "org.jsoup.select.StructuralEvaluator",
388:       "org.jsoup.select.StructuralEvaluator$ImmediateParent",
389:       "org.jsoup.select.StructuralEvaluator$Parent",
390:       "org.jsoup.nodes.XmlDeclaration",
391:       "org.jsoup.select.Evaluator$IsRoot",
392:       "org.jsoup.nodes.DataNode",
393:       "org.jsoup.select.Evaluator$Attribute",
394:       "org.jsoup.select.Evaluator$AttributeWithValueEnding",
395:       "org.jsoup.select.Evaluator$IsFirstChild",
396:       "org.jsoup.select.Evaluator$CssNthEvaluator",
397:       "org.jsoup.select.Evaluator$IsNthLastOfType",
398:       "org.jsoup.select.Evaluator$IsLastOfType",
399:       "org.jsoup.select.StructuralEvaluator$PreviousSibling",
400:       "org.jsoup.select.CombiningEvaluator$Or",
401:       "org.jsoup.nodes.BooleanAttribute",
402:       "org.jsoup.SerializationException",
403:       "org.jsoup.select.Evaluator$TagEndsWith",
404:       "org.jsoup.select.Evaluator$IsNthChild",
405:       "org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling",
406:       "org.jsoup.select.Evaluator$IsLastChild",
407:       "org.jsoup.select.Evaluator$ContainsData",
408:       "org.jsoup.parser.ParseError",
409:       "org.jsoup.select.Evaluator$IsNthLastChild",
410:       "org.jsoup.select.Evaluator$MatchText",
411:       "org.jsoup.select.Evaluator$IsNthOfType",
412:       "org.jsoup.select.Evaluator$IsFirstOfType"
413:     );
414:   }
415: }

[MASTER] 22:28:15.458 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Document document0 = Parser.parseBodyFragmentRelaxed("FD", "FD");
assertNotNull(document0);
assertEquals("FD", document0.location());
assertEquals("FD", document0.baseUri());
assertFalse(document0.hasParent());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(1, document0.childNodeSize());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.isBlock());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertEquals("#root", document0.tagName());

Element element0 = document0.prependElement("FD");
assertNotNull(element0);
assertEquals("FD", document0.location());
assertEquals("FD", document0.baseUri());
assertFalse(document0.hasParent());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(2, document0.childNodeSize());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.isBlock());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertEquals("#root", document0.tagName());
assertEquals("fd", element0.nodeName());
assertTrue(element0.hasParent());
assertEquals(0, element0.siblingIndex());
assertEquals("fd", element0.tagName());
assertFalse(element0.isBlock());
assertEquals(0, element0.childNodeSize());
assertEquals("FD", element0.baseUri());

Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
assertNotNull(evaluator_IsOnlyChild0);
assertEquals(":only-child", evaluator_IsOnlyChild0.toString());

Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
Element element1 = (Element)element0.traverse(nodeVisitor0);
assertNotNull(element1);
assertEquals("FD", document0.location());
assertEquals("FD", document0.baseUri());
assertFalse(document0.hasParent());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(2, document0.childNodeSize());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.isBlock());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertEquals("#root", document0.tagName());
assertEquals("fd", element0.nodeName());
assertTrue(element0.hasParent());
assertEquals(0, element0.siblingIndex());
assertEquals("fd", element0.tagName());
assertFalse(element0.isBlock());
assertEquals(0, element0.childNodeSize());
assertEquals("FD", element0.baseUri());
assertEquals(0, element1.childNodeSize());
assertTrue(element1.hasParent());
assertFalse(element1.isBlock());
assertEquals("fd", element1.nodeName());
assertEquals(0, element1.siblingIndex());
assertEquals("FD", element1.baseUri());
assertEquals("fd", element1.tagName());
assertSame(element0, element1);
assertSame(element1, element0);

Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

Element element2 = document0.head();
assertNotNull(element2);
assertFalse(element2.equals((Object)element1));
assertFalse(element2.equals((Object)element0));
assertEquals("FD", document0.location());
assertEquals("FD", document0.baseUri());
assertFalse(document0.hasParent());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(2, document0.childNodeSize());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.isBlock());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertEquals("#root", document0.tagName());
assertEquals("head", element2.nodeName());
assertEquals("head", element2.tagName());
assertEquals("FD", element2.baseUri());
assertTrue(element2.isBlock());
assertTrue(element2.hasParent());
assertEquals(0, element2.siblingIndex());
assertEquals(0, element2.childNodeSize());
assertNotSame(element2, element1);
assertNotSame(element2, element0);

String string0 = element0.cssSelector();
assertNotNull(string0);
assertEquals("fd", string0);
assertFalse(element0.equals((Object)element2));
assertEquals("FD", document0.location());
assertEquals("FD", document0.baseUri());
assertFalse(document0.hasParent());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(2, document0.childNodeSize());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.isBlock());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertEquals("#root", document0.tagName());
assertEquals("fd", element0.nodeName());
assertTrue(element0.hasParent());
assertEquals(0, element0.siblingIndex());
assertEquals("fd", element0.tagName());
assertFalse(element0.isBlock());
assertEquals(0, element0.childNodeSize());
assertEquals("FD", element0.baseUri());
assertNotSame(element0, element2);
assertSame(element0, element1);

Element element3 = element2.tagName("FD");
assertNotNull(element3);
assertFalse(element2.equals((Object)element1));
assertFalse(element2.equals((Object)element0));
assertFalse(element3.equals((Object)element1));
assertFalse(element3.equals((Object)element0));
assertEquals("FD", document0.location());
assertEquals("FD", document0.baseUri());
assertFalse(document0.hasParent());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(2, document0.childNodeSize());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.isBlock());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertEquals("#root", document0.tagName());
assertEquals("fd", element2.tagName());
assertEquals("FD", element2.baseUri());
assertEquals("fd", element2.nodeName());
assertFalse(element2.isBlock());
assertTrue(element2.hasParent());
assertEquals(0, element2.siblingIndex());
assertEquals(0, element2.childNodeSize());
assertEquals("FD", element3.baseUri());
assertEquals(0, element3.childNodeSize());
assertEquals("fd", element3.nodeName());
assertEquals("fd", element3.tagName());
assertFalse(element3.isBlock());
assertTrue(element3.hasParent());
assertEquals(0, element3.siblingIndex());
assertSame(element2, element3);
assertNotSame(element2, element1);
assertNotSame(element2, element0);
assertNotSame(element3, element1);
assertSame(element3, element2);
assertNotSame(element3, element0);

Document document1 = Parser.parse("xE|rN%g{JZF", "bivrpx\";\u0005jh");
assertNotNull(document1);
assertFalse(document1.equals((Object)document0));
assertFalse(document1.hasParent());
assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
assertEquals(1, document1.childNodeSize());
assertFalse(document1.updateMetaCharsetElement());
assertEquals("bivrpx\";\u0005jh", document1.location());
assertEquals(0, document1.siblingIndex());
assertEquals("#document", document1.nodeName());
assertEquals("bivrpx\";\u0005jh", document1.baseUri());
assertEquals("#root", document1.tagName());
assertFalse(document1.isBlock());
assertNotSame(document1, document0);

document0.after((Node) document1);

[MASTER] 22:28:17.538 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_296_1628288897501/org/jsoup/nodes/Element_296_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_296_1628288897501/org/jsoup/nodes/Element_296_tmp__ESTest_scaffolding.java]]
[MASTER] 22:28:17.538 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Jsoup-87/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Jsoup-87/target/classes
[MASTER] 22:28:17.538 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Jsoup-87/target/classes
[MASTER] 22:28:17.538 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Integer>>: 47
[MASTER] 22:28:17.538 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_296_1628288897501/org/jsoup/nodes/Element_296_tmp__ESTest.java uses or overrides a deprecated API.: -1
[MASTER] 22:28:17.538 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:deprecation for details.: -1
[MASTER] 22:28:17.538 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_296_1628288897501/org/jsoup/nodes/Element_296_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 22:28:17.538 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 22:28:17.539 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_296_1628288897501/org/jsoup/nodes/Element_296_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 22:28:17 GMT 2021
4:  */
5: 
6: package org.jsoup.nodes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.nio.charset.Charset;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.Set;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.evosuite.runtime.ViolatedAssumptionAnswer;
18: import org.evosuite.runtime.testdata.EvoSuiteFile;
19: import org.evosuite.runtime.testdata.FileSystemHandling;
20: import org.jsoup.nodes.Document;
21: import org.jsoup.nodes.Element;
22: import org.jsoup.parser.Parser;
23: import org.junit.runner.RunWith;
24: 
25: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
26: public class Element_296_tmp__ESTest extends Element_296_tmp__ESTest_scaffolding {
27: 
28:   @Test(timeout = 4000)
29:   public void test0()  throws Throwable  {
30:       boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
31:       assertFalse(boolean0);
32:       
33:       Document document0 = Parser.parseBodyFragmentRelaxed("            ", "            ");
34:       assertNotNull(document0);
35:       assertFalse(document0.updateMetaCharsetElement());
36:       assertEquals(1, document0.childNodeSize());
37:       assertEquals("#document", document0.nodeName());
38:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
39:       assertFalse(document0.hasParent());
40:       assertFalse(document0.isBlock());
41:       assertEquals("            ", document0.baseUri());
42:       assertEquals("#root", document0.tagName());
43:       assertEquals(0, document0.siblingIndex());
44:       assertEquals("            ", document0.location());
45:       
46:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
47:       Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
48:       assertNotNull(comparator1);
49:       
50:       Element element0 = document0.head();
51:       assertNotNull(element0);
52:       assertFalse(document0.updateMetaCharsetElement());
53:       assertEquals(1, document0.childNodeSize());
54:       assertEquals("#document", document0.nodeName());
55:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
56:       assertFalse(document0.hasParent());
57:       assertFalse(document0.isBlock());
58:       assertEquals("            ", document0.baseUri());
59:       assertEquals("#root", document0.tagName());
60:       assertEquals(0, document0.siblingIndex());
61:       assertEquals("            ", document0.location());
62:       assertTrue(element0.hasParent());
63:       assertEquals("head", element0.nodeName());
64:       assertEquals("head", element0.tagName());
65:       assertTrue(element0.isBlock());
66:       assertEquals(0, element0.childNodeSize());
67:       assertEquals("            ", element0.baseUri());
68:       assertEquals(0, element0.siblingIndex());
69:       
70:       Element element1 = element0.appendElement("title");
71:       assertNotNull(element1);
72:       assertFalse(element1.equals((Object)element0));
73:       assertFalse(document0.updateMetaCharsetElement());
74:       assertEquals(1, document0.childNodeSize());
75:       assertEquals("#document", document0.nodeName());
76:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
77:       assertFalse(document0.hasParent());
78:       assertFalse(document0.isBlock());
79:       assertEquals("            ", document0.baseUri());
80:       assertEquals("#root", document0.tagName());
81:       assertEquals(0, document0.siblingIndex());
82:       assertEquals("            ", document0.location());
83:       assertTrue(element0.hasParent());
84:       assertEquals("head", element0.nodeName());
85:       assertEquals("head", element0.tagName());
86:       assertTrue(element0.isBlock());
87:       assertEquals("            ", element0.baseUri());
88:       assertEquals(1, element0.childNodeSize());
89:       assertEquals(0, element0.siblingIndex());
90:       assertEquals(0, element1.siblingIndex());
91:       assertEquals("title", element1.nodeName());
92:       assertEquals(0, element1.childNodeSize());
93:       assertTrue(element1.hasParent());
94:       assertEquals("            ", element1.baseUri());
95:       assertTrue(element1.isBlock());
96:       assertEquals("title", element1.tagName());
97:       assertNotSame(element0, element1);
98:       assertNotSame(element1, element0);
99:       
100:       Element element2 = element1.getElementById("title");
101:       assertNull(element2);
102:       assertFalse(element0.equals((Object)element1));
103:       assertFalse(element1.equals((Object)element0));
104:       assertFalse(document0.updateMetaCharsetElement());
105:       assertEquals(1, document0.childNodeSize());
106:       assertEquals("#document", document0.nodeName());
107:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
108:       assertFalse(document0.hasParent());
109:       assertFalse(document0.isBlock());
110:       assertEquals("            ", document0.baseUri());
111:       assertEquals("#root", document0.tagName());
112:       assertEquals(0, document0.siblingIndex());
113:       assertEquals("            ", document0.location());
114:       assertTrue(element0.hasParent());
115:       assertEquals("head", element0.nodeName());
116:       assertEquals("head", element0.tagName());
117:       assertTrue(element0.isBlock());
118:       assertEquals("            ", element0.baseUri());
119:       assertEquals(1, element0.childNodeSize());
120:       assertEquals(0, element0.siblingIndex());
121:       assertEquals(0, element1.siblingIndex());
122:       assertEquals("title", element1.nodeName());
123:       assertEquals(0, element1.childNodeSize());
124:       assertTrue(element1.hasParent());
125:       assertEquals("            ", element1.baseUri());
126:       assertTrue(element1.isBlock());
127:       assertEquals("title", element1.tagName());
128:       assertNotSame(element0, element1);
129:       assertNotSame(element1, element0);
130:       
131:       Element element3 = element0.prepend("title");
132:       assertNotNull(element3);
133:       assertFalse(element0.equals((Object)element1));
134:       assertFalse(element3.equals((Object)element1));
135:       assertFalse(document0.updateMetaCharsetElement());
136:       assertEquals(1, document0.childNodeSize());
137:       assertEquals("#document", document0.nodeName());
138:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
139:       assertFalse(document0.hasParent());
140:       assertFalse(document0.isBlock());
141:       assertEquals("            ", document0.baseUri());
142:       assertEquals("#root", document0.tagName());
143:       assertEquals(0, document0.siblingIndex());
144:       assertEquals("            ", document0.location());
145:       assertTrue(element0.hasParent());
146:       assertEquals("head", element0.nodeName());
147:       assertEquals(2, element0.childNodeSize());
148:       assertEquals("head", element0.tagName());
149:       assertTrue(element0.isBlock());
150:       assertEquals("            ", element0.baseUri());
151:       assertEquals(0, element0.siblingIndex());
152:       assertEquals("head", element3.nodeName());
153:       assertEquals(0, element3.siblingIndex());
154:       assertEquals("            ", element3.baseUri());
155:       assertEquals("head", element3.tagName());
156:       assertTrue(element3.hasParent());
157:       assertTrue(element3.isBlock());
158:       assertEquals(2, element3.childNodeSize());
159:       assertNotSame(element0, element1);
160:       assertSame(element0, element3);
161:       assertSame(element3, element0);
162:       assertNotSame(element3, element1);
163:       
164:       Charset charset0 = document0.charset();
165:       assertNotNull(charset0);
166:       assertFalse(document0.updateMetaCharsetElement());
167:       assertEquals(1, document0.childNodeSize());
168:       assertEquals("#document", document0.nodeName());
169:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
170:       assertFalse(document0.hasParent());
171:       assertFalse(document0.isBlock());
172:       assertEquals("            ", document0.baseUri());
173:       assertEquals("#root", document0.tagName());
174:       assertEquals(0, document0.siblingIndex());
175:       assertEquals("            ", document0.location());
176:       assertTrue(charset0.canEncode());
177:       assertEquals("UTF-8", charset0.toString());
178:       assertEquals("UTF-8", charset0.displayName());
179:       assertTrue(charset0.isRegistered());
180:       assertEquals("UTF-8", charset0.name());
181:       
182:       Set<String> set0 = charset0.aliases();
183:       assertNotNull(set0);
184:       assertFalse(document0.updateMetaCharsetElement());
185:       assertEquals(1, document0.childNodeSize());
186:       assertEquals("#document", document0.nodeName());
187:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
188:       assertFalse(document0.hasParent());
189:       assertFalse(document0.isBlock());
190:       assertEquals("            ", document0.baseUri());
191:       assertEquals("#root", document0.tagName());
192:       assertEquals(0, document0.siblingIndex());
193:       assertEquals("            ", document0.location());
194:       assertTrue(charset0.canEncode());
195:       assertEquals("UTF-8", charset0.toString());
196:       assertEquals("UTF-8", charset0.displayName());
197:       assertTrue(charset0.isRegistered());
198:       assertEquals("UTF-8", charset0.name());
199:       assertEquals(2, set0.size());
200:       assertFalse(set0.isEmpty());
201:       assertFalse(set0.contains("title"));
202:       
203:       Element element4 = element1.classNames(set0);
204:       assertNotNull(element4);
205:       assertFalse(element0.equals((Object)element1));
206:       assertFalse(element1.equals((Object)element0));
207:       assertFalse(element1.equals((Object)element3));
208:       assertFalse(element4.equals((Object)element0));
209:       assertFalse(element4.equals((Object)element3));
210:       assertFalse(document0.updateMetaCharsetElement());
211:       assertEquals(1, document0.childNodeSize());
212:       assertEquals("#document", document0.nodeName());
213:       assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
214:       assertFalse(document0.hasParent());
215:       assertFalse(document0.isBlock());
216:       assertEquals("            ", document0.baseUri());
217:       assertEquals("#root", document0.tagName());
218:       assertEquals(0, document0.siblingIndex());
219:       assertEquals("            ", document0.location());
220:       assertTrue(element0.hasParent());
221:       assertEquals("head", element0.nodeName());
222:       assertEquals(2, element0.childNodeSize());
223:       assertEquals("head", element0.tagName());
224:       assertTrue(element0.isBlock());
225:       assertEquals("            ", element0.baseUri());
226:       assertEquals(0, element0.siblingIndex());
227:       assertEquals("title", element1.nodeName());
228:       assertEquals(0, element1.childNodeSize());
229:       assertTrue(element1.hasParent());
230:       assertEquals(1, element1.siblingIndex());
231:       assertEquals("            ", element1.baseUri());
232:       assertTrue(element1.isBlock());
233:       assertEquals("title", element1.tagName());
234:       assertTrue(charset0.canEncode());
235:       assertEquals("UTF-8", charset0.toString());
236:       assertEquals("UTF-8", charset0.displayName());
237:       assertTrue(charset0.isRegistered());
238:       assertEquals("UTF-8", charset0.name());
239:       assertEquals(2, set0.size());
240:       assertFalse(set0.isEmpty());
241:       assertEquals("title", element4.tagName());
242:       assertTrue(element4.hasParent());
243:       assertTrue(element4.isBlock());
244:       assertEquals("title", element4.nodeName());
245:       assertEquals(0, element4.childNodeSize());
246:       assertEquals("            ", element4.baseUri());
247:       assertEquals(1, element4.siblingIndex());
248:       assertFalse(set0.contains("title"));
249:       assertNotSame(element0, element4);
250:       assertNotSame(element0, element1);
251:       assertSame(element0, element3);
252:       assertNotSame(element1, element0);
253:       assertSame(element1, element4);
254:       assertNotSame(element1, element3);
255:       assertNotSame(element4, element0);
256:       assertNotSame(element4, element3);
257:       assertSame(element4, element1);
258:   }
259: }
RegularFileObject[/tmp/EvoSuite_296_1628288897501/org/jsoup/nodes/Element_296_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 22:28:17 GMT 2021
5:  */
6: 
7: package org.jsoup.nodes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class Element_296_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.jsoup.nodes.Element"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Element_296_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.jsoup.nodes.Document$QuirksMode",
72:       "org.jsoup.parser.HtmlTreeBuilderState$18",
73:       "org.jsoup.select.StructuralEvaluator$ImmediateParent",
74:       "org.jsoup.parser.HtmlTreeBuilderState$19",
75:       "org.jsoup.parser.HtmlTreeBuilderState$16",
76:       "org.jsoup.helper.ChangeNotifyingArrayList",
77:       "org.jsoup.parser.HtmlTreeBuilderState$17",
78:       "org.jsoup.parser.HtmlTreeBuilderState$14",
79:       "org.jsoup.parser.HtmlTreeBuilderState$15",
80:       "org.jsoup.select.Evaluator$IndexEvaluator",
81:       "org.jsoup.select.Evaluator$IsOnlyOfType",
82:       "org.jsoup.nodes.Entities$CoreCharset",
83:       "org.jsoup.nodes.Element",
84:       "org.jsoup.parser.HtmlTreeBuilderState$12",
85:       "org.jsoup.parser.HtmlTreeBuilderState$13",
86:       "org.jsoup.parser.HtmlTreeBuilderState$10",
87:       "org.jsoup.parser.HtmlTreeBuilderState$11",
88:       "org.jsoup.select.NodeTraversor",
89:       "org.jsoup.select.Evaluator$MatchesOwn",
90:       "org.jsoup.select.CombiningEvaluator$And",
91:       "org.jsoup.parser.Token$EndTag",
92:       "org.jsoup.nodes.Document",
93:       "org.jsoup.Jsoup",
94:       "org.jsoup.parser.HtmlTreeBuilder",
95:       "org.jsoup.nodes.FormElement",
96:       "org.jsoup.select.StructuralEvaluator",
97:       "org.jsoup.select.Evaluator$IndexEquals",
98:       "org.jsoup.select.Selector$SelectorParseException",
99:       "org.jsoup.parser.Token$Tag",
100:       "org.jsoup.nodes.XmlDeclaration",
101:       "org.jsoup.parser.Token$Doctype",
102:       "org.jsoup.select.Evaluator$TagEndsWith",
103:       "org.jsoup.parser.HtmlTreeBuilderState$23",
104:       "org.jsoup.parser.HtmlTreeBuilderState$24",
105:       "org.jsoup.select.Evaluator$Tag",
106:       "org.jsoup.parser.HtmlTreeBuilderState$21",
107:       "org.jsoup.nodes.Document$OutputSettings$Syntax",
108:       "org.jsoup.parser.HtmlTreeBuilderState$22",
109:       "org.jsoup.parser.HtmlTreeBuilderState$20",
110:       "org.jsoup.parser.Token$1",
111:       "org.jsoup.internal.StringUtil",
112:       "org.jsoup.parser.Tokeniser",
113:       "org.jsoup.nodes.Comment",
114:       "org.jsoup.select.Evaluator$IndexGreaterThan",
115:       "org.jsoup.nodes.LeafNode",
116:       "org.jsoup.select.Selector",
117:       "org.jsoup.select.Evaluator$AttributeWithValueEnding",
118:       "org.jsoup.select.Collector$FirstFinder",
119:       "org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling",
120:       "org.jsoup.nodes.Node",
121:       "org.jsoup.parser.HtmlTreeBuilderState",
122:       "org.jsoup.select.Evaluator$AttributeStarting",
123:       "org.jsoup.nodes.DataNode",
124:       "org.jsoup.nodes.Attributes",
125:       "org.jsoup.parser.XmlTreeBuilder",
126:       "org.jsoup.nodes.Document$OutputSettings",
127:       "org.jsoup.select.CombiningEvaluator",
128:       "org.jsoup.select.Evaluator$ContainsData",
129:       "org.jsoup.internal.Normalizer",
130:       "org.jsoup.nodes.Attributes$Dataset$EntrySet",
131:       "org.jsoup.nodes.Attributes$Dataset",
132:       "org.jsoup.helper.Validate",
133:       "org.jsoup.select.Evaluator$CssNthEvaluator",
134:       "org.jsoup.parser.Token$Comment",
135:       "org.jsoup.select.Evaluator$IsFirstOfType",
136:       "org.jsoup.nodes.Element$NodeList",
137:       "org.jsoup.parser.TokeniserState$56",
138:       "org.jsoup.parser.TokeniserState$57",
139:       "org.jsoup.parser.TokeniserState$58",
140:       "org.jsoup.parser.TokeniserState$59",
141:       "org.jsoup.parser.TokeniserState$52",
142:       "org.jsoup.parser.TokeniserState$53",
143:       "org.jsoup.parser.TreeBuilder",
144:       "org.jsoup.parser.TokeniserState$54",
145:       "org.jsoup.parser.TokeniserState$55",
146:       "org.jsoup.nodes.PseudoTextElement",
147:       "org.jsoup.parser.TokeniserState$50",
148:       "org.jsoup.parser.TokeniserState$51",
149:       "org.jsoup.parser.Parser",
150:       "org.jsoup.select.Evaluator$IsEmpty",
151:       "org.jsoup.select.Evaluator$AttributeWithValueMatching",
152:       "org.jsoup.select.Evaluator$IsNthChild",
153:       "org.jsoup.parser.HtmlTreeBuilderState$Constants",
154:       "org.jsoup.select.Evaluator$Class",
155:       "org.jsoup.parser.TokeniserState$67",
156:       "org.jsoup.parser.TokeniserState$63",
157:       "org.jsoup.nodes.Node$OuterHtmlVisitor",
158:       "org.jsoup.parser.TokeniserState$64",
159:       "org.jsoup.parser.TokeniserState$65",
160:       "org.jsoup.parser.Token",
161:       "org.jsoup.parser.TokeniserState$66",
162:       "org.jsoup.parser.TokeniserState$60",
163:       "org.jsoup.select.Evaluator$AttributeKeyPair",
164:       "org.jsoup.parser.TokeniserState$61",
165:       "org.jsoup.parser.TokeniserState$62",
166:       "org.jsoup.select.Evaluator$IsNthLastOfType",
167:       "org.jsoup.parser.Tag",
168:       "org.jsoup.parser.Token$Character",
169:       "org.jsoup.select.Evaluator$IsLastOfType",
170:       "org.jsoup.select.Evaluator$Attribute",
171:       "org.jsoup.select.NodeFilter$FilterResult",
172:       "org.jsoup.nodes.Entities",
173:       "org.jsoup.select.Evaluator$AttributeWithValueContaining",
174:       "org.jsoup.select.Elements",
175:       "org.jsoup.parser.Token$CData",
176:       "org.jsoup.nodes.Element$2",
177:       "org.jsoup.select.Evaluator$AllElements",
178:       "org.jsoup.nodes.Element$1",
179:       "org.jsoup.nodes.TextNode",
180:       "org.jsoup.select.Evaluator$AttributeWithValue",
181:       "org.jsoup.select.Evaluator$AttributeWithValueNot",
182:       "org.jsoup.parser.ParseErrorList",
183:       "org.jsoup.nodes.BooleanAttribute",
184:       "org.jsoup.SerializationException",
185:       "org.jsoup.select.CombiningEvaluator$Or",
186:       "org.jsoup.select.Evaluator$ContainsText",
187:       "org.jsoup.select.Evaluator$Id",
188:       "org.jsoup.select.Evaluator$IsNthOfType",
189:       "org.jsoup.select.Collector",
190:       "org.jsoup.select.Collector$Accumulator",
191:       "org.jsoup.nodes.Attributes$Dataset$DatasetIterator",
192:       "org.jsoup.parser.XmlTreeBuilder$1",
193:       "org.jsoup.parser.CharacterReader",
194:       "org.jsoup.select.Evaluator$IsFirstChild",
195:       "org.jsoup.select.StructuralEvaluator$Root",
196:       "org.jsoup.nodes.Node$1",
197:       "org.jsoup.select.NodeVisitor",
198:       "org.jsoup.parser.TokeniserState$2",
199:       "org.jsoup.parser.TokeniserState$12",
200:       "org.jsoup.parser.TokeniserState$1",
201:       "org.jsoup.parser.TokeniserState$13",
202:       "org.jsoup.nodes.Attributes$1",
203:       "org.jsoup.parser.TokeniserState$14",
204:       "org.jsoup.parser.TokeniserState$15",
205:       "org.jsoup.select.Evaluator$AttributeWithValueStarting",
206:       "org.jsoup.parser.Token$StartTag",
207:       "org.jsoup.parser.Token$EOF",
208:       "org.jsoup.parser.TokeniserState$10",
209:       "org.jsoup.parser.TokeniserState$11",
210:       "org.jsoup.nodes.DocumentType",
211:       "org.jsoup.parser.TokeniserState$9",
212:       "org.jsoup.parser.TokeniserState$8",
213:       "org.jsoup.parser.TokeniserState$7",
214:       "org.jsoup.parser.TokeniserState$6",
215:       "org.jsoup.parser.TokeniserState$5",
216:       "org.jsoup.parser.TokeniserState$4",
217:       "org.jsoup.select.QueryParser",
218:       "org.jsoup.parser.TokeniserState$3",
219:       "org.jsoup.nodes.NodeUtils",
220:       "org.jsoup.select.Evaluator$Matches",
221:       "org.jsoup.select.Evaluator$IsOnlyChild",
222:       "org.jsoup.parser.TokeniserState$16",
223:       "org.jsoup.parser.TokeniserState$17",
224:       "org.jsoup.parser.TokeniserState$18",
225:       "org.jsoup.nodes.Entities$1",
226:       "org.jsoup.parser.TokeniserState$19",
227:       "org.jsoup.parser.TokeniserState$23",
228:       "org.jsoup.UncheckedIOException",
229:       "org.jsoup.parser.TokeniserState$24",
230:       "org.jsoup.parser.TokeniserState$25",
231:       "org.jsoup.parser.TokeniserState$26",
232:       "org.jsoup.parser.TokeniserState$20",
233:       "org.jsoup.parser.TokeniserState$21",
234:       "org.jsoup.parser.TokeniserState$22",
235:       "org.jsoup.parser.TokenQueue",
236:       "org.jsoup.parser.ParseSettings",
237:       "org.jsoup.select.NodeFilter",
238:       "org.jsoup.select.Evaluator$ContainsOwnText",
239:       "org.jsoup.parser.TokeniserState$27",
240:       "org.jsoup.parser.TokeniserState",
241:       "org.jsoup.parser.TokeniserState$28",
242:       "org.jsoup.parser.TokeniserState$29",
243:       "org.jsoup.parser.TokeniserState$34",
244:       "org.jsoup.select.Evaluator$IndexLessThan",
245:       "org.jsoup.parser.TokeniserState$35",
246:       "org.jsoup.parser.TokeniserState$36",
247:       "org.jsoup.parser.TokeniserState$37",
248:       "org.jsoup.parser.TokeniserState$30",
249:       "org.jsoup.parser.TokeniserState$31",
250:       "org.jsoup.parser.TokeniserState$32",
251:       "org.jsoup.parser.TokeniserState$33",
252:       "org.jsoup.nodes.Entities$EscapeMode",
253:       "org.jsoup.select.Evaluator$MatchText",
254:       "org.jsoup.select.Evaluator",
255:       "org.jsoup.Connection",
256:       "org.jsoup.select.Evaluator$IsRoot",
257:       "org.jsoup.parser.TokeniserState$38",
258:       "org.jsoup.parser.TokeniserState$39",
259:       "org.jsoup.nodes.CDataNode",
260:       "org.jsoup.parser.TokeniserState$45",
261:       "org.jsoup.parser.TokeniserState$46",
262:       "org.jsoup.parser.TokeniserState$47",
263:       "org.jsoup.select.StructuralEvaluator$Parent",
264:       "org.jsoup.parser.TokeniserState$48",
265:       "org.jsoup.select.Evaluator$IsLastChild",
266:       "org.jsoup.parser.TokeniserState$41",
267:       "org.jsoup.select.Evaluator$IsNthLastChild",
268:       "org.jsoup.parser.TokeniserState$42",
269:       "org.jsoup.parser.TokeniserState$43",
270:       "org.jsoup.parser.TokeniserState$44",
271:       "org.jsoup.parser.TokeniserState$40",
272:       "org.jsoup.parser.Token$TokenType",
273:       "org.jsoup.parser.HtmlTreeBuilderState$2",
274:       "org.jsoup.parser.HtmlTreeBuilderState$1",
275:       "org.jsoup.parser.HtmlTreeBuilderState$4",
276:       "org.jsoup.nodes.Attribute",
277:       "org.jsoup.parser.HtmlTreeBuilderState$3",
278:       "org.jsoup.parser.HtmlTreeBuilderState$9",
279:       "org.jsoup.parser.TokeniserState$49",
280:       "org.jsoup.parser.HtmlTreeBuilderState$6",
281:       "org.jsoup.parser.HtmlTreeBuilderState$5",
282:       "org.jsoup.parser.HtmlTreeBuilderState$8",
283:       "org.jsoup.parser.HtmlTreeBuilderState$7"
284:     );
285:   } 
286:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
287:     mock(Class.forName("java.util.Comparator", false, Element_296_tmp__ESTest_scaffolding.class.getClassLoader()));
288:   }
289: 
290:   private static void resetClasses() {
291:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Element_296_tmp__ESTest_scaffolding.class.getClassLoader()); 
292: 
293:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
294:       "org.jsoup.nodes.Node",
295:       "org.jsoup.nodes.Element",
296:       "org.jsoup.helper.ChangeNotifyingArrayList",
297:       "org.jsoup.nodes.Element$NodeList",
298:       "org.jsoup.nodes.Element$1",
299:       "org.jsoup.nodes.Element$2",
300:       "org.jsoup.helper.Validate",
301:       "org.jsoup.parser.Tag",
302:       "org.jsoup.parser.ParseSettings",
303:       "org.jsoup.select.NodeFilter$FilterResult",
304:       "org.jsoup.internal.StringUtil",
305:       "org.jsoup.nodes.Document$OutputSettings$Syntax",
306:       "org.jsoup.parser.Parser",
307:       "org.jsoup.parser.TreeBuilder",
308:       "org.jsoup.parser.HtmlTreeBuilder",
309:       "org.jsoup.parser.Token",
310:       "org.jsoup.parser.Token$Tag",
311:       "org.jsoup.parser.Token$StartTag",
312:       "org.jsoup.nodes.Attributes",
313:       "org.jsoup.parser.Token$TokenType",
314:       "org.jsoup.parser.Token$EndTag",
315:       "org.jsoup.parser.ParseErrorList",
316:       "org.jsoup.nodes.Document",
317:       "org.jsoup.internal.Normalizer",
318:       "org.jsoup.parser.Tokeniser",
319:       "org.jsoup.parser.TokeniserState",
320:       "org.jsoup.parser.Token$Character",
321:       "org.jsoup.parser.Token$Doctype",
322:       "org.jsoup.parser.Token$Comment",
323:       "org.jsoup.parser.HtmlTreeBuilderState",
324:       "org.jsoup.parser.Token$EOF",
325:       "org.jsoup.nodes.Node$OuterHtmlVisitor",
326:       "org.jsoup.nodes.NodeUtils",
327:       "org.jsoup.nodes.Entities$CoreCharset",
328:       "org.jsoup.select.NodeTraversor",
329:       "org.jsoup.parser.HtmlTreeBuilderState$24",
330:       "org.jsoup.select.Evaluator",
331:       "org.jsoup.select.Evaluator$AttributeKeyPair",
332:       "org.jsoup.select.Evaluator$AttributeWithValue",
333:       "org.jsoup.nodes.LeafNode",
334:       "org.jsoup.nodes.TextNode",
335:       "org.jsoup.nodes.Entities$1",
336:       "org.jsoup.select.Evaluator$Tag",
337:       "org.jsoup.select.Collector",
338:       "org.jsoup.select.Elements",
339:       "org.jsoup.select.Collector$Accumulator",
340:       "org.jsoup.select.Evaluator$AttributeWithValueMatching",
341:       "org.jsoup.nodes.Attributes$Dataset",
342:       "org.jsoup.nodes.Attribute",
343:       "org.jsoup.select.Evaluator$AttributeWithValueContaining",
344:       "org.jsoup.select.Evaluator$MatchesOwn",
345:       "org.jsoup.parser.XmlTreeBuilder",
346:       "org.jsoup.parser.XmlTreeBuilder$1",
347:       "org.jsoup.select.Evaluator$AttributeWithValueNot",
348:       "org.jsoup.nodes.Attributes$Dataset$EntrySet",
349:       "org.jsoup.nodes.Attributes$Dataset$DatasetIterator",
350:       "org.jsoup.nodes.Attributes$1",
351:       "org.jsoup.select.Selector",
352:       "org.jsoup.select.QueryParser",
353:       "org.jsoup.parser.TokenQueue",
354:       "org.jsoup.select.Evaluator$Class",
355:       "org.jsoup.select.Selector$SelectorParseException",
356:       "org.jsoup.nodes.FormElement",
357:       "org.jsoup.select.Evaluator$Matches",
358:       "org.jsoup.select.Evaluator$IndexEvaluator",
359:       "org.jsoup.select.Evaluator$IndexEquals",
360:       "org.jsoup.select.Evaluator$AllElements",
361:       "org.jsoup.select.Evaluator$IsOnlyChild",
362:       "org.jsoup.select.StructuralEvaluator$Root",
363:       "org.jsoup.select.Evaluator$IndexLessThan",
364:       "org.jsoup.select.Evaluator$ContainsText",
365:       "org.jsoup.select.Evaluator$AttributeStarting",
366:       "org.jsoup.nodes.Comment",
367:       "org.jsoup.select.Evaluator$IsOnlyOfType",
368:       "org.jsoup.select.Evaluator$IndexGreaterThan",
369:       "org.jsoup.nodes.CDataNode",
370:       "org.jsoup.select.Collector$FirstFinder",
371:       "org.jsoup.select.Evaluator$Id",
372:       "org.jsoup.nodes.Node$1",
373:       "org.jsoup.select.Evaluator$ContainsOwnText",
374:       "org.jsoup.nodes.DocumentType",
375:       "org.jsoup.parser.HtmlTreeBuilderState$Constants",
376:       "org.jsoup.nodes.PseudoTextElement",
377:       "org.jsoup.Connection$Method",
378:       "org.jsoup.Jsoup",
379:       "org.jsoup.helper.HttpConnection",
380:       "org.jsoup.helper.HttpConnection$Base",
381:       "org.jsoup.helper.HttpConnection$Request",
382:       "org.jsoup.helper.HttpConnection$Response",
383:       "org.jsoup.select.Evaluator$AttributeWithValueStarting",
384:       "org.jsoup.select.CombiningEvaluator",
385:       "org.jsoup.select.CombiningEvaluator$And",
386:       "org.jsoup.select.StructuralEvaluator",
387:       "org.jsoup.select.StructuralEvaluator$ImmediateParent",
388:       "org.jsoup.select.StructuralEvaluator$Parent",
389:       "org.jsoup.nodes.XmlDeclaration",
390:       "org.jsoup.select.Evaluator$IsRoot",
391:       "org.jsoup.nodes.DataNode",
392:       "org.jsoup.select.Evaluator$Attribute",
393:       "org.jsoup.select.Evaluator$AttributeWithValueEnding",
394:       "org.jsoup.select.Evaluator$IsFirstChild",
395:       "org.jsoup.select.Evaluator$CssNthEvaluator",
396:       "org.jsoup.select.Evaluator$IsNthLastOfType",
397:       "org.jsoup.select.Evaluator$IsLastOfType",
398:       "org.jsoup.select.StructuralEvaluator$PreviousSibling",
399:       "org.jsoup.select.CombiningEvaluator$Or",
400:       "org.jsoup.nodes.BooleanAttribute",
401:       "org.jsoup.SerializationException",
402:       "org.jsoup.select.Evaluator$TagEndsWith",
403:       "org.jsoup.select.Evaluator$IsNthChild",
404:       "org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling",
405:       "org.jsoup.select.Evaluator$IsLastChild",
406:       "org.jsoup.select.Evaluator$ContainsData",
407:       "org.jsoup.parser.ParseError",
408:       "org.jsoup.select.Evaluator$IsNthLastChild",
409:       "org.jsoup.select.Evaluator$MatchText",
410:       "org.jsoup.select.Evaluator$IsNthOfType",
411:       "org.jsoup.select.Evaluator$IsFirstOfType"
412:     );
413:   }
414: }

[MASTER] 22:28:17.542 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
assertFalse(boolean0);

Document document0 = Parser.parseBodyFragmentRelaxed("            ", "            ");
assertNotNull(document0);
assertFalse(document0.updateMetaCharsetElement());
assertEquals(1, document0.childNodeSize());
assertEquals("#document", document0.nodeName());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.hasParent());
assertFalse(document0.isBlock());
assertEquals("            ", document0.baseUri());
assertEquals("#root", document0.tagName());
assertEquals(0, document0.siblingIndex());
assertEquals("            ", document0.location());

Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, Integer>> comparator1 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

Element element0 = document0.head();
assertNotNull(element0);
assertFalse(document0.updateMetaCharsetElement());
assertEquals(1, document0.childNodeSize());
assertEquals("#document", document0.nodeName());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.hasParent());
assertFalse(document0.isBlock());
assertEquals("            ", document0.baseUri());
assertEquals("#root", document0.tagName());
assertEquals(0, document0.siblingIndex());
assertEquals("            ", document0.location());
assertTrue(element0.hasParent());
assertEquals("head", element0.nodeName());
assertEquals("head", element0.tagName());
assertTrue(element0.isBlock());
assertEquals(0, element0.childNodeSize());
assertEquals("            ", element0.baseUri());
assertEquals(0, element0.siblingIndex());

Element element1 = element0.appendElement("title");
assertNotNull(element1);
assertFalse(element1.equals((Object)element0));
assertFalse(document0.updateMetaCharsetElement());
assertEquals(1, document0.childNodeSize());
assertEquals("#document", document0.nodeName());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.hasParent());
assertFalse(document0.isBlock());
assertEquals("            ", document0.baseUri());
assertEquals("#root", document0.tagName());
assertEquals(0, document0.siblingIndex());
assertEquals("            ", document0.location());
assertTrue(element0.hasParent());
assertEquals("head", element0.nodeName());
assertEquals("head", element0.tagName());
assertTrue(element0.isBlock());
assertEquals("            ", element0.baseUri());
assertEquals(1, element0.childNodeSize());
assertEquals(0, element0.siblingIndex());
assertEquals(0, element1.siblingIndex());
assertEquals("title", element1.nodeName());
assertEquals(0, element1.childNodeSize());
assertTrue(element1.hasParent());
assertEquals("            ", element1.baseUri());
assertTrue(element1.isBlock());
assertEquals("title", element1.tagName());
assertNotSame(element0, element1);
assertNotSame(element1, element0);

Element element2 = element1.getElementById("title");
assertNull(element2);
assertFalse(element0.equals((Object)element1));
assertFalse(element1.equals((Object)element0));
assertFalse(document0.updateMetaCharsetElement());
assertEquals(1, document0.childNodeSize());
assertEquals("#document", document0.nodeName());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.hasParent());
assertFalse(document0.isBlock());
assertEquals("            ", document0.baseUri());
assertEquals("#root", document0.tagName());
assertEquals(0, document0.siblingIndex());
assertEquals("            ", document0.location());
assertTrue(element0.hasParent());
assertEquals("head", element0.nodeName());
assertEquals("head", element0.tagName());
assertTrue(element0.isBlock());
assertEquals("            ", element0.baseUri());
assertEquals(1, element0.childNodeSize());
assertEquals(0, element0.siblingIndex());
assertEquals(0, element1.siblingIndex());
assertEquals("title", element1.nodeName());
assertEquals(0, element1.childNodeSize());
assertTrue(element1.hasParent());
assertEquals("            ", element1.baseUri());
assertTrue(element1.isBlock());
assertEquals("title", element1.tagName());
assertNotSame(element0, element1);
assertNotSame(element1, element0);

Element element3 = element0.prepend("title");
assertNotNull(element3);
assertFalse(element0.equals((Object)element1));
assertFalse(element3.equals((Object)element1));
assertFalse(document0.updateMetaCharsetElement());
assertEquals(1, document0.childNodeSize());
assertEquals("#document", document0.nodeName());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.hasParent());
assertFalse(document0.isBlock());
assertEquals("            ", document0.baseUri());
assertEquals("#root", document0.tagName());
assertEquals(0, document0.siblingIndex());
assertEquals("            ", document0.location());
assertTrue(element0.hasParent());
assertEquals("head", element0.nodeName());
assertEquals(2, element0.childNodeSize());
assertEquals("head", element0.tagName());
assertTrue(element0.isBlock());
assertEquals("            ", element0.baseUri());
assertEquals(0, element0.siblingIndex());
assertEquals("head", element3.nodeName());
assertEquals(0, element3.siblingIndex());
assertEquals("            ", element3.baseUri());
assertEquals("head", element3.tagName());
assertTrue(element3.hasParent());
assertTrue(element3.isBlock());
assertEquals(2, element3.childNodeSize());
assertNotSame(element0, element1);
assertSame(element0, element3);
assertSame(element3, element0);
assertNotSame(element3, element1);

Charset charset0 = document0.charset();
assertNotNull(charset0);
assertFalse(document0.updateMetaCharsetElement());
assertEquals(1, document0.childNodeSize());
assertEquals("#document", document0.nodeName());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.hasParent());
assertFalse(document0.isBlock());
assertEquals("            ", document0.baseUri());
assertEquals("#root", document0.tagName());
assertEquals(0, document0.siblingIndex());
assertEquals("            ", document0.location());
assertTrue(charset0.canEncode());
assertEquals("UTF-8", charset0.toString());
assertEquals("UTF-8", charset0.displayName());
assertTrue(charset0.isRegistered());
assertEquals("UTF-8", charset0.name());

Set<String> set0 = charset0.aliases();
assertNotNull(set0);
assertFalse(document0.updateMetaCharsetElement());
assertEquals(1, document0.childNodeSize());
assertEquals("#document", document0.nodeName());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.hasParent());
assertFalse(document0.isBlock());
assertEquals("            ", document0.baseUri());
assertEquals("#root", document0.tagName());
assertEquals(0, document0.siblingIndex());
assertEquals("            ", document0.location());
assertTrue(charset0.canEncode());
assertEquals("UTF-8", charset0.toString());
assertEquals("UTF-8", charset0.displayName());
assertTrue(charset0.isRegistered());
assertEquals("UTF-8", charset0.name());
assertEquals(2, set0.size());
assertFalse(set0.isEmpty());
assertFalse(set0.contains("title"));

Element element4 = element1.classNames(set0);
assertNotNull(element4);
assertFalse(element0.equals((Object)element1));
assertFalse(element1.equals((Object)element0));
assertFalse(element1.equals((Object)element3));
assertFalse(element4.equals((Object)element0));
assertFalse(element4.equals((Object)element3));
assertFalse(document0.updateMetaCharsetElement());
assertEquals(1, document0.childNodeSize());
assertEquals("#document", document0.nodeName());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.hasParent());
assertFalse(document0.isBlock());
assertEquals("            ", document0.baseUri());
assertEquals("#root", document0.tagName());
assertEquals(0, document0.siblingIndex());
assertEquals("            ", document0.location());
assertTrue(element0.hasParent());
assertEquals("head", element0.nodeName());
assertEquals(2, element0.childNodeSize());
assertEquals("head", element0.tagName());
assertTrue(element0.isBlock());
assertEquals("            ", element0.baseUri());
assertEquals(0, element0.siblingIndex());
assertEquals("title", element1.nodeName());
assertEquals(0, element1.childNodeSize());
assertTrue(element1.hasParent());
assertEquals(1, element1.siblingIndex());
assertEquals("            ", element1.baseUri());
assertTrue(element1.isBlock());
assertEquals("title", element1.tagName());
assertTrue(charset0.canEncode());
assertEquals("UTF-8", charset0.toString());
assertEquals("UTF-8", charset0.displayName());
assertTrue(charset0.isRegistered());
assertEquals("UTF-8", charset0.name());
assertEquals(2, set0.size());
assertFalse(set0.isEmpty());
assertEquals("title", element4.tagName());
assertTrue(element4.hasParent());
assertTrue(element4.isBlock());
assertEquals("title", element4.nodeName());
assertEquals(0, element4.childNodeSize());
assertEquals("            ", element4.baseUri());
assertEquals(1, element4.siblingIndex());
assertFalse(set0.contains("title"));
assertNotSame(element0, element4);
assertNotSame(element0, element1);
assertSame(element0, element3);
assertNotSame(element1, element0);
assertSame(element1, element4);
assertNotSame(element1, element3);
assertNotSame(element4, element0);
assertNotSame(element4, element3);
assertSame(element4, element1);


[MASTER] 22:28:25.327 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 22:28:25.761 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 22:28:26.031 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 22:28:40.425 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.jsoup.nodes.Element_435_tmp__ESTest.test0(Element_435_tmp__ESTest.java:133)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:28:40.428 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParseSettings parseSettings0 = ParseSettings.preserveCase;
assertNotNull(parseSettings0);

Tag tag0 = Tag.valueOf("[Rq", parseSettings0);
assertNotNull(tag0);
assertEquals("[Rq", tag0.toString());
assertEquals("[Rq", tag0.getName());
assertFalse(tag0.isBlock());
assertFalse(tag0.preserveWhitespace());
assertFalse(tag0.isSelfClosing());
assertTrue(tag0.isInline());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isFormListed());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isData());
assertFalse(tag0.isKnownTag());

Attributes attributes0 = new Attributes();
assertNotNull(attributes0);
assertEquals(0, attributes0.size());

FormElement formElement0 = new FormElement(tag0, "[Rq", attributes0);
assertNotNull(formElement0);
assertEquals("[Rq", tag0.toString());
assertEquals("[Rq", tag0.getName());
assertFalse(tag0.isBlock());
assertFalse(tag0.preserveWhitespace());
assertFalse(tag0.isSelfClosing());
assertTrue(tag0.isInline());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isFormListed());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isData());
assertFalse(tag0.isKnownTag());
assertEquals(0, attributes0.size());
assertEquals("[Rq", formElement0.tagName());
assertFalse(formElement0.hasParent());
assertEquals("[Rq", formElement0.nodeName());
assertEquals("[Rq", formElement0.baseUri());
assertFalse(formElement0.isBlock());
assertEquals(0, formElement0.siblingIndex());
assertEquals(0, formElement0.childNodeSize());

Elements elements0 = formElement0.getElementsContainingText("[Rq");
assertNotNull(elements0);
assertEquals("[Rq", tag0.toString());
assertEquals("[Rq", tag0.getName());
assertFalse(tag0.isBlock());
assertFalse(tag0.preserveWhitespace());
assertFalse(tag0.isSelfClosing());
assertTrue(tag0.isInline());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isFormListed());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isData());
assertFalse(tag0.isKnownTag());
assertEquals(0, attributes0.size());
assertEquals("[Rq", formElement0.tagName());
assertFalse(formElement0.hasParent());
assertEquals("[Rq", formElement0.nodeName());
assertEquals("[Rq", formElement0.baseUri());
assertFalse(formElement0.isBlock());
assertEquals(0, formElement0.siblingIndex());
assertEquals(0, formElement0.childNodeSize());
assertEquals(0, elements0.size());
assertTrue(elements0.isEmpty());

String string0 = formElement0.cssSelector();
assertNotNull(string0);
assertEquals("[Rq", string0);
assertEquals("[Rq", tag0.toString());
assertEquals("[Rq", tag0.getName());
assertFalse(tag0.isBlock());
assertFalse(tag0.preserveWhitespace());
assertFalse(tag0.isSelfClosing());
assertTrue(tag0.isInline());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isFormListed());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isData());
assertFalse(tag0.isKnownTag());
assertEquals(0, attributes0.size());
assertEquals("[Rq", formElement0.tagName());
assertFalse(formElement0.hasParent());
assertEquals("[Rq", formElement0.nodeName());
assertEquals("[Rq", formElement0.baseUri());
assertFalse(formElement0.isBlock());
assertEquals(0, formElement0.siblingIndex());
assertEquals(0, formElement0.childNodeSize());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
assertNotNull(mockPrintWriter0);

Object[] objectArray0 = new Object[4];
objectArray0[0] = (Object) mockPrintWriter0;
objectArray0[1] = (Object) "[Rq";
Object object0 = new Object();
assertNotNull(object0);

FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
assertNotNull(fileChannel0);
assertFalse(fileDescriptor0.valid());
assertEquals(0L, fileChannel0.position());
assertTrue(fileChannel0.isOpen());

objectArray0[2] = object0;
objectArray0[3] = (Object) "[Rq";
PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
assertNotNull(printWriter0);
assertFalse(fileDescriptor0.valid());
assertSame(printWriter0, mockPrintWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertEquals(4, objectArray0.length);

BufferedWriter bufferedWriter0 = new BufferedWriter(printWriter0, 3654);
assertNotNull(bufferedWriter0);
assertFalse(fileDescriptor0.valid());
assertEquals(4, objectArray0.length);

BufferedWriter bufferedWriter1 = formElement0.html(bufferedWriter0);
assertNotNull(bufferedWriter1);
assertEquals("[Rq", tag0.toString());
assertEquals("[Rq", tag0.getName());
assertFalse(tag0.isBlock());
assertFalse(tag0.preserveWhitespace());
assertFalse(tag0.isSelfClosing());
assertTrue(tag0.isInline());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isFormListed());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isData());
assertFalse(tag0.isKnownTag());
assertEquals(0, attributes0.size());
assertEquals("[Rq", formElement0.tagName());
assertFalse(formElement0.hasParent());
assertEquals("[Rq", formElement0.nodeName());
assertEquals("[Rq", formElement0.baseUri());
assertFalse(formElement0.isBlock());
assertEquals(0, formElement0.siblingIndex());
assertEquals(0, formElement0.childNodeSize());
assertFalse(fileDescriptor0.valid());
assertSame(printWriter0, mockPrintWriter0);
assertSame(bufferedWriter0, bufferedWriter1);
assertSame(bufferedWriter1, bufferedWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertEquals(4, objectArray0.length);

Elements elements1 = formElement0.getElementsMatchingText("");
assertNotNull(elements1);
assertFalse(elements1.equals((Object)elements0));
assertEquals("[Rq", tag0.toString());
assertEquals("[Rq", tag0.getName());
assertFalse(tag0.isBlock());
assertFalse(tag0.preserveWhitespace());
assertFalse(tag0.isSelfClosing());
assertTrue(tag0.isInline());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isFormListed());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isData());
assertFalse(tag0.isKnownTag());
assertEquals(0, attributes0.size());
assertFalse(elements1.isEmpty());
assertEquals(1, elements1.size());
assertEquals("[Rq", formElement0.tagName());
assertFalse(formElement0.hasParent());
assertEquals("[Rq", formElement0.nodeName());
assertEquals("[Rq", formElement0.baseUri());
assertFalse(formElement0.isBlock());
assertEquals(0, formElement0.siblingIndex());
assertEquals(0, formElement0.childNodeSize());
assertNotSame(elements1, elements0);

String string1 = formElement0.ownText();
assertNotNull(string1);
assertEquals("", string1);
assertFalse(string1.equals((Object)string0));
assertEquals("[Rq", tag0.toString());
assertEquals("[Rq", tag0.getName());
assertFalse(tag0.isBlock());
assertFalse(tag0.preserveWhitespace());
assertFalse(tag0.isSelfClosing());
assertTrue(tag0.isInline());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isFormListed());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isData());
assertFalse(tag0.isKnownTag());
assertEquals(0, attributes0.size());
assertEquals("[Rq", formElement0.tagName());
assertFalse(formElement0.hasParent());
assertEquals("[Rq", formElement0.nodeName());
assertEquals("[Rq", formElement0.baseUri());
assertFalse(formElement0.isBlock());
assertEquals(0, formElement0.siblingIndex());
assertEquals(0, formElement0.childNodeSize());

Element element0 = formElement0.attr("", true);
assertNotNull(element0);
assertEquals("[Rq", tag0.toString());
assertEquals("[Rq", tag0.getName());
assertFalse(tag0.isBlock());
assertFalse(tag0.preserveWhitespace());
assertFalse(tag0.isSelfClosing());
assertTrue(tag0.isInline());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isFormListed());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isData());
assertFalse(tag0.isKnownTag());
assertEquals(1, attributes0.size());
assertEquals("[Rq", formElement0.tagName());
assertFalse(formElement0.hasParent());
assertEquals("[Rq", formElement0.nodeName());
assertEquals("[Rq", formElement0.baseUri());
assertFalse(formElement0.isBlock());
assertEquals(0, formElement0.siblingIndex());
assertEquals(0, formElement0.childNodeSize());
assertEquals(0, element0.siblingIndex());
assertEquals("[Rq", element0.baseUri());
assertFalse(element0.isBlock());
assertEquals("[Rq", element0.nodeName());
assertFalse(element0.hasParent());
assertEquals("[Rq", element0.tagName());
assertEquals(0, element0.childNodeSize());
assertSame(formElement0, element0);
assertSame(element0, formElement0);


[MASTER] 22:28:44.267 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.jsoup.nodes.Element_438_tmp__ESTest.test0(Element_438_tmp__ESTest.java:133)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:28:44.272 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParseSettings parseSettings0 = ParseSettings.preserveCase;
assertNotNull(parseSettings0);

Tag tag0 = Tag.valueOf("[Rq", parseSettings0);
assertNotNull(tag0);
assertFalse(tag0.isData());
assertEquals("[Rq", tag0.toString());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.isFormListed());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.isEmpty());
assertFalse(tag0.canContainBlock());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.preserveWhitespace());
assertFalse(tag0.isBlock());
assertTrue(tag0.isInline());
assertEquals("[Rq", tag0.getName());

Attributes attributes0 = new Attributes();
assertNotNull(attributes0);
assertEquals(0, attributes0.size());

FormElement formElement0 = new FormElement(tag0, "[Rq", attributes0);
assertNotNull(formElement0);
assertFalse(tag0.isData());
assertEquals("[Rq", tag0.toString());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.isFormListed());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.isEmpty());
assertFalse(tag0.canContainBlock());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.preserveWhitespace());
assertFalse(tag0.isBlock());
assertTrue(tag0.isInline());
assertEquals("[Rq", tag0.getName());
assertEquals(0, attributes0.size());
assertEquals("[Rq", formElement0.tagName());
assertEquals("[Rq", formElement0.baseUri());
assertEquals(0, formElement0.childNodeSize());
assertEquals(0, formElement0.siblingIndex());
assertFalse(formElement0.hasParent());
assertFalse(formElement0.isBlock());
assertEquals("[Rq", formElement0.nodeName());

Elements elements0 = formElement0.getElementsContainingText("[Rq");
assertNotNull(elements0);
assertFalse(tag0.isData());
assertEquals("[Rq", tag0.toString());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.isFormListed());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.isEmpty());
assertFalse(tag0.canContainBlock());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.preserveWhitespace());
assertFalse(tag0.isBlock());
assertTrue(tag0.isInline());
assertEquals("[Rq", tag0.getName());
assertEquals(0, attributes0.size());
assertEquals("[Rq", formElement0.tagName());
assertEquals("[Rq", formElement0.baseUri());
assertEquals(0, formElement0.childNodeSize());
assertEquals(0, formElement0.siblingIndex());
assertFalse(formElement0.hasParent());
assertFalse(formElement0.isBlock());
assertEquals("[Rq", formElement0.nodeName());
assertTrue(elements0.isEmpty());
assertEquals(0, elements0.size());

String string0 = formElement0.cssSelector();
assertNotNull(string0);
assertEquals("[Rq", string0);
assertFalse(tag0.isData());
assertEquals("[Rq", tag0.toString());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.isFormListed());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.isEmpty());
assertFalse(tag0.canContainBlock());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.preserveWhitespace());
assertFalse(tag0.isBlock());
assertTrue(tag0.isInline());
assertEquals("[Rq", tag0.getName());
assertEquals(0, attributes0.size());
assertEquals("[Rq", formElement0.tagName());
assertEquals("[Rq", formElement0.baseUri());
assertEquals(0, formElement0.childNodeSize());
assertEquals(0, formElement0.siblingIndex());
assertFalse(formElement0.hasParent());
assertFalse(formElement0.isBlock());
assertEquals("[Rq", formElement0.nodeName());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
assertNotNull(mockPrintWriter0);

Object[] objectArray0 = new Object[4];
objectArray0[0] = (Object) mockPrintWriter0;
objectArray0[1] = (Object) "[Rq";
Object object0 = new Object();
assertNotNull(object0);

FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
assertNotNull(fileChannel0);
assertFalse(fileDescriptor0.valid());
assertTrue(fileChannel0.isOpen());
assertEquals(0L, fileChannel0.position());

objectArray0[2] = object0;
objectArray0[3] = (Object) "[Rq";
PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
assertNotNull(printWriter0);
assertFalse(fileDescriptor0.valid());
assertSame(printWriter0, mockPrintWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertEquals(4, objectArray0.length);

BufferedWriter bufferedWriter0 = new BufferedWriter(printWriter0, 3654);
assertNotNull(bufferedWriter0);
assertFalse(fileDescriptor0.valid());
assertEquals(4, objectArray0.length);

BufferedWriter bufferedWriter1 = formElement0.html(bufferedWriter0);
assertNotNull(bufferedWriter1);
assertFalse(tag0.isData());
assertEquals("[Rq", tag0.toString());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.isFormListed());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.isEmpty());
assertFalse(tag0.canContainBlock());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.preserveWhitespace());
assertFalse(tag0.isBlock());
assertTrue(tag0.isInline());
assertEquals("[Rq", tag0.getName());
assertEquals(0, attributes0.size());
assertEquals("[Rq", formElement0.tagName());
assertEquals("[Rq", formElement0.baseUri());
assertEquals(0, formElement0.childNodeSize());
assertEquals(0, formElement0.siblingIndex());
assertFalse(formElement0.hasParent());
assertFalse(formElement0.isBlock());
assertEquals("[Rq", formElement0.nodeName());
assertFalse(fileDescriptor0.valid());
assertSame(printWriter0, mockPrintWriter0);
assertSame(bufferedWriter0, bufferedWriter1);
assertSame(bufferedWriter1, bufferedWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertEquals(4, objectArray0.length);

Elements elements1 = formElement0.getElementsMatchingText("");
assertNotNull(elements1);
assertFalse(elements1.equals((Object)elements0));
assertFalse(tag0.isData());
assertEquals("[Rq", tag0.toString());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.isFormListed());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.isEmpty());
assertFalse(tag0.canContainBlock());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.preserveWhitespace());
assertFalse(tag0.isBlock());
assertTrue(tag0.isInline());
assertEquals("[Rq", tag0.getName());
assertEquals(0, attributes0.size());
assertEquals(1, elements1.size());
assertFalse(elements1.isEmpty());
assertEquals("[Rq", formElement0.tagName());
assertEquals("[Rq", formElement0.baseUri());
assertEquals(0, formElement0.childNodeSize());
assertEquals(0, formElement0.siblingIndex());
assertFalse(formElement0.hasParent());
assertFalse(formElement0.isBlock());
assertEquals("[Rq", formElement0.nodeName());
assertNotSame(elements1, elements0);

String string1 = formElement0.ownText();
assertNotNull(string1);
assertEquals("", string1);
assertFalse(string1.equals((Object)string0));
assertFalse(tag0.isData());
assertEquals("[Rq", tag0.toString());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.isFormListed());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.isEmpty());
assertFalse(tag0.canContainBlock());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.preserveWhitespace());
assertFalse(tag0.isBlock());
assertTrue(tag0.isInline());
assertEquals("[Rq", tag0.getName());
assertEquals(0, attributes0.size());
assertEquals("[Rq", formElement0.tagName());
assertEquals("[Rq", formElement0.baseUri());
assertEquals(0, formElement0.childNodeSize());
assertEquals(0, formElement0.siblingIndex());
assertFalse(formElement0.hasParent());
assertFalse(formElement0.isBlock());
assertEquals("[Rq", formElement0.nodeName());

Element element0 = formElement0.attr("", true);
assertNotNull(element0);
assertFalse(tag0.isData());
assertEquals("[Rq", tag0.toString());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.isFormListed());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.isEmpty());
assertFalse(tag0.canContainBlock());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.preserveWhitespace());
assertFalse(tag0.isBlock());
assertTrue(tag0.isInline());
assertEquals("[Rq", tag0.getName());
assertEquals(1, attributes0.size());
assertEquals("[Rq", formElement0.tagName());
assertEquals("[Rq", formElement0.baseUri());
assertEquals(0, formElement0.childNodeSize());
assertEquals(0, formElement0.siblingIndex());
assertFalse(formElement0.hasParent());
assertFalse(formElement0.isBlock());
assertEquals("[Rq", formElement0.nodeName());
assertFalse(element0.isBlock());
assertEquals(0, element0.siblingIndex());
assertEquals("[Rq", element0.baseUri());
assertFalse(element0.hasParent());
assertEquals("[Rq", element0.nodeName());
assertEquals("[Rq", element0.tagName());
assertEquals(0, element0.childNodeSize());
assertSame(formElement0, element0);
assertSame(element0, formElement0);

Element element1 = formElement0.addClass("");
assertNotNull(element1);
assertFalse(tag0.isData());
assertEquals("[Rq", tag0.toString());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.isFormListed());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.isEmpty());
assertFalse(tag0.canContainBlock());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.preserveWhitespace());
assertFalse(tag0.isBlock());
assertTrue(tag0.isInline());
assertEquals("[Rq", tag0.getName());
assertEquals(2, attributes0.size());
assertEquals("[Rq", formElement0.tagName());
assertEquals("[Rq", formElement0.baseUri());
assertEquals(0, formElement0.childNodeSize());
assertEquals(0, formElement0.siblingIndex());
assertFalse(formElement0.hasParent());
assertFalse(formElement0.isBlock());
assertEquals("[Rq", formElement0.nodeName());
assertEquals("[Rq", element1.tagName());
assertFalse(element1.hasParent());
assertEquals("[Rq", element1.nodeName());
assertEquals("[Rq", element1.baseUri());
assertFalse(element1.isBlock());
assertEquals(0, element1.childNodeSize());
assertEquals(0, element1.siblingIndex());
assertSame(formElement0, element1);
assertSame(formElement0, element0);
assertSame(element1, element0);
assertSame(element1, formElement0);

Element element2 = element0.append("[Rq");
assertNotNull(element2);
assertFalse(tag0.isData());
assertEquals("[Rq", tag0.toString());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.isFormListed());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.isEmpty());
assertFalse(tag0.canContainBlock());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.preserveWhitespace());
assertFalse(tag0.isBlock());
assertTrue(tag0.isInline());
assertEquals("[Rq", tag0.getName());
assertEquals(2, attributes0.size());
assertEquals("[Rq", formElement0.tagName());
assertEquals("[Rq", formElement0.baseUri());
assertEquals(1, formElement0.childNodeSize());
assertEquals(0, formElement0.siblingIndex());
assertFalse(formElement0.hasParent());
assertFalse(formElement0.isBlock());
assertEquals("[Rq", formElement0.nodeName());
assertFalse(element0.isBlock());
assertEquals(0, element0.siblingIndex());
assertEquals("[Rq", element0.baseUri());
assertFalse(element0.hasParent());
assertEquals("[Rq", element0.nodeName());
assertEquals("[Rq", element0.tagName());
assertEquals(1, element0.childNodeSize());
assertEquals(0, element2.siblingIndex());
assertEquals("[Rq", element2.baseUri());
assertEquals("[Rq", element2.tagName());
assertFalse(element2.isBlock());
assertEquals("[Rq", element2.nodeName());
assertFalse(element2.hasParent());
assertEquals(1, element2.childNodeSize());
assertSame(formElement0, element1);
assertSame(formElement0, element2);
assertSame(formElement0, element0);
assertSame(element0, element2);
assertSame(element0, formElement0);
assertSame(element0, element1);
assertSame(element2, element1);
assertSame(element2, element0);
assertSame(element2, formElement0);


[MASTER] 22:28:47.852 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.jsoup.nodes.Element_440_tmp__ESTest.test0(Element_440_tmp__ESTest.java:133)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:28:47.861 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParseSettings parseSettings0 = ParseSettings.preserveCase;
assertNotNull(parseSettings0);

Tag tag0 = Tag.valueOf("[Rq", parseSettings0);
assertNotNull(tag0);
assertEquals("[Rq", tag0.toString());
assertEquals("[Rq", tag0.getName());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isFormListed());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.isData());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.isBlock());
assertFalse(tag0.preserveWhitespace());
assertTrue(tag0.isInline());

Attributes attributes0 = new Attributes();
assertNotNull(attributes0);
assertEquals(0, attributes0.size());

FormElement formElement0 = new FormElement(tag0, "[Rq", attributes0);
assertNotNull(formElement0);
assertEquals("[Rq", tag0.toString());
assertEquals("[Rq", tag0.getName());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isFormListed());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.isData());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.isBlock());
assertFalse(tag0.preserveWhitespace());
assertTrue(tag0.isInline());
assertEquals(0, attributes0.size());
assertEquals("[Rq", formElement0.baseUri());
assertEquals(0, formElement0.siblingIndex());
assertEquals(0, formElement0.childNodeSize());
assertEquals("[Rq", formElement0.tagName());
assertFalse(formElement0.hasParent());
assertFalse(formElement0.isBlock());
assertEquals("[Rq", formElement0.nodeName());

Elements elements0 = formElement0.getElementsContainingText("[Rq");
assertNotNull(elements0);
assertEquals("[Rq", tag0.toString());
assertEquals("[Rq", tag0.getName());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isFormListed());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.isData());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.isBlock());
assertFalse(tag0.preserveWhitespace());
assertTrue(tag0.isInline());
assertEquals(0, attributes0.size());
assertEquals("[Rq", formElement0.baseUri());
assertEquals(0, formElement0.siblingIndex());
assertEquals(0, formElement0.childNodeSize());
assertEquals("[Rq", formElement0.tagName());
assertFalse(formElement0.hasParent());
assertFalse(formElement0.isBlock());
assertEquals("[Rq", formElement0.nodeName());
assertTrue(elements0.isEmpty());
assertEquals(0, elements0.size());

String string0 = formElement0.cssSelector();
assertNotNull(string0);
assertEquals("[Rq", string0);
assertEquals("[Rq", tag0.toString());
assertEquals("[Rq", tag0.getName());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isFormListed());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.isData());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.isBlock());
assertFalse(tag0.preserveWhitespace());
assertTrue(tag0.isInline());
assertEquals(0, attributes0.size());
assertEquals("[Rq", formElement0.baseUri());
assertEquals(0, formElement0.siblingIndex());
assertEquals(0, formElement0.childNodeSize());
assertEquals("[Rq", formElement0.tagName());
assertFalse(formElement0.hasParent());
assertFalse(formElement0.isBlock());
assertEquals("[Rq", formElement0.nodeName());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
assertNotNull(mockPrintWriter0);

Object[] objectArray0 = new Object[4];
objectArray0[0] = (Object) mockPrintWriter0;
objectArray0[1] = (Object) "[Rq";
Tag tag1 = Tag.valueOf(")PVEw;}}g1oK[2x");
assertNotNull(tag1);
assertFalse(tag1.equals((Object)tag0));
assertTrue(tag1.formatAsBlock());
assertTrue(tag1.isInline());
assertFalse(tag1.isBlock());
assertFalse(tag1.canContainBlock());
assertFalse(tag1.isFormSubmittable());
assertFalse(tag1.isSelfClosing());
assertFalse(tag1.preserveWhitespace());
assertFalse(tag1.isData());
assertFalse(tag1.isEmpty());
assertFalse(tag1.isFormListed());
assertFalse(tag1.isKnownTag());
assertEquals(")PVEw;}}g1oK[2x", tag1.toString());
assertEquals(")PVEw;}}g1oK[2x", tag1.getName());
assertNotSame(tag1, tag0);

Object object0 = new Object();
assertNotNull(object0);

FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
assertNotNull(fileChannel0);
assertFalse(fileDescriptor0.valid());
assertEquals(0L, fileChannel0.position());
assertTrue(fileChannel0.isOpen());

objectArray0[2] = object0;
objectArray0[3] = (Object) "[Rq";
PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
assertNotNull(printWriter0);
assertFalse(fileDescriptor0.valid());
assertSame(printWriter0, mockPrintWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertEquals(4, objectArray0.length);

BufferedWriter bufferedWriter0 = new BufferedWriter(printWriter0, 3654);
assertNotNull(bufferedWriter0);
assertFalse(fileDescriptor0.valid());
assertEquals(4, objectArray0.length);

BufferedWriter bufferedWriter1 = formElement0.html(bufferedWriter0);
assertNotNull(bufferedWriter1);
assertFalse(tag0.equals((Object)tag1));
assertEquals("[Rq", tag0.toString());
assertEquals("[Rq", tag0.getName());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isFormListed());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.isData());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.isBlock());
assertFalse(tag0.preserveWhitespace());
assertTrue(tag0.isInline());
assertEquals(0, attributes0.size());
assertEquals("[Rq", formElement0.baseUri());
assertEquals(0, formElement0.siblingIndex());
assertEquals(0, formElement0.childNodeSize());
assertEquals("[Rq", formElement0.tagName());
assertFalse(formElement0.hasParent());
assertFalse(formElement0.isBlock());
assertEquals("[Rq", formElement0.nodeName());
assertFalse(fileDescriptor0.valid());
assertSame(printWriter0, mockPrintWriter0);
assertNotSame(tag0, tag1);
assertSame(bufferedWriter0, bufferedWriter1);
assertSame(bufferedWriter1, bufferedWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertEquals(4, objectArray0.length);

Elements elements1 = formElement0.getElementsMatchingText("");
assertNotNull(elements1);
assertFalse(tag0.equals((Object)tag1));
assertFalse(elements1.equals((Object)elements0));
assertEquals("[Rq", tag0.toString());
assertEquals("[Rq", tag0.getName());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isFormListed());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.isData());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.isBlock());
assertFalse(tag0.preserveWhitespace());
assertTrue(tag0.isInline());
assertEquals(0, attributes0.size());
assertEquals("[Rq", formElement0.baseUri());
assertEquals(0, formElement0.siblingIndex());
assertEquals(0, formElement0.childNodeSize());
assertEquals("[Rq", formElement0.tagName());
assertFalse(formElement0.hasParent());
assertFalse(formElement0.isBlock());
assertEquals("[Rq", formElement0.nodeName());
assertFalse(elements1.isEmpty());
assertEquals(1, elements1.size());
assertNotSame(tag0, tag1);
assertNotSame(elements1, elements0);

String string1 = formElement0.ownText();
assertNotNull(string1);
assertEquals("", string1);
assertFalse(tag0.equals((Object)tag1));
assertFalse(string1.equals((Object)string0));
assertEquals("[Rq", tag0.toString());
assertEquals("[Rq", tag0.getName());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isFormListed());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.isData());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.isBlock());
assertFalse(tag0.preserveWhitespace());
assertTrue(tag0.isInline());
assertEquals(0, attributes0.size());
assertEquals("[Rq", formElement0.baseUri());
assertEquals(0, formElement0.siblingIndex());
assertEquals(0, formElement0.childNodeSize());
assertEquals("[Rq", formElement0.tagName());
assertFalse(formElement0.hasParent());
assertFalse(formElement0.isBlock());
assertEquals("[Rq", formElement0.nodeName());
assertNotSame(tag0, tag1);

Element element0 = formElement0.attr("", true);
assertNotNull(element0);
assertFalse(tag0.equals((Object)tag1));
assertEquals("[Rq", tag0.toString());
assertEquals("[Rq", tag0.getName());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isFormListed());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.isData());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.isBlock());
assertFalse(tag0.preserveWhitespace());
assertTrue(tag0.isInline());
assertEquals(1, attributes0.size());
assertEquals("[Rq", formElement0.baseUri());
assertEquals(0, formElement0.siblingIndex());
assertEquals(0, formElement0.childNodeSize());
assertEquals("[Rq", formElement0.tagName());
assertFalse(formElement0.hasParent());
assertFalse(formElement0.isBlock());
assertEquals("[Rq", formElement0.nodeName());
assertEquals("[Rq", element0.nodeName());
assertEquals("[Rq", element0.baseUri());
assertFalse(element0.hasParent());
assertFalse(element0.isBlock());
assertEquals("[Rq", element0.tagName());
assertEquals(0, element0.childNodeSize());
assertEquals(0, element0.siblingIndex());
assertNotSame(tag0, tag1);
assertSame(formElement0, element0);
assertSame(element0, formElement0);

Element element1 = formElement0.addClass("");
assertNotNull(element1);
assertFalse(tag0.equals((Object)tag1));
assertEquals("[Rq", tag0.toString());
assertEquals("[Rq", tag0.getName());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isFormListed());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.isData());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.isBlock());
assertFalse(tag0.preserveWhitespace());
assertTrue(tag0.isInline());
assertEquals(2, attributes0.size());
assertEquals("[Rq", formElement0.baseUri());
assertEquals(0, formElement0.siblingIndex());
assertEquals(0, formElement0.childNodeSize());
assertEquals("[Rq", formElement0.tagName());
assertFalse(formElement0.hasParent());
assertFalse(formElement0.isBlock());
assertEquals("[Rq", formElement0.nodeName());
assertEquals("[Rq", element1.baseUri());
assertEquals(0, element1.siblingIndex());
assertEquals(0, element1.childNodeSize());
assertEquals("[Rq", element1.tagName());
assertFalse(element1.isBlock());
assertEquals("[Rq", element1.nodeName());
assertFalse(element1.hasParent());
assertNotSame(tag0, tag1);
assertSame(formElement0, element1);
assertSame(formElement0, element0);
assertSame(element1, element0);
assertSame(element1, formElement0);

Element element2 = element0.append("[Rq");
assertNotNull(element2);
assertFalse(tag0.equals((Object)tag1));
assertEquals("[Rq", tag0.toString());
assertEquals("[Rq", tag0.getName());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isFormListed());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.isData());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.isBlock());
assertFalse(tag0.preserveWhitespace());
assertTrue(tag0.isInline());
assertEquals(2, attributes0.size());
assertEquals("[Rq", formElement0.baseUri());
assertEquals(0, formElement0.siblingIndex());
assertEquals(1, formElement0.childNodeSize());
assertEquals("[Rq", formElement0.tagName());
assertFalse(formElement0.hasParent());
assertFalse(formElement0.isBlock());
assertEquals("[Rq", formElement0.nodeName());
assertEquals("[Rq", element0.nodeName());
assertEquals("[Rq", element0.baseUri());
assertFalse(element0.hasParent());
assertFalse(element0.isBlock());
assertEquals(1, element0.childNodeSize());
assertEquals("[Rq", element0.tagName());
assertEquals(0, element0.siblingIndex());
assertEquals(0, element2.siblingIndex());
assertEquals("[Rq", element2.baseUri());
assertEquals("[Rq", element2.nodeName());
assertFalse(element2.isBlock());
assertEquals("[Rq", element2.tagName());
assertFalse(element2.hasParent());
assertEquals(1, element2.childNodeSize());
assertNotSame(tag0, tag1);
assertSame(formElement0, element1);
assertSame(formElement0, element0);
assertSame(formElement0, element2);
assertSame(element0, element2);
assertSame(element0, element1);
assertSame(element0, formElement0);
assertSame(element2, element1);
assertSame(element2, element0);
assertSame(element2, formElement0);

Elements elements2 = element0.getElementsMatchingOwnText("");
assertNotNull(elements2);
assertFalse(tag0.equals((Object)tag1));
assertFalse(elements2.equals((Object)elements0));
assertTrue(elements2.equals((Object)elements1));
assertEquals("[Rq", tag0.toString());
assertEquals("[Rq", tag0.getName());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isFormListed());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.isData());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.isBlock());
assertFalse(tag0.preserveWhitespace());
assertTrue(tag0.isInline());
assertEquals(2, attributes0.size());
assertEquals("[Rq", formElement0.baseUri());
assertEquals(0, formElement0.siblingIndex());
assertEquals(1, formElement0.childNodeSize());
assertEquals("[Rq", formElement0.tagName());
assertFalse(formElement0.hasParent());
assertFalse(formElement0.isBlock());
assertEquals("[Rq", formElement0.nodeName());
assertEquals("[Rq", element0.nodeName());
assertEquals("[Rq", element0.baseUri());
assertFalse(element0.hasParent());
assertFalse(element0.isBlock());
assertEquals(1, element0.childNodeSize());
assertEquals("[Rq", element0.tagName());
assertEquals(0, element0.siblingIndex());
assertFalse(elements2.isEmpty());
assertEquals(1, elements2.size());
assertNotSame(tag0, tag1);
assertSame(formElement0, element1);
assertSame(formElement0, element0);
assertSame(formElement0, element2);
assertSame(element0, element2);
assertSame(element0, element1);
assertSame(element0, formElement0);
assertNotSame(elements2, elements0);
assertNotSame(elements2, elements1);

Element element3 = formElement0.removeClass("{");
assertNotNull(element3);
assertFalse(tag0.equals((Object)tag1));
assertEquals("[Rq", tag0.toString());
assertEquals("[Rq", tag0.getName());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isFormSubmittable());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isFormListed());
assertTrue(tag0.formatAsBlock());
assertFalse(tag0.isData());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.isBlock());
assertFalse(tag0.preserveWhitespace());
assertTrue(tag0.isInline());
assertEquals(2, attributes0.size());
assertEquals("[Rq", formElement0.baseUri());
assertEquals(0, formElement0.siblingIndex());
assertEquals(1, formElement0.childNodeSize());
assertEquals("[Rq", formElement0.tagName());
assertFalse(formElement0.hasParent());
assertFalse(formElement0.isBlock());
assertEquals("[Rq", formElement0.nodeName());
assertEquals("[Rq", element3.tagName());
assertFalse(element3.hasParent());
assertEquals(0, element3.siblingIndex());
assertEquals("[Rq", element3.nodeName());
assertFalse(element3.isBlock());
assertEquals("[Rq", element3.baseUri());
assertEquals(1, element3.childNodeSize());
assertNotSame(tag0, tag1);
assertSame(formElement0, element1);
assertSame(formElement0, element0);
assertSame(formElement0, element2);
assertSame(formElement0, element3);
assertSame(element3, element0);
assertSame(element3, element1);
assertSame(element3, formElement0);
assertSame(element3, element2);


[MASTER] 22:28:53.456 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.jsoup.nodes.Element_449_tmp__ESTest.test0(Element_449_tmp__ESTest.java:132)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 22:28:53.458 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParseSettings parseSettings0 = ParseSettings.preserveCase;
assertNotNull(parseSettings0);

Tag tag0 = Tag.valueOf("[Rq", parseSettings0);
assertNotNull(tag0);
assertFalse(tag0.preserveWhitespace());
assertTrue(tag0.formatAsBlock());
assertTrue(tag0.isInline());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isData());
assertFalse(tag0.isFormListed());
assertFalse(tag0.isFormSubmittable());
assertEquals("[Rq", tag0.toString());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isBlock());
assertEquals("[Rq", tag0.getName());

Attributes attributes0 = new Attributes();
assertNotNull(attributes0);
assertEquals(0, attributes0.size());

FormElement formElement0 = new FormElement(tag0, "[Rq", attributes0);
assertNotNull(formElement0);
assertFalse(tag0.preserveWhitespace());
assertTrue(tag0.formatAsBlock());
assertTrue(tag0.isInline());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isData());
assertFalse(tag0.isFormListed());
assertFalse(tag0.isFormSubmittable());
assertEquals("[Rq", tag0.toString());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isBlock());
assertEquals("[Rq", tag0.getName());
assertEquals(0, attributes0.size());
assertFalse(formElement0.hasParent());
assertEquals("[Rq", formElement0.baseUri());
assertEquals(0, formElement0.childNodeSize());
assertEquals("[Rq", formElement0.nodeName());
assertFalse(formElement0.isBlock());
assertEquals("[Rq", formElement0.tagName());
assertEquals(0, formElement0.siblingIndex());

Elements elements0 = formElement0.getElementsContainingText("[Rq");
assertNotNull(elements0);
assertFalse(tag0.preserveWhitespace());
assertTrue(tag0.formatAsBlock());
assertTrue(tag0.isInline());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isData());
assertFalse(tag0.isFormListed());
assertFalse(tag0.isFormSubmittable());
assertEquals("[Rq", tag0.toString());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isBlock());
assertEquals("[Rq", tag0.getName());
assertEquals(0, attributes0.size());
assertFalse(formElement0.hasParent());
assertEquals("[Rq", formElement0.baseUri());
assertEquals(0, formElement0.childNodeSize());
assertEquals("[Rq", formElement0.nodeName());
assertFalse(formElement0.isBlock());
assertEquals("[Rq", formElement0.tagName());
assertEquals(0, formElement0.siblingIndex());
assertTrue(elements0.isEmpty());
assertEquals(0, elements0.size());

String string0 = formElement0.cssSelector();
assertNotNull(string0);
assertEquals("[Rq", string0);
assertFalse(tag0.preserveWhitespace());
assertTrue(tag0.formatAsBlock());
assertTrue(tag0.isInline());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isData());
assertFalse(tag0.isFormListed());
assertFalse(tag0.isFormSubmittable());
assertEquals("[Rq", tag0.toString());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isBlock());
assertEquals("[Rq", tag0.getName());
assertEquals(0, attributes0.size());
assertFalse(formElement0.hasParent());
assertEquals("[Rq", formElement0.baseUri());
assertEquals(0, formElement0.childNodeSize());
assertEquals("[Rq", formElement0.nodeName());
assertFalse(formElement0.isBlock());
assertEquals("[Rq", formElement0.tagName());
assertEquals(0, formElement0.siblingIndex());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
assertNotNull(mockPrintWriter0);

Object[] objectArray0 = new Object[4];
objectArray0[0] = (Object) mockPrintWriter0;
objectArray0[1] = (Object) "[Rq";
Object object0 = new Object();
assertNotNull(object0);

FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
assertNotNull(fileChannel0);
assertFalse(fileDescriptor0.valid());
assertTrue(fileChannel0.isOpen());
assertEquals(0L, fileChannel0.position());

objectArray0[2] = object0;
objectArray0[3] = (Object) "[Rq";
Pattern pattern0 = Pattern.compile("#data", (-17));
assertNotNull(pattern0);
assertEquals("#data", pattern0.toString());
assertEquals((-17), pattern0.flags());
assertEquals("#data", pattern0.pattern());

Element element0 = formElement0.prependText("[Rq");
assertNotNull(element0);
assertFalse(element0.hasParent());
assertEquals("[Rq", element0.tagName());
assertEquals(1, element0.childNodeSize());
assertEquals(0, element0.siblingIndex());
assertFalse(element0.isBlock());
assertEquals("[Rq", element0.baseUri());
assertEquals("[Rq", element0.nodeName());
assertFalse(tag0.preserveWhitespace());
assertTrue(tag0.formatAsBlock());
assertTrue(tag0.isInline());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isData());
assertFalse(tag0.isFormListed());
assertFalse(tag0.isFormSubmittable());
assertEquals("[Rq", tag0.toString());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isBlock());
assertEquals("[Rq", tag0.getName());
assertEquals(0, attributes0.size());
assertFalse(formElement0.hasParent());
assertEquals("[Rq", formElement0.baseUri());
assertEquals(1, formElement0.childNodeSize());
assertEquals("[Rq", formElement0.nodeName());
assertFalse(formElement0.isBlock());
assertEquals("[Rq", formElement0.tagName());
assertEquals(0, formElement0.siblingIndex());
assertSame(element0, formElement0);
assertSame(formElement0, element0);

Elements elements1 = formElement0.getElementsContainingOwnText("[Rq");
assertNotNull(elements1);
assertFalse(elements1.equals((Object)elements0));
assertFalse(tag0.preserveWhitespace());
assertTrue(tag0.formatAsBlock());
assertTrue(tag0.isInline());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isData());
assertFalse(tag0.isFormListed());
assertFalse(tag0.isFormSubmittable());
assertEquals("[Rq", tag0.toString());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isBlock());
assertEquals("[Rq", tag0.getName());
assertFalse(elements1.isEmpty());
assertEquals(1, elements1.size());
assertEquals(0, attributes0.size());
assertFalse(formElement0.hasParent());
assertEquals("[Rq", formElement0.baseUri());
assertEquals(1, formElement0.childNodeSize());
assertEquals("[Rq", formElement0.nodeName());
assertFalse(formElement0.isBlock());
assertEquals("[Rq", formElement0.tagName());
assertEquals(0, formElement0.siblingIndex());
assertNotSame(elements1, elements0);
assertSame(formElement0, element0);

Elements elements2 = formElement0.getElementsMatchingText(pattern0);
assertNotNull(elements2);
assertTrue(elements2.equals((Object)elements1));
assertFalse(elements2.equals((Object)elements0));
assertEquals("#data", pattern0.toString());
assertEquals((-17), pattern0.flags());
assertEquals("#data", pattern0.pattern());
assertFalse(tag0.preserveWhitespace());
assertTrue(tag0.formatAsBlock());
assertTrue(tag0.isInline());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isData());
assertFalse(tag0.isFormListed());
assertFalse(tag0.isFormSubmittable());
assertEquals("[Rq", tag0.toString());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isBlock());
assertEquals("[Rq", tag0.getName());
assertEquals(0, attributes0.size());
assertFalse(elements2.isEmpty());
assertEquals(1, elements2.size());
assertFalse(formElement0.hasParent());
assertEquals("[Rq", formElement0.baseUri());
assertEquals(1, formElement0.childNodeSize());
assertEquals("[Rq", formElement0.nodeName());
assertFalse(formElement0.isBlock());
assertEquals("[Rq", formElement0.tagName());
assertEquals(0, formElement0.siblingIndex());
assertNotSame(elements2, elements0);
assertNotSame(elements2, elements1);
assertSame(formElement0, element0);

String string1 = element0.baseUri();
assertNotNull(string1);
assertEquals("[Rq", string1);
assertTrue(string1.equals((Object)string0));
assertFalse(element0.hasParent());
assertEquals("[Rq", element0.tagName());
assertEquals(1, element0.childNodeSize());
assertEquals(0, element0.siblingIndex());
assertFalse(element0.isBlock());
assertEquals("[Rq", element0.baseUri());
assertEquals("[Rq", element0.nodeName());
assertFalse(tag0.preserveWhitespace());
assertTrue(tag0.formatAsBlock());
assertTrue(tag0.isInline());
assertFalse(tag0.isKnownTag());
assertFalse(tag0.canContainBlock());
assertFalse(tag0.isEmpty());
assertFalse(tag0.isData());
assertFalse(tag0.isFormListed());
assertFalse(tag0.isFormSubmittable());
assertEquals("[Rq", tag0.toString());
assertFalse(tag0.isSelfClosing());
assertFalse(tag0.isBlock());
assertEquals("[Rq", tag0.getName());
assertEquals(0, attributes0.size());
assertFalse(formElement0.hasParent());
assertEquals("[Rq", formElement0.baseUri());
assertEquals(1, formElement0.childNodeSize());
assertEquals("[Rq", formElement0.nodeName());
assertFalse(formElement0.isBlock());
assertEquals("[Rq", formElement0.tagName());
assertEquals(0, formElement0.siblingIndex());
assertSame(element0, formElement0);
assertSame(formElement0, element0);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 4
* Writing tests to file
* Writing JUnit test case 'Element_ESTest' to results/Jsoup-87/org.jsoup.nodes.Element/BBC-F0-100/tests/11
* Done!

* Computation finished
