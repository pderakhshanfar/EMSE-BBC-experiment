/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 16:12:32 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = new Document("/^");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("/^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/^", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.toggleClass("HLBT9R^3");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("/^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/^", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/^", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("/^", document1.location());
      
      Document document2 = (Document)document0.toggleClass("Insert position out of bounds.");
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("/^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/^", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("/^", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("/^", document2.baseUri());
      assertFalse(document2.hasParent());
      
      boolean boolean0 = document1.hasClass("q')Q%6");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertFalse(boolean0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("/^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/^", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/^", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("/^", document1.location());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = new Document("7jx-F[+x+E0");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.toggleClass("7jx-F[+x+E0");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("7jx-F[+x+E0", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("7jx-F[+x+E0", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      
      Document document2 = (Document)document1.toggleClass("Insert position out of bounds.");
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("7jx-F[+x+E0", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("7jx-F[+x+E0", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals("7jx-F[+x+E0", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("7jx-F[+x+E0", document2.baseUri());
      
      Elements elements0 = document0.getElementsByClass("Insert position out of bounds.");
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = new Document("7jx-F[+x+E0");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      
      document0.reparentChild(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      
      Elements elements0 = document0.nextElementSiblings();
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("peg2lxPi+C9Z", "peg2lxPi+C9Z");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("peg2lxPi+C9Z", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("peg2lxPi+C9Z", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ", "br");
      assertNotNull(document0);
      assertEquals("br", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      StringBuilder stringBuilder0 = new StringBuilder("8y>B7o+G[vnhb/zF");
      assertNotNull(stringBuilder0);
      assertEquals("8y>B7o+G[vnhb/zF", stringBuilder0.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      document0.outerHtmlTail(stringBuilder0, 27, document_OutputSettings0);
      assertEquals("br", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("8y>B7o+G[vnhb/zF\n                           </#root>", stringBuilder0.toString());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("w6m", "value");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      StringWriter stringWriter0 = new StringWriter(1029);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      assertNotNull(mockPrintWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      document0.outerHtmlHead(mockPrintWriter0, 1029, document_OutputSettings0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Document.createShell("Z?OF");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Z?OF", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Z?OF", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      document0.nodelistChanged();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Z?OF", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Z?OF", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Element element0 = new Element("3iv");
      assertNotNull(element0);
      assertFalse(element0.hasParent());
      assertEquals("3iv", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("3iv", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      List<Node> list0 = element0.ensureChildNodes();
      assertNotNull(list0);
      assertFalse(element0.hasParent());
      assertEquals("3iv", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("3iv", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("#root", "bl");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("bl", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("bl", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.wrap("7sl3-|;rd0(fe[");
      assertNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("bl", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("bl", document0.location());
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parse("j6 #&q", "j6 #&q");
      assertNotNull(document0);
      assertEquals("j6 #&q", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("j6 #&q", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("j6 #&q", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("j6 #&q", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("j6 #&q", element0.baseUri());
      
      Element element1 = element0.wrap("j6 #&q");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("j6 #&q", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("j6 #&q", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("j6 #&q", element0.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertEquals("j6 #&q", element1.baseUri());
      assertTrue(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("acronym", "acronym");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("acronym", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("acronym", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("acronym", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("acronym", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("acronym", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.wrap("main");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("acronym", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("acronym", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("acronym", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertEquals("acronym", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("w6m", document0.location());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("w6m", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("w6m", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      
      String string0 = element0.wholeText();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("w6m", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("w6m", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      assertNotNull(document0);
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.prependElement("html");
      assertNotNull(element0);
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("html", element0.tagName());
      assertEquals("7jx-F[+x+E0", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.nodeName());
      
      Document document1 = (Document)document0.prepend("7jx-F[+x+E0");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals("7jx-F[+x+E0", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("7jx-F[+x+E0", document1.location());
      
      Element element1 = element0.val("textarea");
      assertNotNull(element1);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("html", element0.tagName());
      assertEquals("7jx-F[+x+E0", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.nodeName());
      assertEquals("html", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals("html", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("7jx-F[+x+E0", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      document0.setSiblingIndex((-2067947214));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals((-2067947214), document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      
      Document document1 = (Document)document0.val("br");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals((-2067947214), document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("7jx-F[+x+E0", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals((-2067947214), document1.siblingIndex());
      assertEquals("7jx-F[+x+E0", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pl", "pl");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("pl", document0.location());
      assertEquals("pl", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("pl", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("pl", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("pl", document1.location());
      assertEquals("pl", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      
      Document document2 = (Document)document0.toggleClass("8TDj");
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("pl", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("pl", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("pl", document2.location());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("pl", document2.baseUri());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      
      document0.setSiblingIndex((-2067947214));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals((-2067947214), document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      
      Document document1 = (Document)document0.toggleClass("7jx-F[+x+E0");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals((-2067947214), document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals((-2067947214), document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("7jx-F[+x+E0", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pl", "pl");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("pl", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("pl", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("pl", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("pl", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("pl", element0.baseUri());
      assertTrue(element0.isBlock());
      
      Element element1 = element0.toggleClass("\"uzHg.[>=Ew*%mcrU");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("pl", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("pl", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("pl", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertEquals("pl", element1.baseUri());
      assertTrue(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7jx-F[+x+E0", "7jx-F[+x+E0");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.tagName());
      assertEquals("7jx-F[+x+E0", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      
      Element element1 = element0.text("y");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.tagName());
      assertEquals("7jx-F[+x+E0", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("7jx-F[+x+E0", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("w6m", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      
      String string0 = element0.text();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("w6m", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Document.createShell("&quot;");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("&quot;", document0.baseUri());
      assertEquals("&quot;", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("&quot;", document0.baseUri());
      assertEquals("&quot;", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("&quot;", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.tagName("&quot;");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("&quot;", document0.baseUri());
      assertEquals("&quot;", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("&quot;", element0.nodeName());
      assertEquals("&quot;", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("&quot;", element0.tagName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("&quot;", element1.baseUri());
      assertEquals("&quot;", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("&quot;", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Document.createShell("&quot;");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("&quot;", document0.baseUri());
      assertEquals("&quot;", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.tagName("&quot;");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("&quot;", document0.baseUri());
      assertEquals("&quot;", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("&quot;", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("&quot;", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("&quot;", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("&quot;", document1.location());
      assertFalse(document1.isBlock());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parse("AttributeValue_dou(leQuoted", "AttributeValue_dou(leQuoted");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("AttributeValue_dou(leQuoted", document0.baseUri());
      assertEquals("AttributeValue_dou(leQuoted", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("AttributeValue_dou(leQuoted", document0.baseUri());
      assertEquals("AttributeValue_dou(leQuoted", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("AttributeValue_dou(leQuoted", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.tagName("svg");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("AttributeValue_dou(leQuoted", document0.baseUri());
      assertEquals("AttributeValue_dou(leQuoted", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("svg", element0.tagName());
      assertEquals("svg", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("AttributeValue_dou(leQuoted", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("svg", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("AttributeValue_dou(leQuoted", element1.baseUri());
      assertEquals("svg", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Entities$EscapeMode");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", document0.baseUri());
      
      String string0 = document0.tagName();
      assertNotNull(string0);
      assertEquals("#root", string0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("AttributeValue_doubleQuoted", "AttributeValue_doubleQuoted");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("AttributeValue_doubleQuoted", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("AttributeValue_doubleQuoted", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.appendElement("textarea");
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("AttributeValue_doubleQuoted", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("AttributeValue_doubleQuoted", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, element0.childNodeSize());
      assertEquals("AttributeValue_doubleQuoted", element0.baseUri());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("textarea", element0.nodeName());
      assertTrue(element0.hasParent());
      
      Tag tag0 = element0.tag();
      assertNotNull(tag0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("AttributeValue_doubleQuoted", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("AttributeValue_doubleQuoted", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, element0.childNodeSize());
      assertEquals("AttributeValue_doubleQuoted", element0.baseUri());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("textarea", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("textarea", tag0.getName());
      assertTrue(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isFormListed());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.preserveWhitespace());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("m", "m");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("m", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("m", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("m", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("m", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("m", element0.baseUri());
      assertTrue(element0.isBlock());
      
      Tag tag0 = element0.tag();
      assertNotNull(tag0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("m", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("m", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("m", element0.baseUri());
      assertTrue(element0.isBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals("body", tag0.toString());
      assertEquals("body", tag0.getName());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("AttributeValue_doubleQuoted", "AttributeValue_doubleQuoted");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("AttributeValue_doubleQuoted", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("AttributeValue_doubleQuoted", document0.location());
      
      Tag tag0 = document0.tag();
      assertNotNull(tag0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("AttributeValue_doubleQuoted", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("AttributeValue_doubleQuoted", document0.location());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals("#root", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.isSelfClosing());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("m", "m");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("m", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("m", document0.baseUri());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("m", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("m", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("m", element0.baseUri());
      
      Element element1 = element0.shallowClone();
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("m", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("m", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("m", element0.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertEquals("m", element1.baseUri());
      assertTrue(element1.isBlock());
      assertFalse(element1.hasParent());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.selectFirst("org.jsoup.parser.TokenQueue");
      assertNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7jx-F[+x+E0", "7jx-F[+x+E0");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.selectFirst("body");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, element0.siblingIndex());
      assertEquals("7jx-F[+x+E0", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("w6m", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("w6m", document0.baseUri());
      
      Elements elements0 = document0.select("w6m");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("w6m", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("w6m", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Tag tag0 = Tag.valueOf("*");
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertEquals("*", tag0.toString());
      assertTrue(tag0.isInline());
      assertEquals("*", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      
      Element element0 = new Element(tag0, "*");
      assertNotNull(element0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertEquals("*", tag0.toString());
      assertTrue(tag0.isInline());
      assertEquals("*", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("*", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("*", element0.nodeName());
      assertEquals("*", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      
      Elements elements0 = element0.select("*");
      assertNotNull(elements0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertEquals("*", tag0.toString());
      assertTrue(tag0.isInline());
      assertEquals("*", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("*", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("*", element0.nodeName());
      assertEquals("*", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pl", "pl");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("pl", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("pl", document0.location());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.prependElement("pl");
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("pl", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("pl", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("pl", element0.baseUri());
      assertEquals("pl", element0.tagName());
      assertEquals("pl", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = document0.prependElement("\"uzHg.[>=Ew*%mcrU");
      assertNotNull(element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("pl", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("pl", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("\"uzhg.[>=ew*%mcru", element1.nodeName());
      assertEquals("pl", element1.baseUri());
      assertEquals("\"uzhg.[>=ew*%mcru", element1.tagName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      
      Element element2 = element0.removeClass("body");
      assertNotNull(element2);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("pl", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("pl", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("pl", element0.baseUri());
      assertEquals("pl", element0.tagName());
      assertEquals("pl", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertEquals(1, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertTrue(element2.hasParent());
      assertEquals("pl", element2.nodeName());
      assertEquals("pl", element2.baseUri());
      assertEquals("pl", element2.tagName());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("w6m", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.removeClass("4e");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("w6m", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("head", element1.nodeName());
      assertEquals("w6m", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = new Document("7jx-F[+x+E0");
      assertNotNull(document0);
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.removeClass("7jx-F[+x+E0");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("7jx-F[+x+E0", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("7jx-F[+x+E0", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("7jx-F[+x+E0", element0.baseUri());
      
      Element element1 = element0.previousElementSibling();
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("7jx-F[+x+E0", element0.baseUri());
      assertEquals("head", element1.nodeName());
      assertEquals("7jx-F[+x+E0", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      assertNotNull(tag0);
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isFormListed());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertTrue(tag0.preserveWhitespace());
      
      CDataNode cDataNode0 = new CDataNode("eof");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "eof", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isFormListed());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertTrue(tag0.preserveWhitespace());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals("eof", formElement0.baseUri());
      assertEquals("textarea", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("textarea", formElement0.tagName());
      
      boolean boolean0 = Element.preserveWhitespace(formElement0);
      assertTrue(boolean0);
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isFormListed());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertTrue(tag0.preserveWhitespace());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals("eof", formElement0.baseUri());
      assertEquals("textarea", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("textarea", formElement0.tagName());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E50");
      assertNotNull(document0);
      assertEquals("7jx-F[+x+E50", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7jx-F[+x+E50", document0.baseUri());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("7jx-F[+x+E50", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7jx-F[+x+E50", document0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("7jx-F[+x+E50", element0.baseUri());
      
      Element element1 = element0.prependText("7jx-F[+x+E50");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("7jx-F[+x+E50", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7jx-F[+x+E50", document0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("7jx-F[+x+E50", element0.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("7jx-F[+x+E50", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      assertNotNull(document0);
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.prependElement("html");
      assertNotNull(element0);
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("html", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7jx-F[+x+E0", element0.baseUri());
      
      Element element1 = element0.val("textarea");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("html", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("7jx-F[+x+E0", element0.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("html", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("7jx-F[+x+E0", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Document.createShell("~j_D|t8Uc");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("~j_D|t8Uc", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("~j_D|t8Uc", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.prependElement("bl");
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("~j_D|t8Uc", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("~j_D|t8Uc", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("bl", element0.tagName());
      assertEquals("bl", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("~j_D|t8Uc", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      
      Document document1 = (Document)document0.prependText("~j_D|t8Uc");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("~j_D|t8Uc", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("~j_D|t8Uc", document0.location());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("~j_D|t8Uc", document1.location());
      assertEquals("~j_D|t8Uc", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      
      Element element1 = element0.prependChild(document0);
      assertNotNull(element1);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("~j_D|t8Uc", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("~j_D|t8Uc", document0.location());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("bl", element0.tagName());
      assertEquals("bl", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("~j_D|t8Uc", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("bl", element1.tagName());
      assertEquals("bl", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("~j_D|t8Uc", element1.baseUri());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("w6m", document0.baseUri());
      assertEquals("w6m", document0.location());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("w6m", document0.baseUri());
      assertEquals("w6m", document0.location());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("w6m", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.prependChild(document0);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("w6m", document0.baseUri());
      assertEquals("w6m", document0.location());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("w6m", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("w6m", element1.baseUri());
      assertEquals("head", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "o`");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("o`", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("o`", document0.baseUri());
      assertFalse(document0.isBlock());
      
      document0.setSiblingIndex((-1755));
      assertEquals("#document", document0.nodeName());
      assertEquals((-1755), document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("o`", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("o`", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.prepend("");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals((-1755), document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("o`", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("o`", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("o`", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("o`", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals((-1755), document1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertEquals("w6m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("w6m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals("w6m", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      Element element1 = element0.prepend("n<r`");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("w6m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals("w6m", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("w6m", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("head", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Element element0 = new Element("nC74}@iF");
      assertNotNull(element0);
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("nC74}@iF", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("nC74}@iF", element0.nodeName());
      assertFalse(element0.hasParent());
      
      Element element1 = element0.prepend("");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("nC74}@iF", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("nC74}@iF", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("nC74}@iF", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("nC74}@iF", element1.tagName());
      assertFalse(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("w6m", document0.baseUri());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("w6m", document0.baseUri());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("w6m", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      
      Elements elements0 = element0.parents();
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("w6m", document0.baseUri());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("w6m", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.parent();
      assertNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parse("", "Insert position out of bounds.");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.prependElement("Insert position out of bounds.");
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Insert position out of bounds.", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("insert position out of bounds.", element0.nodeName());
      assertEquals("insert position out of bounds.", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = document0.head();
      assertNotNull(element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("Insert position out of bounds.", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      
      Element element2 = element1.parent();
      assertNotNull(element2);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("Insert position out of bounds.", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertEquals("html", element2.nodeName());
      assertEquals("html", element2.tagName());
      assertEquals(1, element2.siblingIndex());
      assertEquals("Insert position out of bounds.", element2.baseUri());
      assertTrue(element2.isBlock());
      assertTrue(element2.hasParent());
      assertEquals(2, element2.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parse("", "Insert position out of bounds.");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Insert position out of bounds.", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.parent();
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Insert position out of bounds.", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertEquals("html", element1.nodeName());
      assertEquals("Insert position out of bounds.", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parse("", "Insert position out of bounds.");
      assertNotNull(document0);
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.prependElement("Insert position out of bounds.");
      assertNotNull(element0);
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("insert position out of bounds.", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("insert position out of bounds.", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("Insert position out of bounds.", element0.baseUri());
      
      Document document1 = (Document)element0.parent();
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("insert position out of bounds.", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("insert position out of bounds.", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("Insert position out of bounds.", element0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("w6m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.prepend("n<r`");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("w6m", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("w6m", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("w6m", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      
      String string0 = document0.ownText();
      assertNotNull(string0);
      assertSame(document0, document1);
      assertEquals("n", string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("w6m", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = new Document(":");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(":", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(":", document0.baseUri());
      
      String string0 = document0.nodeName();
      assertNotNull(string0);
      assertEquals("#document", string0);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(":", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(":", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("w6m", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("w6m", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("w6m", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      
      Elements elements0 = element0.nextElementSiblings();
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("w6m", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("w6m", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("#root", element0.baseUri());
      
      Element element1 = element0.nextElementSibling();
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("#root", element0.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("#root", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("AttributeValue_doubleQuoted", "AttributeValue_doubleQuoted");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("AttributeValue_doubleQuoted", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("AttributeValue_doubleQuoted", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.appendElement("textarea");
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("AttributeValue_doubleQuoted", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("AttributeValue_doubleQuoted", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", element0.tagName());
      assertEquals("AttributeValue_doubleQuoted", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("textarea", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.lastElementSibling();
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("AttributeValue_doubleQuoted", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("AttributeValue_doubleQuoted", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", element0.tagName());
      assertEquals("AttributeValue_doubleQuoted", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("textarea", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("textarea", element1.tagName());
      assertEquals("AttributeValue_doubleQuoted", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("AfterHead", "AfterHead");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("AfterHead", document0.location());
      assertEquals("AfterHead", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("AfterHead", document0.location());
      assertEquals("AfterHead", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("AfterHead", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      
      boolean boolean0 = element0.isBlock();
      assertTrue(boolean0);
      assertFalse(document0.hasParent());
      assertEquals("AfterHead", document0.location());
      assertEquals("AfterHead", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("AfterHead", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("RawtextLessthanSign", "RawtextLessthanSign");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("RawtextLessthanSign", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("RawtextLessthanSign", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
      assertNotNull(evaluator_IsLastOfType0);
      assertEquals(":last-of-type", evaluator_IsLastOfType0.toString());
      
      boolean boolean0 = document0.is((Evaluator) evaluator_IsLastOfType0);
      assertFalse(boolean0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("RawtextLessthanSign", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("RawtextLessthanSign", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(":last-of-type", evaluator_IsLastOfType0.toString());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = new Document("</");
      assertNotNull(document0);
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.prependElement("bl");
      assertNotNull(element0);
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("bl", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("bl", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("</", element0.baseUri());
      assertFalse(element0.isBlock());
      
      boolean boolean0 = element0.is("bl");
      assertTrue(boolean0);
      assertEquals("</", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("</", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("bl", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("bl", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("</", element0.baseUri());
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("w6m", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("w6m", document0.baseUri());
      
      Element element0 = document0.prependElement("w6m");
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("w6m", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("w6m", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("w6m", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("w6m", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("w6m", element0.tagName());
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) element0;
      Document document1 = (Document)document0.insertChildren(1, nodeArray0);
      assertEquals(1, nodeArray0.length);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("w6m", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("w6m", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("w6m", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("w6m", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7jx-F[+x+E0", document0.location());
      
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      Document document1 = (Document)document0.insertChildren(0, nodeArray0);
      assertEquals(2, nodeArray0.length);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("7jx-F[+x+E0", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document1.location());
      assertEquals(2, document1.childNodeSize());
      
      Document document2 = (Document)document0.nextElementSibling();
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals("7jx-F[+x+E0", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals("7jx-F[+x+E0", document2.location());
      assertTrue(document2.hasParent());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parse("u`", "_9aFc`M/9L");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("_9aFc`M/9L", document0.location());
      assertEquals("_9aFc`M/9L", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Tag tag0 = Tag.valueOf("T]R1>|Qc>UjX[");
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("T]R1>|Qc>UjX[", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("T]R1>|Qc>UjX[", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Elment", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("T]R1>|Qc>UjX[", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("T]R1>|Qc>UjX[", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(0, attributes0.size());
      assertEquals("T]R1>|Qc>UjX[", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("org.jsoup.nodes.Elment", formElement0.baseUri());
      assertEquals("T]R1>|Qc>UjX[", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      
      FormElement formElement1 = formElement0.addElement(document0);
      assertNotNull(formElement1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("_9aFc`M/9L", document0.location());
      assertEquals("_9aFc`M/9L", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("T]R1>|Qc>UjX[", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("T]R1>|Qc>UjX[", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(0, attributes0.size());
      assertEquals("T]R1>|Qc>UjX[", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("org.jsoup.nodes.Elment", formElement0.baseUri());
      assertEquals("T]R1>|Qc>UjX[", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertEquals("T]R1>|Qc>UjX[", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertEquals("T]R1>|Qc>UjX[", formElement1.tagName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("org.jsoup.nodes.Elment", formElement1.baseUri());
      assertEquals(0, formElement1.childNodeSize());
      
      Elements elements0 = formElement1.elements();
      assertNotNull(elements0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("_9aFc`M/9L", document0.location());
      assertEquals("_9aFc`M/9L", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("T]R1>|Qc>UjX[", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("T]R1>|Qc>UjX[", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(0, attributes0.size());
      assertEquals("T]R1>|Qc>UjX[", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("org.jsoup.nodes.Elment", formElement0.baseUri());
      assertEquals("T]R1>|Qc>UjX[", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertEquals("T]R1>|Qc>UjX[", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertEquals("T]R1>|Qc>UjX[", formElement1.tagName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("org.jsoup.nodes.Elment", formElement1.baseUri());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      Document document1 = (Document)document0.insertChildren(1, (Collection<? extends Node>) elements0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("_9aFc`M/9L", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("_9aFc`M/9L", document0.baseUri());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("T]R1>|Qc>UjX[", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("T]R1>|Qc>UjX[", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(0, attributes0.size());
      assertEquals("T]R1>|Qc>UjX[", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("org.jsoup.nodes.Elment", formElement0.baseUri());
      assertEquals("T]R1>|Qc>UjX[", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertEquals("T]R1>|Qc>UjX[", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertEquals("T]R1>|Qc>UjX[", formElement1.tagName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("org.jsoup.nodes.Elment", formElement1.baseUri());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("_9aFc`M/9L", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("_9aFc`M/9L", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = new Document("7jx-F[+x+E0");
      assertNotNull(document0);
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      LinkedHashSet<CDataNode> linkedHashSet0 = new LinkedHashSet<CDataNode>(0);
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Document document1 = (Document)document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, document1.siblingIndex());
      assertEquals("7jx-F[+x+E0", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("7jx-F[+x+E0", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = new Document("Xub \"w{YYA[\"-F9w4");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Xub \"w{YYA[\"-F9w4", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Xub \"w{YYA[\"-F9w4", document0.baseUri());
      
      document0.siblingIndex = (-152199677);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals((-152199677), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Xub \"w{YYA[\"-F9w4", document0.location());
      assertEquals("Xub \"w{YYA[\"-F9w4", document0.baseUri());
      
      Document document1 = (Document)document0.html("Xub \"w{YYA[\"-F9w4");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals((-152199677), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Xub \"w{YYA[\"-F9w4", document0.location());
      assertEquals("Xub \"w{YYA[\"-F9w4", document0.baseUri());
      assertEquals((-152199677), document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Xub \"w{YYA[\"-F9w4", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Xub \"w{YYA[\"-F9w4", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7jx-F[+x+E0", "7jx-F[+x+E0");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      
      Element element1 = element0.html("7jx-F[+x+E0");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("7jx-F[+x+E0", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.html("");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = new Document("w6m");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      OutputStreamWriter outputStreamWriter0 = document0.html((OutputStreamWriter) null);
      assertNull(outputStreamWriter0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = new Document("peg2lxPi+C9Z");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("peg2lxPi+C9Z", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("peg2lxPi+C9Z", document0.baseUri());
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("peg2lxPi+C9Z", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("peg2lxPi+C9Z", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertEquals("w6m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.removeClass("n<r`");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("w6m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("w6m", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("w6m", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      
      boolean boolean0 = document1.hasAttributes();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertTrue(boolean0);
      assertEquals("w6m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("w6m", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("w6m", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pl", "pl");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("pl", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("pl", document0.location());
      
      boolean boolean0 = document0.hasAttributes();
      assertFalse(boolean0);
      assertFalse(document0.hasParent());
      assertEquals("pl", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("pl", document0.location());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("w6m", document0.location());
      
      Pattern pattern0 = Pattern.compile("DV2uco");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("DV2uco", pattern0.pattern());
      assertEquals("DV2uco", pattern0.toString());
      
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("w6m", document0.location());
      assertEquals(0, pattern0.flags());
      assertEquals("DV2uco", pattern0.pattern());
      assertEquals("DV2uco", pattern0.toString());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("w6m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      
      Pattern pattern0 = Pattern.compile("w6m");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("w6m", pattern0.toString());
      assertEquals("w6m", pattern0.pattern());
      
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("w6m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, pattern0.flags());
      assertEquals("w6m", pattern0.toString());
      assertEquals("w6m", pattern0.pattern());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pl", "pl");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("pl", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("pl", document0.location());
      
      Elements elements0 = document0.getElementsMatchingOwnText("W\"sLIpNyYZW@");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("pl", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("pl", document0.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertEquals("w6m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Elements elements0 = document0.getElementsMatchingOwnText(";#i6k q|");
      assertNotNull(elements0);
      assertEquals("w6m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Document.createShell("LC1|kf)IIv2K");
      assertNotNull(document0);
      assertEquals("LC1|kf)IIv2K", document0.baseUri());
      assertEquals("LC1|kf)IIv2K", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsContainingText((String) null);
      assertNotNull(elements0);
      assertEquals("LC1|kf)IIv2K", document0.baseUri());
      assertEquals("LC1|kf)IIv2K", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Element element0 = new Element("3iv");
      assertNotNull(element0);
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("3iv", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("3iv", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      
      Elements elements0 = element0.getElementsByTag("3iv");
      assertNotNull(elements0);
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("3iv", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("3iv", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("f)<tp)IdMj", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isKnownTag());
      assertEquals("f)<tp)idmj", tag0.toString());
      assertEquals("f)<tp)idmj", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      
      CDataNode cDataNode0 = new CDataNode("P?iE%2!YC\"/`%tIR4");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, ":not(selector) subselect must not be empty", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isKnownTag());
      assertEquals("f)<tp)idmj", tag0.toString());
      assertEquals("f)<tp)idmj", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("f)<tp)idmj", formElement0.nodeName());
      assertEquals(":not(selector) subselect must not be empty", formElement0.baseUri());
      assertEquals("f)<tp)idmj", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      
      Elements elements0 = formElement0.getElementsByIndexLessThan(518);
      assertNotNull(elements0);
      assertFalse(tag0.isKnownTag());
      assertEquals("f)<tp)idmj", tag0.toString());
      assertEquals("f)<tp)idmj", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("f)<tp)idmj", formElement0.nodeName());
      assertEquals(":not(selector) subselect must not be empty", formElement0.baseUri());
      assertEquals("f)<tp)idmj", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Document.createShell("LC1|kf)IIv2K");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("LC1|kf)IIv2K", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("LC1|kf)IIv2K", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("LC1|kf)IIv2K", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("LC1|kf)IIv2K", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      Elements elements0 = document0.getElementsByIndexEquals(0);
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = new Document("7jx-F[+x+E0");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.toggleClass("7jx-F[+x+E0");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("7jx-F[+x+E0", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("7jx-F[+x+E0", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      
      Document document2 = (Document)document1.toggleClass("comment");
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("7jx-F[+x+E0", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("7jx-F[+x+E0", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals("7jx-F[+x+E0", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("7jx-F[+x+E0", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      
      Elements elements0 = document0.getElementsByClass("comment");
      assertNotNull(elements0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsByAttributeValueNot("y( f>JwN", "extended");
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("0<U*TS|<9p{^", parseSettings0);
      assertNotNull(tag0);
      assertEquals("0<u*ts|<9p{^", tag0.getName());
      assertEquals("0<u*ts|<9p{^", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = new Attribute("org.jsoup.parser.TokeniserState", "org.jsoup.parser.TokeniserState");
      assertNotNull(attribute0);
      assertEquals("org.jsoup.parser.TokeniserState", attribute0.getValue());
      assertEquals("org.jsoup.parser.TokeniserState", attribute0.getKey());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals("org.jsoup.parser.TokeniserState", attribute0.getValue());
      assertEquals("org.jsoup.parser.TokeniserState", attribute0.getKey());
      assertEquals(1, attributes1.size());
      
      Element element0 = new Element(tag0, "sT$m/=eEDvvcogp!,", attributes1);
      assertNotNull(element0);
      assertEquals("0<u*ts|<9p{^", tag0.getName());
      assertEquals("0<u*ts|<9p{^", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(1, attributes0.size());
      assertEquals("org.jsoup.parser.TokeniserState", attribute0.getValue());
      assertEquals("org.jsoup.parser.TokeniserState", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("sT$m/=eEDvvcogp!,", element0.baseUri());
      assertEquals("0<u*ts|<9p{^", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("0<u*ts|<9p{^", element0.tagName());
      
      Elements elements0 = element0.getElementsByAttributeStarting("org.jsoup.parser.TokeniserState");
      assertNotNull(elements0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals("0<u*ts|<9p{^", tag0.getName());
      assertEquals("0<u*ts|<9p{^", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(1, attributes0.size());
      assertEquals("org.jsoup.parser.TokeniserState", attribute0.getValue());
      assertEquals("org.jsoup.parser.TokeniserState", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("sT$m/=eEDvvcogp!,", element0.baseUri());
      assertEquals("0<u*ts|<9p{^", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("0<u*ts|<9p{^", element0.tagName());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("org.jsoup.nodes.Element", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("org.jsoup.nodes.Element", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Element");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      Attribute attribute0 = new Attribute("{>|DyWRBlM]) F1s%a", "org.jsoup.nodes.Element", attributes0);
      assertNotNull(attribute0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals("{>|DyWRBlM]) F1s%a", attribute0.getKey());
      assertEquals("org.jsoup.nodes.Element", attribute0.getValue());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals("{>|DyWRBlM]) F1s%a", attribute0.getKey());
      assertEquals("org.jsoup.nodes.Element", attribute0.getValue());
      assertEquals(2, attributes1.size());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.nodes.Element", attributes1);
      assertNotNull(pseudoTextElement0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("org.jsoup.nodes.Element", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("org.jsoup.nodes.Element", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals("{>|DyWRBlM]) F1s%a", attribute0.getKey());
      assertEquals("org.jsoup.nodes.Element", attribute0.getValue());
      assertEquals(2, attributes1.size());
      assertEquals("org.jsoup.nodes.Element", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("org.jsoup.nodes.Element", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("org.jsoup.nodes.Element", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      
      Elements elements0 = pseudoTextElement0.getElementsByAttribute("{>|DyWRBlM]) F1s%a");
      assertNotNull(elements0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("org.jsoup.nodes.Element", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("org.jsoup.nodes.Element", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals("{>|DyWRBlM]) F1s%a", attribute0.getKey());
      assertEquals("org.jsoup.nodes.Element", attribute0.getValue());
      assertEquals(2, attributes1.size());
      assertEquals("org.jsoup.nodes.Element", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("org.jsoup.nodes.Element", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("org.jsoup.nodes.Element", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ihE+w:/dcUs", "ihE+w:/dcUs");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("ihE+w:/dcUs", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ihE+w:/dcUs", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.prependElement("bm");
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("ihE+w:/dcUs", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ihE+w:/dcUs", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("bm", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("ihE+w:/dcUs", element0.baseUri());
      assertEquals("bm", element0.tagName());
      
      Document document1 = (Document)document0.prependText("afterdoctypename");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("ihE+w:/dcUs", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ihE+w:/dcUs", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("ihE+w:/dcUs", document1.baseUri());
      assertEquals("ihE+w:/dcUs", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("ihE+w:/dcUs", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ihE+w:/dcUs", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("bm", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("ihE+w:/dcUs", element0.baseUri());
      assertEquals("bm", element0.tagName());
      assertEquals("bm", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("bm", element1.tagName());
      assertEquals("ihE+w:/dcUs", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertEquals("w6m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("w6m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("w6m", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.prependElement("w6m");
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertEquals("w6m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("w6m", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("w6m", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("w6m", element1.baseUri());
      assertEquals("w6m", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      
      Element element2 = element0.firstElementSibling();
      assertNotNull(element2);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals("w6m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("w6m", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertEquals(1, element2.childNodeSize());
      assertEquals("head", element2.tagName());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals("w6m", element2.baseUri());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      document0.setSiblingIndex((-1710));
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.location());
      assertEquals((-1710), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.empty();
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.location());
      assertEquals((-1710), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals((-1710), document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("textarea", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parse("acronym", "acronym");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("acronym", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("acronym", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("acronym", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("acronym", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("acronym", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      
      Element element1 = element0.empty();
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("acronym", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("acronym", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("acronym", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals("acronym", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, element0.childNodeSize());
      assertEquals("7jx-F[+x+E0", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      
      int int0 = element0.elementSiblingIndex();
      assertEquals(1, int0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, element0.childNodeSize());
      assertEquals("7jx-F[+x+E0", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Document.createShell("o~Q?](vb-#h'");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("o~Q?](vb-#h'", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("o~Q?](vb-#h'", document0.baseUri());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("o~Q?](vb-#h'", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("o~Q?](vb-#h'", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("o~Q?](vb-#h'", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("o~Q?](vb-#h'", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      
      Document document2 = (Document)document0.doClone(document1);
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("o~Q?](vb-#h'", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("o~Q?](vb-#h'", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("o~Q?](vb-#h'", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("o~Q?](vb-#h'", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("o~Q?](vb-#h'", document2.location());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("o~Q?](vb-#h'", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("w6m", "w6m");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.doClone((Node) null);
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("w6m", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("w6m", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      
      Element element1 = element0.clone();
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertFalse(element1.hasParent());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pl", "pl");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("pl", document0.baseUri());
      assertEquals("pl", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("pl", document0.baseUri());
      assertEquals("pl", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("pl", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertFalse(set0.contains("pl"));
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      
      Element element1 = element0.classNames(set0);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(set0.contains("pl"));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("pl", document0.baseUri());
      assertEquals("pl", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("pl", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertEquals("pl", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.prependElement("w6m");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("w6m", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("w6m", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("w6m", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("w6m", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("w6m"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Element element1 = element0.classNames((Set<String>) linkedHashSet0);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(linkedHashSet0.contains("w6m"));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("w6m", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("w6m", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("w6m", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("w6m", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("w6m", element1.tagName());
      assertEquals("w6m", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("w6m", element1.nodeName());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.toggleClass("7jx-F[+x+E0");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("7jx-F[+x+E0", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Set<String> set0 = document1.classNames();
      assertNotNull(set0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(set0.contains("7jx-F[+x+E0"));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("7jx-F[+x+E0", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.toggleClass("7jx-F[+x+E0");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("7jx-F[+x+E0", document1.baseUri());
      assertFalse(document1.isBlock());
      
      String string0 = document0.className();
      assertNotNull(string0);
      assertSame(document0, document1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = new Document("7jx-F[+x+E0");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.children();
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Tag tag0 = Tag.valueOf("*");
      assertNotNull(tag0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("*", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertEquals("*", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      
      Element element0 = new Element(tag0, "*");
      assertNotNull(element0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("*", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertEquals("*", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("*", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("*", element0.nodeName());
      assertEquals("*", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      int int0 = element0.childNodeSize();
      assertEquals(0, int0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("*", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertEquals("*", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("*", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("*", element0.nodeName());
      assertEquals("*", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      int int0 = document0.childNodeSize();
      assertEquals(1, int0);
      assertEquals("#document", document0.nodeName());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Document.createShell("Q");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Q", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Q", document0.location());
      
      Element element0 = document0.prependElement("bl");
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Q", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Q", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Q", element0.baseUri());
      assertEquals("bl", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("bl", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      Element element1 = document0.child(0);
      assertNotNull(element1);
      assertSame(element1, element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Q", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Q", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("bl", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("Q", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("bl", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pl", "pl");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("pl", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("pl", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.prependElement("pl");
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("pl", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("pl", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("pl", element0.tagName());
      assertEquals("pl", element0.nodeName());
      assertEquals("pl", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.before((Node) element0);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("pl", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("pl", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("pl", element0.tagName());
      assertEquals("pl", element0.nodeName());
      assertEquals("pl", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("pl", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("pl", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("pl", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.baseUri());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.baseUri());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("w6m", element0.baseUri());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.prependElement("w6m");
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.baseUri());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("w6m", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("w6m", element1.tagName());
      assertEquals("w6m", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("w6m", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      
      Element element2 = element0.before((Node) document0);
      assertNotNull(element2);
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.baseUri());
      assertEquals("w6m", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("w6m", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertEquals("head", element2.tagName());
      assertEquals("w6m", element2.baseUri());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.isBlock());
      assertEquals(1, element2.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~j_D|t8Uc", "~j_D|t8Uc");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("~j_D|t8Uc", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("~j_D|t8Uc", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("~j_D|t8Uc", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("~j_D|t8Uc", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("~j_D|t8Uc", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = element0.before("~j_D|t8Uc");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("~j_D|t8Uc", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("~j_D|t8Uc", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("~j_D|t8Uc", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(3, element0.siblingIndex());
      assertEquals("~j_D|t8Uc", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(3, element1.siblingIndex());
      
      Elements elements0 = element0.previousElementSiblings();
      assertNotNull(elements0);
      assertSame(element0, element1);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("~j_D|t8Uc", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("~j_D|t8Uc", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("~j_D|t8Uc", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(3, element0.siblingIndex());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = new Document("7jx-F[+x+E0");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      
      Element element0 = document0.prependElement("$2Uze\"iIwHQIBGGH");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("$2uze\"iiwhqibggh", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("$2uze\"iiwhqibggh", element0.nodeName());
      assertEquals("7jx-F[+x+E0", element0.baseUri());
      
      Element element1 = element0.before("s&c;]>qu8");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("$2uze\"iiwhqibggh", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("$2uze\"iiwhqibggh", element0.nodeName());
      assertEquals("7jx-F[+x+E0", element0.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("$2uze\"iiwhqibggh", element1.nodeName());
      assertEquals("7jx-F[+x+E0", element1.baseUri());
      assertEquals("$2uze\"iiwhqibggh", element1.tagName());
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nods.Element");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nods.Element", document0.baseUri());
      assertEquals("org.jsoup.nods.Element", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = Parser.parseBodyFragment("org.jsoup.nods.Element", "");
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      
      document1.setParentNode(document0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nods.Element", document0.baseUri());
      assertEquals("org.jsoup.nods.Element", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      
      Document document2 = (Document)document1.before("org.jsoup.nods.Element");
      assertNotNull(document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document2.location());
      assertTrue(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Element element0 = new Element("PjdLk)%m7'S&MyD");
      assertNotNull(element0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("PjdLk)%m7'S&MyD", element0.nodeName());
      assertEquals("PjdLk)%m7'S&MyD", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      element0.doSetBaseUri((String) null);
      assertNull(element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("PjdLk)%m7'S&MyD", element0.nodeName());
      assertEquals("PjdLk)%m7'S&MyD", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      String string0 = element0.baseUri();
      assertNull(string0);
      assertNull(element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("PjdLk)%m7'S&MyD", element0.nodeName());
      assertEquals("PjdLk)%m7'S&MyD", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("L<uUyvL", "L<uUyvL");
      assertNotNull(document0);
      assertEquals("L<uUyvL", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("L<uUyvL", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      
      String string0 = document0.baseUri();
      assertNotNull(string0);
      assertEquals("L<uUyvL", string0);
      assertEquals("L<uUyvL", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("L<uUyvL", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = new Document("");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      String string0 = document0.baseUri();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pl", "pl");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("pl", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("pl", document0.location());
      assertFalse(document0.isBlock());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("pl", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("pl", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.toggleClass("7jx-F[+x+E0");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("7jx-F[+x+E0", document1.baseUri());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7jx-F[+x+E0", "7jx-F[+x+E0");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      
      Element element1 = element0.attr("fF-OU_J}]>8 )50", false);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("7jx-F[+x+E0", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*;qY]jo%:yxtwo5", "P|#5~7x@i(");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("P|#5~7x@i(", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("P|#5~7x@i(", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.createElement("P|#5~7x@i(");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("P|#5~7x@i(", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("P|#5~7x@i(", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("P|#5~7x@i(", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("P|#5~7x@i(", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("P|#5~7x@i(", element0.baseUri());
      
      Element element1 = element0.attr("class", true);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("P|#5~7x@i(", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("P|#5~7x@i(", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("P|#5~7x@i(", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("P|#5~7x@i(", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("P|#5~7x@i(", element0.baseUri());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("P|#5~7x@i(", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("P|#5~7x@i(", element1.tagName());
      assertEquals("P|#5~7x@i(", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Document.createShell("`LW5,I>+k");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`LW5,I>+k", document0.baseUri());
      assertEquals("`LW5,I>+k", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.setSiblingIndex(8222);
      assertFalse(document0.hasParent());
      assertEquals(8222, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`LW5,I>+k", document0.baseUri());
      assertEquals("`LW5,I>+k", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.attr("lc1|kf)iiv2k", (String) null);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals(8222, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`LW5,I>+k", document0.baseUri());
      assertEquals("`LW5,I>+k", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("`LW5,I>+k", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(8222, document1.siblingIndex());
      assertEquals("`LW5,I>+k", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertEquals("w6m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("w6m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("w6m", element0.baseUri());
      
      Element element1 = element0.attr("^opgrop", "n<r`");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("w6m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("w6m", element0.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertEquals("w6m", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("xr!A.", "");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      
      Element element1 = element0.appendTo(document0);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("w6m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      
      Document document1 = new Document("w6m");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("w6m", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("w6m", document1.location());
      assertFalse(document1.hasParent());
      
      Document document2 = (Document)document1.appendTo(document0);
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("w6m", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("w6m", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("w6m", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("w6m", document2.location());
      assertEquals("w6m", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("eesed", "eesed");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("eesed", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("eesed", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      document0.setSiblingIndex((-397));
      assertEquals("#root", document0.tagName());
      assertEquals("eesed", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals((-397), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("eesed", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.appendText("eesed");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("eesed", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals((-397), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("eesed", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("eesed", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("eesed", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals((-397), document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("m", "m");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("m", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("m", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("m", element0.baseUri());
      
      Element element1 = element0.appendText("n@SdKpTz2p^vp");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("m", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(2, element0.childNodeSize());
      assertEquals("m", element0.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("m", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("m", "m");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("m", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("m", document0.baseUri());
      assertFalse(document0.hasParent());
      
      document0.reparentChild(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("m", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("m", document0.baseUri());
      
      Document document1 = (Document)document0.appendText("n@SdKpTz2p^vp");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("m", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("m", document0.baseUri());
      assertEquals("m", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("m", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Tag tag0 = Tag.valueOf("nb54Kp(7U");
      assertNotNull(tag0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("nb54Kp(7U", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("nb54Kp(7U", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "nb54Kp(7U", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("nb54Kp(7U", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("nb54Kp(7U", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("nb54Kp(7U", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("nb54Kp(7U", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("nb54Kp(7U", formElement0.nodeName());
      
      Element element0 = formElement0.appendElement("nb54Kp(7U");
      assertNotNull(element0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("nb54Kp(7U", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("nb54Kp(7U", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals("nb54Kp(7U", formElement0.tagName());
      assertEquals(1, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals("nb54Kp(7U", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("nb54Kp(7U", formElement0.nodeName());
      assertEquals("nb54kp(7u", element0.nodeName());
      assertEquals("nb54kp(7u", element0.tagName());
      assertEquals("nb54Kp(7U", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "body");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.location());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.appendElement("body");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.location());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Document.createShell(">C=-F_");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(">C=-F_", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(">C=-F_", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(">C=-F_", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(">C=-F_", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(">C=-F_", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.appendChild(document0);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(">C=-F_", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(">C=-F_", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(">C=-F_", element0.baseUri());
      assertEquals(">C=-F_", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.baseUri());
      assertEquals("head", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.baseUri());
      assertEquals("head", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("head", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      
      Element element1 = element0.append("head");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.baseUri());
      assertEquals("head", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("head", element0.baseUri());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("head", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pl", "pl");
      assertNotNull(document0);
      assertEquals("pl", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("pl", document0.location());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.shallowClone();
      assertNotNull(element0);
      assertEquals("pl", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("pl", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(element0.hasParent());
      assertEquals("pl", element0.baseUri());
      assertEquals("#root", element0.nodeName());
      assertEquals("#root", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      Element element1 = element0.append("");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("pl", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("pl", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(element0.hasParent());
      assertEquals("pl", element0.baseUri());
      assertEquals("#root", element0.nodeName());
      assertEquals("#root", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("pl", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("#root", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parse("jUU$(9)]8", "jUU$(9)]8");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("jUU$(9)]8", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("jUU$(9)]8", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      
      Tag tag0 = Tag.valueOf("jUU$(9)]8");
      assertNotNull(tag0);
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("jUU$(9)]8", tag0.getName());
      assertEquals("jUU$(9)]8", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      
      CDataNode cDataNode0 = new CDataNode("6$l5/4qO\")j6-I 4hsw");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "jUU$(9)]8", attributes0);
      assertNotNull(formElement0);
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("jUU$(9)]8", tag0.getName());
      assertEquals("jUU$(9)]8", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("jUU$(9)]8", formElement0.tagName());
      assertEquals("jUU$(9)]8", formElement0.nodeName());
      assertEquals("jUU$(9)]8", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      
      Document document1 = (Document)document0.prependChild(formElement0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("jUU$(9)]8", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("jUU$(9)]8", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("jUU$(9)]8", tag0.getName());
      assertEquals("jUU$(9)]8", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals("jUU$(9)]8", formElement0.tagName());
      assertEquals("jUU$(9)]8", formElement0.nodeName());
      assertEquals("jUU$(9)]8", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertTrue(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("jUU$(9)]8", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("jUU$(9)]8", document1.baseUri());
      
      DocumentType documentType0 = new DocumentType("xzhp!KA;AFHYF5:", "jUU$(9)]8", "org.jsoup.parser.Token$CData");
      assertNotNull(documentType0);
      assertFalse(documentType0.hasParent());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      
      FormElement formElement1 = (FormElement)formElement0.after((Node) documentType0);
      assertNotNull(formElement1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("jUU$(9)]8", tag0.getName());
      assertEquals("jUU$(9)]8", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals("jUU$(9)]8", formElement0.tagName());
      assertEquals("jUU$(9)]8", formElement0.nodeName());
      assertEquals("jUU$(9)]8", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertTrue(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(1, documentType0.siblingIndex());
      assertTrue(documentType0.hasParent());
      assertEquals("#doctype", documentType0.nodeName());
      assertFalse(formElement1.isBlock());
      assertEquals("jUU$(9)]8", formElement1.tagName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("jUU$(9)]8", formElement1.nodeName());
      assertEquals("jUU$(9)]8", formElement1.baseUri());
      assertEquals(0, formElement1.childNodeSize());
      assertTrue(formElement1.hasParent());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^Ez_+pgRMc", "il!9f4|TB");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("il!9f4|TB", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("il!9f4|TB", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("il!9f4|TB", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("il!9f4|TB", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("il!9f4|TB", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = element0.after((Node) document0);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("il!9f4|TB", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.siblingIndex());
      assertEquals("il!9f4|TB", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("il!9f4|TB", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals("il!9f4|TB", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Document.createShell("&quot;");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("&quot;", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("&quot;", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("&quot;", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("&quot;", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("&quot;", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = element0.after("&quot;");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("&quot;", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("&quot;", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("&quot;", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("&quot;", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("w6m", document0.location());
      
      Element element0 = document0.createElement("w6m");
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("w6m", document0.location());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("w6m", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("w6m", element0.baseUri());
      assertEquals("w6m", element0.tagName());
      
      Element element1 = element0.prepend("n<r`");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("w6m", document0.location());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("w6m", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("w6m", element0.baseUri());
      assertEquals("w6m", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("w6m", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("w6m", element1.baseUri());
      assertEquals("w6m", element1.tagName());
      
      Document document1 = (Document)document0.prependChild(element0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("w6m", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("w6m", document0.location());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("w6m", element0.nodeName());
      assertEquals("w6m", element0.baseUri());
      assertEquals("w6m", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("w6m", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("w6m", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      
      Element element2 = element0.after("n");
      assertNotNull(element2);
      assertSame(document0, document1);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("w6m", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("w6m", document0.location());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("w6m", element0.nodeName());
      assertEquals("w6m", element0.baseUri());
      assertEquals("w6m", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("w6m", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals("w6m", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("w6m", element2.tagName());
      assertFalse(element2.isBlock());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("w6m", document0.baseUri());
      
      Element element0 = document0.prependElement("bl");
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("w6m", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("bl", element0.tagName());
      assertEquals("w6m", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("bl", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      
      Document document1 = (Document)document0.prependText("w6m");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("w6m", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals("w6m", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Element element1 = element0.addClass("bl");
      assertNotNull(element1);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("w6m", document0.baseUri());
      assertEquals("bl", element0.tagName());
      assertEquals("w6m", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("bl", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element1.isBlock());
      assertEquals("bl", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("bl", element1.nodeName());
      assertEquals("w6m", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("w6m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("w6m", document0.location());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("w6m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("w6m", document0.location());
      assertEquals("head", element0.nodeName());
      assertEquals("w6m", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      
      Element element1 = element0.addClass("bl");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("w6m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("w6m", document0.location());
      assertEquals("head", element0.nodeName());
      assertEquals("w6m", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("w6m", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.addClass(";2jA");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("7jx-F[+x+E0", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pl", "pl");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("pl", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("pl", document0.baseUri());
      
      document0.reparentChild(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("pl", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("pl", document0.baseUri());
      
      // Undeclared exception!
      document0.wrap("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = new Document("Xub \"w{YYA[\"-F9w4");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Xub \"w{YYA[\"-F9w4", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Xub \"w{YYA[\"-F9w4", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pl", "pl");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("pl", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("pl", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.reparentChild(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("pl", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("pl", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      document0.val("\"Fny=_V(/b");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      assertNotNull(document0);
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.settings((ParseSettings) null);
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      
      Document document1 = document0.parser(parser1);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      
      // Undeclared exception!
      try { 
        document1.val("[_Y`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Tag tag0 = Tag.valueOf("mG;]{fqKc0BR/SA:W");
      assertNotNull(tag0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("mG;]{fqKc0BR/SA:W", tag0.getName());
      assertEquals("mG;]{fqKc0BR/SA:W", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "mI;m=6a", attributes0);
      assertNotNull(pseudoTextElement0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("mG;]{fqKc0BR/SA:W", tag0.getName());
      assertEquals("mG;]{fqKc0BR/SA:W", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes0.size());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("mG;]{fqKc0BR/SA:W", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("mG;]{fqKc0BR/SA:W", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("mI;m=6a", pseudoTextElement0.baseUri());
      
      String[] stringArray0 = new String[1];
      attributes0.keys = stringArray0;
      assertEquals(0, attributes0.size());
      
      // Undeclared exception!
      try { 
        pseudoTextElement0.val("mG;]{fqKc0BR/SA:W");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("w6m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = new Document("A ");
      assertNotNull(document0);
      assertEquals("A ", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("A ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      document0.reparentChild(document0);
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      document0.tagName("7jx-F[+x+E0");
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = new Document("7jQx-m[+x+E0");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("7jQx-m[+x+E0", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("7jQx-m[+x+E0", document0.location());
      
      document0.reparentChild(document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("7jQx-m[+x+E0", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("7jQx-m[+x+E0", document0.location());
      
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      DataNode dataNode0 = new DataNode("");
      assertNotNull(dataNode0);
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      
      document0.setParentNode(dataNode0);
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("[[.DZt9,'jviv^c'(", "[[.DZt9,'jviv^c'(");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("[[.DZt9,'jviv^c'(", document0.location());
      assertEquals("[[.DZt9,'jviv^c'(", document0.baseUri());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.selectFirst("^+");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '^+': unexpected token at '^+'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Element element0 = new Element("java.lang.string@0000000020");
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      
      // Undeclared exception!
      try { 
        element0.selectFirst("[8FM*QlXC%RXf!UrM0p");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'R'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parse("acronym", "acronym");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("acronym", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("acronym", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E50");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7jx-F[+x+E50", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("7jx-F[+x+E50", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.select("@_yZS G]tBY?,%]I=");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '@_yZS G]tBY?,%]I=': unexpected token at '@_yZS G]tBY?,%]I='
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pl", "pl");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("pl", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("pl", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = new Document("mI;m=6a");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("mI;m=6a", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("mI;m=6a", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      
      document0.childNodes = null;
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("mI;m=6a", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("mI;m=6a", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      
      document0.reparentChild(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("mI;m=6a", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("mI;m=6a", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("w6m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pl", "pl");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("pl", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("pl", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.reparentChild(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("pl", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("pl", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      document0.prependElement("body");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Element element0 = new Element("p]et:pae");
      assertNotNull(element0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("p]et:pae", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("p]et:pae", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      
      List<Node> list0 = element0.childNodes();
      assertNotNull(list0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("p]et:pae", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("p]et:pae", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      element0.childNodes = list0;
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("p]et:pae", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("p]et:pae", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, element0.childNodes.size());
      assertTrue(element0.childNodes.isEmpty());
      
      // Undeclared exception!
      try { 
        element0.prependElement(".:");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Element element0 = new Element("reversed");
      assertNotNull(element0);
      assertEquals("reversed", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("reversed", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      
      List<Node> list0 = element0.childNodes();
      assertNotNull(list0);
      assertEquals("reversed", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("reversed", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      element0.childNodes = list0;
      assertEquals("reversed", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("reversed", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, element0.childNodes.size());
      assertTrue(element0.childNodes.isEmpty());
      
      // Undeclared exception!
      try { 
        element0.prependChild(element0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("w6m", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("w6m", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("w6m", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.prependElement("w6m");
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("w6m", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("w6m", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("w6m", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("w6m", element1.baseUri());
      assertEquals("w6m", element1.tagName());
      assertFalse(element1.isBlock());
      
      element0.reparentChild(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("w6m", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("w6m", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("w6m", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("w6m", element1.baseUri());
      assertEquals("w6m", element1.tagName());
      assertFalse(element1.isBlock());
      
      // Undeclared exception!
      try { 
        element0.prependChild(element1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Tag tag0 = Tag.valueOf("nb54Kp(7U");
      assertNotNull(tag0);
      assertFalse(tag0.isKnownTag());
      assertEquals("nb54Kp(7U", tag0.toString());
      assertEquals("nb54Kp(7U", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "nb54Kp(7U", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isKnownTag());
      assertEquals("nb54Kp(7U", tag0.toString());
      assertEquals("nb54Kp(7U", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals(0, attributes0.size());
      assertEquals("nb54Kp(7U", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals("nb54Kp(7U", formElement0.baseUri());
      assertEquals("nb54Kp(7U", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      
      // Undeclared exception!
      try { 
        formElement0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Node", "org.jsoup.nodes.Node");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Node", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Node", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.reparentChild(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Node", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Node", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      document0.prepend("org.jsoup.nodes.Node");
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Tag tag0 = Tag.valueOf("n<r`");
      assertNotNull(tag0);
      assertFalse(tag0.isKnownTag());
      assertEquals("n<r`", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("n<r`", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      
      Element element0 = new Element(tag0, ":only-of-type", (Attributes) null);
      assertNotNull(element0);
      assertFalse(tag0.isKnownTag());
      assertEquals("n<r`", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("n<r`", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(element0.isBlock());
      assertEquals(":only-of-type", element0.baseUri());
      assertEquals("n<r`", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("n<r`", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      
      // Undeclared exception!
      try { 
        element0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      
      TextNode textNode0 = new TextNode("4K#@bY");
      assertNotNull(textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      
      document0.parentNode = (Node) textNode0;
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      
      // Undeclared exception!
      try { 
        document0.prepend("7jx-F[+x+E0");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7jx-F[+x+E0", "7jx-F[+x+E0");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("HZ-M~<X\"X");
      assertNotNull(mockPrintWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(8192);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(8192, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(8192, document_OutputSettings1.indentAmount());
      
      // Undeclared exception!
      document0.outerHtmlTail(mockPrintWriter0, 60, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parse("u`", "u`");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("u`", document0.baseUri());
      assertEquals("u`", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "u`");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.remaining());
      assertEquals("u`", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.length());
      assertEquals(2, charBuffer0.capacity());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 2584, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(8, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(8, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.length());
      assertEquals(8, charBuffer0.capacity());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 812, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Document.createShell(" ");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(" ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" ", document0.baseUri());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      assertNotNull(mockFileWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockFileWriter0, 0, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parse("6 #Z&sq", "6 #Z&sq");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("6 #Z&sq", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("6 #Z&sq", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "6 #Z&sq");
      assertNotNull(stringBuilder0);
      assertEquals("6 #Z&sq", stringBuilder0.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringBuilder0, (-1220), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parse("u`", "u`");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("u`", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("u`", document0.location());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("u`");
      assertNotNull(mockPrintWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintWriter0, 1114111, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Eleme*t", "org.jsoup.nodes.Eleme*t");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Eleme*t", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Eleme*t", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(125);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      // Undeclared exception!
      document0.outerHtmlHead(charArrayWriter0, 2147483645, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("m", "m");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("m", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("m", document0.baseUri());
      assertFalse(document0.hasParent());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1841);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charArrayWriter0, 1841, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("k. /qY0n>iH'`f", true);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.prepareEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charsetEncoder0);
      assertNotNull(outputStreamWriter0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintWriter0, (-1625949436), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = new Document("W");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("W", document0.location());
      assertEquals("W", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("W", (String) null, false);
      assertNotNull(xmlDeclaration0);
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      
      Document document1 = (Document)document0.doClone(xmlDeclaration0);
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("W", document0.location());
      assertEquals("W", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("W", document1.baseUri());
      assertEquals("W", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document1.lastElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)document0.appendChild(document0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals("7jx-F[+x+E0", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("7jx-F[+x+E0", document1.baseUri());
      
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("7jx-F[+x+E0", "org.jsoup.select.Evaluator$AttributeKeyPair");
      assertNotNull(evaluator_AttributeWithValueNot0);
      
      // Undeclared exception!
      document0.is((Evaluator) evaluator_AttributeWithValueNot0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = new Document("8i66dP4_ZdFw^H%heql");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("8i66dP4_ZdFw^H%heql", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("8i66dP4_ZdFw^H%heql", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("math", "");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.is("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pl", "pl");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("pl", document0.baseUri());
      assertEquals("pl", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      document0.reparentChild(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("pl", document0.baseUri());
      assertEquals("pl", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      
      // Undeclared exception!
      document0.is("e");
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".V{K-{-;|", "h7}VG1B~e ");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("h7}VG1B~e ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("h7}VG1B~e ", document0.location());
      
      document0.childNodes = null;
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("h7}VG1B~e ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("h7}VG1B~e ", document0.location());
      
      Elements elements0 = document0.parents();
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("h7}VG1B~e ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("h7}VG1B~e ", document0.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      // Undeclared exception!
      try { 
        document0.insertChildren(62, (Collection<? extends Node>) elements0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parse("BMia%*!/s{/O*U}X1n", "BMia%*!/s{/O*U}X1n");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("BMia%*!/s{/O*U}X1n", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("BMia%*!/s{/O*U}X1n", document0.baseUri());
      
      Elements elements0 = document0.getElementsByIndexLessThan(1);
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("BMia%*!/s{/O*U}X1n", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("BMia%*!/s{/O*U}X1n", document0.baseUri());
      assertFalse(elements0.isEmpty());
      assertEquals(2, elements0.size());
      
      // Undeclared exception!
      try { 
        document0.insertChildren(1, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pl", "pl");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("pl", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("pl", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.parentNode = (Node) document0;
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("pl", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("pl", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertTrue(document0.parentNode.hasParent());
      
      // Undeclared exception!
      document0.html("WlWC");
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parse("", "org.jsoup.select.Collector$Accumulator");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Collector$Accumulator", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Collector$Accumulator", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("m", "m");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("m", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("m", document0.baseUri());
      
      document0.reparentChild(document0);
      assertFalse(document0.isBlock());
      assertEquals("m", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("m", document0.baseUri());
      
      MockFile mockFile0 = new MockFile("d<RG|,", "->(0gq@$[!l(}Q,");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      document0.html(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parse("$mI;m7&", "$mI;m7&");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("$mI;m7&", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("$mI;m7&", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(51);
      assertNotNull(charBuffer0);
      assertEquals(51, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(51, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(51, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(51, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("p_", "p_");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("p_", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("p_", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.html((OutputStreamWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("m", "m");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("m", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("m", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      document0.reparentChild(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("m", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("m", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Document.createShell("bm");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("bm", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("bm", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset((Charset) null);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      
      Document document1 = document0.outputSettings(document_OutputSettings1);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("bm", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("bm", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals("bm", document1.baseUri());
      assertEquals("bm", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      // Undeclared exception!
      try { 
        document1.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document$OutputSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$mI1;m=6a", "$mI1;m=6a");
      assertNotNull(document0);
      assertEquals("$mI1;m=6a", document0.baseUri());
      assertEquals("$mI1;m=6a", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      
      DataNode dataNode0 = new DataNode("$mI1;m=6a", "$mI1;m=6a");
      assertNotNull(dataNode0);
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      
      document0.parentNode = (Node) dataNode0;
      assertEquals("$mI1;m=6a", document0.baseUri());
      assertEquals("$mI1;m=6a", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parse("AttruuteValue_doubleQuoted", "AttruuteValue_doubleQuoted");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("AttruuteValue_doubleQuoted", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("AttruuteValue_doubleQuoted", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.appendElement("textarea");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("AttruuteValue_doubleQuoted", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("AttruuteValue_doubleQuoted", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("AttruuteValue_doubleQuoted", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.nodeName());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.prepend("AttruuteValue_doubleQuoted");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("AttruuteValue_doubleQuoted", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("AttruuteValue_doubleQuoted", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("AttruuteValue_doubleQuoted", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("AttruuteValue_doubleQuoted", element1.baseUri());
      assertEquals("textarea", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("textarea", element1.tagName());
      
      element1.siblingIndex = (-658);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("AttruuteValue_doubleQuoted", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("AttruuteValue_doubleQuoted", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", element0.tagName());
      assertEquals((-658), element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("AttruuteValue_doubleQuoted", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("AttruuteValue_doubleQuoted", element1.baseUri());
      assertEquals("textarea", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals((-658), element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("textarea", element1.tagName());
      
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("w6m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":nth-child(%d)", ":nth-child(%d)");
      assertNotNull(document0);
      assertEquals(":nth-child(%d)", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(":nth-child(%d)", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Document.createShell("LC1|kf)IIv2K");
      assertNotNull(document0);
      assertEquals("LC1|kf)IIv2K", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("LC1|kf)IIv2K", document0.location());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Document.createShell("o~Q?](vb-#h'");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("o~Q?](vb-#h'", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("o~Q?](vb-#h'", document0.baseUri());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("6$l5/4qO\")j6-I 4hsw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 6$l5/4qO\")j6-I 4hsw
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#j!", "</");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      DocumentType documentType0 = new DocumentType((String) null, "br", "org.jsoup.nodes.Element$2", (String) null, "#j!");
      assertNotNull(documentType0);
      assertFalse(documentType0.hasParent());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      
      document0.parentNode = (Node) documentType0;
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(documentType0.hasParent());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      assertFalse(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("org.jsoup.nodes.Attributes");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parse("mI;m=6a", "mI;m=6a");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("mI;m=6a", document0.location());
      assertEquals("mI;m=6a", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      document0.setSiblingIndex((-2068));
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals((-2068), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("mI;m=6a", document0.location());
      assertEquals("mI;m=6a", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      document0.reparentChild(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals((-2068), document0.siblingIndex());
      assertEquals("mI;m=6a", document0.location());
      assertEquals("mI;m=6a", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("h3K");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pl", "pl");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("pl", document0.location());
      assertEquals("pl", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("A(tributeValifnroFblRQuoted", "A(tributeValifnroFblRQuoted");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("A(tributeValifnroFblRQuoted", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("A(tributeValifnroFblRQuoted", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      
      DocumentType documentType0 = new DocumentType("A(tributeValifnroFblRQuoted", " ", ";^hs`YWeTZ2xJX0#eI", " ");
      assertNotNull(documentType0);
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      assertFalse(documentType0.hasParent());
      
      document0.parentNode = (Node) documentType0;
      assertEquals("A(tributeValifnroFblRQuoted", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("A(tributeValifnroFblRQuoted", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      assertFalse(documentType0.hasParent());
      assertFalse(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      Pattern pattern0 = Pattern.compile("52>X$S9", 63);
      assertNotNull(pattern0);
      assertEquals("52>X$S9", pattern0.pattern());
      assertEquals("52>X$S9", pattern0.toString());
      assertEquals(63, pattern0.flags());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText(pattern0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Document.createShell("LC1|kf)IIv2K");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("LC1|kf)IIv2K", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("LC1|kf)IIv2K", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("0{WmR$w:|22!?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 0{WmR$w:|22!?
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "a[~g6R]WGZ");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("a[~g6R]WGZ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("a[~g6R]WGZ", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      document0.setParentNode(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("a[~g6R]WGZ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("a[~g6R]WGZ", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      document0.setSiblingIndex((-2322));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("a[~g6R]WGZ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals((-2322), document0.siblingIndex());
      assertEquals("a[~g6R]WGZ", document0.location());
      
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("|RG]B8rzID))Uo");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nods.Element", "org.jsoup.nods.Element");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nods.Element", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nods.Element", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      CDataNode cDataNode0 = new CDataNode("bm");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      document0.parentNode = (Node) cDataNode0;
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nods.Element", document0.baseUri());
      assertEquals("org.jsoup.nods.Element", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("org.jsoup.nods.Element");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pl", "pl");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("pl", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("pl", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = new Document("body");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      Comment comment0 = new Comment("body", ";6,V9E83HD");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      document0.parentNode = (Node) comment0;
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan(62);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Document.createShell(".KNBMz K0yy?s&&P");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(".KNBMz K0yy?s&&P", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(".KNBMz K0yy?s&&P", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(".KNBMz K0yy?s&&P", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(".KNBMz K0yy?s&&P", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(".KNBMz K0yy?s&&P", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(".KNBMz K0yy?s&&P", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      document1.childNodes = null;
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(".KNBMz K0yy?s&&P", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(".KNBMz K0yy?s&&P", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(".KNBMz K0yy?s&&P", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(".KNBMz K0yy?s&&P", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      // Undeclared exception!
      try { 
        document1.getElementsByIndexEquals(759);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Document.createShell("DcuTJ.E%V98");
      assertNotNull(document0);
      assertEquals("DcuTJ.E%V98", document0.baseUri());
      assertEquals("DcuTJ.E%V98", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      
      document0.childNodes = null;
      assertEquals("DcuTJ.E%V98", document0.baseUri());
      assertEquals("DcuTJ.E%V98", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      
      // Undeclared exception!
      try { 
        document0.getElementsByClass("java.lang.string@0000000038");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("w6m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("b#)", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("class", "class");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("class", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("class", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("&3'6_odSWi~;MYYa?", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Document.createShell("LC1|kf)IIv2K");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("LC1|kf)IIv2K", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("LC1|kf)IIv2K", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "EpfSf_Ov$UED*(V)8Zu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Document.createShell("o~Q?](vb-#h'");
      assertNotNull(document0);
      assertEquals("o~Q?](vb-#h'", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("o~Q?](vb-#h'", document0.location());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("           ", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Document.createShell("LC1|kf)IIv2K");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("LC1|kf)IIv2K", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("LC1|kf)IIv2K", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("iPBQnP", "LC1|kf)IIv2K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: LC1|kf)IIv2K
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pl", "pl");
      assertNotNull(document0);
      assertEquals("pl", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("pl", document0.location());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("\"ga|AZX", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parse(";=6", "");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.appendElement("^Y[| J");
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("^y[| j", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("^y[| j", element0.tagName());
      assertFalse(element0.isBlock());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      List<Node> list0 = parser0.parseFragmentInput(";=6", document0, ";=6");
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      element0.childNodes = list0;
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("^y[| j", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("^y[| j", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(element0.childNodes.isEmpty());
      assertEquals(1, element0.childNodes.size());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining(" > ", "&gt; \n<html>\n <head></head>\n <body>\n  ;=6\n </body>\n</html>\n<^y[| j>\n ;=6\n</#root>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      assertNotNull(tag0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertEquals("html", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isBlock());
      assertEquals("html", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "pl", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertEquals("html", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isBlock());
      assertEquals("html", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("html", formElement0.nodeName());
      assertEquals("html", formElement0.tagName());
      assertTrue(formElement0.isBlock());
      assertEquals("pl", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeValueContaining("head", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("w6m", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "optgroup");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Tag tag0 = Tag.valueOf("body");
      assertNotNull(tag0);
      assertFalse(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("body", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.canContainBlock());
      assertEquals("body", tag0.toString());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "=ORG_Y~)?", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("body", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.canContainBlock());
      assertEquals("body", tag0.toString());
      assertEquals(0, attributes0.size());
      assertTrue(formElement0.isBlock());
      assertEquals("body", formElement0.tagName());
      assertEquals("=ORG_Y~)?", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals("body", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      
      // Undeclared exception!
      try { 
        formElement0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fdeesed", "fdeesed");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("fdeesed", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("fdeesed", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("fdeesed", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("fdeesed", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("fdeesed", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("fdeesed", document1.location());
      
      Document document2 = (Document)document0.appendTo(document1);
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("fdeesed", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("fdeesed", document0.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("fdeesed", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("fdeesed", document1.location());
      assertEquals("fdeesed", document2.baseUri());
      assertEquals("fdeesed", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      
      document2.setSiblingIndex((-397));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertEquals((-397), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("fdeesed", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("fdeesed", document0.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("fdeesed", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("fdeesed", document1.location());
      assertEquals("fdeesed", document2.baseUri());
      assertEquals("fdeesed", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals((-397), document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      
      // Undeclared exception!
      try { 
        document0.getElementById("fdeesed");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Document.createShell("XVuyK]");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("XVuyK]", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("XVuyK]", document0.location());
      assertEquals("#root", document0.tagName());
      
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Element element0 = new Element("p]et:pae");
      assertNotNull(element0);
      assertFalse(element0.isBlock());
      assertEquals("p]et:pae", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("p]et:pae", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      
      List<Node> list0 = element0.childNodes();
      assertNotNull(list0);
      assertFalse(element0.isBlock());
      assertEquals("p]et:pae", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("p]et:pae", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      element0.childNodes = list0;
      assertFalse(element0.isBlock());
      assertEquals("p]et:pae", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("p]et:pae", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(element0.childNodes.isEmpty());
      assertEquals(0, element0.childNodes.size());
      
      // Undeclared exception!
      try { 
        element0.empty();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("DoctypePublicIdentifier_doubleQuoted", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("doctypepublicidentifier_doublequoted", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("doctypepublicidentifier_doublequoted", tag0.toString());
      assertFalse(tag0.isBlock());
      
      Element element0 = new Element(tag0, "7jx-F[+x+E0");
      assertNotNull(element0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("doctypepublicidentifier_doublequoted", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("doctypepublicidentifier_doublequoted", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("doctypepublicidentifier_doublequoted", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("7jx-F[+x+E0", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("doctypepublicidentifier_doublequoted", element0.tagName());
      assertFalse(element0.hasParent());
      
      Document document1 = (Document)document0.appendTo(element0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("doctypepublicidentifier_doublequoted", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("doctypepublicidentifier_doublequoted", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("doctypepublicidentifier_doublequoted", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("7jx-F[+x+E0", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("doctypepublicidentifier_doublequoted", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("7jx-F[+x+E0", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("7jx-F[+x+E0", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      
      Document document2 = (Document)document0.toggleClass("7jx-F[+x+E0");
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("7jx-F[+x+E0", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("7jx-F[+x+E0", document2.baseUri());
      assertFalse(document2.isBlock());
      
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '#root.java.lang.String@0000000073': unexpected token at '@0000000073'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parse("X", "X");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("X", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("X", document0.location());
      assertFalse(document0.hasParent());
      
      DataNode dataNode0 = new DataNode((String) null);
      assertNotNull(dataNode0);
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      
      document0.parentNode = (Node) dataNode0;
      assertEquals(1, document0.childNodeSize());
      assertEquals("X", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("X", document0.location());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Document.createShell("cav2JtW9\b@MS ");
      assertNotNull(document0);
      assertEquals("cav2JtW9\b@MS ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("cav2JtW9\b@MS ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Document.createShell("Cannot set a request body for HTTP method ");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Cannot set a request body for HTTP method ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Cannot set a request body for HTTP method ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.childNodes = null;
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Cannot set a request body for HTTP method ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Cannot set a request body for HTTP method ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.children();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Tag tag0 = Tag.valueOf("*");
      assertNotNull(tag0);
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("*", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("*", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      
      Element element0 = new Element(tag0, "*");
      assertNotNull(element0);
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("*", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("*", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("*", element0.baseUri());
      assertEquals("*", element0.nodeName());
      assertEquals("*", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      
      // Undeclared exception!
      try { 
        element0.child(236);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 236, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("u*", "u*");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("u*", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("u*", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("u*", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("u*", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("u*", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      
      document0.setParentNode(element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("u*", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("u*", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("u*", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      
      // Undeclared exception!
      try { 
        element0.before((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = new Document("");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      document0.addChildren(nodeArray0);
      assertEquals(7, nodeArray0.length);
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      document0.before("");
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7jx-F[+x+E0", "7jx-F[+x+E0");
      assertNotNull(document0);
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("m", "m");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("m", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("m", document0.baseUri());
      assertFalse(document0.hasParent());
      
      document0.reparentChild(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("m", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("m", document0.baseUri());
      
      // Undeclared exception!
      document0.attr("java.lang.string@0000000048", "m");
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.attr((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", "", true);
      assertNotNull(xmlDeclaration0);
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      
      document0.parentNode = (Node) xmlDeclaration0;
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pl", "pl");
      assertNotNull(document0);
      assertEquals("pl", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("pl", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("m", "m");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("m", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("m", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      
      document0.reparentChild(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertTrue(document0.hasParent());
      
      // Undeclared exception!
      document0.appendElement("");
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.settings((ParseSettings) null);
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      
      Document document0 = parser1.parseInput("\n", "?nHvpcU 5>I");
      assertNotNull(document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("?nHvpcU 5>I", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("?nHvpcU 5>I", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.appendElement("mI;m=6a");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7jx-F[+x+E0", "7jx-F[+x+E0");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.appendElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parse("</", "pl");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("pl", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("pl", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      List<Node> list0 = document0.childNodes();
      assertNotNull(list0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("pl", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("pl", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      document0.childNodes = list0;
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("pl", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("pl", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.childNodes.isEmpty());
      assertEquals(1, document0.childNodes.size());
      
      // Undeclared exception!
      try { 
        document0.appendChild(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Element element0 = new Element("xD@}oLs");
      assertNotNull(element0);
      assertEquals("", element0.baseUri());
      assertEquals("xD@}oLs", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("xD@}oLs", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      
      Document document0 = Document.createShell("xD@}oLs");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xD@}oLs", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xD@}oLs", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      document0.setParentNode(element0);
      assertEquals("", element0.baseUri());
      assertEquals("xD@}oLs", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("xD@}oLs", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("xD@}oLs", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xD@}oLs", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        element0.appendChild(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pl", "pl");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("pl", document0.baseUri());
      assertEquals("pl", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      document0.reparentChild(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("pl", document0.baseUri());
      assertEquals("pl", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      // Undeclared exception!
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parse("W&e:2:kW`p", "B5r,!c}JA4f*?>YX");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("B5r,!c}JA4f*?>YX", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("B5r,!c}JA4f*?>YX", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.clone();
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("B5r,!c}JA4f*?>YX", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("B5r,!c}JA4f*?>YX", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("B5r,!c}JA4f*?>YX", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("B5r,!c}JA4f*?>YX", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      
      List<Node> list0 = document0.childNodes();
      assertNotNull(list0);
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("B5r,!c}JA4f*?>YX", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("B5r,!c}JA4f*?>YX", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      document1.childNodes = list0;
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("B5r,!c}JA4f*?>YX", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("B5r,!c}JA4f*?>YX", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("B5r,!c}JA4f*?>YX", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("B5r,!c}JA4f*?>YX", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document1.childNodes.isEmpty());
      assertEquals(1, document1.childNodes.size());
      
      // Undeclared exception!
      try { 
        document1.append("I;=E*");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pl", "pl");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("pl", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("pl", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("m", "m");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      document0.reparentChild(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("m", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("m", "m");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("m", document0.location());
      assertEquals("m", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.reparentChild(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("m", document0.location());
      assertEquals("m", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      document0.after("m");
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parse("^|g=a4(q/owR97`M", "^|g=a4(q/owR97`M");
      assertNotNull(document0);
      assertEquals("^|g=a4(q/owR97`M", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^|g=a4(q/owR97`M", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("^|g=a4(q/owR97`M", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^|g=a4(q/owR97`M", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.isBlock());
      assertEquals("^|g=a4(q/owR97`M", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      
      Document document1 = (Document)document0.doClone(element0);
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals("^|g=a4(q/owR97`M", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^|g=a4(q/owR97`M", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.isBlock());
      assertEquals("^|g=a4(q/owR97`M", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertFalse(document1.isBlock());
      assertEquals("^|g=a4(q/owR97`M", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^|g=a4(q/owR97`M", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      // Undeclared exception!
      try { 
        document1.after("java.lang.string@0000000079");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";eT_};h T%P{bpF/M", ";eT_};h T%P{bpF/M");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(";eT_};h T%P{bpF/M", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(";eT_};h T%P{bpF/M", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration(";eT_};h T%P{bpF/M", ";eT_};h T%P{bpF/M", true);
      assertNotNull(xmlDeclaration0);
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      
      document0.parentNode = (Node) xmlDeclaration0;
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(";eT_};h T%P{bpF/M", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(";eT_};h T%P{bpF/M", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.after(";eT_};h T%P{bpF/M");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("pl");
      assertNotNull(cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "pl", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf(":only-of-type", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals(":only-of-type", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals(":only-of-type", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Document.createShell("DcuTJ.E%V98");
      //  // Unstable assertion: assertNotNull(document0);
      //  // Unstable assertion: assertEquals("DcuTJ.E%V98", document0.location());
      //  // Unstable assertion: assertFalse(document0.hasParent());
      //  // Unstable assertion: assertFalse(document0.isBlock());
      //  // Unstable assertion: assertEquals(1, document0.childNodeSize());
      //  // Unstable assertion: assertEquals(0, document0.siblingIndex());
      //  // Unstable assertion: assertEquals("#root", document0.tagName());
      //  // Unstable assertion: assertEquals("#document", document0.nodeName());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      //  // Unstable assertion: assertEquals("DcuTJ.E%V98", document0.baseUri());
      //  // Unstable assertion: assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.toggleClass("DcuTJ.E%V98");
      //  // Unstable assertion: assertNotNull(document1);
      //  // Unstable assertion: assertSame(document0, document1);
      //  // Unstable assertion: assertSame(document1, document0);
      //  // Unstable assertion: assertEquals("DcuTJ.E%V98", document0.location());
      //  // Unstable assertion: assertFalse(document0.hasParent());
      //  // Unstable assertion: assertFalse(document0.isBlock());
      //  // Unstable assertion: assertEquals(1, document0.childNodeSize());
      //  // Unstable assertion: assertEquals(0, document0.siblingIndex());
      //  // Unstable assertion: assertEquals("#root", document0.tagName());
      //  // Unstable assertion: assertEquals("#document", document0.nodeName());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      //  // Unstable assertion: assertEquals("DcuTJ.E%V98", document0.baseUri());
      //  // Unstable assertion: assertFalse(document0.updateMetaCharsetElement());
      //  // Unstable assertion: assertFalse(document1.updateMetaCharsetElement());
      //  // Unstable assertion: assertEquals(1, document1.childNodeSize());
      //  // Unstable assertion: assertEquals("#document", document1.nodeName());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      //  // Unstable assertion: assertFalse(document1.isBlock());
      //  // Unstable assertion: assertEquals("#root", document1.tagName());
      //  // Unstable assertion: assertEquals(0, document1.siblingIndex());
      //  // Unstable assertion: assertEquals("DcuTJ.E%V98", document1.location());
      //  // Unstable assertion: assertEquals("DcuTJ.E%V98", document1.baseUri());
      //  // Unstable assertion: assertFalse(document1.hasParent());
      
      boolean boolean0 = document1.hasClass("java.lang.string@0000000038");
      //  // Unstable assertion: assertSame(document0, document1);
      //  // Unstable assertion: assertSame(document1, document0);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertEquals("DcuTJ.E%V98", document0.location());
      //  // Unstable assertion: assertFalse(document0.hasParent());
      //  // Unstable assertion: assertFalse(document0.isBlock());
      //  // Unstable assertion: assertEquals(1, document0.childNodeSize());
      //  // Unstable assertion: assertEquals(0, document0.siblingIndex());
      //  // Unstable assertion: assertEquals("#root", document0.tagName());
      //  // Unstable assertion: assertEquals("#document", document0.nodeName());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      //  // Unstable assertion: assertEquals("DcuTJ.E%V98", document0.baseUri());
      //  // Unstable assertion: assertFalse(document0.updateMetaCharsetElement());
      //  // Unstable assertion: assertFalse(document1.updateMetaCharsetElement());
      //  // Unstable assertion: assertEquals(1, document1.childNodeSize());
      //  // Unstable assertion: assertEquals("#document", document1.nodeName());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      //  // Unstable assertion: assertFalse(document1.isBlock());
      //  // Unstable assertion: assertEquals("#root", document1.tagName());
      //  // Unstable assertion: assertEquals(0, document1.siblingIndex());
      //  // Unstable assertion: assertEquals("DcuTJ.E%V98", document1.location());
      //  // Unstable assertion: assertEquals("DcuTJ.E%V98", document1.baseUri());
      //  // Unstable assertion: assertFalse(document1.hasParent());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      boolean boolean0 = document0.hasClass("|nb{Z4hgmt5iq'\"2");
      assertFalse(boolean0);
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pl", "pl");
      assertNotNull(document0);
      assertEquals("pl", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("pl", document0.location());
      assertFalse(document0.isBlock());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertFalse(set0.contains("pl"));
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      Document document1 = (Document)document0.classNames(set0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(set0.contains("pl"));
      assertEquals("pl", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("pl", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("pl", document1.baseUri());
      assertEquals("pl", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = new Document("7jx-F[+x+E0");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("7jx-F[+x+E0", document0.location());
      
      Document document1 = (Document)document0.prepend("PLAINTEXT");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("7jx-F[+x+E0", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document1.location());
      assertEquals(1, document1.childNodeSize());
      
      String string0 = document0.data();
      assertNotNull(string0);
      assertSame(document0, document1);
      assertEquals("", string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "o`");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("o`", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("o`", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("o`", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("o`", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      
      Document document1 = (Document)document0.prepend("textarea");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      
      boolean boolean0 = document0.hasText();
      assertSame(document0, document1);
      assertTrue(boolean0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Document.createShell("o~Q?](vb-#h'");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("o~Q?](vb-#h'", document0.baseUri());
      assertEquals("o~Q?](vb-#h'", document0.location());
      assertFalse(document0.hasParent());
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("o~Q?](vb-#h'", document0.baseUri());
      assertEquals("o~Q?](vb-#h'", document0.location());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7jx-F[+x+E0", "7jx-F[+x+E0");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("7jx-F[+x+E0", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("7jx-F[+x+E0", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Element element0 = document0.previousElementSibling();
      assertNotNull(element0);
      assertSame(document0, document1);
      assertFalse(document0.isBlock());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("html", element0.tagName());
      assertEquals("html", element0.nodeName());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("7jx-F[+x+E0", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("m", "m");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("m", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("m", document0.baseUri());
      
      document0.reparentChild(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("m", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("m", document0.baseUri());
      
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("m", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("m", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pl", "pl");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("pl", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("pl", document0.location());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.createElement("pl");
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("pl", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("pl", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("pl", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("pl", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("pl", element0.baseUri());
      
      Element element1 = element0.prependElement("\"uzHg.[>=Ew*%mcrU");
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("pl", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("pl", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("pl", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("pl", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("pl", element0.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("\"uzhg.[>=ew*%mcru", element1.nodeName());
      assertEquals("pl", element1.baseUri());
      assertEquals("\"uzhg.[>=ew*%mcru", element1.tagName());
      
      Element element2 = element1.nextElementSibling();
      assertNull(element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("pl", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("pl", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("pl", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("pl", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("pl", element0.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("\"uzhg.[>=ew*%mcru", element1.nodeName());
      assertEquals("pl", element1.baseUri());
      assertEquals("\"uzhg.[>=ew*%mcru", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      
      document0.reparentChild(document0);
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      
      String string0 = document0.cssSelector();
      assertNotNull(string0);
      assertEquals("#root", string0);
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = new Document("peg2lxPi+C9Z");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("peg2lxPi+C9Z", document0.baseUri());
      assertEquals("peg2lxPi+C9Z", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      
      String string0 = document0.ownText();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("peg2lxPi+C9Z", document0.baseUri());
      assertEquals("peg2lxPi+C9Z", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = new Document("7jx-F[+x+E0");
      assertNotNull(document0);
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("#root", document0.tagName());
      
      boolean boolean0 = document0.isBlock();
      assertFalse(boolean0);
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      
      Document document1 = (Document)document0.empty();
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("7jx-F[+x+E0", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("7jx-F[+x+E0", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("7jx-F[+x+E0", "org.jsoup.select.Evaluator$AttributeKeyPair");
      assertNotNull(evaluator_AttributeWithValueNot0);
      
      boolean boolean0 = document0.is((Evaluator) evaluator_AttributeWithValueNot0);
      assertTrue(boolean0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = new Document("6$l5/4qO\")j6-I 4hsw");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("6$l5/4qO\")j6-I 4hsw", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("6$l5/4qO\")j6-I 4hsw", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      
      Pattern pattern0 = Pattern.compile("textarea", (-1352));
      assertNotNull(pattern0);
      assertEquals((-1352), pattern0.flags());
      assertEquals("textarea", pattern0.pattern());
      assertEquals("textarea", pattern0.toString());
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("GKObn&YDd0gO", pattern0);
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("6$l5/4qO\")j6-I 4hsw", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("6$l5/4qO\")j6-I 4hsw", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-1352), pattern0.flags());
      assertEquals("textarea", pattern0.pattern());
      assertEquals("textarea", pattern0.toString());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertEquals("w6m", string0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("w6m", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("w6m", document0.location());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Tag tag0 = Tag.valueOf("tr1:sKcas\"aF");
      assertNotNull(tag0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("tr1:sKcas\"aF", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertEquals("tr1:sKcas\"aF", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "tr1:sKcas\"aF", attributes0);
      assertNotNull(pseudoTextElement0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("tr1:sKcas\"aF", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertEquals("tr1:sKcas\"aF", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("tr1:sKcas\"aF", pseudoTextElement0.nodeName());
      assertEquals("tr1:sKcas\"aF", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("tr1:sKcas\"aF", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      
      String string0 = pseudoTextElement0.id();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("tr1:sKcas\"aF", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertEquals("tr1:sKcas\"aF", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("tr1:sKcas\"aF", pseudoTextElement0.nodeName());
      assertEquals("tr1:sKcas\"aF", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("tr1:sKcas\"aF", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("AttributeValue_doubleQuoted", "AttributeValue_doubleQuoted");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("AttributeValue_doubleQuoted", document0.baseUri());
      assertEquals("AttributeValue_doubleQuoted", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.appendElement("textarea");
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("AttributeValue_doubleQuoted", document0.baseUri());
      assertEquals("AttributeValue_doubleQuoted", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("AttributeValue_doubleQuoted", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      
      Element element1 = element0.prepend("AttributeValue_doubleQuoted");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("AttributeValue_doubleQuoted", document0.baseUri());
      assertEquals("AttributeValue_doubleQuoted", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("AttributeValue_doubleQuoted", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("textarea", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("textarea", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("textarea", element1.nodeName());
      assertEquals("AttributeValue_doubleQuoted", element1.baseUri());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      
      Document document1 = document0.outputSettings(document_OutputSettings1);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("AttributeValue_doubleQuoted", document0.baseUri());
      assertEquals("AttributeValue_doubleQuoted", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals("AttributeValue_doubleQuoted", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("AttributeValue_doubleQuoted", document1.location());
      assertFalse(document1.isBlock());
      
      Element element2 = element0.prependText("AttributeValue_doubleQuoted");
      assertNotNull(element2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("AttributeValue_doubleQuoted", document0.baseUri());
      assertEquals("AttributeValue_doubleQuoted", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("AttributeValue_doubleQuoted", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("textarea", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(2, element2.childNodeSize());
      assertEquals("textarea", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals("textarea", element2.tagName());
      assertEquals(1, element2.siblingIndex());
      assertEquals("AttributeValue_doubleQuoted", element2.baseUri());
      assertFalse(element2.isBlock());
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertSame(document0, document1);
      assertEquals("<html>\n <head></head>\n <body>\n  AttributeValue_doubleQuoted\n </body>\n</html>\n<textarea>\n AttributeValue_doubleQuoted\n AttributeValue_doubleQuoted\n</textarea>", string0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("AttributeValue_doubleQuoted", document0.baseUri());
      assertEquals("AttributeValue_doubleQuoted", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("AttributeValue_doubleQuoted", "AttributeValue_doubleQuoted");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("AttributeValue_doubleQuoted", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("AttributeValue_doubleQuoted", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.appendElement("textarea");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("AttributeValue_doubleQuoted", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("AttributeValue_doubleQuoted", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("textarea", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("AttributeValue_doubleQuoted", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      
      Element element1 = element0.prepend("AttributeValue_doubleQuoted");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals("AttributeValue_doubleQuoted", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("AttributeValue_doubleQuoted", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("textarea", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("AttributeValue_doubleQuoted", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("textarea", element1.tagName());
      assertEquals("AttributeValue_doubleQuoted", element1.baseUri());
      assertEquals("textarea", element1.nodeName());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      
      Document document1 = document0.outputSettings(document_OutputSettings1);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("AttributeValue_doubleQuoted", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("AttributeValue_doubleQuoted", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document1.hasParent());
      assertEquals("AttributeValue_doubleQuoted", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("AttributeValue_doubleQuoted", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      
      String string0 = document1.html();
      assertNotNull(string0);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document0);
      assertEquals("<html>\n <head></head>\n <body>\n  AttributeValue_doubleQuoted\n </body>\n</html>\n<textarea>AttributeValue_doubleQuoted</textarea>", string0);
      assertFalse(document0.isBlock());
      assertEquals("AttributeValue_doubleQuoted", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("AttributeValue_doubleQuoted", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document1.hasParent());
      assertEquals("AttributeValue_doubleQuoted", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("AttributeValue_doubleQuoted", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("AttributeValue_doubleQuoted", "AttributeValue_doubleQuoted");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("AttributeValue_doubleQuoted", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("AttributeValue_doubleQuoted", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.appendElement("textarea");
      assertNotNull(element0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("AttributeValue_doubleQuoted", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("AttributeValue_doubleQuoted", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element0.nodeName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("AttributeValue_doubleQuoted", element0.baseUri());
      
      Element element1 = element0.prepend("AttributeValue_doubleQuoted");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("AttributeValue_doubleQuoted", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("AttributeValue_doubleQuoted", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element0.nodeName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("AttributeValue_doubleQuoted", element0.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("textarea", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("AttributeValue_doubleQuoted", element1.baseUri());
      assertEquals("textarea", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("AttributeValue_doubleQuoted");
      assertNotNull(mockFileWriter0);
      
      MockFileWriter mockFileWriter1 = document0.html(mockFileWriter0);
      assertNotNull(mockFileWriter1);
      assertSame(mockFileWriter0, mockFileWriter1);
      assertSame(mockFileWriter1, mockFileWriter0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("AttributeValue_doubleQuoted", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("AttributeValue_doubleQuoted", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pl", "pl");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("pl", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("pl", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("pl", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("pl", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("pl", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("pl", document1.location());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertSame(document0, document1);
      assertEquals("<html><head></head><body>pl</body></html>", string0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("pl", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("pl", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parse("$mI;m7&", "$mI;m7&");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("$mI;m7&", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("$mI;m7&", document0.baseUri());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      document0.charset(charset0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("$mI;m7&", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("$mI;m7&", document0.baseUri());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      
      Document document1 = document0.outputSettings(document_OutputSettings1);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("$mI;m7&", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("$mI;m7&", document0.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("$mI;m7&", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("$mI;m7&", document1.location());
      assertTrue(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertSame(document0, document1);
      assertEquals("<html>\n <head>\n  <meta charset=\"US-ASCII\" />\n </head>\n <body>\n  $mI;m7&amp;\n </body>\n</html>", string0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("$mI;m7&", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("$mI;m7&", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parse("$mI;m7&", "$mI;m7&");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("$mI;m7&", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("$mI;m7&", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      document0.charset(charset0);
      assertTrue(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("$mI;m7&", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("$mI;m7&", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertEquals("<html>\n <head>\n  <meta charset=\"US-ASCII\">\n </head>\n <body>\n  $mI;m7&amp;\n </body>\n</html>", string0);
      assertTrue(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("$mI;m7&", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("$mI;m7&", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Document.createShell("+y \"K9XI6~D[W4 >]dB");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("+y \"K9XI6~D[W4 >]dB", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("+y \"K9XI6~D[W4 >]dB", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      
      try { 
        document0.outerHtmlHead(pipedWriter0, 65533, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Document.createShell("9Hle1+'g@D}aIO|YxO0");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("9Hle1+'g@D}aIO|YxO0", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("9Hle1+'g@D}aIO|YxO0", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.createElement("textarea");
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("9Hle1+'g@D}aIO|YxO0", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("9Hle1+'g@D}aIO|YxO0", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("9Hle1+'g@D}aIO|YxO0", element0.baseUri());
      
      Element element1 = element0.val("A!{\"J1=;z?G)ez");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("9Hle1+'g@D}aIO|YxO0", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("9Hle1+'g@D}aIO|YxO0", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("9Hle1+'g@D}aIO|YxO0", element0.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("9Hle1+'g@D}aIO|YxO0", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("textarea", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("textarea", element1.tagName());
      assertFalse(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Element element0 = new Element("textarea");
      assertNotNull(element0);
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      
      String string0 = element0.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Element element0 = new Element("Vg\" c*.R");
      assertNotNull(element0);
      assertEquals("Vg\" c*.R", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Vg\" c*.R", element0.nodeName());
      assertFalse(element0.isBlock());
      
      String string0 = element0.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("Vg\" c*.R", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Vg\" c*.R", element0.nodeName());
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = new Document("7jx-F[+x+E0");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.toggleClass("7jx-F[+x+E0");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("7jx-F[+x+E0", document1.location());
      assertEquals("7jx-F[+x+E0", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      
      Document document2 = (Document)document1.toggleClass("7jx-F[+x+E0");
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("7jx-F[+x+E0", document1.location());
      assertEquals("7jx-F[+x+E0", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("7jx-F[+x+E0", document2.location());
      
      Document document3 = (Document)document1.toggleClass("7jx-F[+x+E0");
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("7jx-F[+x+E0", document1.location());
      assertEquals("7jx-F[+x+E0", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("7jx-F[+x+E0", document3.baseUri());
      assertEquals("7jx-F[+x+E0", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.toggleClass("7jx-F[+x+E0");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("7jx-F[+x+E0", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("7jx-F[+x+E0", document1.baseUri());
      
      Document document2 = (Document)document1.toggleClass("7jx-F[+x+E0");
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("7jx-F[+x+E0", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("7jx-F[+x+E0", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("7jx-F[+x+E0", document2.location());
      assertEquals("7jx-F[+x+E0", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      
      boolean boolean0 = document2.hasClass("7jx-F[+x+E0");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertTrue(boolean0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("7jx-F[+x+E0", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("7jx-F[+x+E0", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("7jx-F[+x+E0", document2.location());
      assertEquals("7jx-F[+x+E0", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element");
      //  // Unstable assertion: assertNotNull(document0);
      //  // Unstable assertion: assertFalse(document0.hasParent());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      //  // Unstable assertion: assertEquals("org.jsoup.nodes.Element", document0.location());
      //  // Unstable assertion: assertEquals("#root", document0.tagName());
      //  // Unstable assertion: assertEquals(1, document0.childNodeSize());
      //  // Unstable assertion: assertFalse(document0.updateMetaCharsetElement());
      //  // Unstable assertion: assertEquals("#document", document0.nodeName());
      //  // Unstable assertion: assertFalse(document0.isBlock());
      //  // Unstable assertion: assertEquals(0, document0.siblingIndex());
      //  // Unstable assertion: assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      
      Document document1 = (Document)document0.toggleClass("org.jsoup.nodes.Element");
      //  // Unstable assertion: assertNotNull(document1);
      //  // Unstable assertion: assertSame(document0, document1);
      //  // Unstable assertion: assertSame(document1, document0);
      //  // Unstable assertion: assertFalse(document0.hasParent());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      //  // Unstable assertion: assertEquals("org.jsoup.nodes.Element", document0.location());
      //  // Unstable assertion: assertEquals("#root", document0.tagName());
      //  // Unstable assertion: assertEquals(1, document0.childNodeSize());
      //  // Unstable assertion: assertFalse(document0.updateMetaCharsetElement());
      //  // Unstable assertion: assertEquals("#document", document0.nodeName());
      //  // Unstable assertion: assertFalse(document0.isBlock());
      //  // Unstable assertion: assertEquals(0, document0.siblingIndex());
      //  // Unstable assertion: assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      //  // Unstable assertion: assertEquals("#document", document1.nodeName());
      //  // Unstable assertion: assertEquals(0, document1.siblingIndex());
      //  // Unstable assertion: assertEquals("org.jsoup.nodes.Element", document1.location());
      //  // Unstable assertion: assertFalse(document1.isBlock());
      //  // Unstable assertion: assertEquals("#root", document1.tagName());
      //  // Unstable assertion: assertEquals(1, document1.childNodeSize());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      //  // Unstable assertion: assertEquals("org.jsoup.nodes.Element", document1.baseUri());
      //  // Unstable assertion: assertFalse(document1.hasParent());
      //  // Unstable assertion: assertFalse(document1.updateMetaCharsetElement());
      
      Document document2 = (Document)document0.toggleClass("org.jsoup.nodes.Element");
      //  // Unstable assertion: assertNotNull(document2);
      //  // Unstable assertion: assertSame(document0, document2);
      //  // Unstable assertion: assertSame(document0, document1);
      //  // Unstable assertion: assertSame(document2, document0);
      //  // Unstable assertion: assertSame(document2, document1);
      //  // Unstable assertion: assertFalse(document0.hasParent());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      //  // Unstable assertion: assertEquals("org.jsoup.nodes.Element", document0.location());
      //  // Unstable assertion: assertEquals("#root", document0.tagName());
      //  // Unstable assertion: assertEquals(1, document0.childNodeSize());
      //  // Unstable assertion: assertFalse(document0.updateMetaCharsetElement());
      //  // Unstable assertion: assertEquals("#document", document0.nodeName());
      //  // Unstable assertion: assertFalse(document0.isBlock());
      //  // Unstable assertion: assertEquals(0, document0.siblingIndex());
      //  // Unstable assertion: assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      //  // Unstable assertion: assertEquals("#document", document2.nodeName());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      //  // Unstable assertion: assertEquals("org.jsoup.nodes.Element", document2.location());
      //  // Unstable assertion: assertFalse(document2.isBlock());
      //  // Unstable assertion: assertEquals("#root", document2.tagName());
      //  // Unstable assertion: assertEquals(0, document2.siblingIndex());
      //  // Unstable assertion: assertEquals("org.jsoup.nodes.Element", document2.baseUri());
      //  // Unstable assertion: assertFalse(document2.updateMetaCharsetElement());
      //  // Unstable assertion: assertEquals(1, document2.childNodeSize());
      //  // Unstable assertion: assertFalse(document2.hasParent());
      
      boolean boolean0 = document1.hasClass("java.lang.string@0000000047");
      //  // Unstable assertion: assertSame(document0, document2);
      //  // Unstable assertion: assertSame(document0, document1);
      //  // Unstable assertion: assertSame(document1, document0);
      //  // Unstable assertion: assertSame(document1, document2);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertFalse(document0.hasParent());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      //  // Unstable assertion: assertEquals("org.jsoup.nodes.Element", document0.location());
      //  // Unstable assertion: assertEquals("#root", document0.tagName());
      //  // Unstable assertion: assertEquals(1, document0.childNodeSize());
      //  // Unstable assertion: assertFalse(document0.updateMetaCharsetElement());
      //  // Unstable assertion: assertEquals("#document", document0.nodeName());
      //  // Unstable assertion: assertFalse(document0.isBlock());
      //  // Unstable assertion: assertEquals(0, document0.siblingIndex());
      //  // Unstable assertion: assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      //  // Unstable assertion: assertEquals("#document", document1.nodeName());
      //  // Unstable assertion: assertEquals(0, document1.siblingIndex());
      //  // Unstable assertion: assertEquals("org.jsoup.nodes.Element", document1.location());
      //  // Unstable assertion: assertFalse(document1.isBlock());
      //  // Unstable assertion: assertEquals("#root", document1.tagName());
      //  // Unstable assertion: assertEquals(1, document1.childNodeSize());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      //  // Unstable assertion: assertEquals("org.jsoup.nodes.Element", document1.baseUri());
      //  // Unstable assertion: assertFalse(document1.hasParent());
      //  // Unstable assertion: assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6", "6");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("6", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("6", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.toggleClass("6");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("6", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("6", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("6", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("6", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      
      Document document2 = (Document)document0.toggleClass(" />");
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("6", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("6", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("6", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("6", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      
      boolean boolean0 = document0.hasClass("6");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(boolean0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("6", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("6", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      
      Document document1 = (Document)document0.toggleClass("");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Document document2 = (Document)document1.toggleClass("");
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      
      boolean boolean0 = document1.hasClass("");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(boolean0);
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)document0.toggleClass("7jx-F[+x+E0");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("7jx-F[+x+E0", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("7jx-F[+x+E0", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      
      boolean boolean0 = document0.hasClass("#root.java.lang.String@0000000055");
      assertSame(document0, document1);
      assertFalse(boolean0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals("7jx-F[+x+E0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.toggleClass("");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      
      boolean boolean0 = document1.hasClass("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(boolean0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("0", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertEquals("0", tag0.toString());
      assertEquals("0", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      
      CDataNode cDataNode0 = new CDataNode("!=");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "meter", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertEquals("0", tag0.toString());
      assertEquals("0", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals("meter", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("0", formElement0.tagName());
      assertEquals("0", formElement0.nodeName());
      
      Element element0 = formElement0.prependChild(cDataNode0);
      assertNotNull(element0);
      assertSame(formElement0, element0);
      assertSame(element0, formElement0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertEquals("0", tag0.toString());
      assertEquals("0", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertTrue(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals("meter", formElement0.baseUri());
      assertEquals(1, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("0", formElement0.tagName());
      assertEquals("0", formElement0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("meter", element0.baseUri());
      assertEquals("0", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("0", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      
      String string0 = formElement0.data();
      assertNotNull(string0);
      assertSame(formElement0, element0);
      assertEquals("!=", string0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertEquals("0", tag0.toString());
      assertEquals("0", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertTrue(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals("meter", formElement0.baseUri());
      assertEquals(1, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("0", formElement0.tagName());
      assertEquals("0", formElement0.nodeName());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$mI1;=6a", "$mI1;=6a");
      Comment comment0 = new Comment("$mI1;=6a", "$mI1;=6a");
      document0.prependChild(comment0);
      document0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = new Document("u`");
      DataNode dataNode0 = new DataNode("u`");
      document0.appendChild(dataNode0);
      String string0 = document0.data();
      assertEquals("u`", string0);
      assertEquals("u`", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bm", "bm");
      Charset charset0 = document0.charset();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.charset(charset0);
      boolean boolean0 = document1.hasText();
      assertEquals(2, document1.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Element element0 = new Element("Tag name must not be empty.");
      element0.prepend("\n");
      boolean boolean0 = element0.hasText();
      assertEquals(1, element0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.appendElement("br");
      document0.prependElement("br");
      Elements elements0 = document0.getElementsContainingOwnText("br");
      assertEquals(1, elements0.size());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      CDataNode cDataNode0 = new CDataNode("AfterAttributeValue_quoted");
      document0.prependChild(cDataNode0);
      Pattern pattern0 = Pattern.compile("br");
      document0.getElementsMatchingOwnText(pattern0);
      assertEquals("w6m", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("`", "Wm&%@(uai");
      document0.title("Wm&%@(uai");
      Elements elements0 = document0.getElementsMatchingText("`");
      assertEquals("Wm&%@(uai", document0.baseUri());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = new Document("</");
      Element element0 = document0.prependElement("bl");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      DataNode dataNode0 = new DataNode((String) null);
      nodeArray0[2] = (Node) dataNode0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) element0;
      document0.addChildren(nodeArray0);
      document0.getElementsContainingOwnText((String) null);
      assertEquals("</", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("m", "m");
      document0.append("br");
      document0.getElementsMatchingText("m");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parse(" > ", "</");
      document0.append("i9~.*+gfHLI");
      document0.getElementsMatchingText("pL60B;;uW41Li");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.prependElement("br");
      document0.prependText("br");
      document0.getElementsMatchingText("br");
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Document.createShell("Q");
      document0.prependElement("bl");
      document0.prependText("bl");
      document0.getElementsMatchingText("bl");
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("o`", "o`");
      Comment comment0 = new Comment("org.jsoup.select.Collector");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      Element element0 = document0.prependChild(xmlDeclaration0);
      Pattern pattern0 = Pattern.compile("o`");
      Elements elements0 = element0.getElementsMatchingText(pattern0);
      assertEquals(2, document0.childNodeSize());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("eesed", "eesed");
      Element element0 = document0.getElementById("eesed");
      assertNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("eesed", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      Element element0 = document0.head();
      Element element1 = element0.prependElement("w6m");
      Element element2 = element1.prepend("n<r`");
      element2.lastElementSibling();
      assertEquals(1, element1.childNodeSize());
      assertEquals("w6m", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Document.createShell("~j_D|t8Uc");
      Element element0 = document0.prependElement("bl");
      Element element1 = element0.lastElementSibling();
      Element element2 = element1.firstElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertSame(element0, element2);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pl", "pl");
      document0.reparentChild(document0);
      Element element0 = document0.firstElementSibling();
      assertNull(element0);
      assertEquals("pl", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Document.createShell("XVuyK]");
      document0.previousElementSibling();
      assertEquals("XVuyK]", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parse(" > ", "</");
      document0.reparentChild(document0);
      Elements elements0 = document0.previousElementSiblings();
      assertEquals("</", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("w6m", "w6m");
      Element element0 = document0.prependElement("bl");
      Element element1 = element0.nextElementSibling();
      assertNotNull(element1);
      
      Element element2 = element1.doClone((Node) null);
      assertEquals("w6m", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals(2, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      document0.nextElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("7jx-F[+x+E0", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Document.createShell("o~Q?](vb-#h'");
      document0.siblingElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("o~Q?](vb-#h'", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7jx-F[+x+E0", "7jx-F[+x+E0");
      document0.appendTo(document0);
      document0.siblingElements();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("u*", "u*");
      Element element0 = document0.head();
      element0.after("");
      String string0 = element0.cssSelector();
      assertEquals("html > head:nth-child(1)", string0);
      assertEquals("u*", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      document0.toggleClass("7jx-F[+x+E0");
      document0.cssSelector();
      assertEquals("7jx-F[+x+E0", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Tag tag0 = Tag.valueOf("pheuPpae");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("id", "id");
      Attributes attributes1 = attributes0.put(attribute0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "id", attributes1);
      String string0 = pseudoTextElement0.cssSelector();
      assertEquals("id", pseudoTextElement0.baseUri());
      assertEquals("#id", string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", " > ");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
      try { 
        document0.insertChildren(4, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1939), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = new Document("/^");
      Elements elements0 = document0.getElementsByAttributeStarting("Vg\" c*.R");
      // Undeclared exception!
      try { 
        document0.insertChildren(322, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Document.createShell(":Hb");
      LinkedHashSet<CDataNode> linkedHashSet0 = new LinkedHashSet<CDataNode>(0);
      // Undeclared exception!
      try { 
        document0.insertChildren((-1053), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7jx-F[+x+E0", "7jx-F[+x+E0");
      LinkedHashSet<CDataNode> linkedHashSet0 = new LinkedHashSet<CDataNode>(0);
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      assertEquals("7jx-F[+x+E0", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "O;}m#a");
      DataNode dataNode0 = new DataNode("class");
      document0.prependChild(dataNode0);
      document0.dataNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.prependText("");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("pl", "pl");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      document1.reparentChild(document0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(true);
      Document document2 = document1.outputSettings(document_OutputSettings3);
      document_OutputSettings0.outline(true);
      document2.getElementsByAttributeValue("org.jsoup.nodes.Element$NodeList", "sE6W-vs{AlC>By");
      Elements elements0 = document2.getElementsByIndexGreaterThan(2028);
      Element element0 = document0.shallowClone();
      document2.normalise();
      document_OutputSettings2.prettyPrint(false);
      document1.dataset();
      document2.elementSiblingIndex();
      element0.className();
      assertEquals("pl", element0.baseUri());
      
      document1.classNames();
      Elements elements1 = document1.getElementsContainingText("org.jsoup.nodes.Element$NodeList");
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Tag tag0 = Tag.valueOf("bl");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.Evaluator$IsOnlyChild", attributes0);
      Element element0 = formElement0.selectFirst("bl");
      assertEquals("org.jsoup.select.Evaluator$IsOnlyChild", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      document0.getElementsByTag("H]MAz?5");
      assertEquals("head", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      document0.getAllElements();
      assertEquals("w6m", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nods.Element");
      // Undeclared exception!
      try { 
        document0.before("org.jsoup.nods.Element");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.getElementsByAttribute("br");
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ihE+w:/dcUs", "ihE+w:/dcUs");
      Elements elements0 = document0.getElementsByAttributeValueNot("[&r1J8", " ");
      assertEquals("ihE+w:/dcUs", document0.baseUri());
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("m", "m");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7jx-F[+x+E0", "7jx-F[+x+E0");
      Element element0 = document0.text("y");
      assertEquals("7jx-F[+x+E0", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Document.createShell(">C=-F_");
      document0.getElementsByAttributeValueContaining(">C=-F_", ">C=-F_");
      assertEquals(1, document0.childNodeSize());
      assertEquals(">C=-F_", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      document0.getElementsByAttributeValueEnding("head", "head");
      assertEquals("w6m", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = new Document("</");
      document0.is("bl");
      assertEquals("</", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("peg2lxPi+C9Z", "peg2lxPi+C9Z");
      document0.getElementsByAttributeValueMatching("           ", "e");
      assertEquals("peg2lxPi+C9Z", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Element element0 = new Element("Vg\" c*.R");
      element0.val("br");
      String string0 = element0.val();
      assertEquals("br", string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parse("j6 #&q", "j6 #&q");
      // Undeclared exception!
      try { 
        document0.wrap("j6 #&q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("D~&h|4ys#", parseSettings0);
      Element element0 = new Element(tag0, "org.jsoup.nodes.Element");
      Elements elements0 = element0.getElementsByIndexEquals(1547);
      assertTrue(elements0.isEmpty());
      assertEquals("org.jsoup.nodes.Element", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("peg2lxPi+C9Z", "peg2lxPi+C9Z");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("           ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Document.createShell("&quot;");
      // Undeclared exception!
      try { 
        document0.after("&quot;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parse("AttributeValue_dou(leQuoted", "AttributeValue_dou(leQuoted");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals(0, element0.siblingIndex());
      assertEquals("html > head", string0);
      assertEquals("AttributeValue_dou(leQuoted", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      document0.getElementsByAttributeValueStarting("<html>\n <head>\n  <w6m>\n   n\n  </w6m>\n </head>\n <body>\n  w6m\n </body>\n</html>", "y5[g");
      assertEquals("w6m", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("m", "m");
      String string0 = document0.wholeText();
      assertEquals("m", string0);
      assertEquals("m", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parse("w6m", "w6m");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Element element0 = new Element(":only-of-type");
      // Undeclared exception!
      try { 
        element0.prependElement("            ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Document.createShell("7jx-F[+x+E0");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Elements elements0 = document0.getElementsContainingOwnText("value");
      assertTrue(elements0.isEmpty());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Document.createShell("Q");
      Element element0 = document0.prependText("bl");
      element0.child(0);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = Document.createShell("Z?OF");
      // Undeclared exception!
      try { 
        document0.child((-2346));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Parser.parse(" > ", "</");
      document0.previousElementSiblings();
      assertEquals("</", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Document.createShell("Cannot set a request body for HTTP method ");
      Elements elements0 = document0.children();
      assertEquals(1, elements0.size());
      assertEquals("Cannot set a request body for HTTP method ", document0.baseUri());
  }
}
