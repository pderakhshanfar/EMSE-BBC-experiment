/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 15:47:05 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("P)DSwesHt", "P)DSwesHt");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      assertEquals(1, nodeArray0.length);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("br", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.addClass("`Dz6jWWg");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("br", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("br", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("br", document1.baseUri());
      
      Document document2 = (Document)document0.addClass("<k{(uk(V[o-wWPM&w");
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("br", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("br", document2.location());
      assertEquals("#root", document2.tagName());
      
      boolean boolean0 = document0.hasClass("37m&>`n+lhbt{}?di+");
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("br", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P)DSwesHt", "P)DSwesHt");
      assertNotNull(document0);
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.addClass("=rwch`w9");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("P)DSwesHt", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("P)DSwesHt", document1.baseUri());
      
      Document document2 = (Document)document0.addClass("`b4~%@, Z]Q`q6NjGu");
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document2.hasParent());
      assertEquals("P)DSwesHt", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("P)DSwesHt", document2.location());
      
      boolean boolean0 = document0.hasClass("6\"gI?!z@G");
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("P)DSwesHt", "P)DSwesHt");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      document0.reparentChild(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      document0.reparentChild(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parse("<B", "<B");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<B", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("<B", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      LinkedList<DataNode> linkedList0 = new LinkedList<DataNode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Document document1 = (Document)document0.insertChildren(1, (Collection<? extends Node>) linkedList0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<B", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("<B", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, linkedList0.size());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("<B", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("<B", document1.location());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = new Document("icjSK#k2eF$9qy");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("icjSK#k2eF$9qy", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("icjSK#k2eF$9qy", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("icjSK#k2eF$9qy", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("icjSK#k2eF$9qy", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("icjSK#k2eF$9qy", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("icjSK#k2eF$9qy", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      
      Elements elements0 = document1.getElementsByAttributeValueContaining("OSG,51", "icjSK#k2eF$9qy");
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("icjSK#k2eF$9qy", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("icjSK#k2eF$9qy", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("icjSK#k2eF$9qy", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("icjSK#k2eF$9qy", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      // Undeclared exception!
      try { 
        document0.insertChildren((-6), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      
      document0.outerHtmlTail(pipedWriter0, 60, document_OutputSettings0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("%/Z%|&0b:W/{U{MMc )");
      assertNotNull(stringReader0);
      
      Document document0 = parser0.parseInput((Reader) stringReader0, "+");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("+", document0.location());
      assertEquals("+", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3858);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      document0.outerHtmlHead(charArrayWriter0, 3858, document_OutputSettings0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("+", document0.location());
      assertEquals("+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(3866, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("0*WNj%|vO<9pnvk-t", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertEquals("0*WNj%|vO<9pnvk-t", tag0.getName());
      assertEquals("0*WNj%|vO<9pnvk-t", tag0.toString());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      
      CDataNode cDataNode0 = new CDataNode("");
      assertNotNull(cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      Element element0 = new Element(tag0, "org.jsoup.parser.CharacterReader", attributes0);
      assertNotNull(element0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertEquals("0*WNj%|vO<9pnvk-t", tag0.getName());
      assertEquals("0*WNj%|vO<9pnvk-t", tag0.toString());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals("0*WNj%|vO<9pnvk-t", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("0*WNj%|vO<9pnvk-t", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.parser.CharacterReader", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = new Document("26kR'n]TT=vfWXO&3o");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.location());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      document0.nodelistChanged();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.location());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parse("^:X`MMD1$*,.W%", "^:X`MMD1$*,.W%");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Document.createShell("@K*k");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("@K*k", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("@K*k", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      document0.doSetBaseUri("o~");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("o~", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("@K*k", document0.location());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P)DSwesHt", "P)DSwesHt");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = Document.createShell("P)DSwesHt");
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.isBlock());
      assertEquals("P)DSwesHt", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("P)DSwesHt", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertNotSame(document1, document0);
      assertFalse(document1.isBlock());
      assertEquals("P)DSwesHt", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("P)DSwesHt", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("P)DSwesHt", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document0.appendTo(element0);
      assertNotNull(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("P)DSwesHt", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("P)DSwesHt", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("P)DSwesHt", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("P)DSwesHt", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("P)DSwesHt", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      Element element1 = document2.wrap("<html>\n <head></head>\n <body>\n  P)DSwesHt\n </body>\n</html>");
      assertNull(element1);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("P)DSwesHt", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("P)DSwesHt", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("P)DSwesHt", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("P)DSwesHt", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("P)DSwesHt", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parse(",bJ", ",bJ");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(",bJ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(",bJ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(",bJ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(",bJ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(",bJ", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.wrap(" ");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(",bJ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(",bJ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(",bJ", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(",bJ", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Element element0 = new Element("gcbra+Bk'mAC5");
      assertNotNull(element0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("gcbra+Bk'mAC5", element0.nodeName());
      assertEquals("gcbra+Bk'mAC5", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      String string0 = element0.wholeText();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("gcbra+Bk'mAC5", element0.nodeName());
      assertEquals("gcbra+Bk'mAC5", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^:X`MMD1$*,.W%", "^:X`MMD1$*,.W%");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("^:X`MMD1$*,.W%", element0.baseUri());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.val("^:X`MMD1$*,.W%");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("^:X`MMD1$*,.W%", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("^:X`MMD1$*,.W%", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parse("37m&>`n+LHBt{}?Di+", "^:X`MMD1$*,.W%");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      
      Document document1 = (Document)document0.val("nullChar");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("^:X`MMD1$*,.W%", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parse("37m&>`n+LHBt{}?Di+", "37m&>`n+LHBt{}?Di+");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      document0.addChildren(nodeArray0);
      assertEquals(4, nodeArray0.length);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      
      Document document1 = (Document)document0.toggleClass("37m&>`n+LHBt{}?Di+");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("37m&>`n+LHBt{}?Di+", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("37m&>`n+LHBt{}?Di+", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Document.createShell("-^ltg$GPs'");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("-^ltg$GPs'", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("-^ltg$GPs'", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("-^ltg$GPs'", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("-^ltg$GPs'", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals("-^ltg$GPs'", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      
      Element element1 = element0.toggleClass("-^ltg$GPs'");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("-^ltg$GPs'", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("-^ltg$GPs'", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals("-^ltg$GPs'", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("-^ltg$GPs'", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = new Document("icjSK#k2eF$9qy");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("icjSK#k2eF$9qy", document0.location());
      assertEquals("icjSK#k2eF$9qy", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.toggleClass("icjSK#k2eF$9qy");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("icjSK#k2eF$9qy", document0.location());
      assertEquals("icjSK#k2eF$9qy", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("icjSK#k2eF$9qy", document1.baseUri());
      assertEquals("icjSK#k2eF$9qy", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P)DSwesHt", "P)DSwesHt");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("P)DSwesHt", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      
      Element element1 = element0.text("P)DSwesHt");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("P)DSwesHt", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("P)DSwesHt", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Document.createShell("-^ltg$GPs'");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("-^ltg$GPs'", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("-^ltg$GPs'", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.text("HdDro");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("-^ltg$GPs'", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("-^ltg$GPs'", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("-^ltg$GPs'", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("-^ltg$GPs'", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = new Document("icjSK#k2eF$9qy");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("icjSK#k2eF$9qy", document0.location());
      assertEquals("icjSK#k2eF$9qy", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("icjSK#k2eF$9qy", document0.location());
      assertEquals("icjSK#k2eF$9qy", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Document.createShell("html");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("html", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("html", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.tagName("html");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("html", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("html", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("html", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.isBlock());
      assertEquals("html", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("html", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("P)DSwesHt", "P)DSwesHt");
      assertNotNull(document0);
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = Parser.parse("ZxDB", "");
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document1;
      document0.addChildren(nodeArray0);
      assertEquals(1, nodeArray0.length);
      assertNotSame(document0, document1);
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      
      Document document2 = (Document)document1.tagName("ZxDB");
      assertNotNull(document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("zxdb", document1.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("zxdb", document2.tagName());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = new Document("ET[o66u$;MC*w[xP");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("ET[o66u$;MC*w[xP", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ET[o66u$;MC*w[xP", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.tagName("W[$n6u=BPEb2");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("ET[o66u$;MC*w[xP", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ET[o66u$;MC*w[xP", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("w[$n6u=bpeb2", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("ET[o66u$;MC*w[xP", document1.baseUri());
      assertEquals("ET[o66u$;MC*w[xP", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("w[$n6u=bpeb2", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("icjSK#k2eF$9qy", "icjSK#k2eF$9qy");
      assertNotNull(document0);
      assertEquals("icjSK#k2eF$9qy", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("icjSK#k2eF$9qy", document0.location());
      
      String string0 = document0.tagName();
      assertNotNull(string0);
      assertEquals("#root", string0);
      assertEquals("icjSK#k2eF$9qy", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("icjSK#k2eF$9qy", document0.location());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = new Document("icjSK#k2eF$9qy");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("icjSK#k2eF$9qy", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("icjSK#k2eF$9qy", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      
      Tag tag0 = document0.tag();
      assertNotNull(tag0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("icjSK#k2eF$9qy", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("icjSK#k2eF$9qy", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("#root", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("P)DSwesHt", "P)DSwesHt");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("P)DSwesHt", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      
      Tag tag0 = element0.tag();
      assertNotNull(tag0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("P)DSwesHt", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertEquals("body", tag0.toString());
      assertEquals("body", tag0.getName());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      assertNotNull(tag0);
      assertEquals("br", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("br", tag0.toString());
      assertTrue(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      
      Element element0 = new Element(tag0, "br");
      assertNotNull(element0);
      assertEquals("br", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("br", tag0.toString());
      assertTrue(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.baseUri());
      assertEquals("br", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      Tag tag1 = element0.tag();
      assertNotNull(tag1);
      assertSame(tag0, tag1);
      assertSame(tag1, tag0);
      assertEquals("br", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("br", tag0.toString());
      assertTrue(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.baseUri());
      assertEquals("br", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isFormListed());
      assertTrue(tag1.isInline());
      assertTrue(tag1.isSelfClosing());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.formatAsBlock());
      assertTrue(tag1.isKnownTag());
      assertFalse(tag1.isData());
      assertEquals("br", tag1.toString());
      assertTrue(tag1.isEmpty());
      assertFalse(tag1.isFormSubmittable());
      assertEquals("br", tag1.getName());
      assertFalse(tag1.preserveWhitespace());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Document.createShell("-^ltg$GPs'");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("-^ltg$GPs'", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("-^ltg$GPs'", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      document0.addChildren(nodeArray0);
      assertEquals(5, nodeArray0.length);
      assertEquals(2, document0.childNodeSize());
      assertEquals("-^ltg$GPs'", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("-^ltg$GPs'", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.firstElementSibling();
      assertNotNull(element0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("-^ltg$GPs'", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("-^ltg$GPs'", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("-^ltg$GPs'", element0.baseUri());
      assertEquals(2, element0.childNodeSize());
      assertEquals("html", element0.tagName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.nodeName());
      
      Element element1 = element0.shallowClone();
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("-^ltg$GPs'", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("-^ltg$GPs'", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("-^ltg$GPs'", element0.baseUri());
      assertEquals(2, element0.childNodeSize());
      assertEquals("html", element0.tagName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.nodeName());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("-^ltg$GPs'", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("html", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.nodeName());
      assertFalse(element1.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^:X`MMD1$*,.W%", "^:X`MMD1$*,.W%");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      
      Element element0 = document0.selectFirst("value");
      assertNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Document.createShell("-^ltg$GPs'");
      assertNotNull(document0);
      assertEquals("-^ltg$GPs'", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("-^ltg$GPs'", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.selectFirst("head");
      assertNotNull(element0);
      assertEquals("-^ltg$GPs'", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("-^ltg$GPs'", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("-^ltg$GPs'", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Element element0 = new Element("rMsbUy=Z$9z]Ju]FT");
      assertNotNull(element0);
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("rMsbUy=Z$9z]Ju]FT", element0.nodeName());
      assertEquals("rMsbUy=Z$9z]Ju]FT", element0.tagName());
      
      Elements elements0 = element0.select("tbody");
      assertNotNull(elements0);
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("rMsbUy=Z$9z]Ju]FT", element0.nodeName());
      assertEquals("rMsbUy=Z$9z]Ju]FT", element0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("26kR'n]TT=vfWXO&3o", "26kR'n]TT=vfWXO&3o");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("26kR'n]TT=vfWXO&3o", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      
      Element element1 = element0.removeClass("OS");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("26kR'n]TT=vfWXO&3o", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("26kR'n]TT=vfWXO&3o", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = new Document("f_tQ^kk|[j[1;D[ZnA");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("f_tQ^kk|[j[1;D[ZnA", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("f_tQ^kk|[j[1;D[ZnA", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.removeClass("f_tQ^kk|[j[1;D[ZnA");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("f_tQ^kk|[j[1;D[ZnA", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("f_tQ^kk|[j[1;D[ZnA", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("f_tQ^kk|[j[1;D[ZnA", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("f_tQ^kk|[j[1;D[ZnA", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      Document document1 = new Document("br");
      assertNotNull(document1);
      assertFalse(document1.hasParent());
      assertEquals("br", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("br", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document1;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      document0.addChildren(nodeArray0);
      assertEquals(7, nodeArray0.length);
      assertNotSame(document0, document1);
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.siblingIndex());
      assertEquals("br", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.equals((Object)document1));
      
      Document document2 = (Document)document0.previousElementSibling();
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.siblingIndex());
      assertEquals("br", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("br", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("br", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^:X`MMD1$*,.W%", "^:X`MMD1$*,.W%");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("^:X`MMD1$*,.W%", element0.baseUri());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.prependText("^:X`MMD1$*,.W%");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("^:X`MMD1$*,.W%", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals("^:X`MMD1$*,.W%", element1.baseUri());
      assertEquals("body", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("26kR'n]TT=vfWXO&3o", "26kR'n]TT=vfWXO&3o");
      assertNotNull(document0);
      assertEquals("26kR'n]TT=vfWXO&3o", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.prependElement("body");
      assertNotNull(element0);
      assertEquals("26kR'n]TT=vfWXO&3o", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("26kR'n]TT=vfWXO&3o", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parse("<B", "<B");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("<B", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("<B", document0.location());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("<B", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("<B", document0.location());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("<B", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.prependChild(document0);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("<B", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<B", document0.location());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("<B", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("<B", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parse("ET[o66u$;MC*w[xP", "ET[o66u$;MC*w[xP");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("ET[o66u$;MC*w[xP", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("ET[o66u$;MC*w[xP", document0.baseUri());
      
      DataNode dataNode0 = new DataNode("ET[o66u$;MC*w[xP", "ET[o66u$;MC*w[xP");
      assertNotNull(dataNode0);
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      
      Document document1 = (Document)document0.prependChild(dataNode0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("ET[o66u$;MC*w[xP", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("ET[o66u$;MC*w[xP", document0.baseUri());
      assertTrue(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("ET[o66u$;MC*w[xP", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("ET[o66u$;MC*w[xP", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("P)DSwesHt", "P)DSwesHt");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.hasParent());
      
      Document document1 = Parser.parse("P)DSwesHt", "P)DSwesHt");
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("P)DSwesHt", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("P)DSwesHt", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document1;
      document0.addChildren(nodeArray0);
      assertEquals(1, nodeArray0.length);
      assertNotSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.equals((Object)document1));
      
      Document document2 = (Document)document1.prepend("}[gP~S+[<vYS?<");
      assertNotNull(document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals(3, document1.childNodeSize());
      assertEquals("P)DSwesHt", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("P)DSwesHt", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("P)DSwesHt", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("P)DSwesHt", document2.location());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Document.createShell("37m&>`n+LHBt{}?Di+");
      assertNotNull(document0);
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      document0.siblingIndex = (-3749);
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-3749), document0.siblingIndex());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)document0.prepend("ScriptDataEscapedDash");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-3749), document0.siblingIndex());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("37m&>`n+LHBt{}?Di+", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("37m&>`n+LHBt{}?Di+", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals((-3749), document1.siblingIndex());
      assertFalse(document1.hasParent());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parse("37m&>`n+LHBt{}?Di+", "37m&>`n+LHBt{}?Di+");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("37m&>`n+LHBt{}?Di+", "37m&>`n+LHBt{}?Di+");
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("37m&>`n+LHBt{}?Di+", document1.location());
      assertEquals("37m&>`n+LHBt{}?Di+", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      
      document0.parentNode = (Node) document1;
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("37m&>`n+LHBt{}?Di+", document1.location());
      assertEquals("37m&>`n+LHBt{}?Di+", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      
      Document document2 = (Document)document0.prepend("37m&>`n+LHBt{}?Di+");
      assertNotNull(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("37m&>`n+LHBt{}?Di+", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("37m&>`n+LHBt{}?Di+", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Document.createShell("icjSK#k2eF$9qy");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("icjSK#k2eF$9qy", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("icjSK#k2eF$9qy", document0.location());
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.parents();
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("icjSK#k2eF$9qy", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("icjSK#k2eF$9qy", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("P)DSwesHt", "P)DSwesHt");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("P)DSwesHt", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      
      Elements elements0 = element0.parents();
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("P)DSwesHt", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parse("37m&>`n+LHBt{}?Di+", "^:X`MMD1$*,.W%");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = document0.parent();
      assertNull(element0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^:X`MMD1$*,.W%", "^:X`MMD1$*,.W%");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)document0.prependText("value");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("^:X`MMD1$*,.W%", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document1.baseUri());
      
      String string0 = document1.ownText();
      assertNotNull(string0);
      assertEquals("value", string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("^:X`MMD1$*,.W%", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("26kR'n]TT=vfWXO&3o", "26kR'n]TT=vfWXO&3o");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.location());
      
      String string0 = document0.nodeName();
      assertNotNull(string0);
      assertEquals("#document", string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.location());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = new Document("'oRHB^/Xr[z0f");
      assertNotNull(document0);
      assertEquals("'oRHB^/Xr[z0f", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("'oRHB^/Xr[z0f", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = Parser.parse("ZxDB", "37m&`n+HBt{}?Di+");
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("37m&`n+HBt{}?Di+", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("37m&`n+HBt{}?Di+", document1.location());
      assertFalse(document1.equals((Object)document0));
      
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      document0.addChildren(nodeArray0);
      assertEquals(4, nodeArray0.length);
      assertNotSame(document0, document1);
      assertEquals("'oRHB^/Xr[z0f", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("'oRHB^/Xr[z0f", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      
      Elements elements0 = document0.nextElementSiblings();
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      assertEquals("'oRHB^/Xr[z0f", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("'oRHB^/Xr[z0f", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parse("^:XMD$,.W%", "^:XMD$,.W%");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("^:XMD$,.W%", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("^:XMD$,.W%", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      Document document1 = Document.createShell("^:XMD$,.W%");
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("^:XMD$,.W%", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("^:XMD$,.W%", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      
      nodeArray0[1] = (Node) document1;
      document0.addChildren(nodeArray0);
      assertEquals(2, nodeArray0.length);
      assertNotSame(document0, document1);
      assertEquals("^:XMD$,.W%", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("^:XMD$,.W%", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.equals((Object)document1));
      
      Document document2 = (Document)document0.nextElementSibling();
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("^:XMD$,.W%", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("^:XMD$,.W%", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.siblingIndex());
      assertEquals("^:XMD$,.W%", document2.location());
      assertEquals("^:XMD$,.W%", document2.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Element element0 = new Element("rMsbUy=Z$9z]Ju]FT");
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("rMsbUy=Z$9z]Ju]FT", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("rMsbUy=Z$9z]Ju]FT", element0.tagName());
      
      Evaluator.IsNthOfType evaluator_IsNthOfType0 = new Evaluator.IsNthOfType(8192, 8192);
      assertNotNull(evaluator_IsNthOfType0);
      
      boolean boolean0 = element0.is((Evaluator) evaluator_IsNthOfType0);
      assertFalse(boolean0);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("rMsbUy=Z$9z]Ju]FT", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("rMsbUy=Z$9z]Ju]FT", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("eX", "eX");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("eX", document0.location());
      assertEquals("eX", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      
      boolean boolean0 = document0.is("eX");
      assertFalse(boolean0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("eX", document0.location());
      assertEquals("eX", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^:X`MMD1$*,.W%", "^:X`MMD1$*,.W%");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      Document document1 = (Document)document0.insertChildren((-1), nodeArray0);
      assertNotNull(document1);
      assertEquals(1, nodeArray0.length);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("^:X`MMD1$*,.W%", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      
      Document document1 = (Document)document0.html("");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = new Document("ET[o66u$;MC*w[xP");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ET[o66u$;MC*w[xP", document0.location());
      assertEquals("ET[o66u$;MC*w[xP", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ET[o66u$;MC*w[xP", document0.location());
      assertEquals("ET[o66u$;MC*w[xP", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bpmwG,WN", "$w`HVH<XA&Ms#H+");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("$w`HVH<XA&Ms#H+", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("$w`HVH<XA&Ms#H+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      String string0 = document0.cssSelector();
      assertNotNull(string0);
      assertEquals("#root", string0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("$w`HVH<XA&Ms#H+", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("$w`HVH<XA&Ms#H+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      boolean boolean0 = document0.hasAttributes();
      assertTrue(boolean0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("$w`HVH<XA&Ms#H+", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("$w`HVH<XA&Ms#H+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^:X`MMD1$*,.W%", "^:X`MMD1$*,.W%");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      boolean boolean0 = document0.hasAttributes();
      assertFalse(boolean0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parse("37m&>`n+LHBt{}?Di+", "^:X`MMD1$*,.W%");
      assertNotNull(document0);
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Pattern pattern0 = Pattern.compile("", 575);
      assertNotNull(pattern0);
      assertEquals("", pattern0.toString());
      assertEquals(575, pattern0.flags());
      assertEquals("", pattern0.pattern());
      
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertNotNull(elements0);
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", pattern0.toString());
      assertEquals(575, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("37m&>`n+LHBt{}?Di+", "37m&>`n+LHBt{}?Di+");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      
      Pattern pattern0 = Pattern.compile(" > ");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals(" > ", pattern0.toString());
      assertEquals(" > ", pattern0.pattern());
      
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, pattern0.flags());
      assertEquals(" > ", pattern0.toString());
      assertEquals(" > ", pattern0.pattern());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tbody", "O;$MVhGh[sDn <>6");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("O;$MVhGh[sDn <>6", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("O;$MVhGh[sDn <>6", document0.location());
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsMatchingOwnText("s+");
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals("O;$MVhGh[sDn <>6", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("O;$MVhGh[sDn <>6", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parse("^:X`MMD1$*,.W%", "^:X`MMD1$*,.W%");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsContainingOwnText("^:X`MMD1$*,.W%");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("%/Z%|&0b:W/{U{MMc )");
      assertNotNull(stringReader0);
      
      Document document0 = parser0.parseInput((Reader) stringReader0, "+");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals("+", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("+", document0.baseUri());
      
      Document document1 = (Document)document0.tagName("+");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals("+", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("+", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("+", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("+", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("+", document1.tagName());
      assertEquals("+", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      
      Elements elements0 = document0.getElementsByTag("#root");
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals("+", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("+", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("+", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("br", document0.location());
      assertEquals("br", document0.baseUri());
      
      Elements elements0 = document0.getElementsByTag("body");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("br", document0.location());
      assertEquals("br", document0.baseUri());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Document.createShell(".");
      assertNotNull(document0);
      assertEquals(".", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(".", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.getElementsByIndexLessThan(528);
      assertNotNull(elements0);
      assertEquals(".", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(".", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("P)DSwesHt", "P)DSwesHt");
      assertNotNull(document0);
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1055));
      assertNotNull(elements0);
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Document.createShell("37m&>`n+LHBt{}?Di+");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.getElementsByIndexEquals(6);
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Document.createShell("=+iS&<_$>\"e)Q&c&");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("=+iS&<_$>\"e)Q&c&", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("=+iS&<_$>\"e)Q&c&", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals("=+iS&<_$>\"e)Q&c&", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("=+iS&<_$>\"e)Q&c&", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("=+iS&<_$>\"e)Q&c&", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = element0.empty();
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#document", document0.nodeName());
      assertEquals("=+iS&<_$>\"e)Q&c&", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("=+iS&<_$>\"e)Q&c&", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("=+iS&<_$>\"e)Q&c&", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.tagName());
      assertEquals("=+iS&<_$>\"e)Q&c&", element1.baseUri());
      assertTrue(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("TH.xTZ[", "html");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("html", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("html", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      assertEquals(1, nodeArray0.length);
      assertEquals("#document", document0.nodeName());
      assertEquals("html", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("html", document0.baseUri());
      
      Document document1 = (Document)document0.doClone(nodeArray0[0]);
      assertNotNull(document1);
      assertEquals(1, nodeArray0.length);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("html", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("html", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("html", document1.location());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P)DSwesHt", "P)DSwesHt");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("P)DSwesHt", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      
      Element element1 = element0.doClone(document0);
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("P)DSwesHt", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("P)DSwesHt", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parse("_f&9Q7s.", "=rwch`w9");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("=rwch`w9", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=rwch`w9", document0.location());
      
      Document document1 = (Document)document0.doClone((Node) null);
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("=rwch`w9", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("=rwch`w9", document0.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("=rwch`w9", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("=rwch`w9", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Tag tag0 = Tag.valueOf("head");
      assertNotNull(tag0);
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("head", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals("head", tag0.getName());
      assertTrue(tag0.canContainBlock());
      
      CDataNode cDataNode0 = new CDataNode(".");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "head", attributes0);
      assertNotNull(pseudoTextElement0);
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("head", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals("head", tag0.getName());
      assertTrue(tag0.canContainBlock());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("head", pseudoTextElement0.nodeName());
      assertEquals("head", pseudoTextElement0.baseUri());
      assertEquals("head", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertTrue(pseudoTextElement0.isBlock());
      assertFalse(pseudoTextElement0.hasParent());
      
      Element element0 = pseudoTextElement0.clone();
      assertNotNull(element0);
      assertNotSame(pseudoTextElement0, element0);
      assertNotSame(element0, pseudoTextElement0);
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("head", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals("head", tag0.getName());
      assertTrue(tag0.canContainBlock());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("head", pseudoTextElement0.nodeName());
      assertEquals("head", pseudoTextElement0.baseUri());
      assertEquals("head", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertTrue(pseudoTextElement0.isBlock());
      assertFalse(pseudoTextElement0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element0.equals((Object)pseudoTextElement0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parse("jGgwkW^sIa$YcUiI", "Kdo;Qxssw6+jV1");
      assertNotNull(document0);
      assertEquals("Kdo;Qxssw6+jV1", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Kdo;Qxssw6+jV1", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.clone();
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals("Kdo;Qxssw6+jV1", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Kdo;Qxssw6+jV1", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("Kdo;Qxssw6+jV1", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("Kdo;Qxssw6+jV1", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E'F", "rm` a");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("rm` a", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("rm` a", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.appendElement("K.9wl+)");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("rm` a", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("rm` a", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("k.9wl+)", element0.tagName());
      assertEquals("rm` a", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("k.9wl+)", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      
      Locale locale0 = new Locale("", "");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains("E'F"));
      assertNotNull(set0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Element element1 = element0.classNames(set0);
      assertFalse(set0.contains("E'F"));
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("rm` a", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("rm` a", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("k.9wl+)", element0.tagName());
      assertEquals("rm` a", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("k.9wl+)", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("k.9wl+)", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("k.9wl+)", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("rm` a", element1.baseUri());
      assertFalse(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("icjSK#k2eF$9qy", "icjSK#k2eF$9qy");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("icjSK#k2eF$9qy", document0.location());
      assertEquals("icjSK#k2eF$9qy", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.toggleClass("icjSK#k2eF$9qy");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("icjSK#k2eF$9qy", document0.location());
      assertEquals("icjSK#k2eF$9qy", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("icjSK#k2eF$9qy", document1.baseUri());
      assertEquals("icjSK#k2eF$9qy", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      
      String string0 = document1.className();
      assertNotNull(string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("icjSK#k2eF$9qy", document0.location());
      assertEquals("icjSK#k2eF$9qy", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("icjSK#k2eF$9qy", document1.baseUri());
      assertEquals("icjSK#k2eF$9qy", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("26kR'n]TT=vfWXO&3o", "26kR'n]TT=vfWXO&3o");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements0 = document0.children();
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = new Document("f_tQ^kk|[j[1;D[ZnA");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("f_tQ^kk|[j[1;D[ZnA", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("f_tQ^kk|[j[1;D[ZnA", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      int int0 = document0.childNodeSize();
      assertEquals(0, int0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("f_tQ^kk|[j[1;D[ZnA", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("f_tQ^kk|[j[1;D[ZnA", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Document.createShell(".");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(".", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(".", document0.baseUri());
      
      int int0 = document0.childNodeSize();
      assertEquals(1, int0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(".", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(".", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("uJ\"", "textarea");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.location());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.location());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      
      Element element1 = element0.before((Node) document0);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.location());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("textarea", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("P)DSwesHt", "P)DSwesHt");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      
      document0.reparentChild(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      
      Document document1 = (Document)document0.before((Node) document0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("P)DSwesHt", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("P)DSwesHt", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P)DSwesHt", "P)DSwesHt");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("Lwb", "br");
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertEquals("br", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("br", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document0.appendTo(document1);
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("br", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("P)DSwesHt", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("P)DSwesHt", document2.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document2.before("3!)D;a");
      assertNotNull(document3);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("br", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.siblingIndex());
      assertEquals("P)DSwesHt", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("P)DSwesHt", document2.baseUri());
      assertTrue(document3.hasParent());
      assertEquals("P)DSwesHt", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals("P)DSwesHt", document3.baseUri());
      assertEquals(2, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~HytuKx',", "~HytuKx',");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("~HytuKx',", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("~HytuKx',", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      String string0 = document0.baseUri();
      assertNotNull(string0);
      assertEquals("~HytuKx',", string0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("~HytuKx',", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("~HytuKx',", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P)DSwesHt", "P)DSwesHt");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("P)DSwesHt", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.attr("XrfO$(Rw", false);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("P)DSwesHt", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("P)DSwesHt", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("icjSK#k2eF$9qy", "icjSK#k2eF$9qy");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("icjSK#k2eF$9qy", document0.baseUri());
      assertEquals("icjSK#k2eF$9qy", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.attr("icjSK#k2eF$9qy", true);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("icjSK#k2eF$9qy", document0.baseUri());
      assertEquals("icjSK#k2eF$9qy", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("icjSK#k2eF$9qy", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("icjSK#k2eF$9qy", document1.location());
      assertFalse(document1.hasParent());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", ".");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(".", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(".", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(".", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(".", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(".", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = element0.attr("noQuirks", "");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(".", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(".", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(".", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals(".", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Element element0 = new Element("gcbra+Bk'mAC5");
      assertNotNull(element0);
      assertEquals("gcbra+Bk'mAC5", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals("gcbra+Bk'mAC5", element0.tagName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.attr("8?+ak.#2A", "org.jsoup.select.Evaluator$ContainsData");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("gcbra+Bk'mAC5", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals("gcbra+Bk'mAC5", element0.tagName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals("gcbra+Bk'mAC5", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals("gcbra+Bk'mAC5", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = new Document("br");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("br", document0.location());
      assertEquals("br", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = new Document("br");
      assertNotNull(document1);
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("br", document1.location());
      assertEquals("br", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document0.appendTo(document1);
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.location());
      assertEquals("br", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("br", document1.location());
      assertEquals("br", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("br", document2.location());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("br", document2.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Element element0 = new Element("html");
      assertNotNull(element0);
      assertFalse(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("html", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      
      Element element1 = element0.appendText("|rMIirJbrJ]#toUkq");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.nodeName());
      assertEquals("html", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("html", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parse("<B", "<B");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("<B", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<B", document0.location());
      
      Element element0 = document0.appendElement("<B");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("<B", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<B", document0.location());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("<b", element0.nodeName());
      assertEquals("<B", element0.baseUri());
      assertEquals("<b", element0.tagName());
      
      Element element1 = element0.appendText("<B");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("<B", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<B", document0.location());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("<b", element0.nodeName());
      assertEquals("<B", element0.baseUri());
      assertEquals("<b", element0.tagName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("<B", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("<b", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("<b", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parse("footer", "footer");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("footer", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("footer", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.appendElement("footer");
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("footer", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("footer", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("footer", element0.baseUri());
      assertEquals("footer", element0.nodeName());
      assertEquals("footer", element0.tagName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("P)DSwesHt", "P)DSwesHt");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      assertEquals(1, nodeArray0.length);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      
      Element element0 = document0.firstElementSibling();
      assertNotNull(element0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("P)DSwesHt", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.childNodeSize());
      assertEquals("html", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("html", element0.nodeName());
      
      Element element1 = element0.appendChild(nodeArray0[0]);
      assertNotNull(element1);
      assertEquals(1, nodeArray0.length);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("P)DSwesHt", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(3, element0.childNodeSize());
      assertEquals("html", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("html", element0.nodeName());
      assertEquals("P)DSwesHt", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(3, element1.childNodeSize());
      assertEquals("html", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parse("37m&>`n+LHBt{}?Di+", "^:X`MMD1$*,.W%");
      assertNotNull(document0);
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Document document1 = Document.createShell("^:X`MMD1$*,.W%");
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertEquals("^:X`MMD1$*,.W%", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document0.appendChild(document1);
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("^:X`MMD1$*,.W%", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("^:X`MMD1$*,.W%", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("P)DSwesHt", "P)DSwesHt");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.appendChild(document0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("P)DSwesHt", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("P)DSwesHt", document1.location());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("37m&>n+LHBt{?Di+", "section");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("section", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("section", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("section", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("section", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("section", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      
      Element element1 = element0.append("section");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("section", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("section", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("section", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertEquals("section", element1.baseUri());
      assertEquals("body", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = new Document("e_XoEV:S8:*kZ");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("e_XoEV:S8:*kZ", document0.location());
      assertEquals("e_XoEV:S8:*kZ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.append("");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("e_XoEV:S8:*kZ", document0.location());
      assertEquals("e_XoEV:S8:*kZ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("e_XoEV:S8:*kZ", document1.baseUri());
      assertEquals("e_XoEV:S8:*kZ", document1.location());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P)DSwesHt", "P)DSwesHt");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = Document.createShell("P)DSwesHt");
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.isBlock());
      assertEquals("P)DSwesHt", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("P)DSwesHt", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertNotSame(document1, document0);
      assertFalse(document1.isBlock());
      assertEquals("P)DSwesHt", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("P)DSwesHt", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("P)DSwesHt", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document0.appendTo(element0);
      assertNotNull(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("P)DSwesHt", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("P)DSwesHt", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("P)DSwesHt", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("P)DSwesHt", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("P)DSwesHt", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document0.after((Node) document1);
      assertNotNull(document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("P)DSwesHt", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("P)DSwesHt", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("P)DSwesHt", document3.baseUri());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("P)DSwesHt", document3.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Document.createShell("P)DSwesHt");
      assertNotNull(document0);
      assertEquals("P)DSwesHt", document0.location());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("P)DSwesHt", document0.location());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("P)DSwesHt", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      
      Element element1 = element0.after((Node) document0);
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertTrue(document0.hasParent());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("P)DSwesHt", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("P)DSwesHt", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P)DSwesHt", "P)DSwesHt");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      
      Document document1 = Document.createShell("P)DSwesHt");
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertEquals("P)DSwesHt", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("P)DSwesHt", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      
      Element element0 = document1.body();
      assertNotNull(element0);
      assertNotSame(document1, document0);
      assertEquals("P)DSwesHt", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("P)DSwesHt", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("P)DSwesHt", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document0.appendTo(element0);
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("P)DSwesHt", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("P)DSwesHt", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("P)DSwesHt", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("P)DSwesHt", document2.baseUri());
      assertEquals("P)DSwesHt", document2.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document2.after("P)DSwesHt");
      assertNotNull(document3);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("P)DSwesHt", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("P)DSwesHt", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("P)DSwesHt", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("P)DSwesHt", document2.baseUri());
      assertEquals("P)DSwesHt", document2.location());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("P)DSwesHt", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("P)DSwesHt", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P)DSwesHt", "P)DSwesHt");
      assertNotNull(document0);
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Document document1 = Document.createShell("P)DSwesHt");
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("P)DSwesHt", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("P)DSwesHt", document1.location());
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document0.appendTo(document1);
      assertNotNull(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("P)DSwesHt", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("P)DSwesHt", document1.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("P)DSwesHt", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("P)DSwesHt", document2.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      
      Document document3 = (Document)document2.after("P)DSwesHt");
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("P)DSwesHt", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("P)DSwesHt", document1.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("P)DSwesHt", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("P)DSwesHt", document2.baseUri());
      assertEquals("P)DSwesHt", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("P)DSwesHt", document3.baseUri());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", ".");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(".", document0.baseUri());
      assertEquals(".", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(".", document0.baseUri());
      assertEquals(".", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(".", element0.baseUri());
      
      Element element1 = element0.addClass("noQuirks");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.hasParent());
      assertEquals(".", document0.baseUri());
      assertEquals(".", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(".", element0.baseUri());
      assertEquals(".", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("37m&>`n+LHBt{}?Di+", "37m&>`n+LHBt{}?Di+");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      Comment comment0 = new Comment("ZxDB");
      assertNotNull(comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      nodeArray0[7] = (Node) comment0;
      nodeArray0[8] = (Node) document0;
      document0.addChildren(nodeArray0);
      assertEquals(9, nodeArray0.length);
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      document0.wrap("ScriptDataEscapeStartDash");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Document.createShell("/W~x");
      assertNotNull(document0);
      assertEquals("/W~x", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("/W~x", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.wrap("Kb35IUxH");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parse("|rMIirJbrJ]#toUkq", "html");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("html", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("html", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      Comment comment0 = new Comment("|rMIirJbrJ]#toUkq");
      assertNotNull(comment0);
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertNotNull(xmlDeclaration0);
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      
      nodeArray0[2] = (Node) xmlDeclaration0;
      document0.addChildren(nodeArray0);
      assertEquals(3, nodeArray0.length);
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("html", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("html", document0.baseUri());
      
      // Undeclared exception!
      document0.val("w1^O");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = new Document("26kR'n]TT=vfWXO&3o");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.baseUri());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("%/Z%|&0b:W/{U{MMc )");
      assertNotNull(stringReader0);
      
      Document document0 = parser0.parseInput((Reader) stringReader0, "5+");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("5+", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("5+", document0.location());
      
      // Undeclared exception!
      try { 
        document0.text("InHeadNoscript");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("37m&>`n+LHBt{}?Di+", "37m&>`n+LHBt{}?Di+");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-42/6h9", "-42/6h9");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("-42/6h9", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("-42/6h9", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      
      CDataNode cDataNode0 = new CDataNode("-42/6h9");
      assertNotNull(cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) cDataNode0;
      document0.addChildren(nodeArray0);
      assertEquals(2, nodeArray0.length);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("-42/6h9", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("-42/6h9", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      
      // Undeclared exception!
      document0.tagName("-42/6h9");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.examples.HtmlToPlainText$FormattingVisitor", "xml");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("xml", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("xml", document0.location());
      
      // Undeclared exception!
      try { 
        document0.selectFirst("]N[");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ']N[': unexpected token at ']N['
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Document.createShell("37m&>`n+LHBt{}?Di+");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals("#root", document0.tagName());
      
      // Undeclared exception!
      try { 
        document0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.select("`h6XiWWTf&ciH");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '`h6XiWWTf&ciH': unexpected token at '`h6XiWWTf&ciH'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parse(".", "^:X`MMD1$*,.W%");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.select("w8 2[x u533%w");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'w'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Element element0 = new Element("rMsbUy=Z$9z]Ju]FT");
      assertNotNull(element0);
      assertEquals(0, element0.childNodeSize());
      assertEquals("rMsbUy=Z$9z]Ju]FT", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("rMsbUy=Z$9z]Ju]FT", element0.tagName());
      assertFalse(element0.hasParent());
      
      // Undeclared exception!
      try { 
        element0.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parse("+StjZeNvdZ7T", "+StjZeNvdZ7T");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("+StjZeNvdZ7T", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("+StjZeNvdZ7T", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      List<Node> list0 = document0.childNodes();
      assertNotNull(list0);
      assertFalse(document0.hasParent());
      assertEquals("+StjZeNvdZ7T", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("+StjZeNvdZ7T", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      document0.childNodes = list0;
      assertFalse(document0.hasParent());
      assertEquals("+StjZeNvdZ7T", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("+StjZeNvdZ7T", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.childNodes.isEmpty());
      assertEquals(1, document0.childNodes.size());
      
      // Undeclared exception!
      try { 
        document0.prependText("head");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parse("^:XMD$,.W%", "^:XMD$,.W%");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^:XMD$,.W%", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:XMD$,.W%", document0.location());
      
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      assertEquals(2, nodeArray0.length);
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertEquals("^:XMD$,.W%", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:XMD$,.W%", document0.location());
      
      // Undeclared exception!
      document0.prependElement("body");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("26kR'n]TT=vfWXO&3o", "26kR'n]TT=vfWXO&3o");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.location());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parse("37m&>`n+LHBt{}?Di+", "37m&>`n+LHBt{}?Di+");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = new Document("icjSK#k2eF$9qy");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("icjSK#k2eF$9qy", document0.location());
      assertEquals("icjSK#k2eF$9qy", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(2, charArray0.length);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.length());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertEquals("\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.limit());
      
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 2419, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E'F", "rm` a");
      assertNotNull(document0);
      assertEquals("rm` a", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("rm` a", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, (-155), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parse("37m&>`n+LHBt{}?Di+", "37m&>`n+LHBt{}?Di+");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("37m&>`n+LHBt{}?Di+", "37m&>`n+LHBt{}?Di+");
      assertNotNull(document0);
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = new Document(".D");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(".D", document0.baseUri());
      assertEquals(".D", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      
      // Undeclared exception!
      try { 
        document0.is("ys?,C");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'ys?,C': unexpected token at '?,C'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("P)wesHt", "P)wesHt");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("P)wesHt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("P)wesHt", document0.location());
      
      document0.reparentChild(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("P)wesHt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("P)wesHt", document0.location());
      
      // Undeclared exception!
      document0.is("d");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parse("37m&>`n+LHBt{}?Di+", "37m&>`n+LHBt{}?Di+");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parse("37m&>`n+LHBt{}?Di+", "^:X`MMD1$*,.W%");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(",bJ", ",bJ");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",bJ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(",bJ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = new Document("P)DSwesHt");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.hasParent());
      
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      assertEquals(2, nodeArray0.length);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.location());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "P)DSwesHt");
      assertNotNull(charBuffer0);
      assertEquals(9, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("P)DSwesHt", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertEquals(9, charBuffer0.length());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      
      // Undeclared exception!
      document0.html(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("P)DSweHt", "I?:]qt3)");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("I?:]qt3)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("I?:]qt3)", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(8, charArray0.length);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(8, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(8, charBuffer0.limit());
      assertEquals(8, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.capacity());
      
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = new Document("ET[o66u$;MC*w[xP");
      assertNotNull(document0);
      assertEquals("ET[o66u$;MC*w[xP", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ET[o66u$;MC*w[xP", document0.baseUri());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Document.createShell(")}i/e({");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(")}i/e({", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(")}i/e({", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parse("37m&>`n+LHBt{}?Di+", "37m&>`n+LHBt{}?Di+");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = new Document("X!]p\"=3Q[P>eVv(;");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("X!]p\"=3Q[P>eVv(;", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("X!]p\"=3Q[P>eVv(;", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("ET[o66u$;MC*w[xP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: ET[o66u$;MC*w[xP
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "P)DSwesHt");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      
      Pattern pattern0 = Pattern.compile("br", 1);
      assertNotNull(pattern0);
      assertEquals("br", pattern0.pattern());
      assertEquals("br", pattern0.toString());
      assertEquals(1, pattern0.flags());
      
      document0.childNodes = null;
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText(pattern0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("P)DSwesHt", "P)DSwesHt");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = new Document("ET[o66u$;MC*w[xP");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("ET[o66u$;MC*w[xP", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ET[o66u$;MC*w[xP", document0.location());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("O;$MVhGh[sDn <>6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: O;$MVhGh[sDn <>6
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Tag tag0 = Tag.valueOf("mg*vxv&:0 #DBvu");
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("mg*vxv&:0 #DBvu", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("mg*vxv&:0 #DBvu", tag0.getName());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "mg*vxv&:0 #DBvu", attributes0);
      assertNotNull(pseudoTextElement0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("mg*vxv&:0 #DBvu", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("mg*vxv&:0 #DBvu", tag0.getName());
      assertEquals(0, attributes0.size());
      assertEquals("mg*vxv&:0 #DBvu", pseudoTextElement0.tagName());
      assertEquals("mg*vxv&:0 #DBvu", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("mg*vxv&:0 #DBvu", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.hasParent());
      
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("br", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      document0.childNodes = null;
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("br", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.getElementsByIndexLessThan(57338);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("icjSK#k2eF$9qy");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      
      Tag tag0 = Tag.valueOf("body");
      assertNotNull(tag0);
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertEquals("body", tag0.getName());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isInline());
      
      FormElement formElement0 = new FormElement(tag0, "icjSK#k2eF$9qy", attributes0);
      assertNotNull(formElement0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertEquals("body", tag0.getName());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isInline());
      assertEquals("icjSK#k2eF$9qy", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("body", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertTrue(formElement0.isBlock());
      assertEquals("body", formElement0.nodeName());
      
      // Undeclared exception!
      try { 
        formElement0.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Document.createShell("py?[^S:oitX2I)?@Bs");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("py?[^S:oitX2I)?@Bs", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("py?[^S:oitX2I)?@Bs", document0.location());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "br");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = new Document("ET[o66u$;MC*w[xP");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("ET[o66u$;MC*w[xP", document0.baseUri());
      assertEquals("ET[o66u$;MC*w[xP", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("NXu[/1}}FyP,:z\"", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("br", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("br", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("37m&>`n+lhbt{}?di+", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Element element0 = new Element("rMsbUy=Z$9z]Ju]FT");
      assertNotNull(element0);
      assertFalse(element0.isBlock());
      assertEquals("rMsbUy=Z$9z]Ju]FT", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("rMsbUy=Z$9z]Ju]FT", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueEnding(":CwdHY*!1@8", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining((String) null, "QmRnSEE[~$c1+K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Document.createShell("37m&>`n+LHBt{}?Di+");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "37m&>`n+LHBt{}?Di+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      assertNotNull(document0);
      assertEquals("br", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("br", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parse("37m&>`n+LHBt{}?Di+", "37m&>`n+LHBt{}?Di+");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals("#root", document0.tagName());
      
      // Undeclared exception!
      try { 
        document0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parse("37m&>`n+LHBt{}?Di+", "^:X`MMD1$*,.W%");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Element element0 = new Element("textarea");
      assertNotNull(element0);
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.nodeName());
      
      List<Node> list0 = Parser.parseXmlFragment("/~+DuDn),hg", "textarea");
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      element0.childNodes = list0;
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, element0.childNodes.size());
      assertFalse(element0.childNodes.isEmpty());
      
      // Undeclared exception!
      try { 
        element0.empty();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^:X`MMD1$*,.W%", "^:X`MMD1$*,.W%");
      assertNotNull(document0);
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.child((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("37m&>`n+LHBt{}?Di+", "37m&>`n+LHBt{}?Di+");
      assertNotNull(document0);
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      
      CDataNode cDataNode0 = new CDataNode("37m&>`n+LHBt{}?Di+");
      assertNotNull(cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) cDataNode0;
      document0.addChildren(nodeArray0);
      assertEquals(2, nodeArray0.length);
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      
      // Undeclared exception!
      document0.before("ruby");
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parse("37m&>`n+LHBt{}?Di+", "37m&>`n+LHBt{}?Di+");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("", document1.location());
      
      // Undeclared exception!
      document0.attr("", "WUcDoiV0s:R63");
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = new Document("37m&>`n+LHBt{}?Di+");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.attr((String) null, "37m&>`n+LHBt{}?Di+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = new Document("P)DSwesHt");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("P)DSwesHt", document0.baseUri());
      
      Element element0 = document0.createElement("P)DSwesHt");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals("P)DSwesHt", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("P)DSwesHt", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("P)DSwesHt", element0.baseUri());
      assertFalse(element0.hasParent());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      List<Node> list0 = parser0.parseFragmentInput("?[[vph ~NC", document0, "f4]_");
      assertNotNull(list0);
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      element0.childNodes = list0;
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals("P)DSwesHt", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("P)DSwesHt", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("P)DSwesHt", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(element0.childNodes.isEmpty());
      assertEquals(1, element0.childNodes.size());
      
      // Undeclared exception!
      try { 
        document0.appendTo(element0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":%s(%dn%+d)", "37m&>`n+LHBt{}?Di+");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("BEGLV`QBq}}[/S8", parseSettings0);
      assertNotNull(tag0);
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertEquals("beglv`qbq}}[/s8", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals("beglv`qbq}}[/s8", tag0.getName());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "BEGLV`QBq}}[/S8", (Attributes) null);
      assertNotNull(pseudoTextElement0);
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertEquals("beglv`qbq}}[/s8", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals("beglv`qbq}}[/s8", tag0.getName());
      assertEquals("beglv`qbq}}[/s8", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("BEGLV`QBq}}[/S8", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.hasParent());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("beglv`qbq}}[/s8", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      
      // Undeclared exception!
      try { 
        pseudoTextElement0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parse("<B", "<B");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("<B", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("<B", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("<B", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("<B", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("<B", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("<B", document1.baseUri());
      assertEquals("#root", document1.tagName());
      
      // Undeclared exception!
      document1.appendElement("#root");
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = new Document("icjSK#k2eF$9qy");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("icjSK#k2eF$9qy", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("icjSK#k2eF$9qy", document0.location());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      
      // Undeclared exception!
      document0.append("g%6");
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P)DSwesHt", "P)DSwesHt");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.hasParent());
      
      document0.childNodes = null;
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.append("P)DSwesHt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parse("^:XMD$,.W%", "^:XMD$,.W%");
      assertNotNull(document0);
      assertEquals("^:XMD$,.W%", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^:XMD$,.W%", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parse("<B", "<B");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("<B", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("<B", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("<B", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("<B", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("<B", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("<B", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      
      // Undeclared exception!
      document0.after("<B");
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(",ibJ", ",ibJ");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(",ibJ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(",ibJ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      DocumentType documentType0 = new DocumentType(",ibJ", ",ibJ", ",ibJ", ",ibJ", (String) null);
      assertNotNull(documentType0);
      assertFalse(documentType0.hasParent());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      
      document0.setParentNode(documentType0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(",ibJ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(",ibJ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(documentType0.hasParent());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.after(":not(selector) subselect must not be empty");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = new Document("ET[o66u$;MC*w[xP");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("ET[o66u$;MC*w[xP", document0.location());
      assertEquals("ET[o66u$;MC*w[xP", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("nNLTTAY;u)(/", parseSettings0);
      assertNotNull(tag0);
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("nnlttay;u)(/", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertEquals("nnlttay;u)(/", tag0.getName());
      assertFalse(tag0.isBlock());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("'!WQCvzCPJNA+)rG`", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals("'!wqcvzcpjna+)rg`", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("'!wqcvzcpjna+)rg`", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parse(",bJ", ",bJ");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(",bJ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",bJ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = document0.hasClass("37m&>`n+lhbt{}?di+");
      assertFalse(boolean0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(",bJ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",bJ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = new Document("f_tQ^kk|[j[1;D[ZnA");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("f_tQ^kk|[j[1;D[ZnA", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("f_tQ^kk|[j[1;D[ZnA", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      Charset charset0 = document0.charset();
      assertNotNull(charset0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("f_tQ^kk|[j[1;D[ZnA", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("f_tQ^kk|[j[1;D[ZnA", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      
      Set<String> set0 = charset0.aliases();
      assertFalse(set0.contains("f_tQ^kk|[j[1;D[ZnA"));
      assertNotNull(set0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("f_tQ^kk|[j[1;D[ZnA", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("f_tQ^kk|[j[1;D[ZnA", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      
      Document document1 = (Document)document0.classNames(set0);
      assertFalse(set0.contains("f_tQ^kk|[j[1;D[ZnA"));
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("f_tQ^kk|[j[1;D[ZnA", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("f_tQ^kk|[j[1;D[ZnA", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(0, document1.childNodeSize());
      assertEquals("f_tQ^kk|[j[1;D[ZnA", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("f_tQ^kk|[j[1;D[ZnA", document1.baseUri());
      assertEquals("#root", document1.tagName());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Document.createShell("37m&>`n+LHBt{}?Di+");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains("37m&>`n+LHBt{}?Di+"));
      assertNotNull(set0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Document document1 = (Document)document0.classNames(set0);
      assertFalse(set0.contains("37m&>`n+LHBt{}?Di+"));
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("37m&>`n+LHBt{}?Di+", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("37m&>`n+LHBt{}?Di+", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^:X`MMD1$*,.W%", "^:X`MMD1$*,.W%");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      
      Document document1 = (Document)document0.prependText("^:X`MMD1$*,.W%");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("^:X`MMD1$*,.W%", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      
      String string0 = document1.data();
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("^:X`MMD1$*,.W%", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^:X`MMD1$*,.W%", "^:X`MMD1$*,.W%");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.prependText("^:X`MMD1$*,.W%");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^:X`MMD1$*,.W%", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Document.createShell("26kR'n]TT=vfWXO&3o");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("P)DSwesHt", "P)DSwesHt");
      assertNotNull(document0);
      assertEquals("P)DSwesHt", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals("P)DSwesHt", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parse("<B", "<B");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<B", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("<B", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<B", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("<B", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("<B", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("<B", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(1, int0);
      assertSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<B", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("<B", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P)DSwesHt", "P)DSwesHt");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("P)DSwesHt", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = element0.html("P)DSwesHt");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("P)DSwesHt", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("P)DSwesHt", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      
      Document document1 = (Document)document0.toggleClass("body");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("icjSK#k2eF$9qy", "icjSK#k2eF$9qy");
      assertNotNull(document0);
      assertEquals("icjSK#k2eF$9qy", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("icjSK#k2eF$9qy", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      String string0 = document0.className();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("icjSK#k2eF$9qy", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("icjSK#k2eF$9qy", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Document.createShell("br");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("br", document0.baseUri());
      
      String string0 = document0.ownText();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("26kR'n]TT=vfWXO&3o", "26kR'n]TT=vfWXO&3o");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.location());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      
      boolean boolean0 = document0.isBlock();
      assertFalse(boolean0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.location());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parse("^:X`MMD1$*,.W%", "^:X`MMD1$*,.W%");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.empty();
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.childNodeSize());
      assertEquals("^:X`MMD1$*,.W%", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      String string0 = document0.baseUri();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Document.createShell("ET[o66u$;MC*w[xP");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ET[o66u$;MC*w[xP", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("ET[o66u$;MC*w[xP", document0.location());
      assertFalse(document0.isBlock());
      
      Pattern pattern0 = Pattern.compile("br", 15);
      assertNotNull(pattern0);
      assertEquals("br", pattern0.toString());
      assertEquals(15, pattern0.flags());
      assertEquals("br", pattern0.pattern());
      
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ET[o66u$;MC*w[xP", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("ET[o66u$;MC*w[xP", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("br", pattern0.toString());
      assertEquals(15, pattern0.flags());
      assertEquals("br", pattern0.pattern());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("37m&>`n+LHBt{}?Di+", "37m&>`n+LHBt{}?Di+");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      assertNotNull(evaluator_AllElements0);
      assertEquals("*", evaluator_AllElements0.toString());
      
      boolean boolean0 = document0.is((Evaluator) evaluator_AllElements0);
      assertTrue(boolean0);
      assertFalse(document0.hasParent());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("*", evaluator_AllElements0.toString());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parse("37m&>`n+LHBt{}?Di+", "37m&>`n+LHBt{}?Di+");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("37m&>`n+LHBt{}?Di+", (Pattern) null);
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^:X`MMD1$*,.W%", "^:X`MMD1$*,.W%");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertEquals("^:X`MMD1$*,.W%", string0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = new Document("ET[o66u$;MC*w[xP");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ET[o66u$;MC*w[xP", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ET[o66u$;MC*w[xP", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      String string0 = document0.id();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ET[o66u$;MC*w[xP", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ET[o66u$;MC*w[xP", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("26kR'n]TT=vfWXO&3o", "26kR'n]TT=vfWXO&3o");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Set<String> set0 = document0.classNames();
      assertFalse(set0.contains("26kR'n]TT=vfWXO&3o"));
      assertNotNull(set0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      assertNotNull(tag0);
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isEmpty());
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("br", tag0.getName());
      assertEquals("br", tag0.toString());
      assertTrue(tag0.isInline());
      
      Element element0 = new Element(tag0, "br");
      assertNotNull(element0);
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isEmpty());
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("br", tag0.getName());
      assertEquals("br", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("br", element0.nodeName());
      
      Element element1 = element0.appendElement("br");
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isEmpty());
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("br", tag0.getName());
      assertEquals("br", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("br", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("br", element0.nodeName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("br", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("br", element1.nodeName());
      assertEquals("br", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      
      String string0 = element0.outerHtml();
      assertNotNull(string0);
      assertEquals("<br><br></br>", string0);
      assertNotSame(element0, element1);
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isEmpty());
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("br", tag0.getName());
      assertEquals("br", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("br", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("br", element0.nodeName());
      assertFalse(element0.equals((Object)element1));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$CssNthEvaluator");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.select.Evaluator$CssNthEvaluator", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$CssNthEvaluator", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      document0.title("org.jsoup.select.CombiingEvaluatr");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.select.Evaluator$CssNthEvaluator", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$CssNthEvaluator", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertEquals("<html>\n <head>\n  <title>org.jsoup.select.CombiingEvaluatr</title>\n </head>\n <body></body>\n</html>", string0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.select.Evaluator$CssNthEvaluator", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$CssNthEvaluator", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parse("37m&>`n+LHBt{}?Di+", "^:X`MMD1$*,.W%");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      StringWriter stringWriter0 = new StringWriter(908);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = document0.html(stringWriter0);
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("\n<html>\n <head></head>\n <body>\n  37m&amp;&gt;`n+LHBt{}?Di+\n </body>\n</html>", stringWriter0.toString());
      assertEquals("\n<html>\n <head></head>\n <body>\n  37m&amp;&gt;`n+LHBt{}?Di+\n </body>\n</html>", stringWriter1.toString());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parse("37m&>`n+LHBt{}?Di+", "37m&>`n+LHBt{}?Di+");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      
      Document document1 = document0.outputSettings(document_OutputSettings1);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document1.hasParent());
      assertEquals("37m&>`n+LHBt{}?Di+", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("37m&>`n+LHBt{}?Di+", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      
      String string0 = document1.html();
      assertNotNull(string0);
      assertEquals("<html><head></head><body>37m&amp;&gt;`n+LHBt{}?Di+</body></html>", string0);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document1.hasParent());
      assertEquals("37m&>`n+LHBt{}?Di+", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("37m&>`n+LHBt{}?Di+", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = new Document("E7m&>`n+LHBt{}?Di+");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("E7m&>`n+LHBt{}?Di+", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("E7m&>`n+LHBt{}?Di+", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      String string0 = document0.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("E7m&>`n+LHBt{}?Di+", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("E7m&>`n+LHBt{}?Di+", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("P)DSwesHt", "br");
      assertNotNull(document0);
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)document0.addClass("6");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("br", document1.location());
      assertEquals("br", document1.baseUri());
      
      Document document2 = (Document)document0.addClass("br");
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("br", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      
      boolean boolean0 = document0.hasClass("br");
      assertTrue(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.addClass("p+Ou");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      
      Document document2 = (Document)document0.addClass("");
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      
      boolean boolean0 = document0.hasClass("37m&>`n+lhbt{}?di+");
      assertFalse(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parse("37m&>`n+LHBt{}?Di+", "^:X`MMD1$*,.W%");
      assertNotNull(document0);
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      
      Document document1 = (Document)document0.addClass("^:X`MMD1$*,.W%");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^:X`MMD1$*,.W%", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      
      boolean boolean0 = document0.hasClass("^:X`MMD1$*,.W%");
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertEquals("^:X`MMD1$*,.W%", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(",ibJ", ",ibJ");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",ibJ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(",ibJ", document0.location());
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",ibJ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(",ibJ", document0.location());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Mu", "Mu");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("Mu", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Mu", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      document0.reparentChild(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("Mu", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("Mu", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.getElementsContainingText("Mu");
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("Mu", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("Mu", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("P)DSwesHt", "P)DSwesHt");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("P)DSwesHt", "Lwb");
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("Lwb", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Lwb", document1.location());
      assertFalse(document1.equals((Object)document0));
      
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      CDataNode cDataNode0 = new CDataNode("P)DSwesHt");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      nodeArray0[3] = (Node) cDataNode0;
      document1.addChildren(nodeArray0);
      assertEquals(4, nodeArray0.length);
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("Lwb", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Lwb", document1.location());
      assertFalse(document1.equals((Object)document0));
      
      Elements elements0 = document1.getElementsContainingText((String) null);
      assertNotNull(elements0);
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("Lwb", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Lwb", document1.location());
      assertFalse(elements0.isEmpty());
      assertEquals(8, elements0.size());
      assertFalse(document1.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("P)DSwesHt", "P)DSwesHt");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.location());
      
      Document document1 = (Document)document0.append("P)DSwesHt");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("P)DSwesHt", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("P)DSwesHt", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Elements elements0 = document0.getElementsMatchingText("body");
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertFalse(document0.hasParent());
      assertEquals("P)DSwesHt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("P)DSwesHt", document0.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$CssNthEvaluator");
      assertNotNull(document0);
      assertEquals("org.jsoup.select.Evaluator$CssNthEvaluator", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Evaluator$CssNthEvaluator", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      document0.title("org.jsoup.select.CombiingEvaluatr");
      assertEquals("org.jsoup.select.Evaluator$CssNthEvaluator", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Evaluator$CssNthEvaluator", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.getElementsContainingText("g");
      assertNotNull(elements0);
      assertEquals("org.jsoup.select.Evaluator$CssNthEvaluator", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Evaluator$CssNthEvaluator", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("26kR'n]TT=vfWXO&3o", "26kR'n]TT=vfWXO&3o");
      assertNotNull(document0);
      assertEquals("26kR'n]TT=vfWXO&3o", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements0 = document0.getElementsMatchingText("26kR'n]TT=vfWXO&3o");
      assertNotNull(elements0);
      assertEquals("26kR'n]TT=vfWXO&3o", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("26kR'n]TT=vfWXO&3o", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("37m&>`n+LHBt{}?Di+", "37m&>`n+LHBt{}?Di+");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      
      CDataNode cDataNode0 = new CDataNode("37m&>`n+LHBt{}?Di+");
      assertNotNull(cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) cDataNode0;
      document0.addChildren(nodeArray0);
      assertEquals(2, nodeArray0.length);
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)document0.lastElementSibling();
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.location());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(3, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("37m&>`n+LHBt{}?Di+", document1.location());
      assertEquals("37m&>`n+LHBt{}?Di+", document1.baseUri());
      assertFalse(document1.isBlock());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-^ltg$GPs'", "-^ltg$GPs'");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("-^ltg$GPs'", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("-^ltg$GPs'", document0.baseUri());
      assertFalse(document0.hasParent());
      
      CDataNode cDataNode0 = new CDataNode("-^ltg$GPs'");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      
      Tag tag0 = Tag.valueOf("body");
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertEquals("body", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isInline());
      assertEquals("body", tag0.toString());
      
      FormElement formElement0 = new FormElement(tag0, "-^ltg$GPs'", attributes0);
      assertNotNull(formElement0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertEquals("body", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isInline());
      assertEquals("body", tag0.toString());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertTrue(formElement0.isBlock());
      assertEquals("-^ltg$GPs'", formElement0.baseUri());
      assertEquals("body", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("body", formElement0.nodeName());
      
      Document document1 = (Document)document0.appendTo(formElement0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("-^ltg$GPs'", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("-^ltg$GPs'", document0.baseUri());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertEquals("body", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isInline());
      assertEquals("body", tag0.toString());
      assertEquals(0, formElement0.siblingIndex());
      assertTrue(formElement0.isBlock());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("-^ltg$GPs'", formElement0.baseUri());
      assertEquals("body", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("body", formElement0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("-^ltg$GPs'", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("-^ltg$GPs'", document1.location());
      
      Element element0 = document1.lastElementSibling();
      assertNull(element0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("-^ltg$GPs'", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("-^ltg$GPs'", document0.baseUri());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertEquals("body", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isInline());
      assertEquals("body", tag0.toString());
      assertEquals(0, formElement0.siblingIndex());
      assertTrue(formElement0.isBlock());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("-^ltg$GPs'", formElement0.baseUri());
      assertEquals("body", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("body", formElement0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("-^ltg$GPs'", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("-^ltg$GPs'", document1.location());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Mu", "Mu");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("Mu", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Mu", document0.location());
      
      Element element0 = document0.prependElement("Mu");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("Mu", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Mu", document0.location());
      assertEquals("mu", element0.tagName());
      assertEquals("mu", element0.nodeName());
      assertEquals("Mu", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      document0.reparentChild(document0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("Mu", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Mu", document0.location());
      
      Element element1 = document0.firstElementSibling();
      assertNotNull(element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("Mu", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Mu", document0.location());
      assertEquals("mu", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("mu", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("Mu", element1.baseUri());
      assertTrue(element1.hasParent());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = new Document("P)DS!esHt");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("P)DS!esHt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("P)DS!esHt", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      assertEquals(1, nodeArray0.length);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("P)DS!esHt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("P)DS!esHt", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.firstElementSibling();
      assertNull(element0);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("P)DS!esHt", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("P)DS!esHt", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = new Document("'oRHB^/Xr[z0f");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("'oRHB^/Xr[z0f", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("'oRHB^/Xr[z0f", document0.baseUri());
      assertEquals("#root", document0.tagName());
      
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      document0.addChildren(nodeArray0);
      assertEquals(4, nodeArray0.length);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("'oRHB^/Xr[z0f", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("'oRHB^/Xr[z0f", document0.baseUri());
      assertEquals("#root", document0.tagName());
      
      Elements elements0 = document0.nextElementSiblings();
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("'oRHB^/Xr[z0f", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("'oRHB^/Xr[z0f", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("P)DSwesHt", "P)DSwesHt");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      Elements elements0 = document0.previousElementSiblings();
      assertEquals("P)DSwesHt", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.head();
      document0.appendTo(element0);
      assertEquals(1, element0.childNodeSize());
      
      document0.previousElementSibling();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parse("<B", "<B");
      document0.previousElementSibling();
      assertEquals("<B", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.appendTo(document0);
      Element element0 = document0.previousElementSibling();
      assertTrue(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = new Document("37m&>`n+LHBt{}?Di+");
      document0.nextElementSibling();
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$CssNthEvaluator");
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      assertNotNull(element1);
      assertEquals("org.jsoup.select.Evaluator$CssNthEvaluator", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = new Document("/K*F[O&B8Y#|");
      document0.siblingElements();
      assertEquals("/K*F[O&B8Y#|", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Document.createShell("-^ltg$GPs'");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.siblingElements();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("37m&>`n+LHBt{}?Di+", "37m&>`n+LHBt{}?Di+");
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("zi");
      FormElement formElement0 = new FormElement(tag0, "yX5i|Kb", attributes0);
      document0.appendTo(formElement0);
      assertEquals(1, formElement0.childNodeSize());
      
      String string0 = document0.cssSelector();
      assertEquals("zi > #root", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":%s(%dn%+d)", "37m&>`n+LHBt{}?Di+");
      document0.toggleClass("");
      document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = new Document("+");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        document0.insertChildren(62, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parse("37m&>`n+LHBt{}?Di+", "^:X`MMD1$*,.W%");
      Node[] nodeArray0 = new Node[5];
      // Undeclared exception!
      try { 
        document0.insertChildren((-3024), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parse("body", "head");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(0, nodeArray0);
      assertEquals("head", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = new Document("icjSK#k2eF$9qy");
      Elements elements0 = document0.getElementsByAttributeValueContaining("OSG,51", "icjSK#k2eF$9qy");
      // Undeclared exception!
      try { 
        document0.insertChildren(2, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<B", "<B");
      LinkedList<DataNode> linkedList0 = new LinkedList<DataNode>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("<B", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Document.createShell("ET[o66u$;MC*w[xP");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(1, document0.childNodeSize());
      assertEquals("ET[o66u$;MC*w[xP", document0.baseUri());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^:X`MMD1$*,.W%", "^:X`MMD1$*,.W%");
      document0.prependText("^:X`MMD1$*,.W%");
      document0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Elements elements0 = document0.getElementsByIndexGreaterThan(128);
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("P)DSwesHt", "P)DSwesHt");
      Element element0 = document0.selectFirst("body");
      assertEquals("P)DSwesHt", element0.baseUri());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = new Document("on");
      document0.getAllElements();
      assertEquals("on", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = new Document("26kR'n]TT=vfWXO&3o");
      // Undeclared exception!
      try { 
        document0.before(";,)KPx[G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parse("37m&>`n+LHBt{}?Di+", "^:X`MMD1$*,.W%");
      document0.getElementsByAttribute(".");
      assertEquals(1, document0.childNodeSize());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parse("37m&>`n+LHBt{}?Di+", "^:X`MMD1$*,.W%");
      Elements elements0 = document0.getElementsByAttributeValueNot("mZ4o.a1%$_cgsNS", "br");
      assertEquals(4, elements0.size());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendTo(document0);
      String string0 = document0.cssSelector();
      assertEquals("br", document0.baseUri());
      assertEquals("#root", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Document.createShell("-^ltg$GPs'");
      Element element0 = document0.shallowClone();
      assertEquals("-^ltg$GPs'", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P)DSwesHt", "P)DSwesHt");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = new Document("ET[o66u$;MC*w[xP");
      document0.getElementsByAttributeValueMatching("", "br");
      assertEquals("ET[o66u$;MC*w[xP", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$CssNthEvaluator");
      Elements elements0 = document0.getElementsContainingText("g");
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$CssNthEvaluator", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Document.createShell("37m&>`n+LHBt{}?Di+");
      Elements elements0 = document0.getElementsByClass("#root");
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Element element0 = new Element("gcbra+Bk'mAC5");
      Elements elements0 = element0.getElementsByAttributeValueEnding("+b1tT", "+b1tT");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parse(",bJ", ",bJ");
      document0.is(",bJ");
      assertEquals(1, document0.childNodeSize());
      assertEquals(",bJ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = new Document("ET[o66u$;MC*w[xP");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("", "D V:TI(;;6.GBX`LzA<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: D V:TI(;;6.GBX`LzA<
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = new Document("E7m&>`n+LHBt{}?Di+");
      Element element0 = document0.val("E7m&>`n+LHBt{}?Di+");
      String string0 = element0.val();
      assertEquals("E7m&>`n+LHBt{}?Di+", element0.baseUri());
      assertEquals("E7m&>`n+LHBt{}?Di+", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = new Document("html");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Document.createShell("26kR'n]TT=vfWXO&3o");
      document0.getElementsMatchingOwnText("|]PJ=:SsR~1w*I");
      assertEquals("26kR'n]TT=vfWXO&3o", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parse("37m&>`n+LHBt{}?Di+", "37m&>`n+LHBt{}?Di+");
      Elements elements0 = document0.getElementsByIndexEquals(1);
      assertEquals(1, elements0.size());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "org.jsoup.parser.Parser");
      document0.getElementsByAttributeStarting("y:-");
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.Parser", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Document.createShell("37m&>`n+LHBt{}?Di+");
      Elements elements0 = document0.getElementsByIndexLessThan((-3749));
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(",ibJ", ",ibJ");
      // Undeclared exception!
      try { 
        document0.after(":not(selector) subselect must not be empty");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "P)DSwesHt");
      Pattern pattern0 = Pattern.compile("br", 1);
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertEquals(1, elements0.size());
      assertEquals("P)DSwesHt", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = new Document("ET[o66u$;MC*w[xP");
      document0.getElementsByAttributeValueStarting("br", "br");
      assertEquals("ET[o66u$;MC*w[xP", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parse("37m&>`n+LHBt{}?Di+", "^:X`MMD1$*,.W%");
      document0.getElementsByAttributeValue("Z^jwYsoh^OhMLi0", "^:X`MMD1$*,.W%");
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^:X`MMD1$*,.W%", "^:X`MMD1$*,.W%");
      String string0 = document0.wholeText();
      assertEquals("^:X`MMD1$*,.W%", string0);
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("P)DSwesHt", "P)DSwesHt");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = new Document("`Dz6jWWg");
      Element element0 = document0.addClass("`Dz6jWWg");
      boolean boolean0 = element0.hasClass("Unexpected character '%s' in input state [%s]");
      assertFalse(boolean0);
      assertEquals("`Dz6jWWg", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parse("37m&>`n+LHBt{}?Di+", "^:X`MMD1$*,.W%");
      Elements elements0 = document0.getElementsContainingOwnText("BnPPVY{nm!`UK");
      assertEquals(1, document0.childNodeSize());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parse("37m&>`n+LHBt{}?Di+", "^:X`MMD1$*,.W%");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
      assertEquals("^:X`MMD1$*,.W%", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".D", "#root");
      // Undeclared exception!
      try { 
        document0.tagName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "^:X`MMD1$*,.W%");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parse("37m&>4T+LHBt{}?Di+", "37m&>4T+LHBt{}?Di+");
      // Undeclared exception!
      try { 
        document0.child(512);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 512, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("26kR'n]TT=vfWXO&3o", "26kR'n]TT=vfWXO&3o");
      document0.previousElementSiblings();
      assertEquals("26kR'n]TT=vfWXO&3o", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.prependElement("br");
      element0.html((MockPrintStream) null);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "org.jsoup.parser.Parser");
      document0.select("html");
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.parser.Parser", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = new Document(".D");
      document0.children();
      assertEquals(".D", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = new Document("37m&>`n+LHBt{}?Di+");
      Element element0 = document0.getElementById("kiZs");
      assertEquals("37m&>`n+LHBt{}?Di+", document0.baseUri());
      assertNull(element0);
  }
}
